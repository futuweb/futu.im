{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/futu.im.html","path":"futu.im.html","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/images/2017-04-24-css-custom-properties/0422_01.jpg","path":"images/2017-04-24-css-custom-properties/0422_01.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-04-24-css-custom-properties/0422_03.jpg","path":"images/2017-04-24-css-custom-properties/0422_03.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-04-24-css-custom-properties/0422_02.jpg","path":"images/2017-04-24-css-custom-properties/0422_02.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/2.png","path":"images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/2.png","modified":0,"renderable":0},{"_id":"source/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/3.png","path":"images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/3.png","modified":0,"renderable":0},{"_id":"source/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/5.png","path":"images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/5.png","modified":0,"renderable":0},{"_id":"source/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/6.png","path":"images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/6.png","modified":0,"renderable":0},{"_id":"source/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/7.png","path":"images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/7.png","modified":0,"renderable":0},{"_id":"source/images/2017-05-20-7-tips-to-handle-undefined-in-JavaScript/2.svg","path":"images/2017-05-20-7-tips-to-handle-undefined-in-JavaScript/2.svg","modified":0,"renderable":0},{"_id":"source/images/2017-05-21-object-streams-in-nodejs/01.jpg","path":"images/2017-05-21-object-streams-in-nodejs/01.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-05-21-object-streams-in-nodejs/02.jpg","path":"images/2017-05-21-object-streams-in-nodejs/02.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-07-17-https-certificate/01-demo.png","path":"images/2017-07-17-https-certificate/01-demo.png","modified":0,"renderable":0},{"_id":"source/images/2017-07-17-https-certificate/02-steps.png","path":"images/2017-07-17-https-certificate/02-steps.png","modified":0,"renderable":0},{"_id":"source/images/2017-07-17-https-certificate/03-mith.jpg","path":"images/2017-07-17-https-certificate/03-mith.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-07-17-https-certificate/05-win_ca_save.png","path":"images/2017-07-17-https-certificate/05-win_ca_save.png","modified":0,"renderable":0},{"_id":"source/images/2017-07-17-https-certificate/04-win_ca_install.png","path":"images/2017-07-17-https-certificate/04-win_ca_install.png","modified":0,"renderable":0},{"_id":"source/images/2017-07-17-https-certificate/07-ca_root_trust.png","path":"images/2017-07-17-https-certificate/07-ca_root_trust.png","modified":0,"renderable":0},{"_id":"source/images/2017-07-26-first-time-use-node.js/0710_02.jpg","path":"images/2017-07-26-first-time-use-node.js/0710_02.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-07-26-first-time-use-node.js/0710_01.jpg","path":"images/2017-07-26-first-time-use-node.js/0710_01.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-07-26-first-time-use-node.js/0710_03.jpg","path":"images/2017-07-26-first-time-use-node.js/0710_03.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-07-26-first-time-use-node.js/0710_04.jpg","path":"images/2017-07-26-first-time-use-node.js/0710_04.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-07-26-first-time-use-node.js/0710_07.jpg","path":"images/2017-07-26-first-time-use-node.js/0710_07.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-07-26-first-time-use-node.js/0710_06.jpg","path":"images/2017-07-26-first-time-use-node.js/0710_06.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-07-26-first-time-use-node.js/0710_05.jpg","path":"images/2017-07-26-first-time-use-node.js/0710_05.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-07-26-first-time-use-node.js/0710_10.jpg","path":"images/2017-07-26-first-time-use-node.js/0710_10.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-07-26-first-time-use-node.js/0710_09.jpg","path":"images/2017-07-26-first-time-use-node.js/0710_09.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-07-26-first-time-use-node.js/0710_08.jpg","path":"images/2017-07-26-first-time-use-node.js/0710_08.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-08-03-https-certificate/01-ca_key.png","path":"images/2017-08-03-https-certificate/01-ca_key.png","modified":0,"renderable":0},{"_id":"source/images/2017-08-23-misconceptions-about-amp/3.png","path":"images/2017-08-23-misconceptions-about-amp/3.png","modified":0,"renderable":0},{"_id":"source/images/2017-08-24-node-js-errors-changes-you-need-to-know-about/1.png","path":"images/2017-08-24-node-js-errors-changes-you-need-to-know-about/1.png","modified":0,"renderable":0},{"_id":"source/images/2017-08-24-node-js-errors-changes-you-need-to-know-about/2.png","path":"images/2017-08-24-node-js-errors-changes-you-need-to-know-about/2.png","modified":0,"renderable":0},{"_id":"source/images/2017-08-24-node-js-errors-changes-you-need-to-know-about/3.png","path":"images/2017-08-24-node-js-errors-changes-you-need-to-know-about/3.png","modified":0,"renderable":0},{"_id":"source/images/2017-09-01-node-js-http-2-push/1.png","path":"images/2017-09-01-node-js-http-2-push/1.png","modified":0,"renderable":0},{"_id":"source/images/2017-09-01-node-js-http-2-push/2.png","path":"images/2017-09-01-node-js-http-2-push/2.png","modified":0,"renderable":0},{"_id":"source/images/2017-09-29-touchstart-click/1.png","path":"images/2017-09-29-touchstart-click/1.png","modified":0,"renderable":0},{"_id":"source/images/2017-10-24-mobile-browser-font-size/3.png","path":"images/2017-10-24-mobile-browser-font-size/3.png","modified":0,"renderable":0},{"_id":"source/images/2017-10-24-mobile-browser-font-size/4.png","path":"images/2017-10-24-mobile-browser-font-size/4.png","modified":0,"renderable":0},{"_id":"source/images/2017-10-24-mobile-browser-font-size/6.png","path":"images/2017-10-24-mobile-browser-font-size/6.png","modified":0,"renderable":0},{"_id":"source/images/2017-10-31-vue-cutom-directive/01.svg","path":"images/2017-10-31-vue-cutom-directive/01.svg","modified":0,"renderable":0},{"_id":"source/images/2017-11-30-javascript-float-fault/1130_01.jpg","path":"images/2017-11-30-javascript-float-fault/1130_01.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-11-30-javascript-float-fault/1130_02.jpg","path":"images/2017-11-30-javascript-float-fault/1130_02.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-invite/1-1.jpg","path":"images/2017-invite/1-1.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-invite/futu.jpg","path":"images/2017-invite/futu.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-invite/cpmm.jpg","path":"images/2017-invite/cpmm.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-invite/lt.jpg","path":"images/2017-invite/lt.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-invite/sc.jpg","path":"images/2017-invite/sc.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-invite/xf.png","path":"images/2017-invite/xf.png","modified":0,"renderable":0},{"_id":"source/images/2017-invite/wl.jpg","path":"images/2017-invite/wl.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-invite/zb.jpg","path":"images/2017-invite/zb.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-invite/xxd.png","path":"images/2017-invite/xxd.png","modified":0,"renderable":0},{"_id":"source/images/2017-memory-leaks/example-recordedallocs-list.png","path":"images/2017-memory-leaks/example-recordedallocs-list.png","modified":0,"renderable":0},{"_id":"source/images/2017-memory-leaks/example-recordedallocs-overview.png","path":"images/2017-memory-leaks/example-recordedallocs-overview.png","modified":0,"renderable":0},{"_id":"source/images/2017-memory-leaks/example-snapshots-1.png","path":"images/2017-memory-leaks/example-snapshots-1.png","modified":0,"renderable":0},{"_id":"source/images/2017-memory-leaks/example-recordedallocs-selected.png","path":"images/2017-memory-leaks/example-recordedallocs-selected.png","modified":0,"renderable":0},{"_id":"source/images/2017-memory-leaks/example-snapshots-2.png","path":"images/2017-memory-leaks/example-snapshots-2.png","modified":0,"renderable":0},{"_id":"source/images/2017-memory-leaks/example-timeline.png","path":"images/2017-memory-leaks/example-timeline.png","modified":0,"renderable":0},{"_id":"source/images/2017-memory-leaks/profiles.png","path":"images/2017-memory-leaks/profiles.png","modified":0,"renderable":0},{"_id":"source/images/2017-memory-leaks/timeline.png","path":"images/2017-memory-leaks/timeline.png","modified":0,"renderable":0},{"_id":"source/images/Elly/elly.jpg","path":"images/Elly/elly.jpg","modified":0,"renderable":0},{"_id":"source/images/Allen/avatar.jpg","path":"images/Allen/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/capture-video-on-web/1.png","path":"images/capture-video-on-web/1.png","modified":0,"renderable":0},{"_id":"source/images/expressMongoose/collectionfile.png","path":"images/expressMongoose/collectionfile.png","modified":0,"renderable":0},{"_id":"source/images/expressMongoose/expressjade.png","path":"images/expressMongoose/expressjade.png","modified":0,"renderable":0},{"_id":"source/images/expressMongoose/index.png","path":"images/expressMongoose/index.png","modified":0,"renderable":0},{"_id":"source/images/expressMongoose/expressejs.png","path":"images/expressMongoose/expressejs.png","modified":0,"renderable":0},{"_id":"source/images/expressMongoose/indexdemo.png","path":"images/expressMongoose/indexdemo.png","modified":0,"renderable":0},{"_id":"source/images/readme/01.png","path":"images/readme/01.png","modified":0,"renderable":0},{"_id":"source/images/readme/issues.png","path":"images/readme/issues.png","modified":0,"renderable":0},{"_id":"source/images/share/2-1.png","path":"images/share/2-1.png","modified":0,"renderable":0},{"_id":"source/images/share/10-1.jpeg","path":"images/share/10-1.jpeg","modified":0,"renderable":0},{"_id":"source/images/share/5-6.png","path":"images/share/5-6.png","modified":0,"renderable":0},{"_id":"source/images/share/5-7.png","path":"images/share/5-7.png","modified":0,"renderable":0},{"_id":"source/images/share/5-8.png","path":"images/share/5-8.png","modified":0,"renderable":0},{"_id":"source/images/share/7-2.png","path":"images/share/7-2.png","modified":0,"renderable":0},{"_id":"source/images/share/7-3.jpg","path":"images/share/7-3.jpg","modified":0,"renderable":0},{"_id":"source/images/share/7-4.jpg","path":"images/share/7-4.jpg","modified":0,"renderable":0},{"_id":"source/images/share/7-6.png","path":"images/share/7-6.png","modified":0,"renderable":0},{"_id":"source/images/share/7-8.png","path":"images/share/7-8.png","modified":0,"renderable":0},{"_id":"source/images/share/8-3.png","path":"images/share/8-3.png","modified":0,"renderable":0},{"_id":"source/images/share/8-4.png","path":"images/share/8-4.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/1.jpg","path":"images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/1.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/4.png","path":"images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/4.png","modified":0,"renderable":0},{"_id":"source/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/8.png","path":"images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/8.png","modified":0,"renderable":0},{"_id":"source/images/2017-05-20-7-tips-to-handle-undefined-in-JavaScript/1.png","path":"images/2017-05-20-7-tips-to-handle-undefined-in-JavaScript/1.png","modified":0,"renderable":0},{"_id":"source/images/2017-05-20-7-tips-to-handle-undefined-in-JavaScript/3.png","path":"images/2017-05-20-7-tips-to-handle-undefined-in-JavaScript/3.png","modified":0,"renderable":0},{"_id":"source/images/2017-07-26-first-time-use-node.js/0710_11.jpg","path":"images/2017-07-26-first-time-use-node.js/0710_11.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-08-11-experience-of-handling-memory-leak-in-nodejs-project/1.png","path":"images/2017-08-11-experience-of-handling-memory-leak-in-nodejs-project/1.png","modified":0,"renderable":0},{"_id":"source/images/2017-08-11-experience-of-handling-memory-leak-in-nodejs-project/3.png","path":"images/2017-08-11-experience-of-handling-memory-leak-in-nodejs-project/3.png","modified":0,"renderable":0},{"_id":"source/images/2017-08-23-misconceptions-about-amp/1.png","path":"images/2017-08-23-misconceptions-about-amp/1.png","modified":0,"renderable":0},{"_id":"source/images/2017-invite/fxh.jpg","path":"images/2017-invite/fxh.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-invite/gem.jpg","path":"images/2017-invite/gem.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-invite/pp.jpg","path":"images/2017-invite/pp.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-invite/toobug.jpg","path":"images/2017-invite/toobug.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-invite/xx.jpg","path":"images/2017-invite/xx.jpg","modified":0,"renderable":0},{"_id":"source/images/Diandian/avatar.jpg","path":"images/Diandian/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/alanzhang/alanzhang.jpg","path":"images/alanzhang/alanzhang.jpg","modified":0,"renderable":0},{"_id":"source/images/capture-video-on-web/2.png","path":"images/capture-video-on-web/2.png","modified":0,"renderable":0},{"_id":"source/images/expressMongoose/ejsdemo.png","path":"images/expressMongoose/ejsdemo.png","modified":0,"renderable":0},{"_id":"source/images/share/2-1.jpg","path":"images/share/2-1.jpg","modified":0,"renderable":0},{"_id":"source/images/share/2-2.png","path":"images/share/2-2.png","modified":0,"renderable":0},{"_id":"source/images/share/2-3.png","path":"images/share/2-3.png","modified":0,"renderable":0},{"_id":"source/images/share/2-4.png","path":"images/share/2-4.png","modified":0,"renderable":0},{"_id":"source/images/share/2-5.png","path":"images/share/2-5.png","modified":0,"renderable":0},{"_id":"source/images/share/2-7.png","path":"images/share/2-7.png","modified":0,"renderable":0},{"_id":"source/images/share/5-3.png","path":"images/share/5-3.png","modified":0,"renderable":0},{"_id":"source/images/share/5-4.png","path":"images/share/5-4.png","modified":0,"renderable":0},{"_id":"source/images/share/5-9.png","path":"images/share/5-9.png","modified":0,"renderable":0},{"_id":"source/images/share/6-3.png","path":"images/share/6-3.png","modified":0,"renderable":0},{"_id":"source/images/share/6-4.png","path":"images/share/6-4.png","modified":0,"renderable":0},{"_id":"source/images/share/6-5.png","path":"images/share/6-5.png","modified":0,"renderable":0},{"_id":"source/images/share/7-1.jpg","path":"images/share/7-1.jpg","modified":0,"renderable":0},{"_id":"source/images/share/7-7.png","path":"images/share/7-7.png","modified":0,"renderable":0},{"_id":"source/images/share/8-1.jpg","path":"images/share/8-1.jpg","modified":0,"renderable":0},{"_id":"source/images/share/8-5.png","path":"images/share/8-5.png","modified":0,"renderable":0},{"_id":"source/images/share/9-2.jpg","path":"images/share/9-2.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-07-17-https-certificate/08-ca_signed_cert.png","path":"images/2017-07-17-https-certificate/08-ca_signed_cert.png","modified":0,"renderable":0},{"_id":"source/images/2017-08-03-https-certificate/03-ca_signed_cert.png","path":"images/2017-08-03-https-certificate/03-ca_signed_cert.png","modified":0,"renderable":0},{"_id":"source/images/2017-08-23-misconceptions-about-amp/2.png","path":"images/2017-08-23-misconceptions-about-amp/2.png","modified":0,"renderable":0},{"_id":"source/images/2017-10-24-mobile-browser-font-size/1.png","path":"images/2017-10-24-mobile-browser-font-size/1.png","modified":0,"renderable":0},{"_id":"source/images/2017-10-24-mobile-browser-font-size/5.jpg","path":"images/2017-10-24-mobile-browser-font-size/5.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-invite/tb.jpg","path":"images/2017-invite/tb.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-invite/tsj.jpg","path":"images/2017-invite/tsj.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-invite/xxx.jpg","path":"images/2017-invite/xxx.jpg","modified":0,"renderable":0},{"_id":"source/images/Mark/avatar.jpg","path":"images/Mark/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/TooBug/avatar.jpg","path":"images/TooBug/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/Young/young.png","path":"images/Young/young.png","modified":0,"renderable":0},{"_id":"source/images/share/1-1.jpg","path":"images/share/1-1.jpg","modified":0,"renderable":0},{"_id":"source/images/share/2-6.png","path":"images/share/2-6.png","modified":0,"renderable":0},{"_id":"source/images/share/5-1.png","path":"images/share/5-1.png","modified":0,"renderable":0},{"_id":"source/images/share/5-2.png","path":"images/share/5-2.png","modified":0,"renderable":0},{"_id":"source/images/share/6-2.png","path":"images/share/6-2.png","modified":0,"renderable":0},{"_id":"source/images/share/6-1.png","path":"images/share/6-1.png","modified":0,"renderable":0},{"_id":"source/images/share/8-6.png","path":"images/share/8-6.png","modified":0,"renderable":0},{"_id":"source/images/share/9-1.jpg","path":"images/share/9-1.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"source/images/2017-07-17-https-certificate/06-mac_ca_trust.png","path":"images/2017-07-17-https-certificate/06-mac_ca_trust.png","modified":0,"renderable":0},{"_id":"source/images/2017-08-03-https-certificate/02-ca_cert_invalid.png","path":"images/2017-08-03-https-certificate/02-ca_cert_invalid.png","modified":0,"renderable":0},{"_id":"source/images/2017-08-11-experience-of-handling-memory-leak-in-nodejs-project/2.png","path":"images/2017-08-11-experience-of-handling-memory-leak-in-nodejs-project/2.png","modified":0,"renderable":0},{"_id":"source/images/2017-10-24-mobile-browser-font-size/2.png","path":"images/2017-10-24-mobile-browser-font-size/2.png","modified":0,"renderable":0},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"source/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/9.png","path":"images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/9.png","modified":0,"renderable":0},{"_id":"source/images/2017-invite/pl.gif","path":"images/2017-invite/pl.gif","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/images/share/5-5.gif","path":"images/share/5-5.gif","modified":0,"renderable":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/2017-css-grid/css_layouts.jpg","path":"images/2017-css-grid/css_layouts.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-12-01-live/14e622f03c4a9193s.png","path":"images/2017-12-01-live/14e622f03c4a9193s.png","modified":1,"renderable":0},{"_id":"source/images/2017-12-01-live/fbd49eed2bd3f92es.png","path":"images/2017-12-01-live/fbd49eed2bd3f92es.png","modified":1,"renderable":0},{"_id":"source/images/2017-12-01-live/0b20b027406625d2s.png","path":"images/2017-12-01-live/0b20b027406625d2s.png","modified":1,"renderable":0},{"_id":"source/images/2017-12-01-live/2835498ab8464e62s.png","path":"images/2017-12-01-live/2835498ab8464e62s.png","modified":1,"renderable":0},{"_id":"source/images/2017-12-01-live/edf1708baf6fbc90s.png","path":"images/2017-12-01-live/edf1708baf6fbc90s.png","modified":1,"renderable":0},{"_id":"source/images/2017-12-01-live/ebf24281ef5b0221s.png","path":"images/2017-12-01-live/ebf24281ef5b0221s.png","modified":1,"renderable":0},{"_id":"source/images/2017-12-01-live/2d4844429b6c24c5s.png","path":"images/2017-12-01-live/2d4844429b6c24c5s.png","modified":1,"renderable":0},{"_id":"source/images/2017-12-01-live/aed1d13465cd5422s.png","path":"images/2017-12-01-live/aed1d13465cd5422s.png","modified":1,"renderable":0},{"_id":"source/images/2017-12-01-live/c19343ac6b031af7s.png","path":"images/2017-12-01-live/c19343ac6b031af7s.png","modified":1,"renderable":0},{"_id":"source/images/2017-12-01-live/764764-551e7aa6c8f2b86e.png","path":"images/2017-12-01-live/764764-551e7aa6c8f2b86e.png","modified":1,"renderable":0},{"_id":"source/images/2017-11-30-javascript-float-fault/1130_03.jpg","path":"images/2017-11-30-javascript-float-fault/1130_03.jpg","modified":1,"renderable":0},{"_id":"source/images/2017-11-30-javascript-float-fault/1130_04.jpg","path":"images/2017-11-30-javascript-float-fault/1130_04.jpg","modified":1,"renderable":0},{"_id":"source/images/2017-11-30-javascript-float-fault/1130_05.jpg","path":"images/2017-11-30-javascript-float-fault/1130_05.jpg","modified":1,"renderable":0},{"_id":"source/images/2017-11-30-javascript-float-fault/1130_06.jpg","path":"images/2017-11-30-javascript-float-fault/1130_06.jpg","modified":1,"renderable":0},{"_id":"source/images/2017-11-30-javascript-float-fault/1130_07.jpg","path":"images/2017-11-30-javascript-float-fault/1130_07.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/favicon.ico","hash":"ba121839e9d1e258c2d50fbf408e5d8f1ac1ed9d","modified":1512118200256},{"_id":"source/futu.im.html","hash":"bdaf4dfe81ffa4552ce2620c65272c3e79265a88","modified":1512118200256},{"_id":"source/robots.txt","hash":"8943ad27646c1df758f43a10c5aab4c33d4b6425","modified":1512118200342},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1512118200343},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1512118200343},{"_id":"themes/next/.gitignore","hash":"c8d6a73b9e17f0f8a3716e4ada6960d3180425a6","modified":1512118200343},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1512118200343},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1512118200343},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1512118200344},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1512118200344},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1512118200344},{"_id":"themes/next/_config.yml","hash":"6f680893c51a267d2859667c01f30a8e5611745d","modified":1512118200344},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1512118200344},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1512118200344},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1512118200354},{"_id":"source/_posts/2017-04-24-css-custom-properties.md","hash":"d6d0a09657cf5de760a4128ef17c3d1fe2a8c099","modified":1512118200242},{"_id":"source/_posts/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them.md","hash":"7ede20c1361c8a9514a6475aa2de7bc87459e37b","modified":1512118200243},{"_id":"source/_posts/2017-04-28-async-iterators-and-generators.md","hash":"d10cc7df6482b4dc5da9772385259bb81aa39d0e","modified":1512118200243},{"_id":"source/_posts/2017-05-03-replace-bootstrap-layouts-with-css-grid.md","hash":"d65baffda6f61137d54fa87b85701e85c59465ed","modified":1512118200244},{"_id":"source/_posts/2017-05-05-how-nginx-processes-a-request.md","hash":"4da45d1e85605465ace801926296b639136d7f38","modified":1512118200244},{"_id":"source/_posts/2017-05-06-async-await.md","hash":"ceb8559e35b5b597db3b3b1eaf207852e065509e","modified":1512118200244},{"_id":"source/_posts/2017-05-08-CSS-Animations-vs-the-Web-Animations-API.md","hash":"957f65f86e537b86b4cc6798ea0e486820216615","modified":1512118200244},{"_id":"source/_posts/2017-05-20-7-tips-to-handle-undefined-in-JavaScript.md","hash":"37551a5c134ce7139de91a038fb12e8f2d472911","modified":1512118200245},{"_id":"source/_posts/2017-05-21-object-streams-in-nodejs.md","hash":"36c1eff543edfa8879021cb4b805ea24ccecbea7","modified":1512118200245},{"_id":"source/_posts/2017-05-25-4-types-of-js-memory-leaks.md","hash":"4aba592903dd8369a34f82ecafe1753dfbcbdfc2","modified":1512118200246},{"_id":"source/_posts/2017-06-01-xhr-jsonp-abort.md","hash":"52543b5bbad554e1e2adbae7d027de9fce6a16e3","modified":1512118200246},{"_id":"source/_posts/2017-06-06-passive-event-listeners.md","hash":"be408596f95c44d433bfceae2e323e246a24095f","modified":1512118200246},{"_id":"source/_posts/2017-07-17-https-certificate.md","hash":"504970231bbe17906bbcf4cf66e1f3ff110ae657","modified":1512118200247},{"_id":"source/_posts/2017-07-26-first-time-use-node.js.md","hash":"cce231c203f6a34747f847458c4812fbbd0b428b","modified":1512118200247},{"_id":"source/_posts/2017-08-03-https-certificate.md","hash":"7c89d65d3c1c5318ed1a4a6c6835dc9d07290f66","modified":1512118200247},{"_id":"source/_posts/2017-08-22-passing-data-between-promise-callbacks.md","hash":"b812e3f62e1e9299973c6befc9f24ad72c3f9f75","modified":1512118200248},{"_id":"source/_posts/2017-08-11-experience-of-handling-memory-leak-in-nodejs-project.md","hash":"430ea2af0f8ab2452dc8c6829494abcdcec0ce3c","modified":1512118200247},{"_id":"source/_posts/2017-08-23-10-misconceptions-about-amp.md","hash":"982902da8c7877aae4d7a30e433fb7b1aaf0e745","modified":1512118200248},{"_id":"source/_posts/2017-08-24-node-js-errors-changes-you-need-to-know-about.md","hash":"0558f938bc2507a7a0c85712ab2ac08725a4bffe","modified":1512118200248},{"_id":"source/_posts/2017-09-01-node-js-http-2-push.md","hash":"9dc290a78ea227aff13ccd5ec2efde1c6dcfb81a","modified":1512118200248},{"_id":"source/_posts/2017-09-11-8421-auth.md","hash":"99b758815e3e7aa9fcc841b5108bcc9f2644ea0f","modified":1512118200248},{"_id":"source/_posts/2017-09-29-touchstart-click.md","hash":"be6312661afca3af7c5eb11897fae4e29e8f1ad4","modified":1512118200249},{"_id":"source/_posts/2017-10-24-mobile-browser-font-size.md","hash":"85b27c6e6d65142f380191036c180aeb3766a144","modified":1512118200249},{"_id":"source/_posts/2017-10-31-vue-cutom-directive.md","hash":"f3196254330ff58d19e5fe08133bbe80ef68085e","modified":1512118200249},{"_id":"source/_posts/2017-11-30-javascript-float-fault.md","hash":"153312353569bf16c7ef36a7cef08da001688445","modified":1512121213576},{"_id":"source/_posts/2017-invite.md","hash":"b678da26c3a2c1098915c883c93fc6a19d03d3df","modified":1512118200249},{"_id":"source/_posts/capture-video-on-web.md","hash":"124cc3af0a1e837c4b008377995601a1b80228bd","modified":1512118200250},{"_id":"source/_posts/dns-request.md","hash":"9518b115f56fc12ba5035edaf9b2f3b115f72d26","modified":1512118200250},{"_id":"source/_posts/dns-response.md","hash":"46d7a94b518a17387097ab4ee1d1ee7ba0d038cf","modified":1512118200250},{"_id":"source/_posts/express-and-mongoose.md","hash":"465b63cc1537bf0d5f91e200a37e303d5b259383","modified":1512118200250},{"_id":"source/_posts/fontend-share-01.md","hash":"55d37484032c928499b0b07e676aeb930991d336","modified":1512118200251},{"_id":"source/_posts/fontend-share-02.md","hash":"875a6d1909e7408aed6c9de35d74ad7aa1b23987","modified":1512118200251},{"_id":"source/_posts/fontend-share-03.md","hash":"9bcb469ca5586dc2ad8c697abc5591c0b2728c95","modified":1512118200251},{"_id":"source/_posts/fontend-share-04.md","hash":"c4f99d700e1cd569f7c9f0c8a06b347bf3e35cbb","modified":1512118200251},{"_id":"source/_posts/fontend-share-05.md","hash":"7d1e006fa3c34a6e4b8ed893830f119ad9db2ce4","modified":1512118200251},{"_id":"source/_posts/fontend-share-06.md","hash":"858021a6f2b9b3adcb3aacb4dffd853ba0d1b4ef","modified":1512118200251},{"_id":"source/_posts/fontend-share-07.md","hash":"94fb6ac6d4b211c71c602024ed97c7ccbabd9f0b","modified":1512118200251},{"_id":"source/_posts/fontend-share-08.md","hash":"1c87f5d7b522db598da99ff674456d336e25edab","modified":1512118200252},{"_id":"source/_posts/fontend-share-09.md","hash":"10df6171acedf78a67aff38ee9711473f418bf8e","modified":1512118200252},{"_id":"source/_posts/fontend-share-10.md","hash":"a4c128f388a85702482ebcc0b5c87824cae8d223","modified":1512118200252},{"_id":"source/_posts/gulp-rev-hash.md","hash":"003018d2e5e11b95a4e97dc79a4979989e7cf9f4","modified":1512118200252},{"_id":"source/_posts/share-brief-introduction.md","hash":"0a5ca4abdc8cdc9316bd67f1ba6f97cd06f48970","modified":1512118200253},{"_id":"source/_posts/h5-callup-native.md","hash":"8104b3d94e2bd6678e2ebf1ba946ed500eda6124","modified":1512118200252},{"_id":"source/_posts/threejs-webgl-cube.md","hash":"6924a48540dc1fc35dea405a2ebd2e9f449a0b6c","modified":1512118200253},{"_id":"source/_posts/understanding-experience.md","hash":"072a994293a1c443005fa71c60aed770972939e9","modified":1512118200253},{"_id":"source/categories/index.md","hash":"5ee06243f686c425785935cc67f73432006072da","modified":1512118200255},{"_id":"source/tags/index.md","hash":"83afecd4e285d111de3b6d5aac51bc066069d75f","modified":1512118200342},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1512118200343},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1512118200343},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1512118200344},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1512118200345},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1512118200345},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1512118200345},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1512118200345},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1512118200345},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1512118200345},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1512118200346},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1512118200346},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1512118200346},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1512118200346},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1512118200346},{"_id":"themes/next/layout/_layout.swig","hash":"3af5fdabf4d31edab963a51ead6c7316d7bea61d","modified":1512118200347},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1512118200353},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1512118200353},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1512118200353},{"_id":"themes/next/layout/page.swig","hash":"26fc6ac1c81f95cf7fad5bfab0eae09d4177b672","modified":1512118200354},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1512118200354},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1512118200354},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1512118200354},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1512118200393},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1512118200393},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1512118200393},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512118200373},{"_id":"source/author/AlanZhang/index.md","hash":"3b2d3abe58161f880ebf306dcdac3ca8f5753acc","modified":1512118200253},{"_id":"source/author/Cynthia/index.md","hash":"15e7de1b293e1c473899724f090e8d24904fde61","modified":1512118200254},{"_id":"source/author/Allen/index.md","hash":"a68f8a20dcde4483cd50bf50240307bae15fa036","modified":1512118200253},{"_id":"source/author/Ivanxiao/index.md","hash":"6a6b534b015783eca9f838c3d8c47e30cd9c5f5b","modified":1512118200254},{"_id":"source/author/Diandian/index.md","hash":"8a8b073715ae5d874887a8673249667608567389","modified":1512118200254},{"_id":"source/author/Elly/index.md","hash":"f4036f26535feda529180306aab6456ec681f2cc","modified":1512118200254},{"_id":"source/author/Jin/index.md","hash":"14c85be7524095257e70b1e8a2ee2a0814f3d113","modified":1512118200254},{"_id":"source/author/Mark/index.md","hash":"0c1a6a1f07ad0cbd01e1172449e4cd843888a1cb","modified":1512118200255},{"_id":"source/author/Linda/index.md","hash":"871726ad2de971e5047358f03e5cfee73287e2d9","modified":1512118200254},{"_id":"source/author/Timi/index.md","hash":"dad16c1acd003f48bd6fdc3fc391e3b638fa8ab8","modified":1512118200255},{"_id":"source/author/Young/index.md","hash":"2601823eaa4de7b19f123b331b60fc489a79105a","modified":1512118200255},{"_id":"source/author/TooBug/index.md","hash":"c437da7af76256d982c66ac14ed52283442d8ab0","modified":1512118200255},{"_id":"source/images/2017-04-24-css-custom-properties/0422_01.jpg","hash":"a93969effe4411abffa85b7ac3fec7e489bca8e5","modified":1512118200256},{"_id":"source/images/2017-04-24-css-custom-properties/0422_03.jpg","hash":"f9265b0856c9c0ccdf1825e9277a1309bbbc3afe","modified":1512118200256},{"_id":"source/images/2017-04-24-css-custom-properties/0422_02.jpg","hash":"6a4b68f83a0ef20a053e49acd3de59f95b1fa534","modified":1512118200256},{"_id":"source/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/2.png","hash":"02c41a671521b02b7edbc97ffc984130c5ce505d","modified":1512118200257},{"_id":"source/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/3.png","hash":"dbee6c02979cecf9664283d3644b053cab9bda84","modified":1512118200258},{"_id":"source/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/5.png","hash":"4435afd612a7c90d23ddb2c124f2831b62ca702b","modified":1512118200259},{"_id":"source/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/6.png","hash":"4d2c6ba95f3b20b6b6ca7d4123bc39acc42e7014","modified":1512118200259},{"_id":"source/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/7.png","hash":"20f32545c06e6bfe69406e92a2d5cdcb9f0fa7a9","modified":1512118200260},{"_id":"source/images/2017-05-20-7-tips-to-handle-undefined-in-JavaScript/2.svg","hash":"d74dff69e83349a4f1882cbe07fb793f182bec43","modified":1512118200263},{"_id":"source/images/2017-05-21-object-streams-in-nodejs/01.jpg","hash":"f624b6a30a8bcfbe0f94826f657ded2d22e694cf","modified":1512118200264},{"_id":"source/images/2017-05-21-object-streams-in-nodejs/02.jpg","hash":"069e5085e77ba54535132895291436895c0ce644","modified":1512118200264},{"_id":"source/images/2017-07-17-https-certificate/01-demo.png","hash":"1abe4cfbbddb6b9b4097e8c5006ed5493168b562","modified":1512118200265},{"_id":"source/images/2017-07-17-https-certificate/02-steps.png","hash":"eeb89e61aae091c04ba14b0175f7f9e334f477fe","modified":1512118200265},{"_id":"source/images/2017-07-17-https-certificate/03-mith.jpg","hash":"3e600e1ccdd1a235df79d6d97a2a28decbe07b5f","modified":1512118200265},{"_id":"source/images/2017-07-17-https-certificate/05-win_ca_save.png","hash":"f6b2605038c35c92ddef34032b6114a1b5ccc3a2","modified":1512118200266},{"_id":"source/images/2017-07-17-https-certificate/04-win_ca_install.png","hash":"05da113ed2afcadf26dd06b0ef9e4be6b1fc9eb6","modified":1512118200266},{"_id":"source/images/2017-07-17-https-certificate/07-ca_root_trust.png","hash":"ed203d74e7cd20fd623101fc52c6ddc487bfb20b","modified":1512118200268},{"_id":"source/images/2017-07-26-first-time-use-node.js/0710_02.jpg","hash":"f7294875e960c6199b2583e7bdba92a0b6f9b795","modified":1512118200270},{"_id":"source/images/2017-07-26-first-time-use-node.js/0710_01.jpg","hash":"f9ba0bdf43d087dc7712d05d8af1fc51451367b5","modified":1512118200270},{"_id":"source/images/2017-07-26-first-time-use-node.js/0710_03.jpg","hash":"19db81545b14153306eb93eb40119e6232092d81","modified":1512118200270},{"_id":"source/images/2017-07-26-first-time-use-node.js/0710_04.jpg","hash":"882d218ed010f06bf9dab984e18ed858e585831e","modified":1512118200271},{"_id":"source/images/2017-07-26-first-time-use-node.js/0710_07.jpg","hash":"30002d608af3595c543554c2842623d209b4311d","modified":1512118200272},{"_id":"source/images/2017-07-26-first-time-use-node.js/0710_06.jpg","hash":"ce1546a1428158d032750ce73d282c475d125f7a","modified":1512118200272},{"_id":"source/images/2017-07-26-first-time-use-node.js/0710_05.jpg","hash":"59ec1fcb1984bdc96229405423c8f4e8d9a7eda9","modified":1512118200271},{"_id":"source/images/2017-07-26-first-time-use-node.js/0710_10.jpg","hash":"4cc473af4c4d096cd82e452c41878f185824fd99","modified":1512118200273},{"_id":"source/images/2017-07-26-first-time-use-node.js/0710_09.jpg","hash":"e2bdd017fb029085ddf2546b3156e65e67b17de5","modified":1512118200273},{"_id":"source/images/2017-07-26-first-time-use-node.js/0710_08.jpg","hash":"ce66862f058673729e26f31d01344f3a02964cf8","modified":1512118200272},{"_id":"source/images/2017-08-03-https-certificate/01-ca_key.png","hash":"b9a6a94ec81804f6706b1becb86abc45e9bd533c","modified":1512118200274},{"_id":"source/images/2017-08-23-misconceptions-about-amp/3.png","hash":"a6d8657f74f0030ff2d0566376ad81f8afc53ed5","modified":1512118200281},{"_id":"source/images/2017-08-24-node-js-errors-changes-you-need-to-know-about/1.png","hash":"4e120b88f4e670523cf1741138bfd549d274f4fc","modified":1512118200281},{"_id":"source/images/2017-08-24-node-js-errors-changes-you-need-to-know-about/2.png","hash":"3f28e854c9b3b7882eeb5dd7bd78cda88778e1ee","modified":1512118200281},{"_id":"source/images/2017-08-24-node-js-errors-changes-you-need-to-know-about/3.png","hash":"79c96acbb69f8b9c6d87fd5e39b0e6fc52ffe244","modified":1512118200281},{"_id":"source/images/2017-09-01-node-js-http-2-push/1.png","hash":"770e37eb29ee467652ee51e0f0752bda6e350bdb","modified":1512118200282},{"_id":"source/images/2017-09-01-node-js-http-2-push/2.png","hash":"01a5fbe81c9eb9171af27be11161a8b87aa067b3","modified":1512118200282},{"_id":"source/images/2017-09-29-touchstart-click/1.png","hash":"ace5b0c7bc01c8afa42ace2d02cd74730ac2ebb1","modified":1512118200282},{"_id":"source/images/2017-10-24-mobile-browser-font-size/3.png","hash":"971c447ef661917f39754dacdb897dd87c4aaf0c","modified":1512118200285},{"_id":"source/images/2017-10-24-mobile-browser-font-size/4.png","hash":"d8a9ee4cb1caf5205d637ca2eb52644fce07f0c1","modified":1512118200285},{"_id":"source/images/2017-10-24-mobile-browser-font-size/6.png","hash":"756564d2ebaa9d28941390f0a0d4b0ed8705851a","modified":1512118200286},{"_id":"source/images/2017-10-31-vue-cutom-directive/01.svg","hash":"a6a066f9cb456c87226e423aaf0b636928ff8aa9","modified":1512118200287},{"_id":"source/images/2017-11-30-javascript-float-fault/1130_01.jpg","hash":"795f733763ba91782dcb126a208731a00e5fe804","modified":1512118200287},{"_id":"source/images/2017-11-30-javascript-float-fault/1130_02.jpg","hash":"f62051f88d814fe399f3fec8c7e91af09bc1e640","modified":1512118200287},{"_id":"source/images/2017-invite/1-1.jpg","hash":"d72b0c4ab49b1073de151a70c8427a3577a371fc","modified":1512118200292},{"_id":"source/images/2017-invite/futu.jpg","hash":"51cb51e20eb618d3b8a12e9cbd48b84358ac2497","modified":1512118200293},{"_id":"source/images/2017-invite/cpmm.jpg","hash":"3c1815dfa545e9f8d04365a1915995ae5fcab161","modified":1512118200292},{"_id":"source/images/2017-invite/lt.jpg","hash":"70ec5976e38150cf94e21bedcc8e07980e227597","modified":1512118200294},{"_id":"source/images/2017-invite/sc.jpg","hash":"bb03bbe72362da7f743b668c5e2476a3790017c8","modified":1512118200296},{"_id":"source/images/2017-invite/xf.png","hash":"970abd5b45b151d183f07b465deda7282a12d8f9","modified":1512118200299},{"_id":"source/images/2017-invite/wl.jpg","hash":"e9276757401c41aab8279fbf389daae288907385","modified":1512118200299},{"_id":"source/images/2017-invite/zb.jpg","hash":"54dca96d9b46aa9a9275596de80f9e0f9756e2bf","modified":1512118200301},{"_id":"source/images/2017-invite/xxd.png","hash":"e9b04d5742c306d2f7c6fc1bf758dede6e781d8d","modified":1512118200299},{"_id":"source/images/2017-memory-leaks/example-recordedallocs-list.png","hash":"cdb60f88fe310692dcde5ff6ef834e2e638eefe9","modified":1512118200301},{"_id":"source/images/2017-memory-leaks/example-recordedallocs-overview.png","hash":"7a35b022c20ace93f0785da16831eb94e89a37d4","modified":1512118200301},{"_id":"source/images/2017-memory-leaks/example-snapshots-1.png","hash":"cbeb2e6acbb53cf1f6ac687cf03fa7fd9c3d37e3","modified":1512118200302},{"_id":"source/images/2017-memory-leaks/example-recordedallocs-selected.png","hash":"956dac43ce5e2e94b5a1364d2d05fd64ebcce8b4","modified":1512118200302},{"_id":"source/images/2017-memory-leaks/example-snapshots-2.png","hash":"d925b79293d8f2827f4d8d862469038a26b40675","modified":1512118200302},{"_id":"source/images/2017-memory-leaks/example-timeline.png","hash":"74c74b946cad524035765bbcb55e9c71de6d4e0a","modified":1512118200303},{"_id":"source/images/2017-memory-leaks/profiles.png","hash":"a08d3cae9136ed7b61690e5c5de58a1f6da07f21","modified":1512118200303},{"_id":"source/images/2017-memory-leaks/timeline.png","hash":"ad118444e0e728c4b3fdb5e3cf39399d81aa6d82","modified":1512118200303},{"_id":"source/images/Elly/elly.jpg","hash":"78c5dddd335c7d3aff5c43332f179528477e9b64","modified":1512118200305},{"_id":"source/images/Allen/avatar.jpg","hash":"1a4cc648e0b0bcf9503bae3410a518dd519aa51f","modified":1512118200304},{"_id":"source/images/capture-video-on-web/1.png","hash":"2db6189b1b416d0a4b8ddad740780fc484eaa5d3","modified":1512118200308},{"_id":"source/images/expressMongoose/collectionfile.png","hash":"8dbbc98d33beaee6d631ddd7a6ec5d6711ae1a81","modified":1512118200309},{"_id":"source/images/expressMongoose/expressjade.png","hash":"1bbb708aad08fbac0ffb4c39dba9c6e5c2437e6b","modified":1512118200310},{"_id":"source/images/expressMongoose/index.png","hash":"9926d822d772c6a71e82e4236254a39b3128c8a3","modified":1512118200311},{"_id":"source/images/expressMongoose/expressejs.png","hash":"707d6b12061e6373de64930f19ee7a45ae94a2ad","modified":1512118200310},{"_id":"source/images/expressMongoose/indexdemo.png","hash":"95361bad246094b6fc9c4966839f931fb6a74b13","modified":1512118200311},{"_id":"source/images/readme/01.png","hash":"d789d8ec0e5c9d44349cca072c39bf2ff481f9c1","modified":1512118200312},{"_id":"source/images/readme/issues.png","hash":"fd19bf378a2dee9e9f45dedecc72b3f731a55021","modified":1512118200312},{"_id":"source/images/share/2-1.png","hash":"9782bd8a1ae27c02431d6558617e1289bbea86f7","modified":1512118200314},{"_id":"source/images/share/10-1.jpeg","hash":"0a77c13590f531f2f89a2426e3264a30410fd587","modified":1512118200313},{"_id":"source/images/share/5-6.png","hash":"fc950d59f3955be838e7499de783abe775e7a707","modified":1512118200327},{"_id":"source/images/share/5-7.png","hash":"da20614539a3345520a2bfbc0f3412895ed70595","modified":1512118200328},{"_id":"source/images/share/5-8.png","hash":"ae6babf319f89a37fa3a291b88e0b354e88a1a57","modified":1512118200328},{"_id":"source/images/share/7-2.png","hash":"93504725190411b28ab3196f728a58bbd2bf2e19","modified":1512118200335},{"_id":"source/images/share/7-3.jpg","hash":"25ef8f22632fa94848f8900549997959e1945c35","modified":1512118200336},{"_id":"source/images/share/7-4.jpg","hash":"84627626ec91ba640eca0ef155fb79f451ae6d55","modified":1512118200336},{"_id":"source/images/share/7-6.png","hash":"fba602ddc284ddf886da6bd603eb3a2cfbe1efcd","modified":1512118200336},{"_id":"source/images/share/7-8.png","hash":"aaea7eb6792d86aeb73fd347cf3b9e18f7250382","modified":1512118200337},{"_id":"source/images/share/8-3.png","hash":"b67b8cd5951c2b7e073aa01966bbc881605d6058","modified":1512118200339},{"_id":"source/images/share/8-4.png","hash":"42eecc58087c2aa103be9c6623f1c5d7d47e4ba1","modified":1512118200339},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1512118200347},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1512118200347},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1512118200347},{"_id":"themes/next/layout/_macro/post.swig","hash":"b9159a2c790b2037c11a8960b37883b4815851a3","modified":1512118200347},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1512118200347},{"_id":"themes/next/layout/_partials/comments.swig","hash":"b004304b1444989a8f182ce03c0826a1aba520f2","modified":1512118200348},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1512118200348},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1512118200348},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4fe588ff8ba8587885c2936db2df490774f89e10","modified":1512118200348},{"_id":"themes/next/layout/_partials/head.swig","hash":"b79e0072b17bd5c56318f7a083f797c50d12fb6a","modified":1512118200348},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1512118200349},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1512118200349},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1512118200350},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"143e7110c921e451a7ecce0ab2a88822998179b7","modified":1512118200350},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"56b3a05dd07c2fff339f2bedfb7605287dbbaa73","modified":1512118200350},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1512118200353},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1512118200354},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1512118200355},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1512118200355},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1512118200373},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1512118200373},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1512118200374},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1512118200374},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1512118200374},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1512118200374},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1512118200374},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1512118200374},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1512118200375},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1512118200375},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1512118200375},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1512118200375},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1512118200375},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1512118200375},{"_id":"source/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/1.jpg","hash":"98088f24672cec05c85ff0fe668978e84414a71c","modified":1512118200257},{"_id":"source/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/4.png","hash":"559aa59ab4459c9d57965ec704480129fc4dc39f","modified":1512118200258},{"_id":"source/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/8.png","hash":"7d1a60ac3a529ab6d99fd1be44bf4b5be7ffe04e","modified":1512118200261},{"_id":"source/images/2017-05-20-7-tips-to-handle-undefined-in-JavaScript/1.png","hash":"6210a4cb56249ad018d80773a6c53e7db723d884","modified":1512118200263},{"_id":"source/images/2017-05-20-7-tips-to-handle-undefined-in-JavaScript/3.png","hash":"fe4620e2a137bb5e7c9203c0f9777d3c98635c73","modified":1512118200264},{"_id":"source/images/2017-07-26-first-time-use-node.js/0710_11.jpg","hash":"2178675a954635a1b816d386157e6a329fb95b9d","modified":1512118200273},{"_id":"source/images/2017-08-11-experience-of-handling-memory-leak-in-nodejs-project/1.png","hash":"3a11ffbc56480f566fcbf2114c9f89004362c7f3","modified":1512118200277},{"_id":"source/images/2017-08-11-experience-of-handling-memory-leak-in-nodejs-project/3.png","hash":"585281c49ae40df9b1f8ad5ed177e088682e24c0","modified":1512118200279},{"_id":"source/images/2017-08-23-misconceptions-about-amp/1.png","hash":"68f235eb0ebaff96894857d62bd9a7d761c30dca","modified":1512118200280},{"_id":"source/images/2017-invite/fxh.jpg","hash":"9c314c56dfe22b0623c8a78b117c9939573d8d9c","modified":1512118200293},{"_id":"source/images/2017-invite/gem.jpg","hash":"206c5c69eeea3d1737ddcd5f098a7b94cbad7794","modified":1512118200294},{"_id":"source/images/2017-invite/pp.jpg","hash":"185a7da4954c28a322da73a08b6ddaf13885a924","modified":1512118200296},{"_id":"source/images/2017-invite/toobug.jpg","hash":"8f9622bc4206ab6ce75a3a86edbf412da2f6c375","modified":1512118200298},{"_id":"source/images/2017-invite/xx.jpg","hash":"fdc199e3d6fade4ba376809db018d3ae84c3fc4a","modified":1512118200299},{"_id":"source/images/Diandian/avatar.jpg","hash":"29c7e33ff99fc223aa3e80c7d15fcd201b585f07","modified":1512118200304},{"_id":"source/images/alanzhang/alanzhang.jpg","hash":"3cd20cf15a0bba94fc2ad5d725c9ae98c491df05","modified":1512118200307},{"_id":"source/images/capture-video-on-web/2.png","hash":"66e32ba7ce5c4cfd7a56ae21f99da98f7400e9b8","modified":1512118200308},{"_id":"source/images/expressMongoose/ejsdemo.png","hash":"0cb43758fbbe4d3202221878bec27e345fa8dbbd","modified":1512118200310},{"_id":"source/images/share/2-1.jpg","hash":"6edebad4b7899b05f2e2fed95030cff7109727f2","modified":1512118200314},{"_id":"source/images/share/2-2.png","hash":"cb97a33556295fc242ea5a1058b5564f3ad86c3a","modified":1512118200315},{"_id":"source/images/share/2-3.png","hash":"42bb01f25c40d6a99d24ea43f0e3b7b9450d4cf9","modified":1512118200316},{"_id":"source/images/share/2-4.png","hash":"5bbf7b9f824453849b06acfded3a3f88756171a5","modified":1512118200316},{"_id":"source/images/share/2-5.png","hash":"557eba75745657dbdf427d7b8994cb2a759bc2e8","modified":1512118200317},{"_id":"source/images/share/2-7.png","hash":"e624b55bbc3f10ab9788ed1f7263afa71b2dffe1","modified":1512118200318},{"_id":"source/images/share/5-3.png","hash":"e3eb57b50d06d9754eb6f117e883a782611eea13","modified":1512118200322},{"_id":"source/images/share/5-4.png","hash":"8f2aecb99712f077fccbf1e8f21b66710be0635a","modified":1512118200323},{"_id":"source/images/share/5-9.png","hash":"e9ccb4cbcbb2b243a89a8295abff4c587aa2bc44","modified":1512118200329},{"_id":"source/images/share/6-3.png","hash":"482ae69d25f022cd44b9f315568a8c9ffcc0a795","modified":1512118200332},{"_id":"source/images/share/6-4.png","hash":"fdc043d1595455bb6524c29309956b3dca3169a1","modified":1512118200333},{"_id":"source/images/share/6-5.png","hash":"7dea777fec8054947179f01603609bffdf6dc48e","modified":1512118200334},{"_id":"source/images/share/7-1.jpg","hash":"b5a60f076a65b67189e6330446d6c30d77506da7","modified":1512118200335},{"_id":"source/images/share/7-7.png","hash":"8236784fa499cd4127f9a1f55abc7acb67c4b1d0","modified":1512118200337},{"_id":"source/images/share/8-1.jpg","hash":"04f1d2577f07356685cac13bbe01ed5e57704fd1","modified":1512118200338},{"_id":"source/images/share/8-5.png","hash":"6f40c0021156352aaec3e0d424b4359d1ae7007b","modified":1512118200339},{"_id":"source/images/share/9-2.jpg","hash":"7931e54b4ee3d9f88b004fece3428228f28fcd56","modified":1512118200342},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512118200351},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512118200351},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512118200368},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512118200368},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512118200368},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512118200373},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512118200373},{"_id":"source/images/2017-07-17-https-certificate/08-ca_signed_cert.png","hash":"372b1943810a16f1c83fdb11ff68ef086acc9742","modified":1512118200269},{"_id":"source/images/2017-08-03-https-certificate/03-ca_signed_cert.png","hash":"30b3621a5205f659ed2b8f334b3cdcad9aba5a3e","modified":1512118200276},{"_id":"source/images/2017-08-23-misconceptions-about-amp/2.png","hash":"eda979a2a77c11501f27263b7d89cc62cfcaa0ac","modified":1512118200280},{"_id":"source/images/2017-10-24-mobile-browser-font-size/1.png","hash":"fc083cb506d091fdfaf5af91fde36f54923333ea","modified":1512118200283},{"_id":"source/images/2017-10-24-mobile-browser-font-size/5.jpg","hash":"598e7509ec19dff59c4e13dc97d83ed34d5d30ce","modified":1512118200286},{"_id":"source/images/2017-invite/tb.jpg","hash":"181f1c891c75e843a6ca258a1ca73af5f0ee372d","modified":1512118200297},{"_id":"source/images/2017-invite/tsj.jpg","hash":"5f761310b555499119babb360e7c2eb096cfd987","modified":1512118200298},{"_id":"source/images/2017-invite/xxx.jpg","hash":"44db335e2ccf838942acc3bdfe080487bce69343","modified":1512118200300},{"_id":"source/images/Mark/avatar.jpg","hash":"cfa4cc2cd0bb395b549465380795b07d4c347352","modified":1512118200305},{"_id":"source/images/TooBug/avatar.jpg","hash":"f2d55306744b835879568dcdbd6292082066e22e","modified":1512118200306},{"_id":"source/images/Young/young.png","hash":"7e868918e8c7e2a8a31637ad36dc0cd30431ada0","modified":1512118200306},{"_id":"source/images/share/1-1.jpg","hash":"aab3096797191db2e38bddc3737620aee8010dfe","modified":1512118200313},{"_id":"source/images/share/2-6.png","hash":"74d8afc88d04dc167d06ae4a9dcfc02ad2f756a8","modified":1512118200318},{"_id":"source/images/share/5-1.png","hash":"3d7260b8a4c095abfe372c03c280d4d6702a098e","modified":1512118200319},{"_id":"source/images/share/5-2.png","hash":"f159a9d1bc6a7629d46fc4da0d89fad706fdf1c9","modified":1512118200321},{"_id":"source/images/share/6-2.png","hash":"5eb64423f85f06aa2f6c63b3b721f2d1663fb780","modified":1512118200331},{"_id":"source/images/share/6-1.png","hash":"155c344b891bd38f8cf8073bb43d939fad82cef0","modified":1512118200330},{"_id":"source/images/share/8-6.png","hash":"8a9b1f29a2d040506d3d5980bfc96e7491000693","modified":1512118200340},{"_id":"source/images/share/9-1.jpg","hash":"69b3107888e8849a12ae2e89adacd063b7fe328d","modified":1512118200341},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1512118200349},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1512118200349},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1512118200348},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1512118200349},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1512118200349},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1512118200350},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1512118200350},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1512118200350},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"f4f0f0762b04aee9a0e7bd92471f5d2cbee84a30","modified":1512118200350},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1512118200351},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1512118200351},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1512118200352},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1512118200353},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1512118200353},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1512118200352},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1512118200352},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1512118200368},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1512118200368},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1512118200368},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1512118200372},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1512118200373},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1512118200373},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1512118200376},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1512118200376},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1512118200376},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1512118200376},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1512118200376},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1512118200377},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1512118200377},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1512118200380},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1512118200380},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1512118200381},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1512118200381},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1512118200381},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1512118200382},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1512118200382},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1512118200382},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1512118200382},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1512118200388},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1512118200389},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1512118200389},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1512118200389},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1512118200389},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1512118200390},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1512118200390},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1512118200390},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1512118200391},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1512118200392},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1512118200393},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1512118200392},{"_id":"source/images/2017-07-17-https-certificate/06-mac_ca_trust.png","hash":"aab23f82cf833d5824d64606ccfa4e6d561d7200","modified":1512118200268},{"_id":"source/images/2017-08-03-https-certificate/02-ca_cert_invalid.png","hash":"38e981c361f1104f554a0a3517163ff38f586ac3","modified":1512118200275},{"_id":"source/images/2017-08-11-experience-of-handling-memory-leak-in-nodejs-project/2.png","hash":"f054dfc97ed5e55e5be72e1e0a1dc35e59a22aee","modified":1512118200278},{"_id":"source/images/2017-10-24-mobile-browser-font-size/2.png","hash":"4cb7bb7a545425df0ca60f433039ce23a4bec7ef","modified":1512118200284},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512118200352},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1512118200389},{"_id":"source/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/9.png","hash":"cdf347baade638077d17b669ab75e5e3a248d925","modified":1512118200262},{"_id":"source/images/2017-invite/pl.gif","hash":"0dff4a4337235583758505e087b6c788961fb5ae","modified":1512118200295},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1512118200352},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1512118200351},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"f9c6ee91c2a615edd8ca26edcc8a66b71883c238","modified":1512118200351},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1512118200351},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1512118200352},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1512118200352},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1512118200352},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1512118200367},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1512118200356},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1512118200357},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1512118200355},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1512118200357},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1512118200362},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1512118200365},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1512118200367},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1512118200368},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1512118200367},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1512118200367},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1512118200369},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1512118200369},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1512118200369},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1512118200369},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1512118200369},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1512118200368},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1512118200369},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1512118200370},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1512118200370},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1512118200371},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1512118200371},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1512118200370},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1512118200371},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1512118200371},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1512118200372},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1512118200372},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1512118200372},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1512118200372},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1512118200372},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1512118200372},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1512118200377},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1512118200378},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1512118200377},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1512118200377},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1512118200377},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1512118200378},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1512118200378},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1512118200379},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1512118200381},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1512118200381},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1512118200380},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1512118200380},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1512118200383},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1512118200382},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1512118200388},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1512118200390},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1512118200390},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1512118200384},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1512118200384},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1512118200387},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1512118200392},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1512118200358},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1512118200359},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1512118200359},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1512118200360},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1512118200360},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1512118200360},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1512118200361},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1512118200361},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1512118200361},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1512118200362},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1512118200362},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1512118200360},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1512118200364},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1512118200364},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1512118200364},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1512118200364},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1512118200364},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1512118200365},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1512118200365},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1512118200365},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1512118200365},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1512118200362},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1512118200362},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1512118200363},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1512118200362},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1512118200363},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1512118200363},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1512118200363},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1512118200363},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1512118200363},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1512118200364},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1512118200363},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1512118200364},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1512118200365},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1512118200366},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1512118200366},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1512118200366},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1512118200366},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1512118200366},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1512118200366},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1512118200366},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1512118200367},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1512118200367},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1512118200370},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1512118200370},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1512118200371},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1512118200378},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1512118200378},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1512118200378},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1512118200379},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1512118200379},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1512118200379},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1512118200387},{"_id":"source/images/share/5-5.gif","hash":"b222072f85adf3f62fecd0feae06a403abcd7c4a","modified":1512118200326},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1512118200386},{"_id":"source/images/2017-css-grid/css_layouts.jpg","hash":"f0b30420010c9c270dd9adffea8eddf364d0aae3","modified":1512118200291},{"_id":"source/_posts/2017-12-01-live.md","hash":"079b58d1f93171a923d1501d6813e00dd3256928","modified":1512121216042},{"_id":"source/images/.DS_Store","hash":"63d799a94498299f403413e08427b2bab7d8b83f","modified":1512121216042},{"_id":"source/images/2017-11-30-javascript-float-fault/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1512121216042},{"_id":"source/images/2017-11-30-javascript-float-fault/1130_03.jpg","hash":"5616ad1d5284d21691abac26633cb193e5bddb68","modified":1512121213577},{"_id":"source/images/2017-11-30-javascript-float-fault/1130_04.jpg","hash":"4996ccdd9d61eb2cef4e107035f35d1a2779ff75","modified":1512121213577},{"_id":"source/images/2017-11-30-javascript-float-fault/1130_05.jpg","hash":"557e6ebf2529b4270db724b6109be7fa359811c2","modified":1512121213577},{"_id":"source/images/2017-12-01-live/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1512121216042},{"_id":"source/images/2017-11-30-javascript-float-fault/1130_06.jpg","hash":"6ad4ac56b008a0d2cd2a1c06dc1e7a6dadc4d8b4","modified":1512121213578},{"_id":"source/images/2017-11-30-javascript-float-fault/1130_07.jpg","hash":"e173438e131e57915c7823de8a7a153acd4364af","modified":1512121213578},{"_id":"source/images/2017-12-01-live/764764-551e7aa6c8f2b86e.png","hash":"3463f74560a243ae437d5c0eaf6c41b2fcf14e09","modified":1512121216052},{"_id":"source/images/2017-12-01-live/c19343ac6b031af7s.png","hash":"a6409d2e29e55449e16baa2664e45c29d691d6e4","modified":1512121216054},{"_id":"source/images/2017-12-01-live/edf1708baf6fbc90s.png","hash":"8d24204b320497c6fb649b13a8e6461b0710b4fb","modified":1512121216056},{"_id":"source/images/2017-12-01-live/2835498ab8464e62s.png","hash":"bfa87edf7d04cb3401f06d0f5f0dde819fb82f6e","modified":1512121216048},{"_id":"source/images/2017-12-01-live/14e622f03c4a9193s.png","hash":"a7c331757a1645e7009a27745ce608552c720c4e","modified":1512121216048},{"_id":"source/images/2017-12-01-live/ebf24281ef5b0221s.png","hash":"f05a972078d072e2373f0bda3b1f6e0c87145da5","modified":1512121216056},{"_id":"source/images/2017-12-01-live/2d4844429b6c24c5s.png","hash":"569f160d982b1d4f25f65b49cc7c2e4c4e92257e","modified":1512121216051},{"_id":"source/images/2017-12-01-live/aed1d13465cd5422s.png","hash":"785e22ac0343f7581a51401ae1a9f479e9595b6e","modified":1512121216053},{"_id":"source/images/2017-12-01-live/fbd49eed2bd3f92es.png","hash":"f4b0efe1efa47970180270c66259c2c4c5387538","modified":1512121216059},{"_id":"source/images/2017-12-01-live/0b20b027406625d2s.png","hash":"7575bbeaf390d1af7793147ccbc375e2a0758777","modified":1512121216045}],"Category":[{"name":"翻译","_id":"cjanoknh80004jxs1zl3svnv5"},{"name":"JavaScript","_id":"cjanokni5000sjxs1rx5tlgxz"},{"name":"网络安全","_id":"cjanoknid0012jxs1m76toxnn"},{"name":"Node.js","_id":"cjanokniq001hjxs1t0c61fh6"},{"name":"后端","_id":"cjanoknj50024jxs1l61b9nqb"},{"name":"前端","_id":"cjanoknj9002cjxs1n68c128m"},{"name":"招聘","_id":"cjanoknjl002ijxs1mpz0kpa0"},{"name":"技术预研","_id":"cjanoknjr002qjxs1bpqotzdi"},{"name":"分享会直播","_id":"cjanoknjv002zjxs11ylklqz2"},{"name":"读书笔记","_id":"cjanoknko0040jxs1mbv4l99e"}],"Data":[],"Page":[{"title":"分类","date":"2016-08-04T13:55:14.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-08-04 21:55:14\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-12-01T08:50:00.255Z","path":"categories/index.html","layout":"page","_id":"cjanokngn0001jxs1xxtslxk1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2016-08-04T13:57:14.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-08-04 21:57:14\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-12-01T08:50:00.342Z","path":"tags/index.html","layout":"page","_id":"cjanoknh60003jxs1rr923xf1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"AlanZhang","author":"AlanZhang","date":"2016-11-01T13:22:00.000Z","type":"page","comments":0,"_content":"\nAlanZhang 富途网络前端工程师 \n\n**个人评价**\n\n看起来有点严肃无趣，其实很逗逼；谨慎、危机意识强！\n\n**个人爱好**\n\n爬山、徒步、骑车、唱歌、横笛(初级)\n\n**座右铭**\n\n- 生活的意义在于总结，而不在于枚举！\n- 我走的很慢，但我从不后退！\n\n**平时学习的一些东西在这里：**\n- Github: [AlanZhang](https://github.com/AlanZhang001)\n\n**个人照**\n\n<img src=\"/images/alanzhang/alanzhang.jpg\" style=\"width:60%\" />\n图片来自好友Mr.Gao拍摄，于梧桐山绿道","source":"author/AlanZhang/index.md","raw":"---\ntitle: AlanZhang\nauthor: AlanZhang\ndate: 2016-11-01 21:22\ntype: \"page\"\ncomments: false\n---\n\nAlanZhang 富途网络前端工程师 \n\n**个人评价**\n\n看起来有点严肃无趣，其实很逗逼；谨慎、危机意识强！\n\n**个人爱好**\n\n爬山、徒步、骑车、唱歌、横笛(初级)\n\n**座右铭**\n\n- 生活的意义在于总结，而不在于枚举！\n- 我走的很慢，但我从不后退！\n\n**平时学习的一些东西在这里：**\n- Github: [AlanZhang](https://github.com/AlanZhang001)\n\n**个人照**\n\n<img src=\"/images/alanzhang/alanzhang.jpg\" style=\"width:60%\" />\n图片来自好友Mr.Gao拍摄，于梧桐山绿道","updated":"2017-12-01T08:50:00.253Z","path":"author/AlanZhang/index.html","layout":"page","_id":"cjanoknrl0099jxs1g26z8824","content":"<p>AlanZhang 富途网络前端工程师 </p>\n<p><strong>个人评价</strong></p>\n<p>看起来有点严肃无趣，其实很逗逼；谨慎、危机意识强！</p>\n<p><strong>个人爱好</strong></p>\n<p>爬山、徒步、骑车、唱歌、横笛(初级)</p>\n<p><strong>座右铭</strong></p>\n<ul>\n<li>生活的意义在于总结，而不在于枚举！</li>\n<li>我走的很慢，但我从不后退！</li>\n</ul>\n<p><strong>平时学习的一些东西在这里：</strong></p>\n<ul>\n<li>Github: <a href=\"https://github.com/AlanZhang001\" target=\"_blank\" rel=\"noopener\">AlanZhang</a></li>\n</ul>\n<p><strong>个人照</strong></p>\n<p><img src=\"/images/alanzhang/alanzhang.jpg\" style=\"width:60%\"><br>图片来自好友Mr.Gao拍摄，于梧桐山绿道</p>\n","site":{"data":{}},"excerpt":"","more":"<p>AlanZhang 富途网络前端工程师 </p>\n<p><strong>个人评价</strong></p>\n<p>看起来有点严肃无趣，其实很逗逼；谨慎、危机意识强！</p>\n<p><strong>个人爱好</strong></p>\n<p>爬山、徒步、骑车、唱歌、横笛(初级)</p>\n<p><strong>座右铭</strong></p>\n<ul>\n<li>生活的意义在于总结，而不在于枚举！</li>\n<li>我走的很慢，但我从不后退！</li>\n</ul>\n<p><strong>平时学习的一些东西在这里：</strong></p>\n<ul>\n<li>Github: <a href=\"https://github.com/AlanZhang001\" target=\"_blank\" rel=\"noopener\">AlanZhang</a></li>\n</ul>\n<p><strong>个人照</strong></p>\n<p><img src=\"/images/alanzhang/alanzhang.jpg\" style=\"width:60%\"><br>图片来自好友Mr.Gao拍摄，于梧桐山绿道</p>\n"},{"title":"Cynthia","author":"Cynthia","date":"2016-11-05T04:10:00.000Z","type":"page","comments":0,"_content":"\nCynthia,一点都不血腥的（认真脸）, 以为自己是学酥，实际是学渣的前端小白，在富途web组努力偷师往学霸目标缓慢前进中...\n\n半个小时后...\n\n哎，对着电脑发呆半个小时，还是不知道怎么写,香菇，蓝廋\n\n只能怪自己没有文采，都不能写出漂漂亮亮的简介\n\n更可怜自己没有颜值，不然可以直接发照片凑篇幅\n\n让我再想想几句凑字数...\n\n好吧，说点正经的\n\n座右铭：好记性不如烂笔头！！（一次又一次跳进同一个坑的血的教训）\n\n不说了，写笔记去了...","source":"author/Cynthia/index.md","raw":"---\ntitle: Cynthia\nauthor: Cynthia\ndate: 2016-11-05 12:10\ntype: \"page\"\ncomments: false\n---\n\nCynthia,一点都不血腥的（认真脸）, 以为自己是学酥，实际是学渣的前端小白，在富途web组努力偷师往学霸目标缓慢前进中...\n\n半个小时后...\n\n哎，对着电脑发呆半个小时，还是不知道怎么写,香菇，蓝廋\n\n只能怪自己没有文采，都不能写出漂漂亮亮的简介\n\n更可怜自己没有颜值，不然可以直接发照片凑篇幅\n\n让我再想想几句凑字数...\n\n好吧，说点正经的\n\n座右铭：好记性不如烂笔头！！（一次又一次跳进同一个坑的血的教训）\n\n不说了，写笔记去了...","updated":"2017-12-01T08:50:00.254Z","path":"author/Cynthia/index.html","layout":"page","_id":"cjanoknrl009ajxs1i7eowzl6","content":"<p>Cynthia,一点都不血腥的（认真脸）, 以为自己是学酥，实际是学渣的前端小白，在富途web组努力偷师往学霸目标缓慢前进中…</p>\n<p>半个小时后…</p>\n<p>哎，对着电脑发呆半个小时，还是不知道怎么写,香菇，蓝廋</p>\n<p>只能怪自己没有文采，都不能写出漂漂亮亮的简介</p>\n<p>更可怜自己没有颜值，不然可以直接发照片凑篇幅</p>\n<p>让我再想想几句凑字数…</p>\n<p>好吧，说点正经的</p>\n<p>座右铭：好记性不如烂笔头！！（一次又一次跳进同一个坑的血的教训）</p>\n<p>不说了，写笔记去了…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Cynthia,一点都不血腥的（认真脸）, 以为自己是学酥，实际是学渣的前端小白，在富途web组努力偷师往学霸目标缓慢前进中…</p>\n<p>半个小时后…</p>\n<p>哎，对着电脑发呆半个小时，还是不知道怎么写,香菇，蓝廋</p>\n<p>只能怪自己没有文采，都不能写出漂漂亮亮的简介</p>\n<p>更可怜自己没有颜值，不然可以直接发照片凑篇幅</p>\n<p>让我再想想几句凑字数…</p>\n<p>好吧，说点正经的</p>\n<p>座右铭：好记性不如烂笔头！！（一次又一次跳进同一个坑的血的教训）</p>\n<p>不说了，写笔记去了…</p>\n"},{"title":"Allen","author":"Allen","date":"2016-12-19T06:27:00.000Z","type":"page","comments":0,"_content":"\n![Avatar](/images/Allen/avatar.jpg)\n\nAllen，前端工程师，就职于富途网络。\n\n喜欢JS, 有点懒, 爱运动, 爱抽疯\n\n- 博客 孵化中……\n- Github [@dragonhub](https://github.com/dragonhub)\n\n","source":"author/Allen/index.md","raw":"---\ntitle: Allen\nauthor: Allen\ndate: 2016-12-19 14:27:00\ntype: \"page\"\ncomments: false\n---\n\n![Avatar](/images/Allen/avatar.jpg)\n\nAllen，前端工程师，就职于富途网络。\n\n喜欢JS, 有点懒, 爱运动, 爱抽疯\n\n- 博客 孵化中……\n- Github [@dragonhub](https://github.com/dragonhub)\n\n","updated":"2017-12-01T08:50:00.253Z","path":"author/Allen/index.html","layout":"page","_id":"cjanoknrm009bjxs1003pw2gg","content":"<p><img src=\"/images/Allen/avatar.jpg\" alt=\"Avatar\"></p>\n<p>Allen，前端工程师，就职于富途网络。</p>\n<p>喜欢JS, 有点懒, 爱运动, 爱抽疯</p>\n<ul>\n<li>博客 孵化中……</li>\n<li>Github <a href=\"https://github.com/dragonhub\" target=\"_blank\" rel=\"noopener\">@dragonhub</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/Allen/avatar.jpg\" alt=\"Avatar\"></p>\n<p>Allen，前端工程师，就职于富途网络。</p>\n<p>喜欢JS, 有点懒, 爱运动, 爱抽疯</p>\n<ul>\n<li>博客 孵化中……</li>\n<li>Github <a href=\"https://github.com/dragonhub\" target=\"_blank\" rel=\"noopener\">@dragonhub</a></li>\n</ul>\n"},{"title":"Diandian","author":"Diandian","date":"2016-10-31T04:10:00.000Z","type":"page","comments":0,"_content":"\n![Avatar](/images/Diandian/avatar.jpg)\n\n工卡照一枚。\n\n前端新手一枚，写JS，喜欢看文学，喜欢画画，喜欢旅游。\n","source":"author/Diandian/index.md","raw":"---\ntitle: Diandian\nauthor: Diandian\ndate: 2016-10-31 12:10\ntype: \"page\"\ncomments: false\n---\n\n![Avatar](/images/Diandian/avatar.jpg)\n\n工卡照一枚。\n\n前端新手一枚，写JS，喜欢看文学，喜欢画画，喜欢旅游。\n","updated":"2017-12-01T08:50:00.254Z","path":"author/Diandian/index.html","layout":"page","_id":"cjanoknrm009cjxs1rp1rxgsi","content":"<p><img src=\"/images/Diandian/avatar.jpg\" alt=\"Avatar\"></p>\n<p>工卡照一枚。</p>\n<p>前端新手一枚，写JS，喜欢看文学，喜欢画画，喜欢旅游。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/Diandian/avatar.jpg\" alt=\"Avatar\"></p>\n<p>工卡照一枚。</p>\n<p>前端新手一枚，写JS，喜欢看文学，喜欢画画，喜欢旅游。</p>\n"},{"title":"Elly","author":"Elly","date":"2016-09-19T05:40:00.000Z","type":"page","comments":0,"_content":"\n\nElly，网名柚子，一名200斤的女程序员，努力减肥中！可惜越减越肥，为了体现程序员改不了bug不罢休的精神，我在增肥的道路上努力减肥！\n\n平时比较宅，情绪波动比较大！\n\n爱玩单机游戏，虽然比较水！\n\n前端比较偏JS方面，喜欢玩一丢丢JS框架，但都不深入！\n\nCSS虽然比较菜，但是希望自己不要放弃治疗！\n\n单身，如有喜欢胖女孩的，可以介绍给我，男女无所谓！哈哈哈哈....(我笑出了声)！\n\n好了，是时候正经的说点什么了。\n\n平时有玩些自己的东西，都放到下边的啥里边了，欢迎点击！\n\n正经的[github](https://github.com/ellyliang)、[博客](http://www.uselessblog.cn)、[Coding](https://coding.net/u/useLess)。\n\n![Elly(柚子)](/images/Elly/elly.jpg)\n","source":"author/Elly/index.md","raw":"---\ntitle: Elly\nauthor: Elly\ndate: 2016-09-19 13:40:00\ntype: \"page\"\ncomments: false\n---\n\n\nElly，网名柚子，一名200斤的女程序员，努力减肥中！可惜越减越肥，为了体现程序员改不了bug不罢休的精神，我在增肥的道路上努力减肥！\n\n平时比较宅，情绪波动比较大！\n\n爱玩单机游戏，虽然比较水！\n\n前端比较偏JS方面，喜欢玩一丢丢JS框架，但都不深入！\n\nCSS虽然比较菜，但是希望自己不要放弃治疗！\n\n单身，如有喜欢胖女孩的，可以介绍给我，男女无所谓！哈哈哈哈....(我笑出了声)！\n\n好了，是时候正经的说点什么了。\n\n平时有玩些自己的东西，都放到下边的啥里边了，欢迎点击！\n\n正经的[github](https://github.com/ellyliang)、[博客](http://www.uselessblog.cn)、[Coding](https://coding.net/u/useLess)。\n\n![Elly(柚子)](/images/Elly/elly.jpg)\n","updated":"2017-12-01T08:50:00.254Z","path":"author/Elly/index.html","layout":"page","_id":"cjanoknrn009djxs1a6otgx5w","content":"<p>Elly，网名柚子，一名200斤的女程序员，努力减肥中！可惜越减越肥，为了体现程序员改不了bug不罢休的精神，我在增肥的道路上努力减肥！</p>\n<p>平时比较宅，情绪波动比较大！</p>\n<p>爱玩单机游戏，虽然比较水！</p>\n<p>前端比较偏JS方面，喜欢玩一丢丢JS框架，但都不深入！</p>\n<p>CSS虽然比较菜，但是希望自己不要放弃治疗！</p>\n<p>单身，如有喜欢胖女孩的，可以介绍给我，男女无所谓！哈哈哈哈….(我笑出了声)！</p>\n<p>好了，是时候正经的说点什么了。</p>\n<p>平时有玩些自己的东西，都放到下边的啥里边了，欢迎点击！</p>\n<p>正经的<a href=\"https://github.com/ellyliang\" target=\"_blank\" rel=\"noopener\">github</a>、<a href=\"http://www.uselessblog.cn\" target=\"_blank\" rel=\"noopener\">博客</a>、<a href=\"https://coding.net/u/useLess\" target=\"_blank\" rel=\"noopener\">Coding</a>。</p>\n<p><img src=\"/images/Elly/elly.jpg\" alt=\"Elly(柚子)\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Elly，网名柚子，一名200斤的女程序员，努力减肥中！可惜越减越肥，为了体现程序员改不了bug不罢休的精神，我在增肥的道路上努力减肥！</p>\n<p>平时比较宅，情绪波动比较大！</p>\n<p>爱玩单机游戏，虽然比较水！</p>\n<p>前端比较偏JS方面，喜欢玩一丢丢JS框架，但都不深入！</p>\n<p>CSS虽然比较菜，但是希望自己不要放弃治疗！</p>\n<p>单身，如有喜欢胖女孩的，可以介绍给我，男女无所谓！哈哈哈哈….(我笑出了声)！</p>\n<p>好了，是时候正经的说点什么了。</p>\n<p>平时有玩些自己的东西，都放到下边的啥里边了，欢迎点击！</p>\n<p>正经的<a href=\"https://github.com/ellyliang\" target=\"_blank\" rel=\"noopener\">github</a>、<a href=\"http://www.uselessblog.cn\" target=\"_blank\" rel=\"noopener\">博客</a>、<a href=\"https://coding.net/u/useLess\" target=\"_blank\" rel=\"noopener\">Coding</a>。</p>\n<p><img src=\"/images/Elly/elly.jpg\" alt=\"Elly(柚子)\"></p>\n"},{"title":"Ivanxiao","author":"Ivanxiao","date":"2017-09-09T01:20:00.000Z","type":"page","comments":0,"_content":"\n\n\nIvanxiao，PHP 后端工程师一枚，目前就职于富途网络。\n\n\n\nComing soon ...\n\n- [博客](https://blog.ricoo.top)\n- [Github](https://github.com/ricoa)\n- [简书](http://www.jianshu.com/u/80f230349cb5) \n\n\n","source":"author/Ivanxiao/index.md","raw":"---\ntitle: Ivanxiao\nauthor: Ivanxiao\ndate: 2017-09-09 09:20:00\ntype: \"page\"\ncomments: false\n---\n\n\n\nIvanxiao，PHP 后端工程师一枚，目前就职于富途网络。\n\n\n\nComing soon ...\n\n- [博客](https://blog.ricoo.top)\n- [Github](https://github.com/ricoa)\n- [简书](http://www.jianshu.com/u/80f230349cb5) \n\n\n","updated":"2017-12-01T08:50:00.254Z","path":"author/Ivanxiao/index.html","layout":"page","_id":"cjanoknrn009ejxs12o8dglol","content":"<p>Ivanxiao，PHP 后端工程师一枚，目前就职于富途网络。</p>\n<p>Coming soon …</p>\n<ul>\n<li><a href=\"https://blog.ricoo.top\" target=\"_blank\" rel=\"noopener\">博客</a></li>\n<li><a href=\"https://github.com/ricoa\" target=\"_blank\" rel=\"noopener\">Github</a></li>\n<li><a href=\"http://www.jianshu.com/u/80f230349cb5\" target=\"_blank\" rel=\"noopener\">简书</a> </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Ivanxiao，PHP 后端工程师一枚，目前就职于富途网络。</p>\n<p>Coming soon …</p>\n<ul>\n<li><a href=\"https://blog.ricoo.top\" target=\"_blank\" rel=\"noopener\">博客</a></li>\n<li><a href=\"https://github.com/ricoa\" target=\"_blank\" rel=\"noopener\">Github</a></li>\n<li><a href=\"http://www.jianshu.com/u/80f230349cb5\" target=\"_blank\" rel=\"noopener\">简书</a> </li>\n</ul>\n"},{"title":"Jin","author":"Jin","date":"2016-11-15T16:00:00.000Z","type":"page","comments":0,"_content":"\n敦促自己，把握时间。秉承：做中学，学中做。\n\n[飞机入口](https://github.com/Yi-love)\n[博客](http://yi-love.github.io/blog/)\n","source":"author/Jin/index.md","raw":"---\ntitle: Jin\nauthor: Jin\ndate: 2016-11-16 00:00:00\ntype: \"page\"\ncomments: false\n---\n\n敦促自己，把握时间。秉承：做中学，学中做。\n\n[飞机入口](https://github.com/Yi-love)\n[博客](http://yi-love.github.io/blog/)\n","updated":"2017-12-01T08:50:00.254Z","path":"author/Jin/index.html","layout":"page","_id":"cjanoknrp009fjxs1doly13u7","content":"<p>敦促自己，把握时间。秉承：做中学，学中做。</p>\n<p><a href=\"https://github.com/Yi-love\" target=\"_blank\" rel=\"noopener\">飞机入口</a><br><a href=\"http://yi-love.github.io/blog/\" target=\"_blank\" rel=\"noopener\">博客</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>敦促自己，把握时间。秉承：做中学，学中做。</p>\n<p><a href=\"https://github.com/Yi-love\" target=\"_blank\" rel=\"noopener\">飞机入口</a><br><a href=\"http://yi-love.github.io/blog/\" target=\"_blank\" rel=\"noopener\">博客</a></p>\n"},{"title":"Mark","author":"Mark","date":"2017-08-11T02:00:00.000Z","type":"page","comments":0,"_content":"\n![Avatar](/images/Mark/avatar.jpg)\n\nMark，web 研发工程师，就职于富途网络。\n\n\n\n- 博客 [www.sweetvvck.win](https://www.sweetvvck.win)\n- Email sweetvvck#gmail.com\n- Github [@sweetvvck](https://github.com/sweetvvck)\n- Keep [@程科](https://www.gotokeep.com/users/556ce6332c30bd08ae0b3eb2)\n\n","source":"author/Mark/index.md","raw":"---\ntitle: Mark\nauthor: Mark\ndate: 2017-08-11 10:00\ntype: \"page\"\ncomments: false\n---\n\n![Avatar](/images/Mark/avatar.jpg)\n\nMark，web 研发工程师，就职于富途网络。\n\n\n\n- 博客 [www.sweetvvck.win](https://www.sweetvvck.win)\n- Email sweetvvck#gmail.com\n- Github [@sweetvvck](https://github.com/sweetvvck)\n- Keep [@程科](https://www.gotokeep.com/users/556ce6332c30bd08ae0b3eb2)\n\n","updated":"2017-12-01T08:50:00.255Z","path":"author/Mark/index.html","layout":"page","_id":"cjanoknrq009gjxs1nfxq2sf3","content":"<p><img src=\"/images/Mark/avatar.jpg\" alt=\"Avatar\"></p>\n<p>Mark，web 研发工程师，就职于富途网络。</p>\n<ul>\n<li>博客 <a href=\"https://www.sweetvvck.win\" target=\"_blank\" rel=\"noopener\">www.sweetvvck.win</a></li>\n<li>Email sweetvvck#gmail.com</li>\n<li>Github <a href=\"https://github.com/sweetvvck\" target=\"_blank\" rel=\"noopener\">@sweetvvck</a></li>\n<li>Keep <a href=\"https://www.gotokeep.com/users/556ce6332c30bd08ae0b3eb2\" target=\"_blank\" rel=\"noopener\">@程科</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/Mark/avatar.jpg\" alt=\"Avatar\"></p>\n<p>Mark，web 研发工程师，就职于富途网络。</p>\n<ul>\n<li>博客 <a href=\"https://www.sweetvvck.win\" target=\"_blank\" rel=\"noopener\">www.sweetvvck.win</a></li>\n<li>Email sweetvvck#gmail.com</li>\n<li>Github <a href=\"https://github.com/sweetvvck\" target=\"_blank\" rel=\"noopener\">@sweetvvck</a></li>\n<li>Keep <a href=\"https://www.gotokeep.com/users/556ce6332c30bd08ae0b3eb2\" target=\"_blank\" rel=\"noopener\">@程科</a></li>\n</ul>\n"},{"title":"Linda","author":"Linda","date":"2017-04-25T05:05:00.000Z","type":"page","comments":0,"_content":"\n![Avatar](https://avatars0.githubusercontent.com/u/12180536?v=3&u=a0c6d7fe67b881f41c6d5de29329ea2d69944982&s=400)\n\nLinda，前端工程师，在富途码代码。\n\n码过JS，也码过C#。\n\n\n\n- Github [@LindaWhite](https://github.com/LindaWhite)\n\n\n","source":"author/Linda/index.md","raw":"---\ntitle: Linda\nauthor: Linda\ndate: 2017-04-25 13:05:00\ntype: \"page\"\ncomments: false\n---\n\n![Avatar](https://avatars0.githubusercontent.com/u/12180536?v=3&u=a0c6d7fe67b881f41c6d5de29329ea2d69944982&s=400)\n\nLinda，前端工程师，在富途码代码。\n\n码过JS，也码过C#。\n\n\n\n- Github [@LindaWhite](https://github.com/LindaWhite)\n\n\n","updated":"2017-12-01T08:50:00.254Z","path":"author/Linda/index.html","layout":"page","_id":"cjanoknrq009hjxs1po2uva06","content":"<p><img src=\"https://avatars0.githubusercontent.com/u/12180536?v=3&amp;u=a0c6d7fe67b881f41c6d5de29329ea2d69944982&amp;s=400\" alt=\"Avatar\"></p>\n<p>Linda，前端工程师，在富途码代码。</p>\n<p>码过JS，也码过C#。</p>\n<ul>\n<li>Github <a href=\"https://github.com/LindaWhite\" target=\"_blank\" rel=\"noopener\">@LindaWhite</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://avatars0.githubusercontent.com/u/12180536?v=3&amp;u=a0c6d7fe67b881f41c6d5de29329ea2d69944982&amp;s=400\" alt=\"Avatar\"></p>\n<p>Linda，前端工程师，在富途码代码。</p>\n<p>码过JS，也码过C#。</p>\n<ul>\n<li>Github <a href=\"https://github.com/LindaWhite\" target=\"_blank\" rel=\"noopener\">@LindaWhite</a></li>\n</ul>\n"},{"title":"Timi","author":"Timi","date":"2017-04-24T07:37:00.000Z","type":"page","comments":0,"_content":"\nTimi，半路上的全栈工程师，现就职于富途网络。\n\n喜欢狩猎各方面的知识，但产出不多，本质上只是因为我懒。。。\n\n文艺的技术的窝都在下面了~\n\n<section>\n    <h3><a href=\"http://tianq.space\" target=\"_blank\">个人博客</a></h3>\n    <a target=\"_blank\" href=\"http://tianq.space\" style=\"font-size: 18px;letter-spacing: 2px;margin-left: 4em;\">Tianq.space</a>\n</section>\n<section>\n    <h3><a href=\"https://github.com/noodles723\" target=\"_blank\">Github</a></h3>\n    <div class=\"github-card\" data-github=\"noodles723\" data-width=\"\" data-height=\"\" data-theme=\"default\"></div>\n    <script src=\"//cdn.jsdelivr.net/github-cards/latest/widget.js\"></script>\n</section>\n<section>\n    <h3><a href=\"https://www.douban.com/people/58221836\" target=\"_blank\">豆瓣 Douban</a></h3>\n    <script src=\"https://www.douban.com/service/badge/58221836/?selection=random&amp;picsize=small&amp;hideself=on&amp;show=collection&amp;n=20&amp;hidelogo=on&amp;cat=drama%7Cmovie%7Cbook%7Cmusic&amp;columns=8\"></script>\n</section>\n\n","source":"author/Timi/index.md","raw":"---\ntitle: Timi\nauthor: Timi\ndate: 2017-04-24 15:37:00\ntype: \"page\"\ncomments: false\n---\n\nTimi，半路上的全栈工程师，现就职于富途网络。\n\n喜欢狩猎各方面的知识，但产出不多，本质上只是因为我懒。。。\n\n文艺的技术的窝都在下面了~\n\n<section>\n    <h3><a href=\"http://tianq.space\" target=\"_blank\">个人博客</a></h3>\n    <a target=\"_blank\" href=\"http://tianq.space\" style=\"font-size: 18px;letter-spacing: 2px;margin-left: 4em;\">Tianq.space</a>\n</section>\n<section>\n    <h3><a href=\"https://github.com/noodles723\" target=\"_blank\">Github</a></h3>\n    <div class=\"github-card\" data-github=\"noodles723\" data-width=\"\" data-height=\"\" data-theme=\"default\"></div>\n    <script src=\"//cdn.jsdelivr.net/github-cards/latest/widget.js\"></script>\n</section>\n<section>\n    <h3><a href=\"https://www.douban.com/people/58221836\" target=\"_blank\">豆瓣 Douban</a></h3>\n    <script src=\"https://www.douban.com/service/badge/58221836/?selection=random&amp;picsize=small&amp;hideself=on&amp;show=collection&amp;n=20&amp;hidelogo=on&amp;cat=drama%7Cmovie%7Cbook%7Cmusic&amp;columns=8\"></script>\n</section>\n\n","updated":"2017-12-01T08:50:00.255Z","path":"author/Timi/index.html","layout":"page","_id":"cjanoknrr009ijxs1i52qb86w","content":"<p>Timi，半路上的全栈工程师，现就职于富途网络。</p>\n<p>喜欢狩猎各方面的知识，但产出不多，本质上只是因为我懒。。。</p>\n<p>文艺的技术的窝都在下面了~</p>\n<section><br>    <h3><a href=\"http://tianq.space\" target=\"_blank\">个人博客</a></h3><br>    <a target=\"_blank\" href=\"http://tianq.space\" style=\"font-size: 18px;letter-spacing: 2px;margin-left: 4em;\">Tianq.space</a><br></section><br><section><br>    <h3><a href=\"https://github.com/noodles723\" target=\"_blank\">Github</a></h3><br>    <div class=\"github-card\" data-github=\"noodles723\" data-width=\"\" data-height=\"\" data-theme=\"default\"></div><br>    <script src=\"//cdn.jsdelivr.net/github-cards/latest/widget.js\"></script><br></section><br><section><br>    <h3><a href=\"https://www.douban.com/people/58221836\" target=\"_blank\">豆瓣 Douban</a></h3><br>    <script src=\"https://www.douban.com/service/badge/58221836/?selection=random&amp;picsize=small&amp;hideself=on&amp;show=collection&amp;n=20&amp;hidelogo=on&amp;cat=drama%7Cmovie%7Cbook%7Cmusic&amp;columns=8\"></script><br></section>\n\n","site":{"data":{}},"excerpt":"","more":"<p>Timi，半路上的全栈工程师，现就职于富途网络。</p>\n<p>喜欢狩猎各方面的知识，但产出不多，本质上只是因为我懒。。。</p>\n<p>文艺的技术的窝都在下面了~</p>\n<section><br>    <h3><a href=\"http://tianq.space\" target=\"_blank\">个人博客</a></h3><br>    <a target=\"_blank\" href=\"http://tianq.space\" style=\"font-size: 18px;letter-spacing: 2px;margin-left: 4em;\">Tianq.space</a><br></section><br><section><br>    <h3><a href=\"https://github.com/noodles723\" target=\"_blank\">Github</a></h3><br>    <div class=\"github-card\" data-github=\"noodles723\" data-width=\"\" data-height=\"\" data-theme=\"default\"></div><br>    <script src=\"//cdn.jsdelivr.net/github-cards/latest/widget.js\"></script><br></section><br><section><br>    <h3><a href=\"https://www.douban.com/people/58221836\" target=\"_blank\">豆瓣 Douban</a></h3><br>    <script src=\"https://www.douban.com/service/badge/58221836/?selection=random&amp;picsize=small&amp;hideself=on&amp;show=collection&amp;n=20&amp;hidelogo=on&amp;cat=drama%7Cmovie%7Cbook%7Cmusic&amp;columns=8\"></script><br></section>\n\n"},{"title":"Young","author":"Young","date":"2016-11-17T09:05:00.000Z","type":"page","comments":0,"_content":"\n![Avatar](/images/Young/young.png)\n\nYoung，前端工程师，就职于富途网络。\n\n\n- Github [@Young](https://github.com/newbieYoung)\n\n","source":"author/Young/index.md","raw":"---\ntitle: Young\nauthor: Young\ndate: 2016-11-17 17:05:00\ntype: \"page\"\ncomments: false\n---\n\n![Avatar](/images/Young/young.png)\n\nYoung，前端工程师，就职于富途网络。\n\n\n- Github [@Young](https://github.com/newbieYoung)\n\n","updated":"2017-12-01T08:50:00.255Z","path":"author/Young/index.html","layout":"page","_id":"cjanoknrr009jjxs1w5ptj0hr","content":"<p><img src=\"/images/Young/young.png\" alt=\"Avatar\"></p>\n<p>Young，前端工程师，就职于富途网络。</p>\n<ul>\n<li>Github <a href=\"https://github.com/newbieYoung\" target=\"_blank\" rel=\"noopener\">@Young</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/Young/young.png\" alt=\"Avatar\"></p>\n<p>Young，前端工程师，就职于富途网络。</p>\n<ul>\n<li>Github <a href=\"https://github.com/newbieYoung\" target=\"_blank\" rel=\"noopener\">@Young</a></li>\n</ul>\n"},{"title":"TooBug","author":"TooBug","date":"2016-09-25T05:05:00.000Z","type":"page","comments":0,"_content":"\n![Avatar](/images/TooBug/avatar.jpg)\n\nTooBug，前端工程师，就职于富途网络。\n\n各种新的老的有意思的技术都喜欢尝试一下。但是比较遗憾的是，除了JavaScript以外，大多数都掌握得不是太好。\n\n非常重视基础知识，相信基础是一切技术体系的基石。对web前端领域的技术和方向比较关注，喜欢研究前沿技术，比如时下很火的XX和XX（写出来就会过时哒，所以我才不写呢）。\n\n- 博客 [www.toobug.net](https://www.toobug.net)\n- Email i#toobug.net\n- Github [@TooBug](https://github.com/TooBug)\n- 微博 [@TooBug](http://weibo.com/toooobug)\n\n","source":"author/TooBug/index.md","raw":"---\ntitle: TooBug\nauthor: TooBug\ndate: 2016-09-25 13:05:00\ntype: \"page\"\ncomments: false\n---\n\n![Avatar](/images/TooBug/avatar.jpg)\n\nTooBug，前端工程师，就职于富途网络。\n\n各种新的老的有意思的技术都喜欢尝试一下。但是比较遗憾的是，除了JavaScript以外，大多数都掌握得不是太好。\n\n非常重视基础知识，相信基础是一切技术体系的基石。对web前端领域的技术和方向比较关注，喜欢研究前沿技术，比如时下很火的XX和XX（写出来就会过时哒，所以我才不写呢）。\n\n- 博客 [www.toobug.net](https://www.toobug.net)\n- Email i#toobug.net\n- Github [@TooBug](https://github.com/TooBug)\n- 微博 [@TooBug](http://weibo.com/toooobug)\n\n","updated":"2017-12-01T08:50:00.255Z","path":"author/TooBug/index.html","layout":"page","_id":"cjanoknrs009kjxs1srls42ho","content":"<p><img src=\"/images/TooBug/avatar.jpg\" alt=\"Avatar\"></p>\n<p>TooBug，前端工程师，就职于富途网络。</p>\n<p>各种新的老的有意思的技术都喜欢尝试一下。但是比较遗憾的是，除了JavaScript以外，大多数都掌握得不是太好。</p>\n<p>非常重视基础知识，相信基础是一切技术体系的基石。对web前端领域的技术和方向比较关注，喜欢研究前沿技术，比如时下很火的XX和XX（写出来就会过时哒，所以我才不写呢）。</p>\n<ul>\n<li>博客 <a href=\"https://www.toobug.net\" target=\"_blank\" rel=\"noopener\">www.toobug.net</a></li>\n<li>Email i#toobug.net</li>\n<li>Github <a href=\"https://github.com/TooBug\" target=\"_blank\" rel=\"noopener\">@TooBug</a></li>\n<li>微博 <a href=\"http://weibo.com/toooobug\" target=\"_blank\" rel=\"noopener\">@TooBug</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/TooBug/avatar.jpg\" alt=\"Avatar\"></p>\n<p>TooBug，前端工程师，就职于富途网络。</p>\n<p>各种新的老的有意思的技术都喜欢尝试一下。但是比较遗憾的是，除了JavaScript以外，大多数都掌握得不是太好。</p>\n<p>非常重视基础知识，相信基础是一切技术体系的基石。对web前端领域的技术和方向比较关注，喜欢研究前沿技术，比如时下很火的XX和XX（写出来就会过时哒，所以我才不写呢）。</p>\n<ul>\n<li>博客 <a href=\"https://www.toobug.net\" target=\"_blank\" rel=\"noopener\">www.toobug.net</a></li>\n<li>Email i#toobug.net</li>\n<li>Github <a href=\"https://github.com/TooBug\" target=\"_blank\" rel=\"noopener\">@TooBug</a></li>\n<li>微博 <a href=\"http://weibo.com/toooobug\" target=\"_blank\" rel=\"noopener\">@TooBug</a></li>\n</ul>\n"}],"Post":[{"title":"【译】下一代CSS--CSS自定义属性(CSS变量)使用","date":"2017-04-24T02:30:00.000Z","author":"Jin","_content":"\n今日，在web开发中使用css预处理器已经成为一种标准。预处理器其中最大的优势就是可以让开发者自定属性。\n这可以有效的帮助你避免复制和粘贴代码，并且它简化了开发和重构。\n\n我们使用预处理器来保存颜色，字体参数，布局详情 -- 一些我们在CSS中经常使用到的东西。\n\n但是预处理器变了有一些不足之处：\n1. 你不能动态的改变它们；\n2. 它们没有`DOM`结构方面的能力；\n3. 它们不能被`JavaScript`读取和改变。\n\n作为这些和其他问题的银弹,社区发明CSS自定义属性。本质上，它们看起来和工作都很像`CSS`变量，命名也是非常的语义化。\n\n自定义属性为web开发开辟了一片新的天地。\n\n进一步阅读:\n* [自定义元素详细介绍](https://www.smashingmagazine.com/2014/03/introduction-to-custom-elements/)\n* [Houdini: 你可能没有听过那些在`CSS`开发中令人兴奋的事](https://www.smashingmagazine.com/2016/03/houdini-maybe-the-most-exciting-development-in-css-youve-never-heard-of/)\n* [加速你的页面的11个技巧：你需要知道所有关于谷歌加速移动页面的技巧](https://www.smashingmagazine.com/2016/02/everything-about-google-accelerated-mobile-pages/)\n* [一个更好的iOS架构:深入理解模型-视图-控制器模式](https://www.smashingmagazine.com/2016/05/better-architecture-for-ios-apps-model-view-controller-pattern/)\n\n<!-- more -->\n\n## 语法：自定义属性声明和使用\n最普遍的问题就是当你学习一个新的预处理器或者一个新框架的时候都必须去学习新的语法。\n\n每个预处理器都会使用不同的方式去声明变量。通常，都会以一个通配符开始--例如，Sass的`$`和LESS的`@`。\n\nCSS自定义属性已相同的方式并且以`--`开头引入一个声明属性。但好处是你只需学习这个语法一次并且它是跨浏览器的。\n\n你可能会问，“为什么不使用一个已经存在的语法？”\n\n[查看原因](http://www.xanthir.com/blog/b4KT0)，简单来说，它提供了一个方式来使用自定义属性在任何的预处理器中。这种方式，我们可以提供和使用自定义属性，并且我们的预处理器将不会编译它们，所以这些属性将会被直接输出到CSS中。并且你可以在预处理器复用这些原生的每一个变量，我将在下文进行描述。\n\n> 关于这个名字：因为寓意和目标非常相似，有时候自定义属性被叫做CSS变量，虽然正确的名字是CSS自定义属性，继续阅读，你会发现这样描述它们会更好。\n\n所以，定义一个变量而不是一个普通的CSS属性如`color`或者`padding`,只需要提供一个自定义名称属性以`--`开头：\n\n```css\n.box{\n  --box-color:#4d4e53;\n  --box-padding:0 10px;\n}\n```\n\n属性的值可以是任意有效的CSS值：颜色，字符串，布局值，甚至是表达式。\n\n有效的自定义属性例子：\n\n```css\n:root{\n  --main-color: #4d4e53;\n  --main-bg: rgb(255, 255, 255);\n  --logo-border-color: rebeccapurple;\n\n  --header-height: 68px;\n  --content-padding: 10px 20px;\n\n  --base-line-height: 1.428571429;\n  --transition-duration: .35s;\n  --external-link: \"external link\";\n  --margin-top: calc(2vh + 20px);\n\n  /* Valid CSS custom properties can be reused later in, say, JavaScript. */\n  --foo: if(x > 5) this.width = 10;\n}\n```\n\n这个案例中你不能保证`:root`会被匹配到，在HTML的那些具有更高特性的`html`中会被匹配到。\n\n与其它的CSS属性相比，自定义属性有相同的层级关系但是是动态的。这意味着他们可以随时改变,并且由浏览器来处理相应的改变。\n\n使用变量的时候，你必须使用CSS的`var()`函数并且传入对应的属性名称：\n\n```css\n.box{\n  --box-color:#4d4e53;\n  --box-padding: 0 10px;\n\n  padding: var(--box-padding);\n}\n.box div{\n  color: var(--box-color);\n}\n```\n\n### 变量声明及使用案例\n`var()`函数有一种方便的使用方式可以提供默认值。假如你不确定自定义属性什么时候被定义并且需要提供一个值作为后备时你就应该使用。很简单只需要传入第二个参数即可：\n\n```css\n.box{\n  --box-color:#4d4e53;\n  --box-padding: 0 10px;\n  /* 10px is used because --box-margin is not defined. */\n  margin: var(--box-margin, 10px);\n}\n```\n\n和你想的一样，你可以覆盖原有变量的声明为新的变量：\n\n```css\n.box{\n  /* The --main-padding variable is used if --box-padding is not defined. */\n  padding: var(--box-padding, var(--main-padding));\n  --box-text: 'This is my box';\n  /* Equal to --box-highlight-text:'This is my box with highlight'; */\n  --box-highlight-text: var(--box-text)' with highlight';\n}\n```\n\n## 操作符: +, -, *, /\n我们在对变量进行操作时想使用基本的操作，这与我们习惯了的预处理器和其他语言一样。对于这个，CSS提供了`calc()`函数，这使得浏览器会在自定义属性的值发生改变的时候重新执行表达式：\n\n```css\n:root{\n  --indent-size: 10px;\n  --indent-xl: calc(2*var(--indent-size));\n  --indent-l: calc(var(--indent-size) + 2px);\n  --indent-s: calc(var(--indent-size) - 2px);\n  --indent-xs: calc(var(--indent-size)/2);\n}\n```\n\n如果你试着使用少单位的值这是有问题的。但是，`calc()`比较友好，会正常执行，`var()`不会执行：\n\n```css\n:root{\n  --spacer: 10;\n}\n.box{\n  padding: var(--spacer)px 0; /* DOESN'T work */\n  padding: calc(var(--spacer)*1px) 0; /* WORKS */\n}\n```\n\n## 作用域和继承\n在开始讨论CSS自定义属性的作用域，先让我们回顾一下JavaScript和预处理器的作用域，这样可以更好的理解其中的不同。\n\n我们知道，例如，JavaScript变量（`var`）, 函数限制作用范围。\n\n使用`let`和`const`我们有一个类似的情况，但是它们是局部的块级作用域变量。\n\n一个`JavaScript`闭包可用访问外部的函数变量--作用域链。闭包有3个作用域链，它可以通过以下方式：\n\n* 自己的作用域\n* 外部函数作用域变量\n* 全局作用域变量\n\n![javaScript closure](/images/2017-04-24-css-custom-properties/0422_01.jpg)\n\n这个比喻和预处理器很相似。让我们来使用一下Sass因为今天它可能已经很普遍了。\n\n在Sass中，有2种类型的变量：本地和全局。\n\n一个全局变量可以被声明以为的任意选择器或者方式使用（例如：`mixin`）。另外，其它变量为局部变量。\n\n任何嵌套块代码可以访问上级变量（在 JavaScript中）。\n\n![sass variable](/images/2017-04-24-css-custom-properties/0422_02.jpg)\n\n这就意味着，在Sass中,变量的作用域完全依赖于代码的结构。\n\n然而，CSS自定义属性默认是继承的，就像其它的CSS属性一样，通过它们的级联关系。\n\n你通常不可能会有一个自定义属性的全局变量是声明在选择器之外的--这是无效的在CSS里。自定义的CSS属性的全局作用域是定义在`:root`中的，因此属性是全局有效的。\n\n让我们使用自己的语法知识来编写HTML和CSS的Sass案例。我们将使用原生的CSS自定义属性创建demo。首先HTML:\n\n```html\nglobal\n<div class=\"enclosing\">\n  enclosing\n  <div class=\"closure\">\n    closure\n  </div>\n</div>\n```\n\n这是对应的CSS:\n\n```css\n:root {\n  --globalVar: 10px;\n}\n.enclosing {\n  --enclosingVar: 20px;\n}\n.enclosing .closure {\n  --closureVar: 30px;\n  font-size: calc(var(--closureVar) + var(--enclosingVar) + var(--globalVar));\n  /* 60px for now */\n}\n```\n\n### 自定义属性更改会立即应用到所有实例\n到目前为止,我们还没有看到任何和Sass变量不同的地方。然而,让我们在使用变量后重新给他赋值：\n\n在这个Sass案例中，这没有影响：\n\n```sass\n$closureVar: 30px; // local variable\nfont-size: $closureVar +$enclosingVar+ $globalVar;\n// 60px, $closureVar: 30px is used\n$closureVar: 50px; // local variable\n```\n\n但是在CSS中，计算的值会改变，因为`font-size`的值时重新计算的通过改变`--closureVar`的值：\n\n```css\n.enclosing .closure {\n  --closureVar: 30px;\n  font-size: calc(var(--closureVar) + var(--enclosingVar) + var(--globalVar));\n  /* 80px for now, --closureVar: 50px is used */\n  --closureVar: 50px;\n}\n```\n\n这是第一个巨大的差异：如果你重新给一个自定义属性赋值，浏览器会重新计算所有的变量并且`calc()`表达式会被调用。\n\n### 预处理器不会和DOM结构有关联关系\n假设我们想要使用的默认`font-size`字体大小,除了`highlighted`class存在的地方。\n\nHTML这样写:\n```html\n<div class=\"default\">\n  default\n</div>\n<div class=\"default highlighted\">\n  default highlighted\n</div>\n```\n\nCSS我们使用自定义属性：\n\n```css\n.highlighted {\n  --highlighted-size: 30px;\n}\n.default {\n  --default-size: 10px;\n  /* Use default-size, except when highlighted-size is provided. */\n  font-size: var(--highlighted-size, var(--default-size));\n}\n```\n\n因为第二个HTML元素的`default`的class后面紧跟着`highlighted`class，`highlighted`class里面的属性会被应用到元素上。\n\n这个案例中，意味着`--highlighted-size: 30px;`将被应用，也就是说`font-size`属性将使用`--highlighted-size`的值。\n\n现在,让我们尝试使用Sass实现同样的事情:\n\n```sass\n.highlighted {\n  $highlighted-size: 30px;\n}\n.default {\n  $default-size: 10px;\n  /* Use default-size, except when highlighted-size is provided. */\n  @if variable-exists(highlighted-size) {\n    font-size: $highlighted-size;\n  }\n  @else {\n    font-size: $default-size;\n  }\n}\n```\n\n这是因为所有Sass计算和处理发生在编译时间,当然,它不知道任何关于DOM结构,完全依赖于代码的结构。\n\n就像你看到的一样，自定义属性在变量作用域和CSS属性添加到级联关系中都是有优势，DOM结构关联以及遵循CSS规则和其它属性一样。\n\n\n第二部分我们要讨论的话题是DOM结构关联和动态性。\n\n## CSS-关键词和`all`属性\nCSS自定义属性是服从相同的CSS规则在使用CSS自定义属性的时候。这意味着你可以分配人意的通用的CSS关键字给它：\n\n* `inherit`\n    使用这个CSS关键字的值将继承父亲元素\n*  `initial`\n    这个值在CSs文档中有详细描述（在这个案例中自定义属性是空的值）\n*  `unset`\n    使用这个继承的值如果属性是普通继承（在案例中是自定义属性）或者初始化值如果属性没有使用继承。\n*  `revert`\n    这个重置属性默认值建立在客户端的样式表上（在这个案例中自定义属性是空的值）\n\n这里有个例子：\n\n```css\n.common-values{\n  --border: inherit;\n  --bgcolor: initial;\n  --padding: unset;\n  --animation: revert;\n}\n```\n\n考虑其它案例。假设你想创建一个组件并且想确认没有其它的样式或自定义属性被无意的应用到这里（一个模块化的CSS解决方案在这种情况下通常被用于样式）\n\n但是现在这里有另外的方式：使用`all`[CSS属性](https://developer.mozilla.org/en/docs/Web/CSS/all)。这可以快速重置CSS属性。\n\n同样使用CSS关键字，我们可以这样做：\n\n```css\n.my-wonderful-clean-component{\n  all: initial;\n}\n```\n\n这个可以重置我们所有的组件。\n\n不幸的是，`all`关键字[不能重置自定义属性](https://drafts.csswg.org/css-variables/#defining-variables)。有一个[正在进行的讨论](https://github.com/w3c/webcomponents/issues/300#issuecomment-144551648)是否要添加`--`前缀,将重置所有CSS自定义属性。\n\n因此,在未来,一个完整的重置可能是这样的:\n\n```css\n.my-wonderful-clean-component{\n  --: initial; /* reset all CSS custom properties */\n  all: initial; /* reset all other CSS styles */\n}\n```\n\n\n## CSS自定义属性的用例\n有许多使用的自定义属性。我将展示最有趣的。\n\n### 模仿不存在的CSS规则\n这些CSS变量的名称是“自定义属性”,那么为什么不使用它们来模拟不存在的属性呢?\n\n这里有很多: `translateX/Y/Z`,`background-repeat-x/y`(还没有跨浏览器兼容的),`box-shadow-color`。\n\n让我们试着让最后一个属性工作。在我们的案例中，当鼠标放上去的时候改变盒子的影子的颜色。我们只想遵循DRY原则（不重复`boxshadw`属性），所以不会改变`:hover`部分的整个`box-shadow`的值，我们只需要修改自定义属性的值：\n\n```css\n.test {\n  --box-shadow-color: yellow;\n  box-shadow: 0 0 30px var(--box-shadow-color);\n}\n.test:hover {\n  --box-shadow-color: orange;\n  /* Instead of: box-shadow: 0 0 30px orange; */\n}\n```\n\n### 颜色主题\n一个最普遍的案例就是使用自定义属性来定义应用程序的主题颜色。自定义属性可以用来解决这类问题。因此，提供一个简单的颜色主题给组件。\n\n这里是我们[按钮组件的代码](https://codepen.io/malyw/pen/XpRjNK):\n\n```css\n.btn {\n  background-image: linear-gradient(to bottom, #3498db, #2980b9);\n  text-shadow: 1px 1px 3px #777;\n  box-shadow: 0px 1px 3px #777;\n  border-radius: 28px;\n  color: #ffffff;\n  padding: 10px 20px 10px 20px;\n}\n```\n\n假设我们想要切换颜色主题。\n\n首先，我们将所有的颜色变量扩展为自定义CSS属性并且从写我们的组件。因此，[结果是一样的](https://codepen.io/malyw/pen/EZmgmZ)：\n\n```css\n.btn {\n  --shadow-color: #777;\n  --gradient-from-color: #3498db;\n  --gradient-to-color: #2980b9;\n  --color: #ffffff;\n\n  background-image: linear-gradient(\n    to bottom,\n    var(--gradient-from-color),\n    var(--gradient-to-color)\n  );\n  text-shadow: 1px 1px 3px var(--shadow-color);\n  box-shadow: 0px 1px 3px var(--shadow-color);\n  border-radius: 28px;\n  color: var(--color);\n  padding: 10px 20px 10px 20px;\n}\n```\n\n这一切是我们所需要的。这样，我们可以覆盖颜色变量为指定的切换颜色并且在需要的时候应用它们。例如，我们可以添加一个全局的切换HTML主题的`inverted`的class（添加在`body`元素）并且在应用的时候改变颜色：\n\n```css\nbody.inverted .btn{\n  --shadow-color: #888888;\n  --gradient-from-color: #CB6724;\n  --gradient-to-color: #D67F46;\n  --color: #000000;\n}\n```\n\n这中行为在不能有重复代码的前提下CSS预处理器是没办法实现的。预处理器,你总是需要覆盖的实际值和规则,这经常导致额外的CSS。\n\nCSS自定义属性,解决方案是尽可能的干净,避免复制和粘贴,因为只重新定义变量的值。\n\n\n## 在JavaScript中使用CSS自定义属性\n以前，从CSS发送数据到JavaScript时,我们常常不得不求助于[技巧](https://blog.hospodarets.com/passing_data_from_sass_to_js),通过写入纯CSS的JSON格式的值,然后从JavaScript读取它。\n\n现在,我们可以很容易地使用JavaScript读取CSS变量，分别使用我们熟知的`.getPropertyValue()`方法和`.setProperty()`方法进行读取和写入，像平常的CSS属性一样使用:\n\n```js\n/**\n* Gives a CSS custom property value applied at the element\n* element {Element}\n* varName {String} without '--'\n*\n* For example:\n* readCssVar(document.querySelector('.box'), 'color');\n*/\nfunction readCssVar(element, varName){\n  const elementStyles = getComputedStyle(element);\n  return elementStyles.getPropertyValue(`--${varName}`).trim();\n}\n\n/**\n* Writes a CSS custom property value at the element\n* element {Element}\n* varName {String} without '--'\n*\n* For example:\n* readCssVar(document.querySelector('.box'), 'color', 'white');\n*/\nfunction writeCssVar(element, varName, value){\n  return element.style.setProperty(`--${varName}`, value);\n}\n```\n\n假设我们有一个媒体查询列表值:\n\n```css\n.breakpoints-data {\n  --phone: 480px;\n  --tablet: 800px;\n}\n```\n\n因为我们只是想重用它们在JavaScript中——例如,在`Window.matchMedia()`,我们可以很容易地从CSS中获取它们:\n\n```js\nconst breakpointsData = document.querySelector('.breakpoints-data');\n\n// GET\nconst phoneBreakpoint = getComputedStyle(breakpointsData)\n  .getPropertyValue('--phone');\n```\n\nJavaScript如何操控自定义属性,我创建了一个交互式3D的CSS立方体演示,响应用户的操作。\n\n它不是很困难。我们只需要添加一个简单的背景颜色，然后将五个立方体面临的相关值进行变换使用`transform`属性:`translateZ()`,`translateY()`,`rotateX()`和`rotateY()`。\n\n为了提供正确的视角,我添加了一个页面容器:\n\n```css\n#world{\n  --translateZ:0;\n  --rotateX:65;\n  --rotateY:0;\n\n  transform-style:preserve-3d;\n  transform:\n    translateZ(calc(var(--translateZ) * 1px))\n    rotateX(calc(var(--rotateX) * 1deg))\n    rotateY(calc(var(--rotateY) * 1deg));\n}\n```\n\n唯一缺少的是交互性。demo在鼠标移动的时候需要改变X和Y视角（`--rotateX` 和 `--rotateY`)并且鼠标滚动时要放大和缩小(`--translateZ`)。\n\n这是JavaScript的代码:\n\n```js\n// Events\nonMouseMove(e) {\n  this.worldXAngle = (.5 - (e.clientY / window.innerHeight)) * 180;\n  this.worldYAngle = -(.5 - (e.clientX / window.innerWidth)) * 180;\n  this.updateView();\n};\nonMouseWheel(e) {\n  /*…*/\n\n  this.worldZ += delta * 5;\n  this.updateView();\n};\n// JavaScript -> CSS\nupdateView() {\n  this.worldEl.style.setProperty('--translateZ', this.worldZ);\n  this.worldEl.style.setProperty('--rotateX', this.worldXAngle);\n  this.worldEl.style.setProperty('--rotateY', this.worldYAngle);\n};\n```\n\n从本质上讲,我们已经改变了CSS自定义属性的值。其他(旋转和缩放)是由CSS。\n\n提示：一个最简单的办法调试CSS自定义属性的值就是把它的值展示到当前的CSS内容里面（例如字符串),那么浏览器将自动显示当前应用的值：\n\n```css\nbody:after {\n  content: '--screen-category : 'var(--screen-category);\n}\n```\n\n你可以查看这个[CSS演示](https://codepen.io/malyw/pen/oBWMOY)(没有HTML或JavaScript)。(调整窗口的浏览器自动反映CSS定义属性值更改。)\n\n## 浏览器支持\n[所有的主流浏览器已经支持](http://caniuse.com/#feat=css-variables)CSS自定义属性：\n\n![css-variables](/images/2017-04-24-css-custom-properties/0422_03.jpg)\n\n\n意味着,你可以开始使用它们。\n\n如果你需要支持老式浏览器,你可以学习语法和用法示例,考虑可能的切换方法或同时使用CSS自定义属性和预处理器变量。\n\n\n当然,我们需要能够检测支持CSS和JavaScript提供后备或增强。\n\n这是很简单的。对于CSS,可以使用一个虚拟`@supports[条件](https://developer.mozilla.org/en/docs/Web/CSS/@supports)查询功能:\n\n```css\n@supports ( (--a: 0)) {\n  /* supported */\n}\n@supports ( not (--a: 0)) {\n  /* not supported */\n}\n```\n\n在JavaScript中,可以使用相同的CSS.supports()静态方法查询自定义属性:\n\n```js\nconst isSupported = window.CSS &&\n    window.CSS.supports && window.CSS.supports('--a', 0);\n\nif (isSupported) {\n  /* supported */\n} else {\n  /* not supported */\n}\n```\n\n我们看到,CSS自定义属性仍然不支持所有的浏览器。知道了这一点,你可以逐步提高你的应用程序通过检查它们是否支持CSS自定义属性。\n\n例如，你可以生成2份CSS文件：一份包含CSS自定义属性另一份不包含它们，在内联属性中(不久我们将讨论)。\n\n\n默认加载没有包含CSS自定义属性的样式的文件。然后通过JavaScript判断是否支持CSS自定义属性来进行切换版本：\n\n```html\n<!-- HTML -->\n<link href=\"without-css-custom-properties.css\"\n    rel=\"stylesheet\" type=\"text/css\" media=\"all\" />\n```\n\n```js\n// JavaScript\nif(isSupported){\n  removeCss('without-css-custom-properties.css');\n  loadCss('css-custom-properties.css');\n  // + conditionally apply some application enhancements\n  // using the custom properties\n}\n```\n\n这只是一个例子。下面您将看到,有更好的选择。\n\n## 怎么开始使用它们\n根据最近的[调查](https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results),Sass依然是开发社区预处理器的首选。\n\n因此,让我们考虑如何开始在Sass中使用CSS自定义属性使或准备它们。\n\n我们有以下选择。\n\n### 1.手动检查代码的支持\n这个方法的一个优点的手动检查代码是否支持自定义属性是它工作,我们现在能做的就是使用这个方法(别忘了我们现在在使用Sass):\n\n```sass\n$color: red;\n:root {\n  --color: red;\n}\n.box {\n  @supports ( (--a: 0)) {\n    color: var(--color);\n  }\n  @supports ( not (--a: 0)) {\n    color: $color;\n  }\n}\n```\n\n这个方法有许多缺点,尤其是代码变得复杂,并复制和粘贴变得相当难以维护。\n\n\n### 2.使用一个插件,自动生成目标CSS\n今天PostCSS生态系统提供了很多的插件。一半以上的对自定义属性都可以保证输出的CSS正常工作，假设你只提供全局变量(即你只声明或改变CSS内自定义属性`:root`选择器),所以他们的值很容易内联化。\n\n\n案例：[postcss-custom-properties](https://github.com/postcss/postcss-custom-properties).\n\n这个插件提供了几个优点:它使语法工作;PostCSS兼容所有的基础设施,它不需要配置。\n\n然而，这也有缺点。这个插件需要您使用CSS定义属性，所以，而你的项目并没有准备从使用Sass变量中切换过来。同样,你不会有多大的控制转换,因为它是在Sass完成编译之后操作CSS。最后，插件没有提供很多的调试信息。\n\n\n### 3.[CSS-VARS MIXIN](https://github.com/malyw/css-vars)\n在我的大多数项目中，我已经开始使用CSS自定义属性并且尝试了许多策略:\n\n1. 从Sass切换到下一代CSS在使用PostCss前提下。\n2. 从Sass变量转换到纯CSS自定义属性。\n3. 使用CSS变量Sass检测它们是否支持。\n\n根据以上的经验,我开始寻找一个解决方案,来满足我的要求:\n\n1. 在Sass中需要使用简单。\n2. 它应该直接使用,语法必须尽可能接近原生CSS自定义属性。\n3. 内联CSS输出值切换到CSS变量应该很容易。\n4. 团队成员熟悉CSS可以使用自定义属性的解决方案。\n5. 应该有一个方法对使用的变量的边界情况有调试信息。\n\n因此,我创建了`css-vars`,`Sass mixin`,你可以在[Github上](https://github.com/malyw/css-vars)找到。使用它,你可以开始使用CSS自定义属性的语法。\n\n\n## 使用css-vars Mixin\n声明变量(s),使用mixin如下:\n\n```sass\n$white-color: #fff;\n$base-font-size: 10px;\n\n@include css-vars((\n  --main-color: #000,\n  --main-bg: $white-color,\n  --main-font-size: 1.5*$base-font-size,\n  --padding-top: calc(2vh + 20px)\n));\n```\n\n使用这些变量,使用var()函数:\n\n```css\nbody {\n  color: var(--main-color);\n  background: var(--main-bg, #f00);\n  font-size: var(--main-font-size);\n  padding: var(--padding-top) 0 10px;\n}\n```\n\n这给了你一种可以控制CSS都是从一个文件输出的能力(从Sass)并开始熟悉语法。另外,您可以重用Sass变量与mixin和逻辑。\n\n当你想要支持的浏览器使用CSS变量,那么所有你要做的就是在Sass中添加支持:\n\n```sass\n$css-vars-use-native: true;\n```\n\n而不是在完成编译的CSS中调整,因为mixin将开始注册自定义属性,var()实例产生的CSS没有任何转换。这意味着你必须完全转向CSS定制属性,我们已经讨论了所有的优势。\n\n如果你想打开有用的调试信息,添加以下:\n\n```sass\n$css-vars-debug-log: true;\n```\n\n这将给你:\n\n* 使用未定义变量，写log。\n* 重新分配变量时，写log。\n* 当一个变量没有定义但传递使用默认值，打印信息。\n\n\n## 结论\n现在你知道更多关于CSS的自定义属性，包括它的语法，优势，以及好的使用案例和如何使用JavaScript进行交互。\n\n您已经了解了如何检测他们是否支持,它们与CSS预处理器变量的不同，和如何使用CSS变量直到它们支持跨浏览器。\n\n这是正确的时间开始使用CSS自定义属性和准备在浏览器中使用它们。\n\n原文：[https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/](https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/)\n\n译者：[Jin](https://github.com/Yi-love)\n\n作者：[Serg Hospodarets](https://www.smashingmagazine.com/author/serghospodarets/)\n\n","source":"_posts/2017-04-24-css-custom-properties.md","raw":"---\ntitle: 【译】下一代CSS--CSS自定义属性(CSS变量)使用\ndate: 2017-04-24 10:30\ncategory: 翻译\ntags: [CSS,技术]\nauthor: Jin\n---\n\n今日，在web开发中使用css预处理器已经成为一种标准。预处理器其中最大的优势就是可以让开发者自定属性。\n这可以有效的帮助你避免复制和粘贴代码，并且它简化了开发和重构。\n\n我们使用预处理器来保存颜色，字体参数，布局详情 -- 一些我们在CSS中经常使用到的东西。\n\n但是预处理器变了有一些不足之处：\n1. 你不能动态的改变它们；\n2. 它们没有`DOM`结构方面的能力；\n3. 它们不能被`JavaScript`读取和改变。\n\n作为这些和其他问题的银弹,社区发明CSS自定义属性。本质上，它们看起来和工作都很像`CSS`变量，命名也是非常的语义化。\n\n自定义属性为web开发开辟了一片新的天地。\n\n进一步阅读:\n* [自定义元素详细介绍](https://www.smashingmagazine.com/2014/03/introduction-to-custom-elements/)\n* [Houdini: 你可能没有听过那些在`CSS`开发中令人兴奋的事](https://www.smashingmagazine.com/2016/03/houdini-maybe-the-most-exciting-development-in-css-youve-never-heard-of/)\n* [加速你的页面的11个技巧：你需要知道所有关于谷歌加速移动页面的技巧](https://www.smashingmagazine.com/2016/02/everything-about-google-accelerated-mobile-pages/)\n* [一个更好的iOS架构:深入理解模型-视图-控制器模式](https://www.smashingmagazine.com/2016/05/better-architecture-for-ios-apps-model-view-controller-pattern/)\n\n<!-- more -->\n\n## 语法：自定义属性声明和使用\n最普遍的问题就是当你学习一个新的预处理器或者一个新框架的时候都必须去学习新的语法。\n\n每个预处理器都会使用不同的方式去声明变量。通常，都会以一个通配符开始--例如，Sass的`$`和LESS的`@`。\n\nCSS自定义属性已相同的方式并且以`--`开头引入一个声明属性。但好处是你只需学习这个语法一次并且它是跨浏览器的。\n\n你可能会问，“为什么不使用一个已经存在的语法？”\n\n[查看原因](http://www.xanthir.com/blog/b4KT0)，简单来说，它提供了一个方式来使用自定义属性在任何的预处理器中。这种方式，我们可以提供和使用自定义属性，并且我们的预处理器将不会编译它们，所以这些属性将会被直接输出到CSS中。并且你可以在预处理器复用这些原生的每一个变量，我将在下文进行描述。\n\n> 关于这个名字：因为寓意和目标非常相似，有时候自定义属性被叫做CSS变量，虽然正确的名字是CSS自定义属性，继续阅读，你会发现这样描述它们会更好。\n\n所以，定义一个变量而不是一个普通的CSS属性如`color`或者`padding`,只需要提供一个自定义名称属性以`--`开头：\n\n```css\n.box{\n  --box-color:#4d4e53;\n  --box-padding:0 10px;\n}\n```\n\n属性的值可以是任意有效的CSS值：颜色，字符串，布局值，甚至是表达式。\n\n有效的自定义属性例子：\n\n```css\n:root{\n  --main-color: #4d4e53;\n  --main-bg: rgb(255, 255, 255);\n  --logo-border-color: rebeccapurple;\n\n  --header-height: 68px;\n  --content-padding: 10px 20px;\n\n  --base-line-height: 1.428571429;\n  --transition-duration: .35s;\n  --external-link: \"external link\";\n  --margin-top: calc(2vh + 20px);\n\n  /* Valid CSS custom properties can be reused later in, say, JavaScript. */\n  --foo: if(x > 5) this.width = 10;\n}\n```\n\n这个案例中你不能保证`:root`会被匹配到，在HTML的那些具有更高特性的`html`中会被匹配到。\n\n与其它的CSS属性相比，自定义属性有相同的层级关系但是是动态的。这意味着他们可以随时改变,并且由浏览器来处理相应的改变。\n\n使用变量的时候，你必须使用CSS的`var()`函数并且传入对应的属性名称：\n\n```css\n.box{\n  --box-color:#4d4e53;\n  --box-padding: 0 10px;\n\n  padding: var(--box-padding);\n}\n.box div{\n  color: var(--box-color);\n}\n```\n\n### 变量声明及使用案例\n`var()`函数有一种方便的使用方式可以提供默认值。假如你不确定自定义属性什么时候被定义并且需要提供一个值作为后备时你就应该使用。很简单只需要传入第二个参数即可：\n\n```css\n.box{\n  --box-color:#4d4e53;\n  --box-padding: 0 10px;\n  /* 10px is used because --box-margin is not defined. */\n  margin: var(--box-margin, 10px);\n}\n```\n\n和你想的一样，你可以覆盖原有变量的声明为新的变量：\n\n```css\n.box{\n  /* The --main-padding variable is used if --box-padding is not defined. */\n  padding: var(--box-padding, var(--main-padding));\n  --box-text: 'This is my box';\n  /* Equal to --box-highlight-text:'This is my box with highlight'; */\n  --box-highlight-text: var(--box-text)' with highlight';\n}\n```\n\n## 操作符: +, -, *, /\n我们在对变量进行操作时想使用基本的操作，这与我们习惯了的预处理器和其他语言一样。对于这个，CSS提供了`calc()`函数，这使得浏览器会在自定义属性的值发生改变的时候重新执行表达式：\n\n```css\n:root{\n  --indent-size: 10px;\n  --indent-xl: calc(2*var(--indent-size));\n  --indent-l: calc(var(--indent-size) + 2px);\n  --indent-s: calc(var(--indent-size) - 2px);\n  --indent-xs: calc(var(--indent-size)/2);\n}\n```\n\n如果你试着使用少单位的值这是有问题的。但是，`calc()`比较友好，会正常执行，`var()`不会执行：\n\n```css\n:root{\n  --spacer: 10;\n}\n.box{\n  padding: var(--spacer)px 0; /* DOESN'T work */\n  padding: calc(var(--spacer)*1px) 0; /* WORKS */\n}\n```\n\n## 作用域和继承\n在开始讨论CSS自定义属性的作用域，先让我们回顾一下JavaScript和预处理器的作用域，这样可以更好的理解其中的不同。\n\n我们知道，例如，JavaScript变量（`var`）, 函数限制作用范围。\n\n使用`let`和`const`我们有一个类似的情况，但是它们是局部的块级作用域变量。\n\n一个`JavaScript`闭包可用访问外部的函数变量--作用域链。闭包有3个作用域链，它可以通过以下方式：\n\n* 自己的作用域\n* 外部函数作用域变量\n* 全局作用域变量\n\n![javaScript closure](/images/2017-04-24-css-custom-properties/0422_01.jpg)\n\n这个比喻和预处理器很相似。让我们来使用一下Sass因为今天它可能已经很普遍了。\n\n在Sass中，有2种类型的变量：本地和全局。\n\n一个全局变量可以被声明以为的任意选择器或者方式使用（例如：`mixin`）。另外，其它变量为局部变量。\n\n任何嵌套块代码可以访问上级变量（在 JavaScript中）。\n\n![sass variable](/images/2017-04-24-css-custom-properties/0422_02.jpg)\n\n这就意味着，在Sass中,变量的作用域完全依赖于代码的结构。\n\n然而，CSS自定义属性默认是继承的，就像其它的CSS属性一样，通过它们的级联关系。\n\n你通常不可能会有一个自定义属性的全局变量是声明在选择器之外的--这是无效的在CSS里。自定义的CSS属性的全局作用域是定义在`:root`中的，因此属性是全局有效的。\n\n让我们使用自己的语法知识来编写HTML和CSS的Sass案例。我们将使用原生的CSS自定义属性创建demo。首先HTML:\n\n```html\nglobal\n<div class=\"enclosing\">\n  enclosing\n  <div class=\"closure\">\n    closure\n  </div>\n</div>\n```\n\n这是对应的CSS:\n\n```css\n:root {\n  --globalVar: 10px;\n}\n.enclosing {\n  --enclosingVar: 20px;\n}\n.enclosing .closure {\n  --closureVar: 30px;\n  font-size: calc(var(--closureVar) + var(--enclosingVar) + var(--globalVar));\n  /* 60px for now */\n}\n```\n\n### 自定义属性更改会立即应用到所有实例\n到目前为止,我们还没有看到任何和Sass变量不同的地方。然而,让我们在使用变量后重新给他赋值：\n\n在这个Sass案例中，这没有影响：\n\n```sass\n$closureVar: 30px; // local variable\nfont-size: $closureVar +$enclosingVar+ $globalVar;\n// 60px, $closureVar: 30px is used\n$closureVar: 50px; // local variable\n```\n\n但是在CSS中，计算的值会改变，因为`font-size`的值时重新计算的通过改变`--closureVar`的值：\n\n```css\n.enclosing .closure {\n  --closureVar: 30px;\n  font-size: calc(var(--closureVar) + var(--enclosingVar) + var(--globalVar));\n  /* 80px for now, --closureVar: 50px is used */\n  --closureVar: 50px;\n}\n```\n\n这是第一个巨大的差异：如果你重新给一个自定义属性赋值，浏览器会重新计算所有的变量并且`calc()`表达式会被调用。\n\n### 预处理器不会和DOM结构有关联关系\n假设我们想要使用的默认`font-size`字体大小,除了`highlighted`class存在的地方。\n\nHTML这样写:\n```html\n<div class=\"default\">\n  default\n</div>\n<div class=\"default highlighted\">\n  default highlighted\n</div>\n```\n\nCSS我们使用自定义属性：\n\n```css\n.highlighted {\n  --highlighted-size: 30px;\n}\n.default {\n  --default-size: 10px;\n  /* Use default-size, except when highlighted-size is provided. */\n  font-size: var(--highlighted-size, var(--default-size));\n}\n```\n\n因为第二个HTML元素的`default`的class后面紧跟着`highlighted`class，`highlighted`class里面的属性会被应用到元素上。\n\n这个案例中，意味着`--highlighted-size: 30px;`将被应用，也就是说`font-size`属性将使用`--highlighted-size`的值。\n\n现在,让我们尝试使用Sass实现同样的事情:\n\n```sass\n.highlighted {\n  $highlighted-size: 30px;\n}\n.default {\n  $default-size: 10px;\n  /* Use default-size, except when highlighted-size is provided. */\n  @if variable-exists(highlighted-size) {\n    font-size: $highlighted-size;\n  }\n  @else {\n    font-size: $default-size;\n  }\n}\n```\n\n这是因为所有Sass计算和处理发生在编译时间,当然,它不知道任何关于DOM结构,完全依赖于代码的结构。\n\n就像你看到的一样，自定义属性在变量作用域和CSS属性添加到级联关系中都是有优势，DOM结构关联以及遵循CSS规则和其它属性一样。\n\n\n第二部分我们要讨论的话题是DOM结构关联和动态性。\n\n## CSS-关键词和`all`属性\nCSS自定义属性是服从相同的CSS规则在使用CSS自定义属性的时候。这意味着你可以分配人意的通用的CSS关键字给它：\n\n* `inherit`\n    使用这个CSS关键字的值将继承父亲元素\n*  `initial`\n    这个值在CSs文档中有详细描述（在这个案例中自定义属性是空的值）\n*  `unset`\n    使用这个继承的值如果属性是普通继承（在案例中是自定义属性）或者初始化值如果属性没有使用继承。\n*  `revert`\n    这个重置属性默认值建立在客户端的样式表上（在这个案例中自定义属性是空的值）\n\n这里有个例子：\n\n```css\n.common-values{\n  --border: inherit;\n  --bgcolor: initial;\n  --padding: unset;\n  --animation: revert;\n}\n```\n\n考虑其它案例。假设你想创建一个组件并且想确认没有其它的样式或自定义属性被无意的应用到这里（一个模块化的CSS解决方案在这种情况下通常被用于样式）\n\n但是现在这里有另外的方式：使用`all`[CSS属性](https://developer.mozilla.org/en/docs/Web/CSS/all)。这可以快速重置CSS属性。\n\n同样使用CSS关键字，我们可以这样做：\n\n```css\n.my-wonderful-clean-component{\n  all: initial;\n}\n```\n\n这个可以重置我们所有的组件。\n\n不幸的是，`all`关键字[不能重置自定义属性](https://drafts.csswg.org/css-variables/#defining-variables)。有一个[正在进行的讨论](https://github.com/w3c/webcomponents/issues/300#issuecomment-144551648)是否要添加`--`前缀,将重置所有CSS自定义属性。\n\n因此,在未来,一个完整的重置可能是这样的:\n\n```css\n.my-wonderful-clean-component{\n  --: initial; /* reset all CSS custom properties */\n  all: initial; /* reset all other CSS styles */\n}\n```\n\n\n## CSS自定义属性的用例\n有许多使用的自定义属性。我将展示最有趣的。\n\n### 模仿不存在的CSS规则\n这些CSS变量的名称是“自定义属性”,那么为什么不使用它们来模拟不存在的属性呢?\n\n这里有很多: `translateX/Y/Z`,`background-repeat-x/y`(还没有跨浏览器兼容的),`box-shadow-color`。\n\n让我们试着让最后一个属性工作。在我们的案例中，当鼠标放上去的时候改变盒子的影子的颜色。我们只想遵循DRY原则（不重复`boxshadw`属性），所以不会改变`:hover`部分的整个`box-shadow`的值，我们只需要修改自定义属性的值：\n\n```css\n.test {\n  --box-shadow-color: yellow;\n  box-shadow: 0 0 30px var(--box-shadow-color);\n}\n.test:hover {\n  --box-shadow-color: orange;\n  /* Instead of: box-shadow: 0 0 30px orange; */\n}\n```\n\n### 颜色主题\n一个最普遍的案例就是使用自定义属性来定义应用程序的主题颜色。自定义属性可以用来解决这类问题。因此，提供一个简单的颜色主题给组件。\n\n这里是我们[按钮组件的代码](https://codepen.io/malyw/pen/XpRjNK):\n\n```css\n.btn {\n  background-image: linear-gradient(to bottom, #3498db, #2980b9);\n  text-shadow: 1px 1px 3px #777;\n  box-shadow: 0px 1px 3px #777;\n  border-radius: 28px;\n  color: #ffffff;\n  padding: 10px 20px 10px 20px;\n}\n```\n\n假设我们想要切换颜色主题。\n\n首先，我们将所有的颜色变量扩展为自定义CSS属性并且从写我们的组件。因此，[结果是一样的](https://codepen.io/malyw/pen/EZmgmZ)：\n\n```css\n.btn {\n  --shadow-color: #777;\n  --gradient-from-color: #3498db;\n  --gradient-to-color: #2980b9;\n  --color: #ffffff;\n\n  background-image: linear-gradient(\n    to bottom,\n    var(--gradient-from-color),\n    var(--gradient-to-color)\n  );\n  text-shadow: 1px 1px 3px var(--shadow-color);\n  box-shadow: 0px 1px 3px var(--shadow-color);\n  border-radius: 28px;\n  color: var(--color);\n  padding: 10px 20px 10px 20px;\n}\n```\n\n这一切是我们所需要的。这样，我们可以覆盖颜色变量为指定的切换颜色并且在需要的时候应用它们。例如，我们可以添加一个全局的切换HTML主题的`inverted`的class（添加在`body`元素）并且在应用的时候改变颜色：\n\n```css\nbody.inverted .btn{\n  --shadow-color: #888888;\n  --gradient-from-color: #CB6724;\n  --gradient-to-color: #D67F46;\n  --color: #000000;\n}\n```\n\n这中行为在不能有重复代码的前提下CSS预处理器是没办法实现的。预处理器,你总是需要覆盖的实际值和规则,这经常导致额外的CSS。\n\nCSS自定义属性,解决方案是尽可能的干净,避免复制和粘贴,因为只重新定义变量的值。\n\n\n## 在JavaScript中使用CSS自定义属性\n以前，从CSS发送数据到JavaScript时,我们常常不得不求助于[技巧](https://blog.hospodarets.com/passing_data_from_sass_to_js),通过写入纯CSS的JSON格式的值,然后从JavaScript读取它。\n\n现在,我们可以很容易地使用JavaScript读取CSS变量，分别使用我们熟知的`.getPropertyValue()`方法和`.setProperty()`方法进行读取和写入，像平常的CSS属性一样使用:\n\n```js\n/**\n* Gives a CSS custom property value applied at the element\n* element {Element}\n* varName {String} without '--'\n*\n* For example:\n* readCssVar(document.querySelector('.box'), 'color');\n*/\nfunction readCssVar(element, varName){\n  const elementStyles = getComputedStyle(element);\n  return elementStyles.getPropertyValue(`--${varName}`).trim();\n}\n\n/**\n* Writes a CSS custom property value at the element\n* element {Element}\n* varName {String} without '--'\n*\n* For example:\n* readCssVar(document.querySelector('.box'), 'color', 'white');\n*/\nfunction writeCssVar(element, varName, value){\n  return element.style.setProperty(`--${varName}`, value);\n}\n```\n\n假设我们有一个媒体查询列表值:\n\n```css\n.breakpoints-data {\n  --phone: 480px;\n  --tablet: 800px;\n}\n```\n\n因为我们只是想重用它们在JavaScript中——例如,在`Window.matchMedia()`,我们可以很容易地从CSS中获取它们:\n\n```js\nconst breakpointsData = document.querySelector('.breakpoints-data');\n\n// GET\nconst phoneBreakpoint = getComputedStyle(breakpointsData)\n  .getPropertyValue('--phone');\n```\n\nJavaScript如何操控自定义属性,我创建了一个交互式3D的CSS立方体演示,响应用户的操作。\n\n它不是很困难。我们只需要添加一个简单的背景颜色，然后将五个立方体面临的相关值进行变换使用`transform`属性:`translateZ()`,`translateY()`,`rotateX()`和`rotateY()`。\n\n为了提供正确的视角,我添加了一个页面容器:\n\n```css\n#world{\n  --translateZ:0;\n  --rotateX:65;\n  --rotateY:0;\n\n  transform-style:preserve-3d;\n  transform:\n    translateZ(calc(var(--translateZ) * 1px))\n    rotateX(calc(var(--rotateX) * 1deg))\n    rotateY(calc(var(--rotateY) * 1deg));\n}\n```\n\n唯一缺少的是交互性。demo在鼠标移动的时候需要改变X和Y视角（`--rotateX` 和 `--rotateY`)并且鼠标滚动时要放大和缩小(`--translateZ`)。\n\n这是JavaScript的代码:\n\n```js\n// Events\nonMouseMove(e) {\n  this.worldXAngle = (.5 - (e.clientY / window.innerHeight)) * 180;\n  this.worldYAngle = -(.5 - (e.clientX / window.innerWidth)) * 180;\n  this.updateView();\n};\nonMouseWheel(e) {\n  /*…*/\n\n  this.worldZ += delta * 5;\n  this.updateView();\n};\n// JavaScript -> CSS\nupdateView() {\n  this.worldEl.style.setProperty('--translateZ', this.worldZ);\n  this.worldEl.style.setProperty('--rotateX', this.worldXAngle);\n  this.worldEl.style.setProperty('--rotateY', this.worldYAngle);\n};\n```\n\n从本质上讲,我们已经改变了CSS自定义属性的值。其他(旋转和缩放)是由CSS。\n\n提示：一个最简单的办法调试CSS自定义属性的值就是把它的值展示到当前的CSS内容里面（例如字符串),那么浏览器将自动显示当前应用的值：\n\n```css\nbody:after {\n  content: '--screen-category : 'var(--screen-category);\n}\n```\n\n你可以查看这个[CSS演示](https://codepen.io/malyw/pen/oBWMOY)(没有HTML或JavaScript)。(调整窗口的浏览器自动反映CSS定义属性值更改。)\n\n## 浏览器支持\n[所有的主流浏览器已经支持](http://caniuse.com/#feat=css-variables)CSS自定义属性：\n\n![css-variables](/images/2017-04-24-css-custom-properties/0422_03.jpg)\n\n\n意味着,你可以开始使用它们。\n\n如果你需要支持老式浏览器,你可以学习语法和用法示例,考虑可能的切换方法或同时使用CSS自定义属性和预处理器变量。\n\n\n当然,我们需要能够检测支持CSS和JavaScript提供后备或增强。\n\n这是很简单的。对于CSS,可以使用一个虚拟`@supports[条件](https://developer.mozilla.org/en/docs/Web/CSS/@supports)查询功能:\n\n```css\n@supports ( (--a: 0)) {\n  /* supported */\n}\n@supports ( not (--a: 0)) {\n  /* not supported */\n}\n```\n\n在JavaScript中,可以使用相同的CSS.supports()静态方法查询自定义属性:\n\n```js\nconst isSupported = window.CSS &&\n    window.CSS.supports && window.CSS.supports('--a', 0);\n\nif (isSupported) {\n  /* supported */\n} else {\n  /* not supported */\n}\n```\n\n我们看到,CSS自定义属性仍然不支持所有的浏览器。知道了这一点,你可以逐步提高你的应用程序通过检查它们是否支持CSS自定义属性。\n\n例如，你可以生成2份CSS文件：一份包含CSS自定义属性另一份不包含它们，在内联属性中(不久我们将讨论)。\n\n\n默认加载没有包含CSS自定义属性的样式的文件。然后通过JavaScript判断是否支持CSS自定义属性来进行切换版本：\n\n```html\n<!-- HTML -->\n<link href=\"without-css-custom-properties.css\"\n    rel=\"stylesheet\" type=\"text/css\" media=\"all\" />\n```\n\n```js\n// JavaScript\nif(isSupported){\n  removeCss('without-css-custom-properties.css');\n  loadCss('css-custom-properties.css');\n  // + conditionally apply some application enhancements\n  // using the custom properties\n}\n```\n\n这只是一个例子。下面您将看到,有更好的选择。\n\n## 怎么开始使用它们\n根据最近的[调查](https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results),Sass依然是开发社区预处理器的首选。\n\n因此,让我们考虑如何开始在Sass中使用CSS自定义属性使或准备它们。\n\n我们有以下选择。\n\n### 1.手动检查代码的支持\n这个方法的一个优点的手动检查代码是否支持自定义属性是它工作,我们现在能做的就是使用这个方法(别忘了我们现在在使用Sass):\n\n```sass\n$color: red;\n:root {\n  --color: red;\n}\n.box {\n  @supports ( (--a: 0)) {\n    color: var(--color);\n  }\n  @supports ( not (--a: 0)) {\n    color: $color;\n  }\n}\n```\n\n这个方法有许多缺点,尤其是代码变得复杂,并复制和粘贴变得相当难以维护。\n\n\n### 2.使用一个插件,自动生成目标CSS\n今天PostCSS生态系统提供了很多的插件。一半以上的对自定义属性都可以保证输出的CSS正常工作，假设你只提供全局变量(即你只声明或改变CSS内自定义属性`:root`选择器),所以他们的值很容易内联化。\n\n\n案例：[postcss-custom-properties](https://github.com/postcss/postcss-custom-properties).\n\n这个插件提供了几个优点:它使语法工作;PostCSS兼容所有的基础设施,它不需要配置。\n\n然而，这也有缺点。这个插件需要您使用CSS定义属性，所以，而你的项目并没有准备从使用Sass变量中切换过来。同样,你不会有多大的控制转换,因为它是在Sass完成编译之后操作CSS。最后，插件没有提供很多的调试信息。\n\n\n### 3.[CSS-VARS MIXIN](https://github.com/malyw/css-vars)\n在我的大多数项目中，我已经开始使用CSS自定义属性并且尝试了许多策略:\n\n1. 从Sass切换到下一代CSS在使用PostCss前提下。\n2. 从Sass变量转换到纯CSS自定义属性。\n3. 使用CSS变量Sass检测它们是否支持。\n\n根据以上的经验,我开始寻找一个解决方案,来满足我的要求:\n\n1. 在Sass中需要使用简单。\n2. 它应该直接使用,语法必须尽可能接近原生CSS自定义属性。\n3. 内联CSS输出值切换到CSS变量应该很容易。\n4. 团队成员熟悉CSS可以使用自定义属性的解决方案。\n5. 应该有一个方法对使用的变量的边界情况有调试信息。\n\n因此,我创建了`css-vars`,`Sass mixin`,你可以在[Github上](https://github.com/malyw/css-vars)找到。使用它,你可以开始使用CSS自定义属性的语法。\n\n\n## 使用css-vars Mixin\n声明变量(s),使用mixin如下:\n\n```sass\n$white-color: #fff;\n$base-font-size: 10px;\n\n@include css-vars((\n  --main-color: #000,\n  --main-bg: $white-color,\n  --main-font-size: 1.5*$base-font-size,\n  --padding-top: calc(2vh + 20px)\n));\n```\n\n使用这些变量,使用var()函数:\n\n```css\nbody {\n  color: var(--main-color);\n  background: var(--main-bg, #f00);\n  font-size: var(--main-font-size);\n  padding: var(--padding-top) 0 10px;\n}\n```\n\n这给了你一种可以控制CSS都是从一个文件输出的能力(从Sass)并开始熟悉语法。另外,您可以重用Sass变量与mixin和逻辑。\n\n当你想要支持的浏览器使用CSS变量,那么所有你要做的就是在Sass中添加支持:\n\n```sass\n$css-vars-use-native: true;\n```\n\n而不是在完成编译的CSS中调整,因为mixin将开始注册自定义属性,var()实例产生的CSS没有任何转换。这意味着你必须完全转向CSS定制属性,我们已经讨论了所有的优势。\n\n如果你想打开有用的调试信息,添加以下:\n\n```sass\n$css-vars-debug-log: true;\n```\n\n这将给你:\n\n* 使用未定义变量，写log。\n* 重新分配变量时，写log。\n* 当一个变量没有定义但传递使用默认值，打印信息。\n\n\n## 结论\n现在你知道更多关于CSS的自定义属性，包括它的语法，优势，以及好的使用案例和如何使用JavaScript进行交互。\n\n您已经了解了如何检测他们是否支持,它们与CSS预处理器变量的不同，和如何使用CSS变量直到它们支持跨浏览器。\n\n这是正确的时间开始使用CSS自定义属性和准备在浏览器中使用它们。\n\n原文：[https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/](https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/)\n\n译者：[Jin](https://github.com/Yi-love)\n\n作者：[Serg Hospodarets](https://www.smashingmagazine.com/author/serghospodarets/)\n\n","slug":"2017-04-24-css-custom-properties","published":1,"updated":"2017-12-01T08:50:00.242Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanokngh0000jxs1pfvv51e0","content":"<p>今日，在web开发中使用css预处理器已经成为一种标准。预处理器其中最大的优势就是可以让开发者自定属性。<br>这可以有效的帮助你避免复制和粘贴代码，并且它简化了开发和重构。</p>\n<p>我们使用预处理器来保存颜色，字体参数，布局详情 – 一些我们在CSS中经常使用到的东西。</p>\n<p>但是预处理器变了有一些不足之处：</p>\n<ol>\n<li>你不能动态的改变它们；</li>\n<li>它们没有<code>DOM</code>结构方面的能力；</li>\n<li>它们不能被<code>JavaScript</code>读取和改变。</li>\n</ol>\n<p>作为这些和其他问题的银弹,社区发明CSS自定义属性。本质上，它们看起来和工作都很像<code>CSS</code>变量，命名也是非常的语义化。</p>\n<p>自定义属性为web开发开辟了一片新的天地。</p>\n<p>进一步阅读:</p>\n<ul>\n<li><a href=\"https://www.smashingmagazine.com/2014/03/introduction-to-custom-elements/\" target=\"_blank\" rel=\"noopener\">自定义元素详细介绍</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2016/03/houdini-maybe-the-most-exciting-development-in-css-youve-never-heard-of/\" target=\"_blank\" rel=\"noopener\">Houdini: 你可能没有听过那些在<code>CSS</code>开发中令人兴奋的事</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2016/02/everything-about-google-accelerated-mobile-pages/\" target=\"_blank\" rel=\"noopener\">加速你的页面的11个技巧：你需要知道所有关于谷歌加速移动页面的技巧</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2016/05/better-architecture-for-ios-apps-model-view-controller-pattern/\" target=\"_blank\" rel=\"noopener\">一个更好的iOS架构:深入理解模型-视图-控制器模式</a></li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"语法：自定义属性声明和使用\"><a href=\"#语法：自定义属性声明和使用\" class=\"headerlink\" title=\"语法：自定义属性声明和使用\"></a>语法：自定义属性声明和使用</h2><p>最普遍的问题就是当你学习一个新的预处理器或者一个新框架的时候都必须去学习新的语法。</p>\n<p>每个预处理器都会使用不同的方式去声明变量。通常，都会以一个通配符开始–例如，Sass的<code>$</code>和LESS的<code>@</code>。</p>\n<p>CSS自定义属性已相同的方式并且以<code>--</code>开头引入一个声明属性。但好处是你只需学习这个语法一次并且它是跨浏览器的。</p>\n<p>你可能会问，“为什么不使用一个已经存在的语法？”</p>\n<p><a href=\"http://www.xanthir.com/blog/b4KT0\" target=\"_blank\" rel=\"noopener\">查看原因</a>，简单来说，它提供了一个方式来使用自定义属性在任何的预处理器中。这种方式，我们可以提供和使用自定义属性，并且我们的预处理器将不会编译它们，所以这些属性将会被直接输出到CSS中。并且你可以在预处理器复用这些原生的每一个变量，我将在下文进行描述。</p>\n<blockquote>\n<p>关于这个名字：因为寓意和目标非常相似，有时候自定义属性被叫做CSS变量，虽然正确的名字是CSS自定义属性，继续阅读，你会发现这样描述它们会更好。</p>\n</blockquote>\n<p>所以，定义一个变量而不是一个普通的CSS属性如<code>color</code>或者<code>padding</code>,只需要提供一个自定义名称属性以<code>--</code>开头：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--box-color</span>:<span class=\"number\">#4d4e53</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--box-padding</span>:<span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>属性的值可以是任意有效的CSS值：颜色，字符串，布局值，甚至是表达式。</p>\n<p>有效的自定义属性例子：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--main-color</span>: <span class=\"number\">#4d4e53</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--main-bg</span>: <span class=\"built_in\">rgb</span>(255, 255, 255);</span><br><span class=\"line\">  <span class=\"attribute\">--logo-border-color</span>: rebeccapurple;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">--header-height</span>: <span class=\"number\">68px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--content-padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">--base-line-height</span>: <span class=\"number\">1.428571429</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--transition-duration</span>: .<span class=\"number\">35s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--external-link</span>: <span class=\"string\">\"external link\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--margin-top</span>: <span class=\"built_in\">calc</span>(2vh + 20px);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Valid CSS custom properties can be reused later in, say, JavaScript. */</span></span><br><span class=\"line\">  <span class=\"attribute\">--foo</span>: <span class=\"built_in\">if</span>(x &gt; 5) this.width = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个案例中你不能保证<code>:root</code>会被匹配到，在HTML的那些具有更高特性的<code>html</code>中会被匹配到。</p>\n<p>与其它的CSS属性相比，自定义属性有相同的层级关系但是是动态的。这意味着他们可以随时改变,并且由浏览器来处理相应的改变。</p>\n<p>使用变量的时候，你必须使用CSS的<code>var()</code>函数并且传入对应的属性名称：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--box-color</span>:<span class=\"number\">#4d4e53</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--box-padding</span>: <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"built_in\">var</span>(--box-padding);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span> <span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--box-color);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"变量声明及使用案例\"><a href=\"#变量声明及使用案例\" class=\"headerlink\" title=\"变量声明及使用案例\"></a>变量声明及使用案例</h3><p><code>var()</code>函数有一种方便的使用方式可以提供默认值。假如你不确定自定义属性什么时候被定义并且需要提供一个值作为后备时你就应该使用。很简单只需要传入第二个参数即可：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--box-color</span>:<span class=\"number\">#4d4e53</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--box-padding</span>: <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* 10px is used because --box-margin is not defined. */</span></span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"built_in\">var</span>(--box-margin, 10px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和你想的一样，你可以覆盖原有变量的声明为新的变量：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* The --main-padding variable is used if --box-padding is not defined. */</span></span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"built_in\">var</span>(--box-padding, var(--main-padding));</span><br><span class=\"line\">  <span class=\"attribute\">--box-text</span>: <span class=\"string\">'This is my box'</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* Equal to --box-highlight-text:'This is my box with highlight'; */</span></span><br><span class=\"line\">  <span class=\"attribute\">--box-highlight-text</span>: <span class=\"built_in\">var</span>(--box-text)<span class=\"string\">' with highlight'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符: +, -, *, /\"></a>操作符: +, -, *, /</h2><p>我们在对变量进行操作时想使用基本的操作，这与我们习惯了的预处理器和其他语言一样。对于这个，CSS提供了<code>calc()</code>函数，这使得浏览器会在自定义属性的值发生改变的时候重新执行表达式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--indent-size</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--indent-xl</span>: <span class=\"built_in\">calc</span>(2*var(--indent-size));</span><br><span class=\"line\">  <span class=\"attribute\">--indent-l</span>: <span class=\"built_in\">calc</span>(var(--indent-size) + <span class=\"number\">2px</span>);</span><br><span class=\"line\">  <span class=\"attribute\">--indent-s</span>: <span class=\"built_in\">calc</span>(var(--indent-size) - <span class=\"number\">2px</span>);</span><br><span class=\"line\">  <span class=\"attribute\">--indent-xs</span>: <span class=\"built_in\">calc</span>(var(--indent-size)/<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你试着使用少单位的值这是有问题的。但是，<code>calc()</code>比较友好，会正常执行，<code>var()</code>不会执行：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--spacer</span>: <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"built_in\">var</span>(--spacer)<span class=\"built_in\">px</span> <span class=\"number\">0</span>; <span class=\"comment\">/* DOESN'T work */</span></span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"built_in\">calc</span>(var(--spacer)*<span class=\"number\">1px</span>) <span class=\"number\">0</span>; <span class=\"comment\">/* WORKS */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"作用域和继承\"><a href=\"#作用域和继承\" class=\"headerlink\" title=\"作用域和继承\"></a>作用域和继承</h2><p>在开始讨论CSS自定义属性的作用域，先让我们回顾一下JavaScript和预处理器的作用域，这样可以更好的理解其中的不同。</p>\n<p>我们知道，例如，JavaScript变量（<code>var</code>）, 函数限制作用范围。</p>\n<p>使用<code>let</code>和<code>const</code>我们有一个类似的情况，但是它们是局部的块级作用域变量。</p>\n<p>一个<code>JavaScript</code>闭包可用访问外部的函数变量–作用域链。闭包有3个作用域链，它可以通过以下方式：</p>\n<ul>\n<li>自己的作用域</li>\n<li>外部函数作用域变量</li>\n<li>全局作用域变量</li>\n</ul>\n<p><img src=\"/images/2017-04-24-css-custom-properties/0422_01.jpg\" alt=\"javaScript closure\"></p>\n<p>这个比喻和预处理器很相似。让我们来使用一下Sass因为今天它可能已经很普遍了。</p>\n<p>在Sass中，有2种类型的变量：本地和全局。</p>\n<p>一个全局变量可以被声明以为的任意选择器或者方式使用（例如：<code>mixin</code>）。另外，其它变量为局部变量。</p>\n<p>任何嵌套块代码可以访问上级变量（在 JavaScript中）。</p>\n<p><img src=\"/images/2017-04-24-css-custom-properties/0422_02.jpg\" alt=\"sass variable\"></p>\n<p>这就意味着，在Sass中,变量的作用域完全依赖于代码的结构。</p>\n<p>然而，CSS自定义属性默认是继承的，就像其它的CSS属性一样，通过它们的级联关系。</p>\n<p>你通常不可能会有一个自定义属性的全局变量是声明在选择器之外的–这是无效的在CSS里。自定义的CSS属性的全局作用域是定义在<code>:root</code>中的，因此属性是全局有效的。</p>\n<p>让我们使用自己的语法知识来编写HTML和CSS的Sass案例。我们将使用原生的CSS自定义属性创建demo。首先HTML:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"enclosing\"</span>&gt;</span></span><br><span class=\"line\">  enclosing</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"closure\"</span>&gt;</span></span><br><span class=\"line\">    closure</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这是对应的CSS:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--globalVar</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.enclosing</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--enclosingVar</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.enclosing</span> <span class=\"selector-class\">.closure</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--closureVar</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"built_in\">calc</span>(var(--closureVar) + <span class=\"built_in\">var</span>(--enclosingVar) + <span class=\"built_in\">var</span>(--globalVar));</span><br><span class=\"line\">  <span class=\"comment\">/* 60px for now */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义属性更改会立即应用到所有实例\"><a href=\"#自定义属性更改会立即应用到所有实例\" class=\"headerlink\" title=\"自定义属性更改会立即应用到所有实例\"></a>自定义属性更改会立即应用到所有实例</h3><p>到目前为止,我们还没有看到任何和Sass变量不同的地方。然而,让我们在使用变量后重新给他赋值：</p>\n<p>在这个Sass案例中，这没有影响：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$closureVar: 30px; // local variable</span><br><span class=\"line\">font-size: $closureVar +$enclosingVar+ $globalVar;</span><br><span class=\"line\">// 60px, $closureVar: 30px is used</span><br><span class=\"line\">$closureVar: 50px; // local variable</span><br></pre></td></tr></table></figure>\n<p>但是在CSS中，计算的值会改变，因为<code>font-size</code>的值时重新计算的通过改变<code>--closureVar</code>的值：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.enclosing</span> <span class=\"selector-class\">.closure</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--closureVar</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"built_in\">calc</span>(var(--closureVar) + <span class=\"built_in\">var</span>(--enclosingVar) + <span class=\"built_in\">var</span>(--globalVar));</span><br><span class=\"line\">  <span class=\"comment\">/* 80px for now, --closureVar: 50px is used */</span></span><br><span class=\"line\">  <span class=\"attribute\">--closureVar</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是第一个巨大的差异：如果你重新给一个自定义属性赋值，浏览器会重新计算所有的变量并且<code>calc()</code>表达式会被调用。</p>\n<h3 id=\"预处理器不会和DOM结构有关联关系\"><a href=\"#预处理器不会和DOM结构有关联关系\" class=\"headerlink\" title=\"预处理器不会和DOM结构有关联关系\"></a>预处理器不会和DOM结构有关联关系</h3><p>假设我们想要使用的默认<code>font-size</code>字体大小,除了<code>highlighted</code>class存在的地方。</p>\n<p>HTML这样写:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"default\"</span>&gt;</span></span><br><span class=\"line\">  default</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"default highlighted\"</span>&gt;</span></span><br><span class=\"line\">  default highlighted</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>CSS我们使用自定义属性：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.highlighted</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--highlighted-size</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.default</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--default-size</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* Use default-size, except when highlighted-size is provided. */</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"built_in\">var</span>(--highlighted-size, var(--default-size));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为第二个HTML元素的<code>default</code>的class后面紧跟着<code>highlighted</code>class，<code>highlighted</code>class里面的属性会被应用到元素上。</p>\n<p>这个案例中，意味着<code>--highlighted-size: 30px;</code>将被应用，也就是说<code>font-size</code>属性将使用<code>--highlighted-size</code>的值。</p>\n<p>现在,让我们尝试使用Sass实现同样的事情:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.highlighted &#123;</span><br><span class=\"line\">  $highlighted-size: 30px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.default &#123;</span><br><span class=\"line\">  $default-size: 10px;</span><br><span class=\"line\">  /* Use default-size, except when highlighted-size is provided. */</span><br><span class=\"line\">  @if variable-exists(highlighted-size) &#123;</span><br><span class=\"line\">    font-size: $highlighted-size;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @else &#123;</span><br><span class=\"line\">    font-size: $default-size;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是因为所有Sass计算和处理发生在编译时间,当然,它不知道任何关于DOM结构,完全依赖于代码的结构。</p>\n<p>就像你看到的一样，自定义属性在变量作用域和CSS属性添加到级联关系中都是有优势，DOM结构关联以及遵循CSS规则和其它属性一样。</p>\n<p>第二部分我们要讨论的话题是DOM结构关联和动态性。</p>\n<h2 id=\"CSS-关键词和all属性\"><a href=\"#CSS-关键词和all属性\" class=\"headerlink\" title=\"CSS-关键词和all属性\"></a>CSS-关键词和<code>all</code>属性</h2><p>CSS自定义属性是服从相同的CSS规则在使用CSS自定义属性的时候。这意味着你可以分配人意的通用的CSS关键字给它：</p>\n<ul>\n<li><code>inherit</code><br>  使用这个CSS关键字的值将继承父亲元素</li>\n<li><code>initial</code><br> 这个值在CSs文档中有详细描述（在这个案例中自定义属性是空的值）</li>\n<li><code>unset</code><br> 使用这个继承的值如果属性是普通继承（在案例中是自定义属性）或者初始化值如果属性没有使用继承。</li>\n<li><code>revert</code><br> 这个重置属性默认值建立在客户端的样式表上（在这个案例中自定义属性是空的值）</li>\n</ul>\n<p>这里有个例子：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.common-values</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--border</span>: inherit;</span><br><span class=\"line\">  <span class=\"attribute\">--bgcolor</span>: initial;</span><br><span class=\"line\">  <span class=\"attribute\">--padding</span>: unset;</span><br><span class=\"line\">  <span class=\"attribute\">--animation</span>: revert;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>考虑其它案例。假设你想创建一个组件并且想确认没有其它的样式或自定义属性被无意的应用到这里（一个模块化的CSS解决方案在这种情况下通常被用于样式）</p>\n<p>但是现在这里有另外的方式：使用<code>all</code><a href=\"https://developer.mozilla.org/en/docs/Web/CSS/all\" target=\"_blank\" rel=\"noopener\">CSS属性</a>。这可以快速重置CSS属性。</p>\n<p>同样使用CSS关键字，我们可以这样做：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.my-wonderful-clean-component</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">all</span>: initial;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个可以重置我们所有的组件。</p>\n<p>不幸的是，<code>all</code>关键字<a href=\"https://drafts.csswg.org/css-variables/#defining-variables\" target=\"_blank\" rel=\"noopener\">不能重置自定义属性</a>。有一个<a href=\"https://github.com/w3c/webcomponents/issues/300#issuecomment-144551648\" target=\"_blank\" rel=\"noopener\">正在进行的讨论</a>是否要添加<code>--</code>前缀,将重置所有CSS自定义属性。</p>\n<p>因此,在未来,一个完整的重置可能是这样的:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.my-wonderful-clean-component</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--</span>: initial; <span class=\"comment\">/* reset all CSS custom properties */</span></span><br><span class=\"line\">  <span class=\"attribute\">all</span>: initial; <span class=\"comment\">/* reset all other CSS styles */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS自定义属性的用例\"><a href=\"#CSS自定义属性的用例\" class=\"headerlink\" title=\"CSS自定义属性的用例\"></a>CSS自定义属性的用例</h2><p>有许多使用的自定义属性。我将展示最有趣的。</p>\n<h3 id=\"模仿不存在的CSS规则\"><a href=\"#模仿不存在的CSS规则\" class=\"headerlink\" title=\"模仿不存在的CSS规则\"></a>模仿不存在的CSS规则</h3><p>这些CSS变量的名称是“自定义属性”,那么为什么不使用它们来模拟不存在的属性呢?</p>\n<p>这里有很多: <code>translateX/Y/Z</code>,<code>background-repeat-x/y</code>(还没有跨浏览器兼容的),<code>box-shadow-color</code>。</p>\n<p>让我们试着让最后一个属性工作。在我们的案例中，当鼠标放上去的时候改变盒子的影子的颜色。我们只想遵循DRY原则（不重复<code>boxshadw</code>属性），所以不会改变<code>:hover</code>部分的整个<code>box-shadow</code>的值，我们只需要修改自定义属性的值：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--box-shadow-color</span>: yellow;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">30px</span> <span class=\"built_in\">var</span>(--box-shadow-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--box-shadow-color</span>: orange;</span><br><span class=\"line\">  <span class=\"comment\">/* Instead of: box-shadow: 0 0 30px orange; */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"颜色主题\"><a href=\"#颜色主题\" class=\"headerlink\" title=\"颜色主题\"></a>颜色主题</h3><p>一个最普遍的案例就是使用自定义属性来定义应用程序的主题颜色。自定义属性可以用来解决这类问题。因此，提供一个简单的颜色主题给组件。</p>\n<p>这里是我们<a href=\"https://codepen.io/malyw/pen/XpRjNK\" target=\"_blank\" rel=\"noopener\">按钮组件的代码</a>:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">linear-gradient</span>(to bottom, #3498db, #2980b9);</span><br><span class=\"line\">  <span class=\"attribute\">text-shadow</span>: <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"number\">3px</span> <span class=\"number\">#777</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">1px</span> <span class=\"number\">3px</span> <span class=\"number\">#777</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">28px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span> <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假设我们想要切换颜色主题。</p>\n<p>首先，我们将所有的颜色变量扩展为自定义CSS属性并且从写我们的组件。因此，<a href=\"https://codepen.io/malyw/pen/EZmgmZ\" target=\"_blank\" rel=\"noopener\">结果是一样的</a>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--shadow-color</span>: <span class=\"number\">#777</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--gradient-from-color</span>: <span class=\"number\">#3498db</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--gradient-to-color</span>: <span class=\"number\">#2980b9</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">linear-gradient</span>(</span><br><span class=\"line\">    to bottom,</span><br><span class=\"line\">    var(--gradient-from-color),</span><br><span class=\"line\">    <span class=\"built_in\">var</span>(--gradient-to-color)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"attribute\">text-shadow</span>: <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"number\">3px</span> <span class=\"built_in\">var</span>(--shadow-color);</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">1px</span> <span class=\"number\">3px</span> <span class=\"built_in\">var</span>(--shadow-color);</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">28px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color);</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span> <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一切是我们所需要的。这样，我们可以覆盖颜色变量为指定的切换颜色并且在需要的时候应用它们。例如，我们可以添加一个全局的切换HTML主题的<code>inverted</code>的class（添加在<code>body</code>元素）并且在应用的时候改变颜色：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span><span class=\"selector-class\">.inverted</span> <span class=\"selector-class\">.btn</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--shadow-color</span>: <span class=\"number\">#888888</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--gradient-from-color</span>: <span class=\"number\">#CB6724</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--gradient-to-color</span>: <span class=\"number\">#D67F46</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这中行为在不能有重复代码的前提下CSS预处理器是没办法实现的。预处理器,你总是需要覆盖的实际值和规则,这经常导致额外的CSS。</p>\n<p>CSS自定义属性,解决方案是尽可能的干净,避免复制和粘贴,因为只重新定义变量的值。</p>\n<h2 id=\"在JavaScript中使用CSS自定义属性\"><a href=\"#在JavaScript中使用CSS自定义属性\" class=\"headerlink\" title=\"在JavaScript中使用CSS自定义属性\"></a>在JavaScript中使用CSS自定义属性</h2><p>以前，从CSS发送数据到JavaScript时,我们常常不得不求助于<a href=\"https://blog.hospodarets.com/passing_data_from_sass_to_js\" target=\"_blank\" rel=\"noopener\">技巧</a>,通过写入纯CSS的JSON格式的值,然后从JavaScript读取它。</p>\n<p>现在,我们可以很容易地使用JavaScript读取CSS变量，分别使用我们熟知的<code>.getPropertyValue()</code>方法和<code>.setProperty()</code>方法进行读取和写入，像平常的CSS属性一样使用:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Gives a CSS custom property value applied at the element</span></span><br><span class=\"line\"><span class=\"comment\">* element &#123;Element&#125;</span></span><br><span class=\"line\"><span class=\"comment\">* varName &#123;String&#125; without '--'</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* For example:</span></span><br><span class=\"line\"><span class=\"comment\">* readCssVar(document.querySelector('.box'), 'color');</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readCssVar</span>(<span class=\"params\">element, varName</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> elementStyles = getComputedStyle(element);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> elementStyles.getPropertyValue(<span class=\"string\">`--<span class=\"subst\">$&#123;varName&#125;</span>`</span>).trim();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Writes a CSS custom property value at the element</span></span><br><span class=\"line\"><span class=\"comment\">* element &#123;Element&#125;</span></span><br><span class=\"line\"><span class=\"comment\">* varName &#123;String&#125; without '--'</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* For example:</span></span><br><span class=\"line\"><span class=\"comment\">* readCssVar(document.querySelector('.box'), 'color', 'white');</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeCssVar</span>(<span class=\"params\">element, varName, value</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> element.style.setProperty(<span class=\"string\">`--<span class=\"subst\">$&#123;varName&#125;</span>`</span>, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假设我们有一个媒体查询列表值:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.breakpoints-data</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--phone</span>: <span class=\"number\">480px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--tablet</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为我们只是想重用它们在JavaScript中——例如,在<code>Window.matchMedia()</code>,我们可以很容易地从CSS中获取它们:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> breakpointsData = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.breakpoints-data'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> phoneBreakpoint = getComputedStyle(breakpointsData)</span><br><span class=\"line\">  .getPropertyValue(<span class=\"string\">'--phone'</span>);</span><br></pre></td></tr></table></figure>\n<p>JavaScript如何操控自定义属性,我创建了一个交互式3D的CSS立方体演示,响应用户的操作。</p>\n<p>它不是很困难。我们只需要添加一个简单的背景颜色，然后将五个立方体面临的相关值进行变换使用<code>transform</code>属性:<code>translateZ()</code>,<code>translateY()</code>,<code>rotateX()</code>和<code>rotateY()</code>。</p>\n<p>为了提供正确的视角,我添加了一个页面容器:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#world</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--translateZ</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--rotateX</span>:<span class=\"number\">65</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--rotateY</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">transform-style</span>:preserve-<span class=\"number\">3</span>d;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>:</span><br><span class=\"line\">    <span class=\"built_in\">translateZ</span>(calc(var(--translateZ) * <span class=\"number\">1px</span>))</span><br><span class=\"line\">    <span class=\"built_in\">rotateX</span>(calc(var(--rotateX) * <span class=\"number\">1deg</span>))</span><br><span class=\"line\">    <span class=\"built_in\">rotateY</span>(calc(var(--rotateY) * <span class=\"number\">1deg</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>唯一缺少的是交互性。demo在鼠标移动的时候需要改变X和Y视角（<code>--rotateX</code> 和 <code>--rotateY</code>)并且鼠标滚动时要放大和缩小(<code>--translateZ</code>)。</p>\n<p>这是JavaScript的代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Events</span></span><br><span class=\"line\">onMouseMove(e) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.worldXAngle = (<span class=\"number\">.5</span> - (e.clientY / <span class=\"built_in\">window</span>.innerHeight)) * <span class=\"number\">180</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.worldYAngle = -(<span class=\"number\">.5</span> - (e.clientX / <span class=\"built_in\">window</span>.innerWidth)) * <span class=\"number\">180</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.updateView();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">onMouseWheel(e) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*…*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.worldZ += delta * <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.updateView();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// JavaScript -&gt; CSS</span></span><br><span class=\"line\">updateView() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.worldEl.style.setProperty(<span class=\"string\">'--translateZ'</span>, <span class=\"keyword\">this</span>.worldZ);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.worldEl.style.setProperty(<span class=\"string\">'--rotateX'</span>, <span class=\"keyword\">this</span>.worldXAngle);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.worldEl.style.setProperty(<span class=\"string\">'--rotateY'</span>, <span class=\"keyword\">this</span>.worldYAngle);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>从本质上讲,我们已经改变了CSS自定义属性的值。其他(旋转和缩放)是由CSS。</p>\n<p>提示：一个最简单的办法调试CSS自定义属性的值就是把它的值展示到当前的CSS内容里面（例如字符串),那么浏览器将自动显示当前应用的值：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">'--screen-category : '</span><span class=\"built_in\">var</span>(--screen-category);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你可以查看这个<a href=\"https://codepen.io/malyw/pen/oBWMOY\" target=\"_blank\" rel=\"noopener\">CSS演示</a>(没有HTML或JavaScript)。(调整窗口的浏览器自动反映CSS定义属性值更改。)</p>\n<h2 id=\"浏览器支持\"><a href=\"#浏览器支持\" class=\"headerlink\" title=\"浏览器支持\"></a>浏览器支持</h2><p><a href=\"http://caniuse.com/#feat=css-variables\" target=\"_blank\" rel=\"noopener\">所有的主流浏览器已经支持</a>CSS自定义属性：</p>\n<p><img src=\"/images/2017-04-24-css-custom-properties/0422_03.jpg\" alt=\"css-variables\"></p>\n<p>意味着,你可以开始使用它们。</p>\n<p>如果你需要支持老式浏览器,你可以学习语法和用法示例,考虑可能的切换方法或同时使用CSS自定义属性和预处理器变量。</p>\n<p>当然,我们需要能够检测支持CSS和JavaScript提供后备或增强。</p>\n<p>这是很简单的。对于CSS,可以使用一个虚拟`@supports<a href=\"https://developer.mozilla.org/en/docs/Web/CSS/@supports\" target=\"_blank\" rel=\"noopener\">条件</a>查询功能:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">supports</span> ( (--a: <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* supported */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">supports</span> ( not (--a: <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* not supported */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在JavaScript中,可以使用相同的CSS.supports()静态方法查询自定义属性:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isSupported = <span class=\"built_in\">window</span>.CSS &amp;&amp;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.CSS.supports &amp;&amp; <span class=\"built_in\">window</span>.CSS.supports(<span class=\"string\">'--a'</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isSupported) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* supported */</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* not supported */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们看到,CSS自定义属性仍然不支持所有的浏览器。知道了这一点,你可以逐步提高你的应用程序通过检查它们是否支持CSS自定义属性。</p>\n<p>例如，你可以生成2份CSS文件：一份包含CSS自定义属性另一份不包含它们，在内联属性中(不久我们将讨论)。</p>\n<p>默认加载没有包含CSS自定义属性的样式的文件。然后通过JavaScript判断是否支持CSS自定义属性来进行切换版本：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"without-css-custom-properties.css\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"all\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JavaScript</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(isSupported)&#123;</span><br><span class=\"line\">  removeCss(<span class=\"string\">'without-css-custom-properties.css'</span>);</span><br><span class=\"line\">  loadCss(<span class=\"string\">'css-custom-properties.css'</span>);</span><br><span class=\"line\">  <span class=\"comment\">// + conditionally apply some application enhancements</span></span><br><span class=\"line\">  <span class=\"comment\">// using the custom properties</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这只是一个例子。下面您将看到,有更好的选择。</p>\n<h2 id=\"怎么开始使用它们\"><a href=\"#怎么开始使用它们\" class=\"headerlink\" title=\"怎么开始使用它们\"></a>怎么开始使用它们</h2><p>根据最近的<a href=\"https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results\" target=\"_blank\" rel=\"noopener\">调查</a>,Sass依然是开发社区预处理器的首选。</p>\n<p>因此,让我们考虑如何开始在Sass中使用CSS自定义属性使或准备它们。</p>\n<p>我们有以下选择。</p>\n<h3 id=\"1-手动检查代码的支持\"><a href=\"#1-手动检查代码的支持\" class=\"headerlink\" title=\"1.手动检查代码的支持\"></a>1.手动检查代码的支持</h3><p>这个方法的一个优点的手动检查代码是否支持自定义属性是它工作,我们现在能做的就是使用这个方法(别忘了我们现在在使用Sass):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$color: red;</span><br><span class=\"line\">:root &#123;</span><br><span class=\"line\">  --color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">  @supports ( (--a: 0)) &#123;</span><br><span class=\"line\">    color: var(--color);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @supports ( not (--a: 0)) &#123;</span><br><span class=\"line\">    color: $color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法有许多缺点,尤其是代码变得复杂,并复制和粘贴变得相当难以维护。</p>\n<h3 id=\"2-使用一个插件-自动生成目标CSS\"><a href=\"#2-使用一个插件-自动生成目标CSS\" class=\"headerlink\" title=\"2.使用一个插件,自动生成目标CSS\"></a>2.使用一个插件,自动生成目标CSS</h3><p>今天PostCSS生态系统提供了很多的插件。一半以上的对自定义属性都可以保证输出的CSS正常工作，假设你只提供全局变量(即你只声明或改变CSS内自定义属性<code>:root</code>选择器),所以他们的值很容易内联化。</p>\n<p>案例：<a href=\"https://github.com/postcss/postcss-custom-properties\" target=\"_blank\" rel=\"noopener\">postcss-custom-properties</a>.</p>\n<p>这个插件提供了几个优点:它使语法工作;PostCSS兼容所有的基础设施,它不需要配置。</p>\n<p>然而，这也有缺点。这个插件需要您使用CSS定义属性，所以，而你的项目并没有准备从使用Sass变量中切换过来。同样,你不会有多大的控制转换,因为它是在Sass完成编译之后操作CSS。最后，插件没有提供很多的调试信息。</p>\n<h3 id=\"3-CSS-VARS-MIXIN\"><a href=\"#3-CSS-VARS-MIXIN\" class=\"headerlink\" title=\"3.CSS-VARS MIXIN\"></a>3.<a href=\"https://github.com/malyw/css-vars\" target=\"_blank\" rel=\"noopener\">CSS-VARS MIXIN</a></h3><p>在我的大多数项目中，我已经开始使用CSS自定义属性并且尝试了许多策略:</p>\n<ol>\n<li>从Sass切换到下一代CSS在使用PostCss前提下。</li>\n<li>从Sass变量转换到纯CSS自定义属性。</li>\n<li>使用CSS变量Sass检测它们是否支持。</li>\n</ol>\n<p>根据以上的经验,我开始寻找一个解决方案,来满足我的要求:</p>\n<ol>\n<li>在Sass中需要使用简单。</li>\n<li>它应该直接使用,语法必须尽可能接近原生CSS自定义属性。</li>\n<li>内联CSS输出值切换到CSS变量应该很容易。</li>\n<li>团队成员熟悉CSS可以使用自定义属性的解决方案。</li>\n<li>应该有一个方法对使用的变量的边界情况有调试信息。</li>\n</ol>\n<p>因此,我创建了<code>css-vars</code>,<code>Sass mixin</code>,你可以在<a href=\"https://github.com/malyw/css-vars\" target=\"_blank\" rel=\"noopener\">Github上</a>找到。使用它,你可以开始使用CSS自定义属性的语法。</p>\n<h2 id=\"使用css-vars-Mixin\"><a href=\"#使用css-vars-Mixin\" class=\"headerlink\" title=\"使用css-vars Mixin\"></a>使用css-vars Mixin</h2><p>声明变量(s),使用mixin如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$white-color: #fff;</span><br><span class=\"line\">$base-font-size: 10px;</span><br><span class=\"line\"></span><br><span class=\"line\">@include css-vars((</span><br><span class=\"line\">  --main-color: #000,</span><br><span class=\"line\">  --main-bg: $white-color,</span><br><span class=\"line\">  --main-font-size: 1.5*$base-font-size,</span><br><span class=\"line\">  --padding-top: calc(2vh + 20px)</span><br><span class=\"line\">));</span><br></pre></td></tr></table></figure>\n<p>使用这些变量,使用var()函数:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--main-color);</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">var</span>(--main-bg, #f00);</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"built_in\">var</span>(--main-font-size);</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"built_in\">var</span>(--padding-top) <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这给了你一种可以控制CSS都是从一个文件输出的能力(从Sass)并开始熟悉语法。另外,您可以重用Sass变量与mixin和逻辑。</p>\n<p>当你想要支持的浏览器使用CSS变量,那么所有你要做的就是在Sass中添加支持:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$css-vars-use-native: true;</span><br></pre></td></tr></table></figure>\n<p>而不是在完成编译的CSS中调整,因为mixin将开始注册自定义属性,var()实例产生的CSS没有任何转换。这意味着你必须完全转向CSS定制属性,我们已经讨论了所有的优势。</p>\n<p>如果你想打开有用的调试信息,添加以下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$css-vars-debug-log: true;</span><br></pre></td></tr></table></figure>\n<p>这将给你:</p>\n<ul>\n<li>使用未定义变量，写log。</li>\n<li>重新分配变量时，写log。</li>\n<li>当一个变量没有定义但传递使用默认值，打印信息。</li>\n</ul>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>现在你知道更多关于CSS的自定义属性，包括它的语法，优势，以及好的使用案例和如何使用JavaScript进行交互。</p>\n<p>您已经了解了如何检测他们是否支持,它们与CSS预处理器变量的不同，和如何使用CSS变量直到它们支持跨浏览器。</p>\n<p>这是正确的时间开始使用CSS自定义属性和准备在浏览器中使用它们。</p>\n<p>原文：<a href=\"https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/\" target=\"_blank\" rel=\"noopener\">https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/</a></p>\n<p>译者：<a href=\"https://github.com/Yi-love\" target=\"_blank\" rel=\"noopener\">Jin</a></p>\n<p>作者：<a href=\"https://www.smashingmagazine.com/author/serghospodarets/\" target=\"_blank\" rel=\"noopener\">Serg Hospodarets</a></p>\n","site":{"data":{}},"excerpt":"<p>今日，在web开发中使用css预处理器已经成为一种标准。预处理器其中最大的优势就是可以让开发者自定属性。<br>这可以有效的帮助你避免复制和粘贴代码，并且它简化了开发和重构。</p>\n<p>我们使用预处理器来保存颜色，字体参数，布局详情 – 一些我们在CSS中经常使用到的东西。</p>\n<p>但是预处理器变了有一些不足之处：</p>\n<ol>\n<li>你不能动态的改变它们；</li>\n<li>它们没有<code>DOM</code>结构方面的能力；</li>\n<li>它们不能被<code>JavaScript</code>读取和改变。</li>\n</ol>\n<p>作为这些和其他问题的银弹,社区发明CSS自定义属性。本质上，它们看起来和工作都很像<code>CSS</code>变量，命名也是非常的语义化。</p>\n<p>自定义属性为web开发开辟了一片新的天地。</p>\n<p>进一步阅读:</p>\n<ul>\n<li><a href=\"https://www.smashingmagazine.com/2014/03/introduction-to-custom-elements/\" target=\"_blank\" rel=\"noopener\">自定义元素详细介绍</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2016/03/houdini-maybe-the-most-exciting-development-in-css-youve-never-heard-of/\" target=\"_blank\" rel=\"noopener\">Houdini: 你可能没有听过那些在<code>CSS</code>开发中令人兴奋的事</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2016/02/everything-about-google-accelerated-mobile-pages/\" target=\"_blank\" rel=\"noopener\">加速你的页面的11个技巧：你需要知道所有关于谷歌加速移动页面的技巧</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2016/05/better-architecture-for-ios-apps-model-view-controller-pattern/\" target=\"_blank\" rel=\"noopener\">一个更好的iOS架构:深入理解模型-视图-控制器模式</a></li>\n</ul>","more":"<h2 id=\"语法：自定义属性声明和使用\"><a href=\"#语法：自定义属性声明和使用\" class=\"headerlink\" title=\"语法：自定义属性声明和使用\"></a>语法：自定义属性声明和使用</h2><p>最普遍的问题就是当你学习一个新的预处理器或者一个新框架的时候都必须去学习新的语法。</p>\n<p>每个预处理器都会使用不同的方式去声明变量。通常，都会以一个通配符开始–例如，Sass的<code>$</code>和LESS的<code>@</code>。</p>\n<p>CSS自定义属性已相同的方式并且以<code>--</code>开头引入一个声明属性。但好处是你只需学习这个语法一次并且它是跨浏览器的。</p>\n<p>你可能会问，“为什么不使用一个已经存在的语法？”</p>\n<p><a href=\"http://www.xanthir.com/blog/b4KT0\" target=\"_blank\" rel=\"noopener\">查看原因</a>，简单来说，它提供了一个方式来使用自定义属性在任何的预处理器中。这种方式，我们可以提供和使用自定义属性，并且我们的预处理器将不会编译它们，所以这些属性将会被直接输出到CSS中。并且你可以在预处理器复用这些原生的每一个变量，我将在下文进行描述。</p>\n<blockquote>\n<p>关于这个名字：因为寓意和目标非常相似，有时候自定义属性被叫做CSS变量，虽然正确的名字是CSS自定义属性，继续阅读，你会发现这样描述它们会更好。</p>\n</blockquote>\n<p>所以，定义一个变量而不是一个普通的CSS属性如<code>color</code>或者<code>padding</code>,只需要提供一个自定义名称属性以<code>--</code>开头：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--box-color</span>:<span class=\"number\">#4d4e53</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--box-padding</span>:<span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>属性的值可以是任意有效的CSS值：颜色，字符串，布局值，甚至是表达式。</p>\n<p>有效的自定义属性例子：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--main-color</span>: <span class=\"number\">#4d4e53</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--main-bg</span>: <span class=\"built_in\">rgb</span>(255, 255, 255);</span><br><span class=\"line\">  <span class=\"attribute\">--logo-border-color</span>: rebeccapurple;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">--header-height</span>: <span class=\"number\">68px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--content-padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">--base-line-height</span>: <span class=\"number\">1.428571429</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--transition-duration</span>: .<span class=\"number\">35s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--external-link</span>: <span class=\"string\">\"external link\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--margin-top</span>: <span class=\"built_in\">calc</span>(2vh + 20px);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Valid CSS custom properties can be reused later in, say, JavaScript. */</span></span><br><span class=\"line\">  <span class=\"attribute\">--foo</span>: <span class=\"built_in\">if</span>(x &gt; 5) this.width = <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个案例中你不能保证<code>:root</code>会被匹配到，在HTML的那些具有更高特性的<code>html</code>中会被匹配到。</p>\n<p>与其它的CSS属性相比，自定义属性有相同的层级关系但是是动态的。这意味着他们可以随时改变,并且由浏览器来处理相应的改变。</p>\n<p>使用变量的时候，你必须使用CSS的<code>var()</code>函数并且传入对应的属性名称：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--box-color</span>:<span class=\"number\">#4d4e53</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--box-padding</span>: <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"built_in\">var</span>(--box-padding);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span> <span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--box-color);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"变量声明及使用案例\"><a href=\"#变量声明及使用案例\" class=\"headerlink\" title=\"变量声明及使用案例\"></a>变量声明及使用案例</h3><p><code>var()</code>函数有一种方便的使用方式可以提供默认值。假如你不确定自定义属性什么时候被定义并且需要提供一个值作为后备时你就应该使用。很简单只需要传入第二个参数即可：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--box-color</span>:<span class=\"number\">#4d4e53</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--box-padding</span>: <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* 10px is used because --box-margin is not defined. */</span></span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"built_in\">var</span>(--box-margin, 10px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和你想的一样，你可以覆盖原有变量的声明为新的变量：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* The --main-padding variable is used if --box-padding is not defined. */</span></span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"built_in\">var</span>(--box-padding, var(--main-padding));</span><br><span class=\"line\">  <span class=\"attribute\">--box-text</span>: <span class=\"string\">'This is my box'</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* Equal to --box-highlight-text:'This is my box with highlight'; */</span></span><br><span class=\"line\">  <span class=\"attribute\">--box-highlight-text</span>: <span class=\"built_in\">var</span>(--box-text)<span class=\"string\">' with highlight'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符: +, -, *, /\"></a>操作符: +, -, *, /</h2><p>我们在对变量进行操作时想使用基本的操作，这与我们习惯了的预处理器和其他语言一样。对于这个，CSS提供了<code>calc()</code>函数，这使得浏览器会在自定义属性的值发生改变的时候重新执行表达式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--indent-size</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--indent-xl</span>: <span class=\"built_in\">calc</span>(2*var(--indent-size));</span><br><span class=\"line\">  <span class=\"attribute\">--indent-l</span>: <span class=\"built_in\">calc</span>(var(--indent-size) + <span class=\"number\">2px</span>);</span><br><span class=\"line\">  <span class=\"attribute\">--indent-s</span>: <span class=\"built_in\">calc</span>(var(--indent-size) - <span class=\"number\">2px</span>);</span><br><span class=\"line\">  <span class=\"attribute\">--indent-xs</span>: <span class=\"built_in\">calc</span>(var(--indent-size)/<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你试着使用少单位的值这是有问题的。但是，<code>calc()</code>比较友好，会正常执行，<code>var()</code>不会执行：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--spacer</span>: <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"built_in\">var</span>(--spacer)<span class=\"built_in\">px</span> <span class=\"number\">0</span>; <span class=\"comment\">/* DOESN'T work */</span></span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"built_in\">calc</span>(var(--spacer)*<span class=\"number\">1px</span>) <span class=\"number\">0</span>; <span class=\"comment\">/* WORKS */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"作用域和继承\"><a href=\"#作用域和继承\" class=\"headerlink\" title=\"作用域和继承\"></a>作用域和继承</h2><p>在开始讨论CSS自定义属性的作用域，先让我们回顾一下JavaScript和预处理器的作用域，这样可以更好的理解其中的不同。</p>\n<p>我们知道，例如，JavaScript变量（<code>var</code>）, 函数限制作用范围。</p>\n<p>使用<code>let</code>和<code>const</code>我们有一个类似的情况，但是它们是局部的块级作用域变量。</p>\n<p>一个<code>JavaScript</code>闭包可用访问外部的函数变量–作用域链。闭包有3个作用域链，它可以通过以下方式：</p>\n<ul>\n<li>自己的作用域</li>\n<li>外部函数作用域变量</li>\n<li>全局作用域变量</li>\n</ul>\n<p><img src=\"/images/2017-04-24-css-custom-properties/0422_01.jpg\" alt=\"javaScript closure\"></p>\n<p>这个比喻和预处理器很相似。让我们来使用一下Sass因为今天它可能已经很普遍了。</p>\n<p>在Sass中，有2种类型的变量：本地和全局。</p>\n<p>一个全局变量可以被声明以为的任意选择器或者方式使用（例如：<code>mixin</code>）。另外，其它变量为局部变量。</p>\n<p>任何嵌套块代码可以访问上级变量（在 JavaScript中）。</p>\n<p><img src=\"/images/2017-04-24-css-custom-properties/0422_02.jpg\" alt=\"sass variable\"></p>\n<p>这就意味着，在Sass中,变量的作用域完全依赖于代码的结构。</p>\n<p>然而，CSS自定义属性默认是继承的，就像其它的CSS属性一样，通过它们的级联关系。</p>\n<p>你通常不可能会有一个自定义属性的全局变量是声明在选择器之外的–这是无效的在CSS里。自定义的CSS属性的全局作用域是定义在<code>:root</code>中的，因此属性是全局有效的。</p>\n<p>让我们使用自己的语法知识来编写HTML和CSS的Sass案例。我们将使用原生的CSS自定义属性创建demo。首先HTML:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"enclosing\"</span>&gt;</span></span><br><span class=\"line\">  enclosing</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"closure\"</span>&gt;</span></span><br><span class=\"line\">    closure</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这是对应的CSS:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--globalVar</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.enclosing</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--enclosingVar</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.enclosing</span> <span class=\"selector-class\">.closure</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--closureVar</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"built_in\">calc</span>(var(--closureVar) + <span class=\"built_in\">var</span>(--enclosingVar) + <span class=\"built_in\">var</span>(--globalVar));</span><br><span class=\"line\">  <span class=\"comment\">/* 60px for now */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义属性更改会立即应用到所有实例\"><a href=\"#自定义属性更改会立即应用到所有实例\" class=\"headerlink\" title=\"自定义属性更改会立即应用到所有实例\"></a>自定义属性更改会立即应用到所有实例</h3><p>到目前为止,我们还没有看到任何和Sass变量不同的地方。然而,让我们在使用变量后重新给他赋值：</p>\n<p>在这个Sass案例中，这没有影响：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$closureVar: 30px; // local variable</span><br><span class=\"line\">font-size: $closureVar +$enclosingVar+ $globalVar;</span><br><span class=\"line\">// 60px, $closureVar: 30px is used</span><br><span class=\"line\">$closureVar: 50px; // local variable</span><br></pre></td></tr></table></figure>\n<p>但是在CSS中，计算的值会改变，因为<code>font-size</code>的值时重新计算的通过改变<code>--closureVar</code>的值：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.enclosing</span> <span class=\"selector-class\">.closure</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--closureVar</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"built_in\">calc</span>(var(--closureVar) + <span class=\"built_in\">var</span>(--enclosingVar) + <span class=\"built_in\">var</span>(--globalVar));</span><br><span class=\"line\">  <span class=\"comment\">/* 80px for now, --closureVar: 50px is used */</span></span><br><span class=\"line\">  <span class=\"attribute\">--closureVar</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是第一个巨大的差异：如果你重新给一个自定义属性赋值，浏览器会重新计算所有的变量并且<code>calc()</code>表达式会被调用。</p>\n<h3 id=\"预处理器不会和DOM结构有关联关系\"><a href=\"#预处理器不会和DOM结构有关联关系\" class=\"headerlink\" title=\"预处理器不会和DOM结构有关联关系\"></a>预处理器不会和DOM结构有关联关系</h3><p>假设我们想要使用的默认<code>font-size</code>字体大小,除了<code>highlighted</code>class存在的地方。</p>\n<p>HTML这样写:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"default\"</span>&gt;</span></span><br><span class=\"line\">  default</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"default highlighted\"</span>&gt;</span></span><br><span class=\"line\">  default highlighted</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>CSS我们使用自定义属性：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.highlighted</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--highlighted-size</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.default</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--default-size</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* Use default-size, except when highlighted-size is provided. */</span></span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"built_in\">var</span>(--highlighted-size, var(--default-size));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为第二个HTML元素的<code>default</code>的class后面紧跟着<code>highlighted</code>class，<code>highlighted</code>class里面的属性会被应用到元素上。</p>\n<p>这个案例中，意味着<code>--highlighted-size: 30px;</code>将被应用，也就是说<code>font-size</code>属性将使用<code>--highlighted-size</code>的值。</p>\n<p>现在,让我们尝试使用Sass实现同样的事情:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.highlighted &#123;</span><br><span class=\"line\">  $highlighted-size: 30px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.default &#123;</span><br><span class=\"line\">  $default-size: 10px;</span><br><span class=\"line\">  /* Use default-size, except when highlighted-size is provided. */</span><br><span class=\"line\">  @if variable-exists(highlighted-size) &#123;</span><br><span class=\"line\">    font-size: $highlighted-size;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @else &#123;</span><br><span class=\"line\">    font-size: $default-size;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是因为所有Sass计算和处理发生在编译时间,当然,它不知道任何关于DOM结构,完全依赖于代码的结构。</p>\n<p>就像你看到的一样，自定义属性在变量作用域和CSS属性添加到级联关系中都是有优势，DOM结构关联以及遵循CSS规则和其它属性一样。</p>\n<p>第二部分我们要讨论的话题是DOM结构关联和动态性。</p>\n<h2 id=\"CSS-关键词和all属性\"><a href=\"#CSS-关键词和all属性\" class=\"headerlink\" title=\"CSS-关键词和all属性\"></a>CSS-关键词和<code>all</code>属性</h2><p>CSS自定义属性是服从相同的CSS规则在使用CSS自定义属性的时候。这意味着你可以分配人意的通用的CSS关键字给它：</p>\n<ul>\n<li><code>inherit</code><br>  使用这个CSS关键字的值将继承父亲元素</li>\n<li><code>initial</code><br> 这个值在CSs文档中有详细描述（在这个案例中自定义属性是空的值）</li>\n<li><code>unset</code><br> 使用这个继承的值如果属性是普通继承（在案例中是自定义属性）或者初始化值如果属性没有使用继承。</li>\n<li><code>revert</code><br> 这个重置属性默认值建立在客户端的样式表上（在这个案例中自定义属性是空的值）</li>\n</ul>\n<p>这里有个例子：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.common-values</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--border</span>: inherit;</span><br><span class=\"line\">  <span class=\"attribute\">--bgcolor</span>: initial;</span><br><span class=\"line\">  <span class=\"attribute\">--padding</span>: unset;</span><br><span class=\"line\">  <span class=\"attribute\">--animation</span>: revert;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>考虑其它案例。假设你想创建一个组件并且想确认没有其它的样式或自定义属性被无意的应用到这里（一个模块化的CSS解决方案在这种情况下通常被用于样式）</p>\n<p>但是现在这里有另外的方式：使用<code>all</code><a href=\"https://developer.mozilla.org/en/docs/Web/CSS/all\" target=\"_blank\" rel=\"noopener\">CSS属性</a>。这可以快速重置CSS属性。</p>\n<p>同样使用CSS关键字，我们可以这样做：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.my-wonderful-clean-component</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">all</span>: initial;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个可以重置我们所有的组件。</p>\n<p>不幸的是，<code>all</code>关键字<a href=\"https://drafts.csswg.org/css-variables/#defining-variables\" target=\"_blank\" rel=\"noopener\">不能重置自定义属性</a>。有一个<a href=\"https://github.com/w3c/webcomponents/issues/300#issuecomment-144551648\" target=\"_blank\" rel=\"noopener\">正在进行的讨论</a>是否要添加<code>--</code>前缀,将重置所有CSS自定义属性。</p>\n<p>因此,在未来,一个完整的重置可能是这样的:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.my-wonderful-clean-component</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--</span>: initial; <span class=\"comment\">/* reset all CSS custom properties */</span></span><br><span class=\"line\">  <span class=\"attribute\">all</span>: initial; <span class=\"comment\">/* reset all other CSS styles */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS自定义属性的用例\"><a href=\"#CSS自定义属性的用例\" class=\"headerlink\" title=\"CSS自定义属性的用例\"></a>CSS自定义属性的用例</h2><p>有许多使用的自定义属性。我将展示最有趣的。</p>\n<h3 id=\"模仿不存在的CSS规则\"><a href=\"#模仿不存在的CSS规则\" class=\"headerlink\" title=\"模仿不存在的CSS规则\"></a>模仿不存在的CSS规则</h3><p>这些CSS变量的名称是“自定义属性”,那么为什么不使用它们来模拟不存在的属性呢?</p>\n<p>这里有很多: <code>translateX/Y/Z</code>,<code>background-repeat-x/y</code>(还没有跨浏览器兼容的),<code>box-shadow-color</code>。</p>\n<p>让我们试着让最后一个属性工作。在我们的案例中，当鼠标放上去的时候改变盒子的影子的颜色。我们只想遵循DRY原则（不重复<code>boxshadw</code>属性），所以不会改变<code>:hover</code>部分的整个<code>box-shadow</code>的值，我们只需要修改自定义属性的值：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--box-shadow-color</span>: yellow;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">30px</span> <span class=\"built_in\">var</span>(--box-shadow-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--box-shadow-color</span>: orange;</span><br><span class=\"line\">  <span class=\"comment\">/* Instead of: box-shadow: 0 0 30px orange; */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"颜色主题\"><a href=\"#颜色主题\" class=\"headerlink\" title=\"颜色主题\"></a>颜色主题</h3><p>一个最普遍的案例就是使用自定义属性来定义应用程序的主题颜色。自定义属性可以用来解决这类问题。因此，提供一个简单的颜色主题给组件。</p>\n<p>这里是我们<a href=\"https://codepen.io/malyw/pen/XpRjNK\" target=\"_blank\" rel=\"noopener\">按钮组件的代码</a>:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">linear-gradient</span>(to bottom, #3498db, #2980b9);</span><br><span class=\"line\">  <span class=\"attribute\">text-shadow</span>: <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"number\">3px</span> <span class=\"number\">#777</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">1px</span> <span class=\"number\">3px</span> <span class=\"number\">#777</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">28px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span> <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假设我们想要切换颜色主题。</p>\n<p>首先，我们将所有的颜色变量扩展为自定义CSS属性并且从写我们的组件。因此，<a href=\"https://codepen.io/malyw/pen/EZmgmZ\" target=\"_blank\" rel=\"noopener\">结果是一样的</a>：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--shadow-color</span>: <span class=\"number\">#777</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--gradient-from-color</span>: <span class=\"number\">#3498db</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--gradient-to-color</span>: <span class=\"number\">#2980b9</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">linear-gradient</span>(</span><br><span class=\"line\">    to bottom,</span><br><span class=\"line\">    var(--gradient-from-color),</span><br><span class=\"line\">    <span class=\"built_in\">var</span>(--gradient-to-color)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"attribute\">text-shadow</span>: <span class=\"number\">1px</span> <span class=\"number\">1px</span> <span class=\"number\">3px</span> <span class=\"built_in\">var</span>(--shadow-color);</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">1px</span> <span class=\"number\">3px</span> <span class=\"built_in\">var</span>(--shadow-color);</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">28px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color);</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span> <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一切是我们所需要的。这样，我们可以覆盖颜色变量为指定的切换颜色并且在需要的时候应用它们。例如，我们可以添加一个全局的切换HTML主题的<code>inverted</code>的class（添加在<code>body</code>元素）并且在应用的时候改变颜色：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span><span class=\"selector-class\">.inverted</span> <span class=\"selector-class\">.btn</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--shadow-color</span>: <span class=\"number\">#888888</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--gradient-from-color</span>: <span class=\"number\">#CB6724</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--gradient-to-color</span>: <span class=\"number\">#D67F46</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这中行为在不能有重复代码的前提下CSS预处理器是没办法实现的。预处理器,你总是需要覆盖的实际值和规则,这经常导致额外的CSS。</p>\n<p>CSS自定义属性,解决方案是尽可能的干净,避免复制和粘贴,因为只重新定义变量的值。</p>\n<h2 id=\"在JavaScript中使用CSS自定义属性\"><a href=\"#在JavaScript中使用CSS自定义属性\" class=\"headerlink\" title=\"在JavaScript中使用CSS自定义属性\"></a>在JavaScript中使用CSS自定义属性</h2><p>以前，从CSS发送数据到JavaScript时,我们常常不得不求助于<a href=\"https://blog.hospodarets.com/passing_data_from_sass_to_js\" target=\"_blank\" rel=\"noopener\">技巧</a>,通过写入纯CSS的JSON格式的值,然后从JavaScript读取它。</p>\n<p>现在,我们可以很容易地使用JavaScript读取CSS变量，分别使用我们熟知的<code>.getPropertyValue()</code>方法和<code>.setProperty()</code>方法进行读取和写入，像平常的CSS属性一样使用:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Gives a CSS custom property value applied at the element</span></span><br><span class=\"line\"><span class=\"comment\">* element &#123;Element&#125;</span></span><br><span class=\"line\"><span class=\"comment\">* varName &#123;String&#125; without '--'</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* For example:</span></span><br><span class=\"line\"><span class=\"comment\">* readCssVar(document.querySelector('.box'), 'color');</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readCssVar</span>(<span class=\"params\">element, varName</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> elementStyles = getComputedStyle(element);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> elementStyles.getPropertyValue(<span class=\"string\">`--<span class=\"subst\">$&#123;varName&#125;</span>`</span>).trim();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Writes a CSS custom property value at the element</span></span><br><span class=\"line\"><span class=\"comment\">* element &#123;Element&#125;</span></span><br><span class=\"line\"><span class=\"comment\">* varName &#123;String&#125; without '--'</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* For example:</span></span><br><span class=\"line\"><span class=\"comment\">* readCssVar(document.querySelector('.box'), 'color', 'white');</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeCssVar</span>(<span class=\"params\">element, varName, value</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> element.style.setProperty(<span class=\"string\">`--<span class=\"subst\">$&#123;varName&#125;</span>`</span>, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假设我们有一个媒体查询列表值:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.breakpoints-data</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">--phone</span>: <span class=\"number\">480px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--tablet</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为我们只是想重用它们在JavaScript中——例如,在<code>Window.matchMedia()</code>,我们可以很容易地从CSS中获取它们:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> breakpointsData = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.breakpoints-data'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> phoneBreakpoint = getComputedStyle(breakpointsData)</span><br><span class=\"line\">  .getPropertyValue(<span class=\"string\">'--phone'</span>);</span><br></pre></td></tr></table></figure>\n<p>JavaScript如何操控自定义属性,我创建了一个交互式3D的CSS立方体演示,响应用户的操作。</p>\n<p>它不是很困难。我们只需要添加一个简单的背景颜色，然后将五个立方体面临的相关值进行变换使用<code>transform</code>属性:<code>translateZ()</code>,<code>translateY()</code>,<code>rotateX()</code>和<code>rotateY()</code>。</p>\n<p>为了提供正确的视角,我添加了一个页面容器:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#world</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">--translateZ</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--rotateX</span>:<span class=\"number\">65</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--rotateY</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">transform-style</span>:preserve-<span class=\"number\">3</span>d;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>:</span><br><span class=\"line\">    <span class=\"built_in\">translateZ</span>(calc(var(--translateZ) * <span class=\"number\">1px</span>))</span><br><span class=\"line\">    <span class=\"built_in\">rotateX</span>(calc(var(--rotateX) * <span class=\"number\">1deg</span>))</span><br><span class=\"line\">    <span class=\"built_in\">rotateY</span>(calc(var(--rotateY) * <span class=\"number\">1deg</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>唯一缺少的是交互性。demo在鼠标移动的时候需要改变X和Y视角（<code>--rotateX</code> 和 <code>--rotateY</code>)并且鼠标滚动时要放大和缩小(<code>--translateZ</code>)。</p>\n<p>这是JavaScript的代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Events</span></span><br><span class=\"line\">onMouseMove(e) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.worldXAngle = (<span class=\"number\">.5</span> - (e.clientY / <span class=\"built_in\">window</span>.innerHeight)) * <span class=\"number\">180</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.worldYAngle = -(<span class=\"number\">.5</span> - (e.clientX / <span class=\"built_in\">window</span>.innerWidth)) * <span class=\"number\">180</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.updateView();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">onMouseWheel(e) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*…*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.worldZ += delta * <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.updateView();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// JavaScript -&gt; CSS</span></span><br><span class=\"line\">updateView() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.worldEl.style.setProperty(<span class=\"string\">'--translateZ'</span>, <span class=\"keyword\">this</span>.worldZ);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.worldEl.style.setProperty(<span class=\"string\">'--rotateX'</span>, <span class=\"keyword\">this</span>.worldXAngle);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.worldEl.style.setProperty(<span class=\"string\">'--rotateY'</span>, <span class=\"keyword\">this</span>.worldYAngle);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>从本质上讲,我们已经改变了CSS自定义属性的值。其他(旋转和缩放)是由CSS。</p>\n<p>提示：一个最简单的办法调试CSS自定义属性的值就是把它的值展示到当前的CSS内容里面（例如字符串),那么浏览器将自动显示当前应用的值：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">'--screen-category : '</span><span class=\"built_in\">var</span>(--screen-category);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你可以查看这个<a href=\"https://codepen.io/malyw/pen/oBWMOY\" target=\"_blank\" rel=\"noopener\">CSS演示</a>(没有HTML或JavaScript)。(调整窗口的浏览器自动反映CSS定义属性值更改。)</p>\n<h2 id=\"浏览器支持\"><a href=\"#浏览器支持\" class=\"headerlink\" title=\"浏览器支持\"></a>浏览器支持</h2><p><a href=\"http://caniuse.com/#feat=css-variables\" target=\"_blank\" rel=\"noopener\">所有的主流浏览器已经支持</a>CSS自定义属性：</p>\n<p><img src=\"/images/2017-04-24-css-custom-properties/0422_03.jpg\" alt=\"css-variables\"></p>\n<p>意味着,你可以开始使用它们。</p>\n<p>如果你需要支持老式浏览器,你可以学习语法和用法示例,考虑可能的切换方法或同时使用CSS自定义属性和预处理器变量。</p>\n<p>当然,我们需要能够检测支持CSS和JavaScript提供后备或增强。</p>\n<p>这是很简单的。对于CSS,可以使用一个虚拟`@supports<a href=\"https://developer.mozilla.org/en/docs/Web/CSS/@supports\" target=\"_blank\" rel=\"noopener\">条件</a>查询功能:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">supports</span> ( (--a: <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* supported */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@<span class=\"keyword\">supports</span> ( not (--a: <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* not supported */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在JavaScript中,可以使用相同的CSS.supports()静态方法查询自定义属性:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isSupported = <span class=\"built_in\">window</span>.CSS &amp;&amp;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.CSS.supports &amp;&amp; <span class=\"built_in\">window</span>.CSS.supports(<span class=\"string\">'--a'</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isSupported) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* supported */</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* not supported */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们看到,CSS自定义属性仍然不支持所有的浏览器。知道了这一点,你可以逐步提高你的应用程序通过检查它们是否支持CSS自定义属性。</p>\n<p>例如，你可以生成2份CSS文件：一份包含CSS自定义属性另一份不包含它们，在内联属性中(不久我们将讨论)。</p>\n<p>默认加载没有包含CSS自定义属性的样式的文件。然后通过JavaScript判断是否支持CSS自定义属性来进行切换版本：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"without-css-custom-properties.css\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"all\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JavaScript</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(isSupported)&#123;</span><br><span class=\"line\">  removeCss(<span class=\"string\">'without-css-custom-properties.css'</span>);</span><br><span class=\"line\">  loadCss(<span class=\"string\">'css-custom-properties.css'</span>);</span><br><span class=\"line\">  <span class=\"comment\">// + conditionally apply some application enhancements</span></span><br><span class=\"line\">  <span class=\"comment\">// using the custom properties</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这只是一个例子。下面您将看到,有更好的选择。</p>\n<h2 id=\"怎么开始使用它们\"><a href=\"#怎么开始使用它们\" class=\"headerlink\" title=\"怎么开始使用它们\"></a>怎么开始使用它们</h2><p>根据最近的<a href=\"https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results\" target=\"_blank\" rel=\"noopener\">调查</a>,Sass依然是开发社区预处理器的首选。</p>\n<p>因此,让我们考虑如何开始在Sass中使用CSS自定义属性使或准备它们。</p>\n<p>我们有以下选择。</p>\n<h3 id=\"1-手动检查代码的支持\"><a href=\"#1-手动检查代码的支持\" class=\"headerlink\" title=\"1.手动检查代码的支持\"></a>1.手动检查代码的支持</h3><p>这个方法的一个优点的手动检查代码是否支持自定义属性是它工作,我们现在能做的就是使用这个方法(别忘了我们现在在使用Sass):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$color: red;</span><br><span class=\"line\">:root &#123;</span><br><span class=\"line\">  --color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">  @supports ( (--a: 0)) &#123;</span><br><span class=\"line\">    color: var(--color);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @supports ( not (--a: 0)) &#123;</span><br><span class=\"line\">    color: $color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法有许多缺点,尤其是代码变得复杂,并复制和粘贴变得相当难以维护。</p>\n<h3 id=\"2-使用一个插件-自动生成目标CSS\"><a href=\"#2-使用一个插件-自动生成目标CSS\" class=\"headerlink\" title=\"2.使用一个插件,自动生成目标CSS\"></a>2.使用一个插件,自动生成目标CSS</h3><p>今天PostCSS生态系统提供了很多的插件。一半以上的对自定义属性都可以保证输出的CSS正常工作，假设你只提供全局变量(即你只声明或改变CSS内自定义属性<code>:root</code>选择器),所以他们的值很容易内联化。</p>\n<p>案例：<a href=\"https://github.com/postcss/postcss-custom-properties\" target=\"_blank\" rel=\"noopener\">postcss-custom-properties</a>.</p>\n<p>这个插件提供了几个优点:它使语法工作;PostCSS兼容所有的基础设施,它不需要配置。</p>\n<p>然而，这也有缺点。这个插件需要您使用CSS定义属性，所以，而你的项目并没有准备从使用Sass变量中切换过来。同样,你不会有多大的控制转换,因为它是在Sass完成编译之后操作CSS。最后，插件没有提供很多的调试信息。</p>\n<h3 id=\"3-CSS-VARS-MIXIN\"><a href=\"#3-CSS-VARS-MIXIN\" class=\"headerlink\" title=\"3.CSS-VARS MIXIN\"></a>3.<a href=\"https://github.com/malyw/css-vars\" target=\"_blank\" rel=\"noopener\">CSS-VARS MIXIN</a></h3><p>在我的大多数项目中，我已经开始使用CSS自定义属性并且尝试了许多策略:</p>\n<ol>\n<li>从Sass切换到下一代CSS在使用PostCss前提下。</li>\n<li>从Sass变量转换到纯CSS自定义属性。</li>\n<li>使用CSS变量Sass检测它们是否支持。</li>\n</ol>\n<p>根据以上的经验,我开始寻找一个解决方案,来满足我的要求:</p>\n<ol>\n<li>在Sass中需要使用简单。</li>\n<li>它应该直接使用,语法必须尽可能接近原生CSS自定义属性。</li>\n<li>内联CSS输出值切换到CSS变量应该很容易。</li>\n<li>团队成员熟悉CSS可以使用自定义属性的解决方案。</li>\n<li>应该有一个方法对使用的变量的边界情况有调试信息。</li>\n</ol>\n<p>因此,我创建了<code>css-vars</code>,<code>Sass mixin</code>,你可以在<a href=\"https://github.com/malyw/css-vars\" target=\"_blank\" rel=\"noopener\">Github上</a>找到。使用它,你可以开始使用CSS自定义属性的语法。</p>\n<h2 id=\"使用css-vars-Mixin\"><a href=\"#使用css-vars-Mixin\" class=\"headerlink\" title=\"使用css-vars Mixin\"></a>使用css-vars Mixin</h2><p>声明变量(s),使用mixin如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$white-color: #fff;</span><br><span class=\"line\">$base-font-size: 10px;</span><br><span class=\"line\"></span><br><span class=\"line\">@include css-vars((</span><br><span class=\"line\">  --main-color: #000,</span><br><span class=\"line\">  --main-bg: $white-color,</span><br><span class=\"line\">  --main-font-size: 1.5*$base-font-size,</span><br><span class=\"line\">  --padding-top: calc(2vh + 20px)</span><br><span class=\"line\">));</span><br></pre></td></tr></table></figure>\n<p>使用这些变量,使用var()函数:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--main-color);</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">var</span>(--main-bg, #f00);</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"built_in\">var</span>(--main-font-size);</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"built_in\">var</span>(--padding-top) <span class=\"number\">0</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这给了你一种可以控制CSS都是从一个文件输出的能力(从Sass)并开始熟悉语法。另外,您可以重用Sass变量与mixin和逻辑。</p>\n<p>当你想要支持的浏览器使用CSS变量,那么所有你要做的就是在Sass中添加支持:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$css-vars-use-native: true;</span><br></pre></td></tr></table></figure>\n<p>而不是在完成编译的CSS中调整,因为mixin将开始注册自定义属性,var()实例产生的CSS没有任何转换。这意味着你必须完全转向CSS定制属性,我们已经讨论了所有的优势。</p>\n<p>如果你想打开有用的调试信息,添加以下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$css-vars-debug-log: true;</span><br></pre></td></tr></table></figure>\n<p>这将给你:</p>\n<ul>\n<li>使用未定义变量，写log。</li>\n<li>重新分配变量时，写log。</li>\n<li>当一个变量没有定义但传递使用默认值，打印信息。</li>\n</ul>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>现在你知道更多关于CSS的自定义属性，包括它的语法，优势，以及好的使用案例和如何使用JavaScript进行交互。</p>\n<p>您已经了解了如何检测他们是否支持,它们与CSS预处理器变量的不同，和如何使用CSS变量直到它们支持跨浏览器。</p>\n<p>这是正确的时间开始使用CSS自定义属性和准备在浏览器中使用它们。</p>\n<p>原文：<a href=\"https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/\" target=\"_blank\" rel=\"noopener\">https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/</a></p>\n<p>译者：<a href=\"https://github.com/Yi-love\" target=\"_blank\" rel=\"noopener\">Jin</a></p>\n<p>作者：<a href=\"https://www.smashingmagazine.com/author/serghospodarets/\" target=\"_blank\" rel=\"noopener\">Serg Hospodarets</a></p>"},{"title":"【译】rem和em，可能你并不需要它们","date":"2017-04-24T08:30:00.000Z","author":"Timi","_content":"<style>\n    hr.divider {\n        margin: 52px 0 42px;\n        display: block;\n        border: 0;\n        text-align: center;\n        box-sizing: content-box;\n        height: 0;\n    }\n    hr.divider:before {\n        content: '· · ·';\n        display: inline-block;\n        color: rgba(0,0,0,.6);\n        position: relative;\n        font-size: 20px;\n        letter-spacing: .3em;\n        font-weight: 400;\n        font-style: italic;\n        top: -20px;\n    }\n    figcaption {\n        text-align: center;\n        font-size: 12px;\n        color: rgba(0,0,0,.6);\n        position: relative;\n        top: -1.6em;\n    }\n</style>\n\n你可能听过，每当要定义页面上元素的尺寸时，别人都说你应该使用 `em` 或 `rem` ，而不是`px`。\n\n你也可能听过一些像“无障碍访问”、“流式布局”和“弹性布局”之类的概念并认为这确实是个不错的想法。甚至有点开始觉得只使用像素定位太out了。\n\n如果是这样，我有一些好消息告诉你，可以将你从这些讨厌的单位中解救出来。\n\n那就是使用像素定位是个完全没有问题的选择，在定义尺寸方面它甚至可以表现的非常优异。\n\n<!-- more -->\n\n<hr class=\"divider\"></hr>\n\n理想状态下，大家不需要我提供什么证据就会相信我的理论。但这是不现实的，所以以下我勉为其难地给出了我的理由，来告诉你为什么使用这些单位没有太大意义。\n\n## 1 提高可访问性\n\n或更具体的说：“使用rem可以让你的布局在用户手动缩放页面时展现的更好”。\n\n现在人可能真的太过于看重可访问性了。我某天在一个YouTube评论上看到有人说希望找到一个比WGAG标准更具体一点的“可访问性测试工具”。\n\n行，我现在就给你做一个：\n\n![accessibility testing device](/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/1.jpg)\n<figcaption>\"像一个不能去访问你页面的人那样去访问你的页面\"</figcaption>\n\n我同时出售30寸大屏专用版（一条毛巾），以及通用解决方案，一个为你脑袋准备的枕头。\n\n我的观点：你不需要深入的知识和花哨的工具去测试rem和em是否可以提供“更好的可访问性”，只需要想象一下你是位视力不好的人。如果你想象力匮乏，可以试着把你的屏幕包几层保鲜膜。\n\n当然可访问性不单单是指可阅读性，但这里我们先只讨论这点。\n\n好现在问问视力不好的你，下面三项哪个可以帮你提高可阅读性：\n\n1. 更改操作系统的字体大小，这会让所有的文字、菜单、时钟、其他应用和网页字体变得更大。\n2. 放大那些字号特别小的页面。\n3. 改变浏览器默认的最小字号。\n\n我不知道你会选哪个，但如果我阅读小号字很吃力的话，我会直接调大操作系统的字号，然后彻底忘记它的存在。\n\n（做演示时这么干也很方便）\n\n<hr class=\"divider\"></hr>\n\n我们来深入的研究一下...\n\n本着研究精神，我写了一个小的demo页（如果谁抑制不住自己的好奇心，这里是[jsbin](https://output.jsbin.com/juluzo)地址）。\n\n页面上三段的html和css是一样的，唯一不同的是它们所用的单位，最上面那个用的全是px，中间的全是em，最下面的全是rem。\n\n在默认缩放情况下（1em = 16px）它们看起来是这样的：\n\n![default zoom](/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/2.png)\n<figcaption>字体很难阅读？那我只能表示同情了。</figcaption>\n\n现在，将操作系统的字号放大为150%，Windows上用Chrome看是这样的：\n\n![default zoom](/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/3.png)\n<figcaption>感觉就像是脸贴近了点。</figcaption>\n\n接下来，把操作系统的字号还原回100%，调大浏览器的字号。\n\n对某些网站来说主导航栏用12px的字号是可接受的，因为这样可以更好的利用屏幕空间，而不是去思考如何缩短命名，但对亚马逊来说，13px的默认字号，12px的主导航栏字号显然就不合适了。\n\n幸运的是浏览器对老年人们还是友好的，你可以crtl加滚轮去缩放页面。\n\n我视力超好，但有时我也会缩放页面，还有Chrome的开发者工具，它的默认字号是12px，但我也不知道为啥原谅它了。\n\n（小广告：如果你觉得维基百科的字号有点小，或不喜欢它水平方向占满整页的排版，我写了一个叫[Skinny](https://chrome.google.com/webstore/detail/skinny/lfohknefidgmanghfabkohkmlgbhmeho) 的Chrome 插件，可以调大默认字号顺便让每行变短点。）\n\n扯远了，现在来看下浏览器页面放大到150%时的效果：\n\n![default zoom](/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/4.png)\n\n浏览器的UI变小了，但页面内容看上去是一样的。\n\n最后来看看改变浏览器的默认字体大小，先试试火狐，这是没缩放的时候：\n\n![default zoom](/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/5.png)\n\n将最小字号设为20px之后：\n\n![default zoom](/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/6.png)\n\n使用px的nav标签变窄了，header标签的字体变大了一点点。\n\n然后用Chrome将字体大小设为“大”。\n\n![default zoom](/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/7.png)\n\n终于可以看出点区别了，因为title标签里的字体是18px，以及侧边栏nav标签的宽100px是写死的，所以它们大小都没有变。\n\n你可能会觉得这是rem的伟大胜利，但并非如此。\n\n虽然没有证据表明人们到底有没有十分依赖改变浏览器字体大小，但却有些确凿的事实：\n - 改变浏览器字体大小对facebook, youtube, amazon, twitter, medium, linkedIn, eBay等网站并没有效果，Alexa排名前100的网站我还只扫了一半。\n - 所以如果某人阅读16px字体有障碍，他肯定会用其他方法去访问以上网站。\n - 而且改变浏览器字体大小显然对操作系统的其他部分不起作用。\n - 所以可以推断如果某人阅读16px字体有障碍，但他又想去看Excel菜单、电子邮件、系统设置、文件夹等，他需要去找个其他方法来解决这个问题。\n\n这就很明显了，显示世界中改变浏览器字体大小根本毫无用武之地。所以在决策时我也不会考虑这一设置。\n\n<hr class=\"divider\"></hr>\n\n“更好的可访问性”论述完毕，现在来看看...\n\n## 2 使用rem/em时的断点设置\n换句话讲，如果用px去定义断点，它们就是写死的，不会随着页面缩放而改变，因为px就是固定的像素不是吗？\n\n好吧那都是骗人的（可能过去某个时候是真的，但那已经是历史了。）\n\n我的demo页断点设的是`600px`，中间的是`37.5em`，最后一个是`37.5rem`。默认情况下它们都是等于600px的。\n\n小于断点的时候，发送者和主题文本是竖直排列的，大于的时候是水平排列。\n\n用IE11来试试，将页面放大为150%，然后把浏览器拖成900px宽（600px的1.5倍）。\n\n你认为IE11会怎么判断呢？\n\n它会认为断点任何时候都是600px，然后显示大屏方案；还是自适应断点到150%，显示小屏方案（文本竖直排列）？\n\n好吧，我很惊奇的发现，IE在我缩放页面的同时也缩放了断点值。\n\n![default zoom](/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/8.png)\n<figcaption>窗口宽度900px。</figcaption>\n\n这是IE11，那其他浏览器呢...\n\nSafari也很让我觉得奇怪。这次我把窗口调的比900px稍微小点。现在窗口宽度应该是比断点的600px宽多了，但在150%的缩放下，所有三段全排版成了断点以下的格式。\n\n![default zoom](/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/9.png)\n\n所以不用担心如果用px断点不会跟着缩放的问题。或者你可以先去找一个不缩放px的浏览器，然后根据其市场份额再做决定。如果你必须支持IE8，然后发现它不缩放断点，那你就有了一个合法的理由去使用rem了（当然IE8既不支持媒体查询也不支持rem，但没必要在这死磕了）。\n\n## 3 使用em控制文本周围的“动态”间距\n\n这几乎是个好主意，我了解支持者们都是怎么说的，“用em设padding，这样如果要改的话就只用修改font size了”。\n\n我懂的，真的。但我倾向于做的更精确些，比方，设置一个按钮的font-size和padding让它在大屏上刚好60px高，小屏上刚好50px，视觉上完美契合我60px/50px的标题栏。\n\n而且如果我的设计稿是来自一位专业的设计师，没有哪一位会不在乎一个按钮的精确大小的，这样的设计师存在吗？\n\n但如果你是自己设计页面，而且完全不在乎按钮具体多高，段落文本离标题栏多远，并且希望当字号改变时旁边的间距也随之增加，那么margin/padding用em去设就正好适用了。\n\n<hr class=\"divider\"></hr>\n\n现在，再来说一个更莫名其妙的劝你使用rem，em的原因（我也不知道我为什么要给这些标题列序号）。\n\n## 4 生成一个单改变根元素字号就可以改变整体大小的模块\n\n这句话来自几周前的一篇博客文章，[用em设计一个响应式网站](http://www.creativebloq.com/how-to/design-a-responsive-site-with-em-based-sizing)。\n\n文章详细解释了通过使用rem和em的组合，你可以生成一个只需改变根节点元素的字体大小就能缩放成各种不同尺寸的组件。\n\n这听上去很有道理，就跟“如果你经常杀人，那么开车前拿把铲子会更方便”一样有道理。\n\n我知道这是一个很好的建议。但是我根本记不起我上次行凶的时候，同样我也记不起上次我需要使用这个通过一个变量就可以改变成任意尺寸的组件是什么时候。\n\n所以这里我建议，开始一个项目之前先问问你自己：我需要写一个在某些情况下是固定大小，某些情况下又要放大10%的组件吗？如果答案是肯定的，那么就按着上面那篇博客教的做吧，那正是你需要的。\n\n## 你可以用一个属性来缩放所以页面上的文本\n（我决定标题上不加序号了）\n\n另一个同样讨厌的叫你用em的原因是这样说的：假如你在css里50多个不同的地方都定义了`font-size`，然后希望所有50多个地方都在大屏上更大，小屏上更小，那你需要做超多媒体查询。\n\n这种情况下明显最优解决方案是所有地方全用rem，然后媒体查询里直接改变根节点的字体大小，你就会震惊的发现，哇！所有字都变大了诶。\n\n我觉得两点原因可以使这个提议被安全的忽略掉：\n1. 它假设你想在某个给定断点下放大缩小所有网页文本，包括标题，导航栏，正文，全部一次性而且是通过一个变量来进行缩放。这本身是件很需要勇气的事情。\n2. 主要问题是，如果你真的定义了font-size50多次，那么你更需要做的是好好组织一下你的排版了。\n\n当你专门分出一个文件来定义排版，里面有12个样式，每个样式里你都有不同的尺寸去适应四种不同的屏幕大小，这样就有48个不同的font-size定义了，然后再加上line-height, margin, padding...就像丘吉尔说的，“这真是一个大工程”。\n\n到那时你很容易的就会考虑到，“不行，重复的东西太多了，必须重构一下，不论代价如何决不能产生这么多的重复代码”。\n\n其实我很不同意这个观点。我经常见到很多应用打着DRY（不要重复你自己）的名义引入了更多复杂的东西，永远不要低估混用不同单位时所增加的复杂性。NASA因为用了[两套不同的单位](http://edition.cnn.com/TECH/space/9909/30/mars.metric.02/index.html)现在都没能找到他们的火星轨道卫星。\n\n别让你的网页也迷失在太空中了。\n\n哦还不光是单位，还有那些以一个地方的字号为基准去改变另一个地方的字号的情况。这就是封装的对立面，它们瞧不起绝对确定的东西，而这样通常都只是自找麻烦。\n\n所以还是好好地用px去写一下你的排版，稍微有点重复并不要紧，确保所有文本都是你指定的精确值，然后忘掉它，忙其他的去吧。\n\n## 结论\n\n所有以上这些可以总结成这一点：某些情况下因为某些特定原因你是应该使用rem或em，但这些场景正变得越来越少，也离那些建议原因越来越远。\n\n所以不要再硬去寻找使用rem或em的理由了，px已经够用了。但如果你遇到了那些rem或em是更优选择的场景，那也放心去用吧。\n\n## 关于单位使用的一些Bonus\n下面的东西与本文无关，所以我只是简单列了下，并没有进一步阐述。\n\n- 如果你有两个相邻的文本位，且希望它们的padding差不多一个空格，那你可以试试`1ch`。\n- 如果你希望body的背景色垂直方向至少占满一屏，那可以试试用`100vh`代替`100%`，但通常你要用`vh`的话，最好现在iOS设备上好好测试一下。\n- 你知道vertical-align可以用百分比吗？如果你发现`vertical-align: super`或`top`不是你想要的那样，别去加`position: relative; top: -3px`之类的代码，试试看`vertical-align: 30%`吧。\n- 当遇到弹性布局时，不要忘了`flex-grow`和`flex-shrink`，它们可能一开始会让你觉得有点头疼，但就像一个巨型棒棒糖一样，它们值得拥有。\n\n\n\n原文：[rems and ems, and why you probably don’t need them](https://hackernoon.com/rems-and-ems-and-why-you-probably-dont-need-them-664b9ce1e09f)\n\n作者：[David Gilbertson](https://hackernoon.com/@david.gilbertson)\n\n译者：[Timi](http://tianq.space)\n\n","source":"_posts/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them.md","raw":"---\ntitle: 【译】rem和em，可能你并不需要它们\ndate: 2017-04-24 16:30\ncategory: 翻译\ntags: [CSS,技术]\nauthor: Timi\n---\n<style>\n    hr.divider {\n        margin: 52px 0 42px;\n        display: block;\n        border: 0;\n        text-align: center;\n        box-sizing: content-box;\n        height: 0;\n    }\n    hr.divider:before {\n        content: '· · ·';\n        display: inline-block;\n        color: rgba(0,0,0,.6);\n        position: relative;\n        font-size: 20px;\n        letter-spacing: .3em;\n        font-weight: 400;\n        font-style: italic;\n        top: -20px;\n    }\n    figcaption {\n        text-align: center;\n        font-size: 12px;\n        color: rgba(0,0,0,.6);\n        position: relative;\n        top: -1.6em;\n    }\n</style>\n\n你可能听过，每当要定义页面上元素的尺寸时，别人都说你应该使用 `em` 或 `rem` ，而不是`px`。\n\n你也可能听过一些像“无障碍访问”、“流式布局”和“弹性布局”之类的概念并认为这确实是个不错的想法。甚至有点开始觉得只使用像素定位太out了。\n\n如果是这样，我有一些好消息告诉你，可以将你从这些讨厌的单位中解救出来。\n\n那就是使用像素定位是个完全没有问题的选择，在定义尺寸方面它甚至可以表现的非常优异。\n\n<!-- more -->\n\n<hr class=\"divider\"></hr>\n\n理想状态下，大家不需要我提供什么证据就会相信我的理论。但这是不现实的，所以以下我勉为其难地给出了我的理由，来告诉你为什么使用这些单位没有太大意义。\n\n## 1 提高可访问性\n\n或更具体的说：“使用rem可以让你的布局在用户手动缩放页面时展现的更好”。\n\n现在人可能真的太过于看重可访问性了。我某天在一个YouTube评论上看到有人说希望找到一个比WGAG标准更具体一点的“可访问性测试工具”。\n\n行，我现在就给你做一个：\n\n![accessibility testing device](/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/1.jpg)\n<figcaption>\"像一个不能去访问你页面的人那样去访问你的页面\"</figcaption>\n\n我同时出售30寸大屏专用版（一条毛巾），以及通用解决方案，一个为你脑袋准备的枕头。\n\n我的观点：你不需要深入的知识和花哨的工具去测试rem和em是否可以提供“更好的可访问性”，只需要想象一下你是位视力不好的人。如果你想象力匮乏，可以试着把你的屏幕包几层保鲜膜。\n\n当然可访问性不单单是指可阅读性，但这里我们先只讨论这点。\n\n好现在问问视力不好的你，下面三项哪个可以帮你提高可阅读性：\n\n1. 更改操作系统的字体大小，这会让所有的文字、菜单、时钟、其他应用和网页字体变得更大。\n2. 放大那些字号特别小的页面。\n3. 改变浏览器默认的最小字号。\n\n我不知道你会选哪个，但如果我阅读小号字很吃力的话，我会直接调大操作系统的字号，然后彻底忘记它的存在。\n\n（做演示时这么干也很方便）\n\n<hr class=\"divider\"></hr>\n\n我们来深入的研究一下...\n\n本着研究精神，我写了一个小的demo页（如果谁抑制不住自己的好奇心，这里是[jsbin](https://output.jsbin.com/juluzo)地址）。\n\n页面上三段的html和css是一样的，唯一不同的是它们所用的单位，最上面那个用的全是px，中间的全是em，最下面的全是rem。\n\n在默认缩放情况下（1em = 16px）它们看起来是这样的：\n\n![default zoom](/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/2.png)\n<figcaption>字体很难阅读？那我只能表示同情了。</figcaption>\n\n现在，将操作系统的字号放大为150%，Windows上用Chrome看是这样的：\n\n![default zoom](/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/3.png)\n<figcaption>感觉就像是脸贴近了点。</figcaption>\n\n接下来，把操作系统的字号还原回100%，调大浏览器的字号。\n\n对某些网站来说主导航栏用12px的字号是可接受的，因为这样可以更好的利用屏幕空间，而不是去思考如何缩短命名，但对亚马逊来说，13px的默认字号，12px的主导航栏字号显然就不合适了。\n\n幸运的是浏览器对老年人们还是友好的，你可以crtl加滚轮去缩放页面。\n\n我视力超好，但有时我也会缩放页面，还有Chrome的开发者工具，它的默认字号是12px，但我也不知道为啥原谅它了。\n\n（小广告：如果你觉得维基百科的字号有点小，或不喜欢它水平方向占满整页的排版，我写了一个叫[Skinny](https://chrome.google.com/webstore/detail/skinny/lfohknefidgmanghfabkohkmlgbhmeho) 的Chrome 插件，可以调大默认字号顺便让每行变短点。）\n\n扯远了，现在来看下浏览器页面放大到150%时的效果：\n\n![default zoom](/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/4.png)\n\n浏览器的UI变小了，但页面内容看上去是一样的。\n\n最后来看看改变浏览器的默认字体大小，先试试火狐，这是没缩放的时候：\n\n![default zoom](/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/5.png)\n\n将最小字号设为20px之后：\n\n![default zoom](/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/6.png)\n\n使用px的nav标签变窄了，header标签的字体变大了一点点。\n\n然后用Chrome将字体大小设为“大”。\n\n![default zoom](/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/7.png)\n\n终于可以看出点区别了，因为title标签里的字体是18px，以及侧边栏nav标签的宽100px是写死的，所以它们大小都没有变。\n\n你可能会觉得这是rem的伟大胜利，但并非如此。\n\n虽然没有证据表明人们到底有没有十分依赖改变浏览器字体大小，但却有些确凿的事实：\n - 改变浏览器字体大小对facebook, youtube, amazon, twitter, medium, linkedIn, eBay等网站并没有效果，Alexa排名前100的网站我还只扫了一半。\n - 所以如果某人阅读16px字体有障碍，他肯定会用其他方法去访问以上网站。\n - 而且改变浏览器字体大小显然对操作系统的其他部分不起作用。\n - 所以可以推断如果某人阅读16px字体有障碍，但他又想去看Excel菜单、电子邮件、系统设置、文件夹等，他需要去找个其他方法来解决这个问题。\n\n这就很明显了，显示世界中改变浏览器字体大小根本毫无用武之地。所以在决策时我也不会考虑这一设置。\n\n<hr class=\"divider\"></hr>\n\n“更好的可访问性”论述完毕，现在来看看...\n\n## 2 使用rem/em时的断点设置\n换句话讲，如果用px去定义断点，它们就是写死的，不会随着页面缩放而改变，因为px就是固定的像素不是吗？\n\n好吧那都是骗人的（可能过去某个时候是真的，但那已经是历史了。）\n\n我的demo页断点设的是`600px`，中间的是`37.5em`，最后一个是`37.5rem`。默认情况下它们都是等于600px的。\n\n小于断点的时候，发送者和主题文本是竖直排列的，大于的时候是水平排列。\n\n用IE11来试试，将页面放大为150%，然后把浏览器拖成900px宽（600px的1.5倍）。\n\n你认为IE11会怎么判断呢？\n\n它会认为断点任何时候都是600px，然后显示大屏方案；还是自适应断点到150%，显示小屏方案（文本竖直排列）？\n\n好吧，我很惊奇的发现，IE在我缩放页面的同时也缩放了断点值。\n\n![default zoom](/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/8.png)\n<figcaption>窗口宽度900px。</figcaption>\n\n这是IE11，那其他浏览器呢...\n\nSafari也很让我觉得奇怪。这次我把窗口调的比900px稍微小点。现在窗口宽度应该是比断点的600px宽多了，但在150%的缩放下，所有三段全排版成了断点以下的格式。\n\n![default zoom](/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/9.png)\n\n所以不用担心如果用px断点不会跟着缩放的问题。或者你可以先去找一个不缩放px的浏览器，然后根据其市场份额再做决定。如果你必须支持IE8，然后发现它不缩放断点，那你就有了一个合法的理由去使用rem了（当然IE8既不支持媒体查询也不支持rem，但没必要在这死磕了）。\n\n## 3 使用em控制文本周围的“动态”间距\n\n这几乎是个好主意，我了解支持者们都是怎么说的，“用em设padding，这样如果要改的话就只用修改font size了”。\n\n我懂的，真的。但我倾向于做的更精确些，比方，设置一个按钮的font-size和padding让它在大屏上刚好60px高，小屏上刚好50px，视觉上完美契合我60px/50px的标题栏。\n\n而且如果我的设计稿是来自一位专业的设计师，没有哪一位会不在乎一个按钮的精确大小的，这样的设计师存在吗？\n\n但如果你是自己设计页面，而且完全不在乎按钮具体多高，段落文本离标题栏多远，并且希望当字号改变时旁边的间距也随之增加，那么margin/padding用em去设就正好适用了。\n\n<hr class=\"divider\"></hr>\n\n现在，再来说一个更莫名其妙的劝你使用rem，em的原因（我也不知道我为什么要给这些标题列序号）。\n\n## 4 生成一个单改变根元素字号就可以改变整体大小的模块\n\n这句话来自几周前的一篇博客文章，[用em设计一个响应式网站](http://www.creativebloq.com/how-to/design-a-responsive-site-with-em-based-sizing)。\n\n文章详细解释了通过使用rem和em的组合，你可以生成一个只需改变根节点元素的字体大小就能缩放成各种不同尺寸的组件。\n\n这听上去很有道理，就跟“如果你经常杀人，那么开车前拿把铲子会更方便”一样有道理。\n\n我知道这是一个很好的建议。但是我根本记不起我上次行凶的时候，同样我也记不起上次我需要使用这个通过一个变量就可以改变成任意尺寸的组件是什么时候。\n\n所以这里我建议，开始一个项目之前先问问你自己：我需要写一个在某些情况下是固定大小，某些情况下又要放大10%的组件吗？如果答案是肯定的，那么就按着上面那篇博客教的做吧，那正是你需要的。\n\n## 你可以用一个属性来缩放所以页面上的文本\n（我决定标题上不加序号了）\n\n另一个同样讨厌的叫你用em的原因是这样说的：假如你在css里50多个不同的地方都定义了`font-size`，然后希望所有50多个地方都在大屏上更大，小屏上更小，那你需要做超多媒体查询。\n\n这种情况下明显最优解决方案是所有地方全用rem，然后媒体查询里直接改变根节点的字体大小，你就会震惊的发现，哇！所有字都变大了诶。\n\n我觉得两点原因可以使这个提议被安全的忽略掉：\n1. 它假设你想在某个给定断点下放大缩小所有网页文本，包括标题，导航栏，正文，全部一次性而且是通过一个变量来进行缩放。这本身是件很需要勇气的事情。\n2. 主要问题是，如果你真的定义了font-size50多次，那么你更需要做的是好好组织一下你的排版了。\n\n当你专门分出一个文件来定义排版，里面有12个样式，每个样式里你都有不同的尺寸去适应四种不同的屏幕大小，这样就有48个不同的font-size定义了，然后再加上line-height, margin, padding...就像丘吉尔说的，“这真是一个大工程”。\n\n到那时你很容易的就会考虑到，“不行，重复的东西太多了，必须重构一下，不论代价如何决不能产生这么多的重复代码”。\n\n其实我很不同意这个观点。我经常见到很多应用打着DRY（不要重复你自己）的名义引入了更多复杂的东西，永远不要低估混用不同单位时所增加的复杂性。NASA因为用了[两套不同的单位](http://edition.cnn.com/TECH/space/9909/30/mars.metric.02/index.html)现在都没能找到他们的火星轨道卫星。\n\n别让你的网页也迷失在太空中了。\n\n哦还不光是单位，还有那些以一个地方的字号为基准去改变另一个地方的字号的情况。这就是封装的对立面，它们瞧不起绝对确定的东西，而这样通常都只是自找麻烦。\n\n所以还是好好地用px去写一下你的排版，稍微有点重复并不要紧，确保所有文本都是你指定的精确值，然后忘掉它，忙其他的去吧。\n\n## 结论\n\n所有以上这些可以总结成这一点：某些情况下因为某些特定原因你是应该使用rem或em，但这些场景正变得越来越少，也离那些建议原因越来越远。\n\n所以不要再硬去寻找使用rem或em的理由了，px已经够用了。但如果你遇到了那些rem或em是更优选择的场景，那也放心去用吧。\n\n## 关于单位使用的一些Bonus\n下面的东西与本文无关，所以我只是简单列了下，并没有进一步阐述。\n\n- 如果你有两个相邻的文本位，且希望它们的padding差不多一个空格，那你可以试试`1ch`。\n- 如果你希望body的背景色垂直方向至少占满一屏，那可以试试用`100vh`代替`100%`，但通常你要用`vh`的话，最好现在iOS设备上好好测试一下。\n- 你知道vertical-align可以用百分比吗？如果你发现`vertical-align: super`或`top`不是你想要的那样，别去加`position: relative; top: -3px`之类的代码，试试看`vertical-align: 30%`吧。\n- 当遇到弹性布局时，不要忘了`flex-grow`和`flex-shrink`，它们可能一开始会让你觉得有点头疼，但就像一个巨型棒棒糖一样，它们值得拥有。\n\n\n\n原文：[rems and ems, and why you probably don’t need them](https://hackernoon.com/rems-and-ems-and-why-you-probably-dont-need-them-664b9ce1e09f)\n\n作者：[David Gilbertson](https://hackernoon.com/@david.gilbertson)\n\n译者：[Timi](http://tianq.space)\n\n","slug":"2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them","published":1,"updated":"2017-12-01T08:50:00.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanokngq0002jxs11tvdxv1g","content":"<style>\n    hr.divider {\n        margin: 52px 0 42px;\n        display: block;\n        border: 0;\n        text-align: center;\n        box-sizing: content-box;\n        height: 0;\n    }\n    hr.divider:before {\n        content: '· · ·';\n        display: inline-block;\n        color: rgba(0,0,0,.6);\n        position: relative;\n        font-size: 20px;\n        letter-spacing: .3em;\n        font-weight: 400;\n        font-style: italic;\n        top: -20px;\n    }\n    figcaption {\n        text-align: center;\n        font-size: 12px;\n        color: rgba(0,0,0,.6);\n        position: relative;\n        top: -1.6em;\n    }\n</style>\n\n<p>你可能听过，每当要定义页面上元素的尺寸时，别人都说你应该使用 <code>em</code> 或 <code>rem</code> ，而不是<code>px</code>。</p>\n<p>你也可能听过一些像“无障碍访问”、“流式布局”和“弹性布局”之类的概念并认为这确实是个不错的想法。甚至有点开始觉得只使用像素定位太out了。</p>\n<p>如果是这样，我有一些好消息告诉你，可以将你从这些讨厌的单位中解救出来。</p>\n<p>那就是使用像素定位是个完全没有问题的选择，在定义尺寸方面它甚至可以表现的非常优异。</p>\n<a id=\"more\"></a>\n<hr class=\"divider\">\n\n<p>理想状态下，大家不需要我提供什么证据就会相信我的理论。但这是不现实的，所以以下我勉为其难地给出了我的理由，来告诉你为什么使用这些单位没有太大意义。</p>\n<h2 id=\"1-提高可访问性\"><a href=\"#1-提高可访问性\" class=\"headerlink\" title=\"1 提高可访问性\"></a>1 提高可访问性</h2><p>或更具体的说：“使用rem可以让你的布局在用户手动缩放页面时展现的更好”。</p>\n<p>现在人可能真的太过于看重可访问性了。我某天在一个YouTube评论上看到有人说希望找到一个比WGAG标准更具体一点的“可访问性测试工具”。</p>\n<p>行，我现在就给你做一个：</p>\n<p><img src=\"/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/1.jpg\" alt=\"accessibility testing device\"></p>\n<figcaption>“像一个不能去访问你页面的人那样去访问你的页面”</figcaption>\n\n<p>我同时出售30寸大屏专用版（一条毛巾），以及通用解决方案，一个为你脑袋准备的枕头。</p>\n<p>我的观点：你不需要深入的知识和花哨的工具去测试rem和em是否可以提供“更好的可访问性”，只需要想象一下你是位视力不好的人。如果你想象力匮乏，可以试着把你的屏幕包几层保鲜膜。</p>\n<p>当然可访问性不单单是指可阅读性，但这里我们先只讨论这点。</p>\n<p>好现在问问视力不好的你，下面三项哪个可以帮你提高可阅读性：</p>\n<ol>\n<li>更改操作系统的字体大小，这会让所有的文字、菜单、时钟、其他应用和网页字体变得更大。</li>\n<li>放大那些字号特别小的页面。</li>\n<li>改变浏览器默认的最小字号。</li>\n</ol>\n<p>我不知道你会选哪个，但如果我阅读小号字很吃力的话，我会直接调大操作系统的字号，然后彻底忘记它的存在。</p>\n<p>（做演示时这么干也很方便）</p>\n<hr class=\"divider\">\n\n<p>我们来深入的研究一下…</p>\n<p>本着研究精神，我写了一个小的demo页（如果谁抑制不住自己的好奇心，这里是<a href=\"https://output.jsbin.com/juluzo\" target=\"_blank\" rel=\"noopener\">jsbin</a>地址）。</p>\n<p>页面上三段的html和css是一样的，唯一不同的是它们所用的单位，最上面那个用的全是px，中间的全是em，最下面的全是rem。</p>\n<p>在默认缩放情况下（1em = 16px）它们看起来是这样的：</p>\n<p><img src=\"/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/2.png\" alt=\"default zoom\"></p>\n<figcaption>字体很难阅读？那我只能表示同情了。</figcaption>\n\n<p>现在，将操作系统的字号放大为150%，Windows上用Chrome看是这样的：</p>\n<p><img src=\"/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/3.png\" alt=\"default zoom\"></p>\n<figcaption>感觉就像是脸贴近了点。</figcaption>\n\n<p>接下来，把操作系统的字号还原回100%，调大浏览器的字号。</p>\n<p>对某些网站来说主导航栏用12px的字号是可接受的，因为这样可以更好的利用屏幕空间，而不是去思考如何缩短命名，但对亚马逊来说，13px的默认字号，12px的主导航栏字号显然就不合适了。</p>\n<p>幸运的是浏览器对老年人们还是友好的，你可以crtl加滚轮去缩放页面。</p>\n<p>我视力超好，但有时我也会缩放页面，还有Chrome的开发者工具，它的默认字号是12px，但我也不知道为啥原谅它了。</p>\n<p>（小广告：如果你觉得维基百科的字号有点小，或不喜欢它水平方向占满整页的排版，我写了一个叫<a href=\"https://chrome.google.com/webstore/detail/skinny/lfohknefidgmanghfabkohkmlgbhmeho\" target=\"_blank\" rel=\"noopener\">Skinny</a> 的Chrome 插件，可以调大默认字号顺便让每行变短点。）</p>\n<p>扯远了，现在来看下浏览器页面放大到150%时的效果：</p>\n<p><img src=\"/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/4.png\" alt=\"default zoom\"></p>\n<p>浏览器的UI变小了，但页面内容看上去是一样的。</p>\n<p>最后来看看改变浏览器的默认字体大小，先试试火狐，这是没缩放的时候：</p>\n<p><img src=\"/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/5.png\" alt=\"default zoom\"></p>\n<p>将最小字号设为20px之后：</p>\n<p><img src=\"/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/6.png\" alt=\"default zoom\"></p>\n<p>使用px的nav标签变窄了，header标签的字体变大了一点点。</p>\n<p>然后用Chrome将字体大小设为“大”。</p>\n<p><img src=\"/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/7.png\" alt=\"default zoom\"></p>\n<p>终于可以看出点区别了，因为title标签里的字体是18px，以及侧边栏nav标签的宽100px是写死的，所以它们大小都没有变。</p>\n<p>你可能会觉得这是rem的伟大胜利，但并非如此。</p>\n<p>虽然没有证据表明人们到底有没有十分依赖改变浏览器字体大小，但却有些确凿的事实：</p>\n<ul>\n<li>改变浏览器字体大小对facebook, youtube, amazon, twitter, medium, linkedIn, eBay等网站并没有效果，Alexa排名前100的网站我还只扫了一半。</li>\n<li>所以如果某人阅读16px字体有障碍，他肯定会用其他方法去访问以上网站。</li>\n<li>而且改变浏览器字体大小显然对操作系统的其他部分不起作用。</li>\n<li>所以可以推断如果某人阅读16px字体有障碍，但他又想去看Excel菜单、电子邮件、系统设置、文件夹等，他需要去找个其他方法来解决这个问题。</li>\n</ul>\n<p>这就很明显了，显示世界中改变浏览器字体大小根本毫无用武之地。所以在决策时我也不会考虑这一设置。</p>\n<hr class=\"divider\">\n\n<p>“更好的可访问性”论述完毕，现在来看看…</p>\n<h2 id=\"2-使用rem-em时的断点设置\"><a href=\"#2-使用rem-em时的断点设置\" class=\"headerlink\" title=\"2 使用rem/em时的断点设置\"></a>2 使用rem/em时的断点设置</h2><p>换句话讲，如果用px去定义断点，它们就是写死的，不会随着页面缩放而改变，因为px就是固定的像素不是吗？</p>\n<p>好吧那都是骗人的（可能过去某个时候是真的，但那已经是历史了。）</p>\n<p>我的demo页断点设的是<code>600px</code>，中间的是<code>37.5em</code>，最后一个是<code>37.5rem</code>。默认情况下它们都是等于600px的。</p>\n<p>小于断点的时候，发送者和主题文本是竖直排列的，大于的时候是水平排列。</p>\n<p>用IE11来试试，将页面放大为150%，然后把浏览器拖成900px宽（600px的1.5倍）。</p>\n<p>你认为IE11会怎么判断呢？</p>\n<p>它会认为断点任何时候都是600px，然后显示大屏方案；还是自适应断点到150%，显示小屏方案（文本竖直排列）？</p>\n<p>好吧，我很惊奇的发现，IE在我缩放页面的同时也缩放了断点值。</p>\n<p><img src=\"/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/8.png\" alt=\"default zoom\"></p>\n<figcaption>窗口宽度900px。</figcaption>\n\n<p>这是IE11，那其他浏览器呢…</p>\n<p>Safari也很让我觉得奇怪。这次我把窗口调的比900px稍微小点。现在窗口宽度应该是比断点的600px宽多了，但在150%的缩放下，所有三段全排版成了断点以下的格式。</p>\n<p><img src=\"/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/9.png\" alt=\"default zoom\"></p>\n<p>所以不用担心如果用px断点不会跟着缩放的问题。或者你可以先去找一个不缩放px的浏览器，然后根据其市场份额再做决定。如果你必须支持IE8，然后发现它不缩放断点，那你就有了一个合法的理由去使用rem了（当然IE8既不支持媒体查询也不支持rem，但没必要在这死磕了）。</p>\n<h2 id=\"3-使用em控制文本周围的“动态”间距\"><a href=\"#3-使用em控制文本周围的“动态”间距\" class=\"headerlink\" title=\"3 使用em控制文本周围的“动态”间距\"></a>3 使用em控制文本周围的“动态”间距</h2><p>这几乎是个好主意，我了解支持者们都是怎么说的，“用em设padding，这样如果要改的话就只用修改font size了”。</p>\n<p>我懂的，真的。但我倾向于做的更精确些，比方，设置一个按钮的font-size和padding让它在大屏上刚好60px高，小屏上刚好50px，视觉上完美契合我60px/50px的标题栏。</p>\n<p>而且如果我的设计稿是来自一位专业的设计师，没有哪一位会不在乎一个按钮的精确大小的，这样的设计师存在吗？</p>\n<p>但如果你是自己设计页面，而且完全不在乎按钮具体多高，段落文本离标题栏多远，并且希望当字号改变时旁边的间距也随之增加，那么margin/padding用em去设就正好适用了。</p>\n<hr class=\"divider\">\n\n<p>现在，再来说一个更莫名其妙的劝你使用rem，em的原因（我也不知道我为什么要给这些标题列序号）。</p>\n<h2 id=\"4-生成一个单改变根元素字号就可以改变整体大小的模块\"><a href=\"#4-生成一个单改变根元素字号就可以改变整体大小的模块\" class=\"headerlink\" title=\"4 生成一个单改变根元素字号就可以改变整体大小的模块\"></a>4 生成一个单改变根元素字号就可以改变整体大小的模块</h2><p>这句话来自几周前的一篇博客文章，<a href=\"http://www.creativebloq.com/how-to/design-a-responsive-site-with-em-based-sizing\" target=\"_blank\" rel=\"noopener\">用em设计一个响应式网站</a>。</p>\n<p>文章详细解释了通过使用rem和em的组合，你可以生成一个只需改变根节点元素的字体大小就能缩放成各种不同尺寸的组件。</p>\n<p>这听上去很有道理，就跟“如果你经常杀人，那么开车前拿把铲子会更方便”一样有道理。</p>\n<p>我知道这是一个很好的建议。但是我根本记不起我上次行凶的时候，同样我也记不起上次我需要使用这个通过一个变量就可以改变成任意尺寸的组件是什么时候。</p>\n<p>所以这里我建议，开始一个项目之前先问问你自己：我需要写一个在某些情况下是固定大小，某些情况下又要放大10%的组件吗？如果答案是肯定的，那么就按着上面那篇博客教的做吧，那正是你需要的。</p>\n<h2 id=\"你可以用一个属性来缩放所以页面上的文本\"><a href=\"#你可以用一个属性来缩放所以页面上的文本\" class=\"headerlink\" title=\"你可以用一个属性来缩放所以页面上的文本\"></a>你可以用一个属性来缩放所以页面上的文本</h2><p>（我决定标题上不加序号了）</p>\n<p>另一个同样讨厌的叫你用em的原因是这样说的：假如你在css里50多个不同的地方都定义了<code>font-size</code>，然后希望所有50多个地方都在大屏上更大，小屏上更小，那你需要做超多媒体查询。</p>\n<p>这种情况下明显最优解决方案是所有地方全用rem，然后媒体查询里直接改变根节点的字体大小，你就会震惊的发现，哇！所有字都变大了诶。</p>\n<p>我觉得两点原因可以使这个提议被安全的忽略掉：</p>\n<ol>\n<li>它假设你想在某个给定断点下放大缩小所有网页文本，包括标题，导航栏，正文，全部一次性而且是通过一个变量来进行缩放。这本身是件很需要勇气的事情。</li>\n<li>主要问题是，如果你真的定义了font-size50多次，那么你更需要做的是好好组织一下你的排版了。</li>\n</ol>\n<p>当你专门分出一个文件来定义排版，里面有12个样式，每个样式里你都有不同的尺寸去适应四种不同的屏幕大小，这样就有48个不同的font-size定义了，然后再加上line-height, margin, padding…就像丘吉尔说的，“这真是一个大工程”。</p>\n<p>到那时你很容易的就会考虑到，“不行，重复的东西太多了，必须重构一下，不论代价如何决不能产生这么多的重复代码”。</p>\n<p>其实我很不同意这个观点。我经常见到很多应用打着DRY（不要重复你自己）的名义引入了更多复杂的东西，永远不要低估混用不同单位时所增加的复杂性。NASA因为用了<a href=\"http://edition.cnn.com/TECH/space/9909/30/mars.metric.02/index.html\" target=\"_blank\" rel=\"noopener\">两套不同的单位</a>现在都没能找到他们的火星轨道卫星。</p>\n<p>别让你的网页也迷失在太空中了。</p>\n<p>哦还不光是单位，还有那些以一个地方的字号为基准去改变另一个地方的字号的情况。这就是封装的对立面，它们瞧不起绝对确定的东西，而这样通常都只是自找麻烦。</p>\n<p>所以还是好好地用px去写一下你的排版，稍微有点重复并不要紧，确保所有文本都是你指定的精确值，然后忘掉它，忙其他的去吧。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>所有以上这些可以总结成这一点：某些情况下因为某些特定原因你是应该使用rem或em，但这些场景正变得越来越少，也离那些建议原因越来越远。</p>\n<p>所以不要再硬去寻找使用rem或em的理由了，px已经够用了。但如果你遇到了那些rem或em是更优选择的场景，那也放心去用吧。</p>\n<h2 id=\"关于单位使用的一些Bonus\"><a href=\"#关于单位使用的一些Bonus\" class=\"headerlink\" title=\"关于单位使用的一些Bonus\"></a>关于单位使用的一些Bonus</h2><p>下面的东西与本文无关，所以我只是简单列了下，并没有进一步阐述。</p>\n<ul>\n<li>如果你有两个相邻的文本位，且希望它们的padding差不多一个空格，那你可以试试<code>1ch</code>。</li>\n<li>如果你希望body的背景色垂直方向至少占满一屏，那可以试试用<code>100vh</code>代替<code>100%</code>，但通常你要用<code>vh</code>的话，最好现在iOS设备上好好测试一下。</li>\n<li>你知道vertical-align可以用百分比吗？如果你发现<code>vertical-align: super</code>或<code>top</code>不是你想要的那样，别去加<code>position: relative; top: -3px</code>之类的代码，试试看<code>vertical-align: 30%</code>吧。</li>\n<li>当遇到弹性布局时，不要忘了<code>flex-grow</code>和<code>flex-shrink</code>，它们可能一开始会让你觉得有点头疼，但就像一个巨型棒棒糖一样，它们值得拥有。</li>\n</ul>\n<p>原文：<a href=\"https://hackernoon.com/rems-and-ems-and-why-you-probably-dont-need-them-664b9ce1e09f\" target=\"_blank\" rel=\"noopener\">rems and ems, and why you probably don’t need them</a></p>\n<p>作者：<a href=\"https://hackernoon.com/@david.gilbertson\" target=\"_blank\" rel=\"noopener\">David Gilbertson</a></p>\n<p>译者：<a href=\"http://tianq.space\" target=\"_blank\" rel=\"noopener\">Timi</a></p>\n","site":{"data":{}},"excerpt":"<style>\n    hr.divider {\n        margin: 52px 0 42px;\n        display: block;\n        border: 0;\n        text-align: center;\n        box-sizing: content-box;\n        height: 0;\n    }\n    hr.divider:before {\n        content: '· · ·';\n        display: inline-block;\n        color: rgba(0,0,0,.6);\n        position: relative;\n        font-size: 20px;\n        letter-spacing: .3em;\n        font-weight: 400;\n        font-style: italic;\n        top: -20px;\n    }\n    figcaption {\n        text-align: center;\n        font-size: 12px;\n        color: rgba(0,0,0,.6);\n        position: relative;\n        top: -1.6em;\n    }\n</style>\n\n<p>你可能听过，每当要定义页面上元素的尺寸时，别人都说你应该使用 <code>em</code> 或 <code>rem</code> ，而不是<code>px</code>。</p>\n<p>你也可能听过一些像“无障碍访问”、“流式布局”和“弹性布局”之类的概念并认为这确实是个不错的想法。甚至有点开始觉得只使用像素定位太out了。</p>\n<p>如果是这样，我有一些好消息告诉你，可以将你从这些讨厌的单位中解救出来。</p>\n<p>那就是使用像素定位是个完全没有问题的选择，在定义尺寸方面它甚至可以表现的非常优异。</p>","more":"<hr class=\"divider\">\n\n<p>理想状态下，大家不需要我提供什么证据就会相信我的理论。但这是不现实的，所以以下我勉为其难地给出了我的理由，来告诉你为什么使用这些单位没有太大意义。</p>\n<h2 id=\"1-提高可访问性\"><a href=\"#1-提高可访问性\" class=\"headerlink\" title=\"1 提高可访问性\"></a>1 提高可访问性</h2><p>或更具体的说：“使用rem可以让你的布局在用户手动缩放页面时展现的更好”。</p>\n<p>现在人可能真的太过于看重可访问性了。我某天在一个YouTube评论上看到有人说希望找到一个比WGAG标准更具体一点的“可访问性测试工具”。</p>\n<p>行，我现在就给你做一个：</p>\n<p><img src=\"/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/1.jpg\" alt=\"accessibility testing device\"></p>\n<figcaption>“像一个不能去访问你页面的人那样去访问你的页面”</figcaption>\n\n<p>我同时出售30寸大屏专用版（一条毛巾），以及通用解决方案，一个为你脑袋准备的枕头。</p>\n<p>我的观点：你不需要深入的知识和花哨的工具去测试rem和em是否可以提供“更好的可访问性”，只需要想象一下你是位视力不好的人。如果你想象力匮乏，可以试着把你的屏幕包几层保鲜膜。</p>\n<p>当然可访问性不单单是指可阅读性，但这里我们先只讨论这点。</p>\n<p>好现在问问视力不好的你，下面三项哪个可以帮你提高可阅读性：</p>\n<ol>\n<li>更改操作系统的字体大小，这会让所有的文字、菜单、时钟、其他应用和网页字体变得更大。</li>\n<li>放大那些字号特别小的页面。</li>\n<li>改变浏览器默认的最小字号。</li>\n</ol>\n<p>我不知道你会选哪个，但如果我阅读小号字很吃力的话，我会直接调大操作系统的字号，然后彻底忘记它的存在。</p>\n<p>（做演示时这么干也很方便）</p>\n<hr class=\"divider\">\n\n<p>我们来深入的研究一下…</p>\n<p>本着研究精神，我写了一个小的demo页（如果谁抑制不住自己的好奇心，这里是<a href=\"https://output.jsbin.com/juluzo\" target=\"_blank\" rel=\"noopener\">jsbin</a>地址）。</p>\n<p>页面上三段的html和css是一样的，唯一不同的是它们所用的单位，最上面那个用的全是px，中间的全是em，最下面的全是rem。</p>\n<p>在默认缩放情况下（1em = 16px）它们看起来是这样的：</p>\n<p><img src=\"/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/2.png\" alt=\"default zoom\"></p>\n<figcaption>字体很难阅读？那我只能表示同情了。</figcaption>\n\n<p>现在，将操作系统的字号放大为150%，Windows上用Chrome看是这样的：</p>\n<p><img src=\"/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/3.png\" alt=\"default zoom\"></p>\n<figcaption>感觉就像是脸贴近了点。</figcaption>\n\n<p>接下来，把操作系统的字号还原回100%，调大浏览器的字号。</p>\n<p>对某些网站来说主导航栏用12px的字号是可接受的，因为这样可以更好的利用屏幕空间，而不是去思考如何缩短命名，但对亚马逊来说，13px的默认字号，12px的主导航栏字号显然就不合适了。</p>\n<p>幸运的是浏览器对老年人们还是友好的，你可以crtl加滚轮去缩放页面。</p>\n<p>我视力超好，但有时我也会缩放页面，还有Chrome的开发者工具，它的默认字号是12px，但我也不知道为啥原谅它了。</p>\n<p>（小广告：如果你觉得维基百科的字号有点小，或不喜欢它水平方向占满整页的排版，我写了一个叫<a href=\"https://chrome.google.com/webstore/detail/skinny/lfohknefidgmanghfabkohkmlgbhmeho\" target=\"_blank\" rel=\"noopener\">Skinny</a> 的Chrome 插件，可以调大默认字号顺便让每行变短点。）</p>\n<p>扯远了，现在来看下浏览器页面放大到150%时的效果：</p>\n<p><img src=\"/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/4.png\" alt=\"default zoom\"></p>\n<p>浏览器的UI变小了，但页面内容看上去是一样的。</p>\n<p>最后来看看改变浏览器的默认字体大小，先试试火狐，这是没缩放的时候：</p>\n<p><img src=\"/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/5.png\" alt=\"default zoom\"></p>\n<p>将最小字号设为20px之后：</p>\n<p><img src=\"/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/6.png\" alt=\"default zoom\"></p>\n<p>使用px的nav标签变窄了，header标签的字体变大了一点点。</p>\n<p>然后用Chrome将字体大小设为“大”。</p>\n<p><img src=\"/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/7.png\" alt=\"default zoom\"></p>\n<p>终于可以看出点区别了，因为title标签里的字体是18px，以及侧边栏nav标签的宽100px是写死的，所以它们大小都没有变。</p>\n<p>你可能会觉得这是rem的伟大胜利，但并非如此。</p>\n<p>虽然没有证据表明人们到底有没有十分依赖改变浏览器字体大小，但却有些确凿的事实：</p>\n<ul>\n<li>改变浏览器字体大小对facebook, youtube, amazon, twitter, medium, linkedIn, eBay等网站并没有效果，Alexa排名前100的网站我还只扫了一半。</li>\n<li>所以如果某人阅读16px字体有障碍，他肯定会用其他方法去访问以上网站。</li>\n<li>而且改变浏览器字体大小显然对操作系统的其他部分不起作用。</li>\n<li>所以可以推断如果某人阅读16px字体有障碍，但他又想去看Excel菜单、电子邮件、系统设置、文件夹等，他需要去找个其他方法来解决这个问题。</li>\n</ul>\n<p>这就很明显了，显示世界中改变浏览器字体大小根本毫无用武之地。所以在决策时我也不会考虑这一设置。</p>\n<hr class=\"divider\">\n\n<p>“更好的可访问性”论述完毕，现在来看看…</p>\n<h2 id=\"2-使用rem-em时的断点设置\"><a href=\"#2-使用rem-em时的断点设置\" class=\"headerlink\" title=\"2 使用rem/em时的断点设置\"></a>2 使用rem/em时的断点设置</h2><p>换句话讲，如果用px去定义断点，它们就是写死的，不会随着页面缩放而改变，因为px就是固定的像素不是吗？</p>\n<p>好吧那都是骗人的（可能过去某个时候是真的，但那已经是历史了。）</p>\n<p>我的demo页断点设的是<code>600px</code>，中间的是<code>37.5em</code>，最后一个是<code>37.5rem</code>。默认情况下它们都是等于600px的。</p>\n<p>小于断点的时候，发送者和主题文本是竖直排列的，大于的时候是水平排列。</p>\n<p>用IE11来试试，将页面放大为150%，然后把浏览器拖成900px宽（600px的1.5倍）。</p>\n<p>你认为IE11会怎么判断呢？</p>\n<p>它会认为断点任何时候都是600px，然后显示大屏方案；还是自适应断点到150%，显示小屏方案（文本竖直排列）？</p>\n<p>好吧，我很惊奇的发现，IE在我缩放页面的同时也缩放了断点值。</p>\n<p><img src=\"/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/8.png\" alt=\"default zoom\"></p>\n<figcaption>窗口宽度900px。</figcaption>\n\n<p>这是IE11，那其他浏览器呢…</p>\n<p>Safari也很让我觉得奇怪。这次我把窗口调的比900px稍微小点。现在窗口宽度应该是比断点的600px宽多了，但在150%的缩放下，所有三段全排版成了断点以下的格式。</p>\n<p><img src=\"/images/2017-04-26-rems-and-ems-and-why-you-probably-don’t-need-them/9.png\" alt=\"default zoom\"></p>\n<p>所以不用担心如果用px断点不会跟着缩放的问题。或者你可以先去找一个不缩放px的浏览器，然后根据其市场份额再做决定。如果你必须支持IE8，然后发现它不缩放断点，那你就有了一个合法的理由去使用rem了（当然IE8既不支持媒体查询也不支持rem，但没必要在这死磕了）。</p>\n<h2 id=\"3-使用em控制文本周围的“动态”间距\"><a href=\"#3-使用em控制文本周围的“动态”间距\" class=\"headerlink\" title=\"3 使用em控制文本周围的“动态”间距\"></a>3 使用em控制文本周围的“动态”间距</h2><p>这几乎是个好主意，我了解支持者们都是怎么说的，“用em设padding，这样如果要改的话就只用修改font size了”。</p>\n<p>我懂的，真的。但我倾向于做的更精确些，比方，设置一个按钮的font-size和padding让它在大屏上刚好60px高，小屏上刚好50px，视觉上完美契合我60px/50px的标题栏。</p>\n<p>而且如果我的设计稿是来自一位专业的设计师，没有哪一位会不在乎一个按钮的精确大小的，这样的设计师存在吗？</p>\n<p>但如果你是自己设计页面，而且完全不在乎按钮具体多高，段落文本离标题栏多远，并且希望当字号改变时旁边的间距也随之增加，那么margin/padding用em去设就正好适用了。</p>\n<hr class=\"divider\">\n\n<p>现在，再来说一个更莫名其妙的劝你使用rem，em的原因（我也不知道我为什么要给这些标题列序号）。</p>\n<h2 id=\"4-生成一个单改变根元素字号就可以改变整体大小的模块\"><a href=\"#4-生成一个单改变根元素字号就可以改变整体大小的模块\" class=\"headerlink\" title=\"4 生成一个单改变根元素字号就可以改变整体大小的模块\"></a>4 生成一个单改变根元素字号就可以改变整体大小的模块</h2><p>这句话来自几周前的一篇博客文章，<a href=\"http://www.creativebloq.com/how-to/design-a-responsive-site-with-em-based-sizing\" target=\"_blank\" rel=\"noopener\">用em设计一个响应式网站</a>。</p>\n<p>文章详细解释了通过使用rem和em的组合，你可以生成一个只需改变根节点元素的字体大小就能缩放成各种不同尺寸的组件。</p>\n<p>这听上去很有道理，就跟“如果你经常杀人，那么开车前拿把铲子会更方便”一样有道理。</p>\n<p>我知道这是一个很好的建议。但是我根本记不起我上次行凶的时候，同样我也记不起上次我需要使用这个通过一个变量就可以改变成任意尺寸的组件是什么时候。</p>\n<p>所以这里我建议，开始一个项目之前先问问你自己：我需要写一个在某些情况下是固定大小，某些情况下又要放大10%的组件吗？如果答案是肯定的，那么就按着上面那篇博客教的做吧，那正是你需要的。</p>\n<h2 id=\"你可以用一个属性来缩放所以页面上的文本\"><a href=\"#你可以用一个属性来缩放所以页面上的文本\" class=\"headerlink\" title=\"你可以用一个属性来缩放所以页面上的文本\"></a>你可以用一个属性来缩放所以页面上的文本</h2><p>（我决定标题上不加序号了）</p>\n<p>另一个同样讨厌的叫你用em的原因是这样说的：假如你在css里50多个不同的地方都定义了<code>font-size</code>，然后希望所有50多个地方都在大屏上更大，小屏上更小，那你需要做超多媒体查询。</p>\n<p>这种情况下明显最优解决方案是所有地方全用rem，然后媒体查询里直接改变根节点的字体大小，你就会震惊的发现，哇！所有字都变大了诶。</p>\n<p>我觉得两点原因可以使这个提议被安全的忽略掉：</p>\n<ol>\n<li>它假设你想在某个给定断点下放大缩小所有网页文本，包括标题，导航栏，正文，全部一次性而且是通过一个变量来进行缩放。这本身是件很需要勇气的事情。</li>\n<li>主要问题是，如果你真的定义了font-size50多次，那么你更需要做的是好好组织一下你的排版了。</li>\n</ol>\n<p>当你专门分出一个文件来定义排版，里面有12个样式，每个样式里你都有不同的尺寸去适应四种不同的屏幕大小，这样就有48个不同的font-size定义了，然后再加上line-height, margin, padding…就像丘吉尔说的，“这真是一个大工程”。</p>\n<p>到那时你很容易的就会考虑到，“不行，重复的东西太多了，必须重构一下，不论代价如何决不能产生这么多的重复代码”。</p>\n<p>其实我很不同意这个观点。我经常见到很多应用打着DRY（不要重复你自己）的名义引入了更多复杂的东西，永远不要低估混用不同单位时所增加的复杂性。NASA因为用了<a href=\"http://edition.cnn.com/TECH/space/9909/30/mars.metric.02/index.html\" target=\"_blank\" rel=\"noopener\">两套不同的单位</a>现在都没能找到他们的火星轨道卫星。</p>\n<p>别让你的网页也迷失在太空中了。</p>\n<p>哦还不光是单位，还有那些以一个地方的字号为基准去改变另一个地方的字号的情况。这就是封装的对立面，它们瞧不起绝对确定的东西，而这样通常都只是自找麻烦。</p>\n<p>所以还是好好地用px去写一下你的排版，稍微有点重复并不要紧，确保所有文本都是你指定的精确值，然后忘掉它，忙其他的去吧。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>所有以上这些可以总结成这一点：某些情况下因为某些特定原因你是应该使用rem或em，但这些场景正变得越来越少，也离那些建议原因越来越远。</p>\n<p>所以不要再硬去寻找使用rem或em的理由了，px已经够用了。但如果你遇到了那些rem或em是更优选择的场景，那也放心去用吧。</p>\n<h2 id=\"关于单位使用的一些Bonus\"><a href=\"#关于单位使用的一些Bonus\" class=\"headerlink\" title=\"关于单位使用的一些Bonus\"></a>关于单位使用的一些Bonus</h2><p>下面的东西与本文无关，所以我只是简单列了下，并没有进一步阐述。</p>\n<ul>\n<li>如果你有两个相邻的文本位，且希望它们的padding差不多一个空格，那你可以试试<code>1ch</code>。</li>\n<li>如果你希望body的背景色垂直方向至少占满一屏，那可以试试用<code>100vh</code>代替<code>100%</code>，但通常你要用<code>vh</code>的话，最好现在iOS设备上好好测试一下。</li>\n<li>你知道vertical-align可以用百分比吗？如果你发现<code>vertical-align: super</code>或<code>top</code>不是你想要的那样，别去加<code>position: relative; top: -3px</code>之类的代码，试试看<code>vertical-align: 30%</code>吧。</li>\n<li>当遇到弹性布局时，不要忘了<code>flex-grow</code>和<code>flex-shrink</code>，它们可能一开始会让你觉得有点头疼，但就像一个巨型棒棒糖一样，它们值得拥有。</li>\n</ul>\n<p>原文：<a href=\"https://hackernoon.com/rems-and-ems-and-why-you-probably-dont-need-them-664b9ce1e09f\" target=\"_blank\" rel=\"noopener\">rems and ems, and why you probably don’t need them</a></p>\n<p>作者：<a href=\"https://hackernoon.com/@david.gilbertson\" target=\"_blank\" rel=\"noopener\">David Gilbertson</a></p>\n<p>译者：<a href=\"http://tianq.space\" target=\"_blank\" rel=\"noopener\">Timi</a></p>"},{"title":"【译】使用CSS Grid替换Bootstrap布局","date":"2017-05-03T02:30:00.000Z","author":"Linda","_content":"\n3月份的时候，Mozilla发布了Firefox 52，加入了对CSS Grid布局的支持。如果不熟悉CSS Grid，它是一个二维的网页布局系统，允许开发者在浏览器中创建内部布局图案。这也就是说，可以只用几行的CSS很容易的重建熟悉的网格。也意味着我们可以用CSS和布局做很多之前不可能的东西...但会比之前的多一点点。\n\n一条笔记：这文章原本不是CSS Grid的综合入门读物，并且假设读者对CSS Grid有个基本了解。如果对CSS Grid还不熟悉，推荐看看MDN上这篇不错的文章[CSS Grid Layout page](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout)。\n\n<!-- more -->\n\nweb上的布局总是很复杂。web第一次被引入的时候，没有提供布局的方式。然后迎来了table布局（一个table套一个table套一个table）。这样很怪异，但是是可以运作的。当CSS在90年代后期被引入的时候，开发者可以开始用div和float进行设计和布局了。这最终使得框架和网格系统，需要解决所有的“陷阱”，比如清除浮动，负边距，响应式设计等。现在这状况持续了几年。现在有数千的[网格系统](https://github.com/search?utf8=%E2%9C%93&q=css+grid&type=)，但是他们都或多或少是一样的。\n\n现在CSS Grid布局已经诞生，现在我来看看用CSS Grid来代替现有的网格框架完成页面布局是什么样的。为了这个实验，我选了流行的[Bootstrap框架](http://getbootstrap.com/)。\n\n我以用Bootstrap创建一个基础网站为开始：\n![css_layouts](/images/2017-css-grid/css_layouts.jpg)\n\n代码在这里：\n[布局实例](http://codepen.io/slightlyoffbeat/pen/dvEbLV)\n\n让我们用CSS Grid来转换Bootstrap网格布局。\n\n在Bootstrap中，`.container`类可以包裹任何东西，并且可以设置宽度约束。它也在左边和右边角添加`padding`，将所有东西都居中。这里没有太多要改的。像用Bootstrap一样，`.container`可以用CSS Grid来处理。我这样重新创建它：\n\n```css\n.container {\n    margin-left: auto;\n    margin-right: auto;\n    padding-left: 15px;\n    padding-right: 15px;\n}\n```\n\n也可以添加响应断点，像下面代码这样：\n\n```css\n@media (min-width: 992px) {\n    .container {\n    \twidth: 970px;\n     }\n}\n```\n\nBootstrap用`.row`类来包裹列，提供了左右的负`margin`来消除单列叠加的`padding`。像负边距这样的hack，在使用CSS Grid的时候不再需要了。但如果读过[文档](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout)，会了解到CSS Grid需要一个网格容器。`.row`类是完美的地方。可以看下我做的，然后我们毁掉它:\n\n```css\n.row {\n    display: grid;\n    grid-template-columns: repeat(12, 1fr);\n    grid-gap: 20px;\n}\n```\n\n`display:grid` 创建了网格包裹容器。\n\n`grid-template-colums`属性定义了网格的列。可以独立使用空间来定义每列，但是这里利用了`repeat`标记来定义等宽的12列。`1fr`是以每个独立列的宽度为参考的。MDN定义了新的`fr`单位，“代表在网格容器中可用空间的一小部分”。可以在MDN上了解更多[fr单位](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout#The_fr_Unit)的相关信息。也可以了解更多[grid-template-columns](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns)属性。\n\n最后，`grid-gap`属性是一个定义了列间和多列行间的空间属性。可以把它想成水槽。这里可以了解更多[grid-gap](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-gap)的信息。\n\n剩下的都是列的class。Bootstrap用像`.col-md-6`或者`.col-lg-8`这样的列class来决定一个div跨多少列。它也让div浮动起来，并且在左右两侧添加padding来创建列之间的间隙。多亏了`.grid-column`属性，重建这些class很容易。例如，如果想重建`.col-md-6` class,可以用下面的代码：\n\n```css\n@media (min-width: 992px) {\n    .col-md-6 {\n    \tgrid-column: span 6;\n    }\n}\n```\n\n很简单，对吗？没有浮动，没有`padding`。就可以工作了。`grid-column`指定了一个条目的尺寸和位置。可以用`span`来指定这个独有的条目需要跨6列。沟壑会因包裹层的`grid-gap`属性被自动处理。这里可以了解更多[grid-column](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)属性的信息。\n\n如果把这些都放到一起会发生什么？网站看起来完全一样，但是我们可以完全移除Bootstrap的依赖并且使用内部的CSS Grid。\n\n[在线实例](http://codepen.io/slightlyoffbeat/pen/NpVGyW)\n\n这类实验是很有趣的练习，但是也会有点危险。借聪明的[philosopher Jeff Goldblum](https://en.wikiquote.org/wiki/Jurassic_Park_(film))话说：\n\n“你...如此专注于是否能完成，却没有停下来想想是否应该做。”\n\n我们不想通过把CSS Grid硬塞成限制它潜力的语法来限制它。我们可以很容易地重建Bootstrap网格，但CSS Grid比其他之前的网格系统强大很多。那是因为它是从底层建立的web内部解决方案。\n\n我们不会再受困于12列从左浮动到右的网格了。想要在网格上清晰的位置放置元素，不依赖他们的HTML源位置吗？用起来。想要创建跨多列多行条目吗？这都不是问题。看看Mozilla的[Craig Cook](https://github.com/craigcook/)创建的展示各种布局模式的[示例](https://www.mozilla.org/en-US/developer/css-grid/)。可以试着用Bootstrap重建那些布局（提示：不可能）。我们只很浅层次的讨论了下CSS Grid可以做什么。  \n\n如果想了解更多CSS Grid的东西，可以看看下面的文章：\n\n[Mozilla CSS Grid Demo](https://www.mozilla.org/en-US/developer/css-grid/)\n[CSS Grid documentation on MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout)\n  \n原文：[https://hacks.mozilla.org/2017/04/replace-bootstrap-layouts-with-css-grid/](https://hacks.mozilla.org/2017/04/replace-bootstrap-layouts-with-css-grid/)\n\n译者：[Linda](https://github.com/LindaWhite)\n\n作者：[Dan Brown](https://hacks.mozilla.org/author/dbrownmozilla-com/)\n\n","source":"_posts/2017-05-03-replace-bootstrap-layouts-with-css-grid.md","raw":"---\ntitle: 【译】使用CSS Grid替换Bootstrap布局\ndate: 2017-05-03 10:30\ncategory: 翻译\ntags: [css,技术]\nauthor: Linda\n---\n\n3月份的时候，Mozilla发布了Firefox 52，加入了对CSS Grid布局的支持。如果不熟悉CSS Grid，它是一个二维的网页布局系统，允许开发者在浏览器中创建内部布局图案。这也就是说，可以只用几行的CSS很容易的重建熟悉的网格。也意味着我们可以用CSS和布局做很多之前不可能的东西...但会比之前的多一点点。\n\n一条笔记：这文章原本不是CSS Grid的综合入门读物，并且假设读者对CSS Grid有个基本了解。如果对CSS Grid还不熟悉，推荐看看MDN上这篇不错的文章[CSS Grid Layout page](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout)。\n\n<!-- more -->\n\nweb上的布局总是很复杂。web第一次被引入的时候，没有提供布局的方式。然后迎来了table布局（一个table套一个table套一个table）。这样很怪异，但是是可以运作的。当CSS在90年代后期被引入的时候，开发者可以开始用div和float进行设计和布局了。这最终使得框架和网格系统，需要解决所有的“陷阱”，比如清除浮动，负边距，响应式设计等。现在这状况持续了几年。现在有数千的[网格系统](https://github.com/search?utf8=%E2%9C%93&q=css+grid&type=)，但是他们都或多或少是一样的。\n\n现在CSS Grid布局已经诞生，现在我来看看用CSS Grid来代替现有的网格框架完成页面布局是什么样的。为了这个实验，我选了流行的[Bootstrap框架](http://getbootstrap.com/)。\n\n我以用Bootstrap创建一个基础网站为开始：\n![css_layouts](/images/2017-css-grid/css_layouts.jpg)\n\n代码在这里：\n[布局实例](http://codepen.io/slightlyoffbeat/pen/dvEbLV)\n\n让我们用CSS Grid来转换Bootstrap网格布局。\n\n在Bootstrap中，`.container`类可以包裹任何东西，并且可以设置宽度约束。它也在左边和右边角添加`padding`，将所有东西都居中。这里没有太多要改的。像用Bootstrap一样，`.container`可以用CSS Grid来处理。我这样重新创建它：\n\n```css\n.container {\n    margin-left: auto;\n    margin-right: auto;\n    padding-left: 15px;\n    padding-right: 15px;\n}\n```\n\n也可以添加响应断点，像下面代码这样：\n\n```css\n@media (min-width: 992px) {\n    .container {\n    \twidth: 970px;\n     }\n}\n```\n\nBootstrap用`.row`类来包裹列，提供了左右的负`margin`来消除单列叠加的`padding`。像负边距这样的hack，在使用CSS Grid的时候不再需要了。但如果读过[文档](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout)，会了解到CSS Grid需要一个网格容器。`.row`类是完美的地方。可以看下我做的，然后我们毁掉它:\n\n```css\n.row {\n    display: grid;\n    grid-template-columns: repeat(12, 1fr);\n    grid-gap: 20px;\n}\n```\n\n`display:grid` 创建了网格包裹容器。\n\n`grid-template-colums`属性定义了网格的列。可以独立使用空间来定义每列，但是这里利用了`repeat`标记来定义等宽的12列。`1fr`是以每个独立列的宽度为参考的。MDN定义了新的`fr`单位，“代表在网格容器中可用空间的一小部分”。可以在MDN上了解更多[fr单位](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout#The_fr_Unit)的相关信息。也可以了解更多[grid-template-columns](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns)属性。\n\n最后，`grid-gap`属性是一个定义了列间和多列行间的空间属性。可以把它想成水槽。这里可以了解更多[grid-gap](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-gap)的信息。\n\n剩下的都是列的class。Bootstrap用像`.col-md-6`或者`.col-lg-8`这样的列class来决定一个div跨多少列。它也让div浮动起来，并且在左右两侧添加padding来创建列之间的间隙。多亏了`.grid-column`属性，重建这些class很容易。例如，如果想重建`.col-md-6` class,可以用下面的代码：\n\n```css\n@media (min-width: 992px) {\n    .col-md-6 {\n    \tgrid-column: span 6;\n    }\n}\n```\n\n很简单，对吗？没有浮动，没有`padding`。就可以工作了。`grid-column`指定了一个条目的尺寸和位置。可以用`span`来指定这个独有的条目需要跨6列。沟壑会因包裹层的`grid-gap`属性被自动处理。这里可以了解更多[grid-column](https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column)属性的信息。\n\n如果把这些都放到一起会发生什么？网站看起来完全一样，但是我们可以完全移除Bootstrap的依赖并且使用内部的CSS Grid。\n\n[在线实例](http://codepen.io/slightlyoffbeat/pen/NpVGyW)\n\n这类实验是很有趣的练习，但是也会有点危险。借聪明的[philosopher Jeff Goldblum](https://en.wikiquote.org/wiki/Jurassic_Park_(film))话说：\n\n“你...如此专注于是否能完成，却没有停下来想想是否应该做。”\n\n我们不想通过把CSS Grid硬塞成限制它潜力的语法来限制它。我们可以很容易地重建Bootstrap网格，但CSS Grid比其他之前的网格系统强大很多。那是因为它是从底层建立的web内部解决方案。\n\n我们不会再受困于12列从左浮动到右的网格了。想要在网格上清晰的位置放置元素，不依赖他们的HTML源位置吗？用起来。想要创建跨多列多行条目吗？这都不是问题。看看Mozilla的[Craig Cook](https://github.com/craigcook/)创建的展示各种布局模式的[示例](https://www.mozilla.org/en-US/developer/css-grid/)。可以试着用Bootstrap重建那些布局（提示：不可能）。我们只很浅层次的讨论了下CSS Grid可以做什么。  \n\n如果想了解更多CSS Grid的东西，可以看看下面的文章：\n\n[Mozilla CSS Grid Demo](https://www.mozilla.org/en-US/developer/css-grid/)\n[CSS Grid documentation on MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout)\n  \n原文：[https://hacks.mozilla.org/2017/04/replace-bootstrap-layouts-with-css-grid/](https://hacks.mozilla.org/2017/04/replace-bootstrap-layouts-with-css-grid/)\n\n译者：[Linda](https://github.com/LindaWhite)\n\n作者：[Dan Brown](https://hacks.mozilla.org/author/dbrownmozilla-com/)\n\n","slug":"2017-05-03-replace-bootstrap-layouts-with-css-grid","published":1,"updated":"2017-12-01T08:50:00.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknhe0006jxs18bawr885","content":"<p>3月份的时候，Mozilla发布了Firefox 52，加入了对CSS Grid布局的支持。如果不熟悉CSS Grid，它是一个二维的网页布局系统，允许开发者在浏览器中创建内部布局图案。这也就是说，可以只用几行的CSS很容易的重建熟悉的网格。也意味着我们可以用CSS和布局做很多之前不可能的东西…但会比之前的多一点点。</p>\n<p>一条笔记：这文章原本不是CSS Grid的综合入门读物，并且假设读者对CSS Grid有个基本了解。如果对CSS Grid还不熟悉，推荐看看MDN上这篇不错的文章<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout\" target=\"_blank\" rel=\"noopener\">CSS Grid Layout page</a>。</p>\n<a id=\"more\"></a>\n<p>web上的布局总是很复杂。web第一次被引入的时候，没有提供布局的方式。然后迎来了table布局（一个table套一个table套一个table）。这样很怪异，但是是可以运作的。当CSS在90年代后期被引入的时候，开发者可以开始用div和float进行设计和布局了。这最终使得框架和网格系统，需要解决所有的“陷阱”，比如清除浮动，负边距，响应式设计等。现在这状况持续了几年。现在有数千的<a href=\"https://github.com/search?utf8=%E2%9C%93&amp;q=css+grid&amp;type=\" target=\"_blank\" rel=\"noopener\">网格系统</a>，但是他们都或多或少是一样的。</p>\n<p>现在CSS Grid布局已经诞生，现在我来看看用CSS Grid来代替现有的网格框架完成页面布局是什么样的。为了这个实验，我选了流行的<a href=\"http://getbootstrap.com/\" target=\"_blank\" rel=\"noopener\">Bootstrap框架</a>。</p>\n<p>我以用Bootstrap创建一个基础网站为开始：<br><img src=\"/images/2017-css-grid/css_layouts.jpg\" alt=\"css_layouts\"></p>\n<p>代码在这里：<br><a href=\"http://codepen.io/slightlyoffbeat/pen/dvEbLV\" target=\"_blank\" rel=\"noopener\">布局实例</a></p>\n<p>让我们用CSS Grid来转换Bootstrap网格布局。</p>\n<p>在Bootstrap中，<code>.container</code>类可以包裹任何东西，并且可以设置宽度约束。它也在左边和右边角添加<code>padding</code>，将所有东西都居中。这里没有太多要改的。像用Bootstrap一样，<code>.container</code>可以用CSS Grid来处理。我这样重新创建它：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-right</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也可以添加响应断点，像下面代码这样：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> (min-width: <span class=\"number\">992px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    \t<span class=\"attribute\">width</span>: <span class=\"number\">970px</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Bootstrap用<code>.row</code>类来包裹列，提供了左右的负<code>margin</code>来消除单列叠加的<code>padding</code>。像负边距这样的hack，在使用CSS Grid的时候不再需要了。但如果读过<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout\" target=\"_blank\" rel=\"noopener\">文档</a>，会了解到CSS Grid需要一个网格容器。<code>.row</code>类是完美的地方。可以看下我做的，然后我们毁掉它:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.row</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">    <span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">repeat</span>(12, 1fr);</span><br><span class=\"line\">    <span class=\"attribute\">grid-gap</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>display:grid</code> 创建了网格包裹容器。</p>\n<p><code>grid-template-colums</code>属性定义了网格的列。可以独立使用空间来定义每列，但是这里利用了<code>repeat</code>标记来定义等宽的12列。<code>1fr</code>是以每个独立列的宽度为参考的。MDN定义了新的<code>fr</code>单位，“代表在网格容器中可用空间的一小部分”。可以在MDN上了解更多<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout#The_fr_Unit\" target=\"_blank\" rel=\"noopener\">fr单位</a>的相关信息。也可以了解更多<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns\" target=\"_blank\" rel=\"noopener\">grid-template-columns</a>属性。</p>\n<p>最后，<code>grid-gap</code>属性是一个定义了列间和多列行间的空间属性。可以把它想成水槽。这里可以了解更多<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-gap\" target=\"_blank\" rel=\"noopener\">grid-gap</a>的信息。</p>\n<p>剩下的都是列的class。Bootstrap用像<code>.col-md-6</code>或者<code>.col-lg-8</code>这样的列class来决定一个div跨多少列。它也让div浮动起来，并且在左右两侧添加padding来创建列之间的间隙。多亏了<code>.grid-column</code>属性，重建这些class很容易。例如，如果想重建<code>.col-md-6</code> class,可以用下面的代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> (min-width: <span class=\"number\">992px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.col-md-6</span> &#123;</span><br><span class=\"line\">    \t<span class=\"attribute\">grid-column</span>: span <span class=\"number\">6</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很简单，对吗？没有浮动，没有<code>padding</code>。就可以工作了。<code>grid-column</code>指定了一个条目的尺寸和位置。可以用<code>span</code>来指定这个独有的条目需要跨6列。沟壑会因包裹层的<code>grid-gap</code>属性被自动处理。这里可以了解更多<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column\" target=\"_blank\" rel=\"noopener\">grid-column</a>属性的信息。</p>\n<p>如果把这些都放到一起会发生什么？网站看起来完全一样，但是我们可以完全移除Bootstrap的依赖并且使用内部的CSS Grid。</p>\n<p><a href=\"http://codepen.io/slightlyoffbeat/pen/NpVGyW\" target=\"_blank\" rel=\"noopener\">在线实例</a></p>\n<p>这类实验是很有趣的练习，但是也会有点危险。借聪明的<a href=\"https://en.wikiquote.org/wiki/Jurassic_Park_(film\" target=\"_blank\" rel=\"noopener\">philosopher Jeff Goldblum</a>)话说：</p>\n<p>“你…如此专注于是否能完成，却没有停下来想想是否应该做。”</p>\n<p>我们不想通过把CSS Grid硬塞成限制它潜力的语法来限制它。我们可以很容易地重建Bootstrap网格，但CSS Grid比其他之前的网格系统强大很多。那是因为它是从底层建立的web内部解决方案。</p>\n<p>我们不会再受困于12列从左浮动到右的网格了。想要在网格上清晰的位置放置元素，不依赖他们的HTML源位置吗？用起来。想要创建跨多列多行条目吗？这都不是问题。看看Mozilla的<a href=\"https://github.com/craigcook/\" target=\"_blank\" rel=\"noopener\">Craig Cook</a>创建的展示各种布局模式的<a href=\"https://www.mozilla.org/en-US/developer/css-grid/\" target=\"_blank\" rel=\"noopener\">示例</a>。可以试着用Bootstrap重建那些布局（提示：不可能）。我们只很浅层次的讨论了下CSS Grid可以做什么。  </p>\n<p>如果想了解更多CSS Grid的东西，可以看看下面的文章：</p>\n<p><a href=\"https://www.mozilla.org/en-US/developer/css-grid/\" target=\"_blank\" rel=\"noopener\">Mozilla CSS Grid Demo</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout\" target=\"_blank\" rel=\"noopener\">CSS Grid documentation on MDN</a></p>\n<p>原文：<a href=\"https://hacks.mozilla.org/2017/04/replace-bootstrap-layouts-with-css-grid/\" target=\"_blank\" rel=\"noopener\">https://hacks.mozilla.org/2017/04/replace-bootstrap-layouts-with-css-grid/</a></p>\n<p>译者：<a href=\"https://github.com/LindaWhite\" target=\"_blank\" rel=\"noopener\">Linda</a></p>\n<p>作者：<a href=\"https://hacks.mozilla.org/author/dbrownmozilla-com/\" target=\"_blank\" rel=\"noopener\">Dan Brown</a></p>\n","site":{"data":{}},"excerpt":"<p>3月份的时候，Mozilla发布了Firefox 52，加入了对CSS Grid布局的支持。如果不熟悉CSS Grid，它是一个二维的网页布局系统，允许开发者在浏览器中创建内部布局图案。这也就是说，可以只用几行的CSS很容易的重建熟悉的网格。也意味着我们可以用CSS和布局做很多之前不可能的东西…但会比之前的多一点点。</p>\n<p>一条笔记：这文章原本不是CSS Grid的综合入门读物，并且假设读者对CSS Grid有个基本了解。如果对CSS Grid还不熟悉，推荐看看MDN上这篇不错的文章<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout\" target=\"_blank\" rel=\"noopener\">CSS Grid Layout page</a>。</p>","more":"<p>web上的布局总是很复杂。web第一次被引入的时候，没有提供布局的方式。然后迎来了table布局（一个table套一个table套一个table）。这样很怪异，但是是可以运作的。当CSS在90年代后期被引入的时候，开发者可以开始用div和float进行设计和布局了。这最终使得框架和网格系统，需要解决所有的“陷阱”，比如清除浮动，负边距，响应式设计等。现在这状况持续了几年。现在有数千的<a href=\"https://github.com/search?utf8=%E2%9C%93&amp;q=css+grid&amp;type=\" target=\"_blank\" rel=\"noopener\">网格系统</a>，但是他们都或多或少是一样的。</p>\n<p>现在CSS Grid布局已经诞生，现在我来看看用CSS Grid来代替现有的网格框架完成页面布局是什么样的。为了这个实验，我选了流行的<a href=\"http://getbootstrap.com/\" target=\"_blank\" rel=\"noopener\">Bootstrap框架</a>。</p>\n<p>我以用Bootstrap创建一个基础网站为开始：<br><img src=\"/images/2017-css-grid/css_layouts.jpg\" alt=\"css_layouts\"></p>\n<p>代码在这里：<br><a href=\"http://codepen.io/slightlyoffbeat/pen/dvEbLV\" target=\"_blank\" rel=\"noopener\">布局实例</a></p>\n<p>让我们用CSS Grid来转换Bootstrap网格布局。</p>\n<p>在Bootstrap中，<code>.container</code>类可以包裹任何东西，并且可以设置宽度约束。它也在左边和右边角添加<code>padding</code>，将所有东西都居中。这里没有太多要改的。像用Bootstrap一样，<code>.container</code>可以用CSS Grid来处理。我这样重新创建它：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-right</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也可以添加响应断点，像下面代码这样：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> (min-width: <span class=\"number\">992px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    \t<span class=\"attribute\">width</span>: <span class=\"number\">970px</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Bootstrap用<code>.row</code>类来包裹列，提供了左右的负<code>margin</code>来消除单列叠加的<code>padding</code>。像负边距这样的hack，在使用CSS Grid的时候不再需要了。但如果读过<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout\" target=\"_blank\" rel=\"noopener\">文档</a>，会了解到CSS Grid需要一个网格容器。<code>.row</code>类是完美的地方。可以看下我做的，然后我们毁掉它:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.row</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">    <span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">repeat</span>(12, 1fr);</span><br><span class=\"line\">    <span class=\"attribute\">grid-gap</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>display:grid</code> 创建了网格包裹容器。</p>\n<p><code>grid-template-colums</code>属性定义了网格的列。可以独立使用空间来定义每列，但是这里利用了<code>repeat</code>标记来定义等宽的12列。<code>1fr</code>是以每个独立列的宽度为参考的。MDN定义了新的<code>fr</code>单位，“代表在网格容器中可用空间的一小部分”。可以在MDN上了解更多<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout#The_fr_Unit\" target=\"_blank\" rel=\"noopener\">fr单位</a>的相关信息。也可以了解更多<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns\" target=\"_blank\" rel=\"noopener\">grid-template-columns</a>属性。</p>\n<p>最后，<code>grid-gap</code>属性是一个定义了列间和多列行间的空间属性。可以把它想成水槽。这里可以了解更多<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-gap\" target=\"_blank\" rel=\"noopener\">grid-gap</a>的信息。</p>\n<p>剩下的都是列的class。Bootstrap用像<code>.col-md-6</code>或者<code>.col-lg-8</code>这样的列class来决定一个div跨多少列。它也让div浮动起来，并且在左右两侧添加padding来创建列之间的间隙。多亏了<code>.grid-column</code>属性，重建这些class很容易。例如，如果想重建<code>.col-md-6</code> class,可以用下面的代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> (min-width: <span class=\"number\">992px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.col-md-6</span> &#123;</span><br><span class=\"line\">    \t<span class=\"attribute\">grid-column</span>: span <span class=\"number\">6</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很简单，对吗？没有浮动，没有<code>padding</code>。就可以工作了。<code>grid-column</code>指定了一个条目的尺寸和位置。可以用<code>span</code>来指定这个独有的条目需要跨6列。沟壑会因包裹层的<code>grid-gap</code>属性被自动处理。这里可以了解更多<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column\" target=\"_blank\" rel=\"noopener\">grid-column</a>属性的信息。</p>\n<p>如果把这些都放到一起会发生什么？网站看起来完全一样，但是我们可以完全移除Bootstrap的依赖并且使用内部的CSS Grid。</p>\n<p><a href=\"http://codepen.io/slightlyoffbeat/pen/NpVGyW\" target=\"_blank\" rel=\"noopener\">在线实例</a></p>\n<p>这类实验是很有趣的练习，但是也会有点危险。借聪明的<a href=\"https://en.wikiquote.org/wiki/Jurassic_Park_(film\" target=\"_blank\" rel=\"noopener\">philosopher Jeff Goldblum</a>)话说：</p>\n<p>“你…如此专注于是否能完成，却没有停下来想想是否应该做。”</p>\n<p>我们不想通过把CSS Grid硬塞成限制它潜力的语法来限制它。我们可以很容易地重建Bootstrap网格，但CSS Grid比其他之前的网格系统强大很多。那是因为它是从底层建立的web内部解决方案。</p>\n<p>我们不会再受困于12列从左浮动到右的网格了。想要在网格上清晰的位置放置元素，不依赖他们的HTML源位置吗？用起来。想要创建跨多列多行条目吗？这都不是问题。看看Mozilla的<a href=\"https://github.com/craigcook/\" target=\"_blank\" rel=\"noopener\">Craig Cook</a>创建的展示各种布局模式的<a href=\"https://www.mozilla.org/en-US/developer/css-grid/\" target=\"_blank\" rel=\"noopener\">示例</a>。可以试着用Bootstrap重建那些布局（提示：不可能）。我们只很浅层次的讨论了下CSS Grid可以做什么。  </p>\n<p>如果想了解更多CSS Grid的东西，可以看看下面的文章：</p>\n<p><a href=\"https://www.mozilla.org/en-US/developer/css-grid/\" target=\"_blank\" rel=\"noopener\">Mozilla CSS Grid Demo</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout\" target=\"_blank\" rel=\"noopener\">CSS Grid documentation on MDN</a></p>\n<p>原文：<a href=\"https://hacks.mozilla.org/2017/04/replace-bootstrap-layouts-with-css-grid/\" target=\"_blank\" rel=\"noopener\">https://hacks.mozilla.org/2017/04/replace-bootstrap-layouts-with-css-grid/</a></p>\n<p>译者：<a href=\"https://github.com/LindaWhite\" target=\"_blank\" rel=\"noopener\">Linda</a></p>\n<p>作者：<a href=\"https://hacks.mozilla.org/author/dbrownmozilla-com/\" target=\"_blank\" rel=\"noopener\">Dan Brown</a></p>"},{"title":"【译】异步迭代器及生成器","date":"2017-04-28T02:30:00.000Z","author":"Linda","_content":"Chrome，Edge，Safari都支持了流式获取，有点像这样：\n\t\n```js\nasync function getResponseSize(url) {\n  const response = await fetch(url);\n  const reader = response.body.getReader();\n  let total = 0;\n\n  while (true) {\n\tconst {done, value} = await reader.read();\n\tif (done) return total;\n\ttotal += value.length;\n  }\n}\n```\n\n多亏有了async函数（如果不熟悉，这里有个[说明](https://developers.google.com/web/fundamentals/getting-started/primers/async-functions)），使得这段代码的可读性不错。但是，还是有点难以理解。\n\n值得庆幸的是，异步迭代器很快会到来，可以使得代码看上去更整洁：\n\n```js\nasync function getResponseSize(url) {\n  const response = await fetch(url);\n  let total = 0;\n\n  for await (const chunk of response.body) {\n\ttotal += chunk.length;\n  }\n  return total;\n}\n```\n\n异步迭代器在Chrome Canary里面可用，启动时需要加上标志位`--js-flags=--harmony-async-iteration`。下面就看下怎么运行的，可以怎么使流迭代起来。\n\n<!-- more -->\n\n## Async iterators\n\n\n异步迭代器和常规迭代器的工作方式非常相似，但是异步迭代器涉及promise:\n    \n```js\nasync function example() {\n  // Regular iterator:\n  const iterator = createNumberIterator();\n  iterator.next(); // Object {value: 1, done: false}\n  iterator.next(); // Object {value: 2, done: false}\n  iterator.next(); // Object {value: 3, done: false}\n  iterator.next(); // Object {value: undefined, done: true}\n\n  // Async iterator:\n  const asyncIterator = createAsyncNumberIterator();\n  const p = asyncIterator.next(); // Promise\n  await p;// Object {value: 1, done: false}\n  await asyncIterator.next(); // Object {value: 2, done: false}\n  await asyncIterator.next(); // Object {value: 3, done: false}\n  await asyncIterator.next(); // Object {value: undefined, done: true}\n}\n```\n\n两种迭代器都有一个.return()方法，这个方法通知迭代器提早结束，并且做它需要做的清理工作。\n\n## 迭代器&循环\n\n\n直接使用迭代器对象的情况十分少见，通常在循环上用更合适，它是在幕后使用迭代器对象的：\n    \n```js\nasync function example() {\n      // Regular iterator:\n      for (const item of thing) {\n    \t// …\n      }\n    \n      // Async iterator:\n      for await (const item of asyncThing) {\n    \t// …\n      }\n}\n```\n\nfor-of循环会通过调用`thing[Symbol.iterator]`取到对应的迭代器。而for-await循环在`asyncThing[Symbol.asyncIterator]`已经定义的情况下会通过调用它取到对应的迭代器，否则会回落到`asyncThing[Symbol.iterator]`。\n\n一旦`asyncIterator.next()` resolve，for-await 会给出每个值。因为这里涉及了awaiting promise，在迭代过程中，主线程上其他事情可以执行。直到正进行的迭代完成，`asyncIterator.next()`才会被下个条目调用。这意味着要按顺序获得条目，并且循环的迭代不会重叠。\n\nfor-await可以回落到`Symbol.iterator`非常cool。这意味着它可作用于像数组这种常规可迭代的对象：\n    \n```js\nasync function example() {\n  const arrayOfFetchPromises = [\n    fetch('1.txt'),\n    fetch('2.txt'),\n    fetch('3.txt')\n  ];\n\n  // Regular iterator:\n  for (const item of arrayOfFetchPromises) {\n\tconsole.log(item); // Logs a promise\n  }\n\n  // Async iterator:\n  for await (const item of arrayOfFetchPromises) {\n\tconsole.log(item); // Logs a response\n  }\n}\n```\n\n在这种情况下，for-await从数组中取每个条目，并且等待它resolve。可以得到第一个响应，即使第二个响应仍然没有准备好，但是总是会按照正确的顺序获得响应。\n\n## 异步生成器：创建你自己的异步迭代器\n\n\n就像可以使用生成器来创建迭代器工厂一样，可以使用异步生成器来创建异步迭代器工厂。\n异步生成器是一系列异步函数和生成器的混合体。假设我们想要生成一个返回随机数的迭代器，但是那些随机数来自一个web服务：\n\n```js\n// Note the * after \"function\"\nasync function* asyncRandomNumbers() {\n  // This is a web service that returns a random number\n  const url = 'https://www.random.org/decimal-fractions/?num=1&dec=10&col=1&format=plain&rnd=new';\n\n  while (true) {\n\tconst response = await fetch(url);\n\tconst text = await response.text();\n\tyield Number(text);\n  }\n}\n```\n\n这个迭代器不会自然的结束--会一直获取数字。庆幸的是，可以用`break`来结束：\n\n```js\nasync function example() {\n  for await (const number of asyncRandomNumbers()) {\n    console.log(number);\n    if (number > 0.95) break;\n  }\n}\n```\n\n[在线实例](https://jsbin.com/folotu/edit?js,console \"在线示例\")  \n\n像常规的生成器一样，可以yield值，但和常规生成器不同的是，可以await promise。\n\n和所有的for循环一样，可以在你想要break的时候break。这致使循环调用`iterator.return()`，会导致生成器会像在现在的（或下一个）yield后面有个return声明一样运行。\n\n用web service来获取随机数是一个有点没意义的例子，可以看一些更实际的东西。\n\n## 使流迭代起来\n\n\n像我在文章开头提到的那样，很快可以这样做：\n\t\n```js\nasync function example() {\n  const response = await fetch(url);\n\n  for await (const chunk of response.body) {\n\t// …\n  }\n}\n```\n\n...但是还没有被规范化。那么，我们来实现一个迭代流的异步迭代器吧！它有如下特性：\n\n1.在流上加个锁，这样当我们在迭代的时候，没有其他东西可以使用流。\n\n2.流的值可以被yield\n\n3.完成之后释放掉锁。\n\n释放锁很重要。如果开发者中断了循环，我们希望可以从中断的地方继续使用流。所以：\n    \n```js\nasync function* streamAsyncIterator(stream) {\n  // Get a lock on the stream\n  const reader = stream.getReader();\n\n  try {\n    while (true) {\n      // Read from the stream\n      const {done, value} = await reader.read();\n      // Exit if we're done\n      if (done) return;\n      // Else yield the chunk\n      yield value;\n\t}\n  }\n  finally {\n\treader.releaseLock();\n  }\n}\n```\n\n这里的finally从句相当重要。如果用户在循环中跳出，会导致我们的异步生成器在现在的（或下一个）yield点返回。如果这情况发生了，我们仍然想解reader上的锁，`finally`是唯一可以在`return`之后执行的东西。\n\n就是这样！现在可以：\n\t\n```js\nasync function example() {\n  const response = await fetch(url);\n\n  for await (const chunk of streamAsyncIterator(response.body)) {\n\t// …\n  }\n}\n```\n\n[在线实例](https://jsbin.com/codapog/edit?js,console \"在线示例\") \n\n解锁意味着你在循环之后仍然可以控制流。假设我们想要在HTML spec里面找到第一个“J”字节的位置：\n\n```js\nasync function example() {\n  const find = 'J';\n  const findCode = find.codePointAt(0);\n  const response = await fetch('https://html.spec.whatwg.org');\n  let bytes = 0;\n\n  for await (const chunk of streamAsyncIterator(response.body)) {\n    const index = chunk.indexOf(findCode);\n    \n    if (index != -1) {\n      bytes += index;\n      console.log(`Found ${find} at byte ${bytes}.`);\n      break;\n    }\n    \n    bytes += chunk.length;\n  }\n\n  response.body.cancel();\n}\n```\n\n[在线实例](https://jsbin.com/gucesat/edit?js,console \"在线示例\")\n\n这里当我们找到一个匹配的时候，跳出了循环。由于`streamAsyncIterator`在流上释放了锁，我们可以取消剩下的部分，来节省带宽。\n\n注意这里没有把`streamAsyncIterator` 赋值给`ReadableStream.prototype[Symbol.asyncIterator]`。如果这样做的话，我们是可以直接迭代流，但是也弄脏了不属于我们的对象。如果以后流天然支持异步迭代，且其规范化的实现与我们的实现不同，那么我们将会遇到奇怪的 bug。\n\n## 更简洁的实现\n\n\n你不需要用异步生成器来生成异步可迭代对象，你可以自己生成迭代器对象。这是[Domenic Denicola](https://twitter.com/domenic/)所做的事情。这里是他的实现：\n\n```js\nfunction streamAsyncIterator(stream) {\n  // Get a lock on the stream:\n  const reader = stream.getReader();\n\n  return {\n    next() {\n      // Stream reads already resolve with {done, value}, so\n      // we can just call read:\n      return reader.read();\n    },\n    return() {\n      // Release the lock if the iterator terminates.\n      return reader.releaseLock();\n    },\n    // for-await calls this on whatever it's passed, so\n    // iterators tend to return themselves.\n    [Symbol.asyncIterator]() {\n      return this;\n    }\n  };\n}\n```\n\n可以在Chrome Canary里面运行上面所有的例子，启动的时候要加标志位`--js-flags=--harmony-async-iteration`。如果现在想把这些用于生产环境，Babel可以做转换。\n    \n原文：[https://jakearchibald.com/2017/async-iterators-and-generators/](https://jakearchibald.com/2017/async-iterators-and-generators/)\n\n译者：[Linda](https://github.com/LindaWhite)\n\n作者：[Jake](https://jakearchibald.com/2017/async-iterators-and-generators/)\n\n","source":"_posts/2017-04-28-async-iterators-and-generators.md","raw":"---\ntitle: 【译】异步迭代器及生成器\ndate: 2017-04-28 10:30\ncategory: 翻译\ntags: [JS,技术]\nauthor: Linda\n---\nChrome，Edge，Safari都支持了流式获取，有点像这样：\n\t\n```js\nasync function getResponseSize(url) {\n  const response = await fetch(url);\n  const reader = response.body.getReader();\n  let total = 0;\n\n  while (true) {\n\tconst {done, value} = await reader.read();\n\tif (done) return total;\n\ttotal += value.length;\n  }\n}\n```\n\n多亏有了async函数（如果不熟悉，这里有个[说明](https://developers.google.com/web/fundamentals/getting-started/primers/async-functions)），使得这段代码的可读性不错。但是，还是有点难以理解。\n\n值得庆幸的是，异步迭代器很快会到来，可以使得代码看上去更整洁：\n\n```js\nasync function getResponseSize(url) {\n  const response = await fetch(url);\n  let total = 0;\n\n  for await (const chunk of response.body) {\n\ttotal += chunk.length;\n  }\n  return total;\n}\n```\n\n异步迭代器在Chrome Canary里面可用，启动时需要加上标志位`--js-flags=--harmony-async-iteration`。下面就看下怎么运行的，可以怎么使流迭代起来。\n\n<!-- more -->\n\n## Async iterators\n\n\n异步迭代器和常规迭代器的工作方式非常相似，但是异步迭代器涉及promise:\n    \n```js\nasync function example() {\n  // Regular iterator:\n  const iterator = createNumberIterator();\n  iterator.next(); // Object {value: 1, done: false}\n  iterator.next(); // Object {value: 2, done: false}\n  iterator.next(); // Object {value: 3, done: false}\n  iterator.next(); // Object {value: undefined, done: true}\n\n  // Async iterator:\n  const asyncIterator = createAsyncNumberIterator();\n  const p = asyncIterator.next(); // Promise\n  await p;// Object {value: 1, done: false}\n  await asyncIterator.next(); // Object {value: 2, done: false}\n  await asyncIterator.next(); // Object {value: 3, done: false}\n  await asyncIterator.next(); // Object {value: undefined, done: true}\n}\n```\n\n两种迭代器都有一个.return()方法，这个方法通知迭代器提早结束，并且做它需要做的清理工作。\n\n## 迭代器&循环\n\n\n直接使用迭代器对象的情况十分少见，通常在循环上用更合适，它是在幕后使用迭代器对象的：\n    \n```js\nasync function example() {\n      // Regular iterator:\n      for (const item of thing) {\n    \t// …\n      }\n    \n      // Async iterator:\n      for await (const item of asyncThing) {\n    \t// …\n      }\n}\n```\n\nfor-of循环会通过调用`thing[Symbol.iterator]`取到对应的迭代器。而for-await循环在`asyncThing[Symbol.asyncIterator]`已经定义的情况下会通过调用它取到对应的迭代器，否则会回落到`asyncThing[Symbol.iterator]`。\n\n一旦`asyncIterator.next()` resolve，for-await 会给出每个值。因为这里涉及了awaiting promise，在迭代过程中，主线程上其他事情可以执行。直到正进行的迭代完成，`asyncIterator.next()`才会被下个条目调用。这意味着要按顺序获得条目，并且循环的迭代不会重叠。\n\nfor-await可以回落到`Symbol.iterator`非常cool。这意味着它可作用于像数组这种常规可迭代的对象：\n    \n```js\nasync function example() {\n  const arrayOfFetchPromises = [\n    fetch('1.txt'),\n    fetch('2.txt'),\n    fetch('3.txt')\n  ];\n\n  // Regular iterator:\n  for (const item of arrayOfFetchPromises) {\n\tconsole.log(item); // Logs a promise\n  }\n\n  // Async iterator:\n  for await (const item of arrayOfFetchPromises) {\n\tconsole.log(item); // Logs a response\n  }\n}\n```\n\n在这种情况下，for-await从数组中取每个条目，并且等待它resolve。可以得到第一个响应，即使第二个响应仍然没有准备好，但是总是会按照正确的顺序获得响应。\n\n## 异步生成器：创建你自己的异步迭代器\n\n\n就像可以使用生成器来创建迭代器工厂一样，可以使用异步生成器来创建异步迭代器工厂。\n异步生成器是一系列异步函数和生成器的混合体。假设我们想要生成一个返回随机数的迭代器，但是那些随机数来自一个web服务：\n\n```js\n// Note the * after \"function\"\nasync function* asyncRandomNumbers() {\n  // This is a web service that returns a random number\n  const url = 'https://www.random.org/decimal-fractions/?num=1&dec=10&col=1&format=plain&rnd=new';\n\n  while (true) {\n\tconst response = await fetch(url);\n\tconst text = await response.text();\n\tyield Number(text);\n  }\n}\n```\n\n这个迭代器不会自然的结束--会一直获取数字。庆幸的是，可以用`break`来结束：\n\n```js\nasync function example() {\n  for await (const number of asyncRandomNumbers()) {\n    console.log(number);\n    if (number > 0.95) break;\n  }\n}\n```\n\n[在线实例](https://jsbin.com/folotu/edit?js,console \"在线示例\")  \n\n像常规的生成器一样，可以yield值，但和常规生成器不同的是，可以await promise。\n\n和所有的for循环一样，可以在你想要break的时候break。这致使循环调用`iterator.return()`，会导致生成器会像在现在的（或下一个）yield后面有个return声明一样运行。\n\n用web service来获取随机数是一个有点没意义的例子，可以看一些更实际的东西。\n\n## 使流迭代起来\n\n\n像我在文章开头提到的那样，很快可以这样做：\n\t\n```js\nasync function example() {\n  const response = await fetch(url);\n\n  for await (const chunk of response.body) {\n\t// …\n  }\n}\n```\n\n...但是还没有被规范化。那么，我们来实现一个迭代流的异步迭代器吧！它有如下特性：\n\n1.在流上加个锁，这样当我们在迭代的时候，没有其他东西可以使用流。\n\n2.流的值可以被yield\n\n3.完成之后释放掉锁。\n\n释放锁很重要。如果开发者中断了循环，我们希望可以从中断的地方继续使用流。所以：\n    \n```js\nasync function* streamAsyncIterator(stream) {\n  // Get a lock on the stream\n  const reader = stream.getReader();\n\n  try {\n    while (true) {\n      // Read from the stream\n      const {done, value} = await reader.read();\n      // Exit if we're done\n      if (done) return;\n      // Else yield the chunk\n      yield value;\n\t}\n  }\n  finally {\n\treader.releaseLock();\n  }\n}\n```\n\n这里的finally从句相当重要。如果用户在循环中跳出，会导致我们的异步生成器在现在的（或下一个）yield点返回。如果这情况发生了，我们仍然想解reader上的锁，`finally`是唯一可以在`return`之后执行的东西。\n\n就是这样！现在可以：\n\t\n```js\nasync function example() {\n  const response = await fetch(url);\n\n  for await (const chunk of streamAsyncIterator(response.body)) {\n\t// …\n  }\n}\n```\n\n[在线实例](https://jsbin.com/codapog/edit?js,console \"在线示例\") \n\n解锁意味着你在循环之后仍然可以控制流。假设我们想要在HTML spec里面找到第一个“J”字节的位置：\n\n```js\nasync function example() {\n  const find = 'J';\n  const findCode = find.codePointAt(0);\n  const response = await fetch('https://html.spec.whatwg.org');\n  let bytes = 0;\n\n  for await (const chunk of streamAsyncIterator(response.body)) {\n    const index = chunk.indexOf(findCode);\n    \n    if (index != -1) {\n      bytes += index;\n      console.log(`Found ${find} at byte ${bytes}.`);\n      break;\n    }\n    \n    bytes += chunk.length;\n  }\n\n  response.body.cancel();\n}\n```\n\n[在线实例](https://jsbin.com/gucesat/edit?js,console \"在线示例\")\n\n这里当我们找到一个匹配的时候，跳出了循环。由于`streamAsyncIterator`在流上释放了锁，我们可以取消剩下的部分，来节省带宽。\n\n注意这里没有把`streamAsyncIterator` 赋值给`ReadableStream.prototype[Symbol.asyncIterator]`。如果这样做的话，我们是可以直接迭代流，但是也弄脏了不属于我们的对象。如果以后流天然支持异步迭代，且其规范化的实现与我们的实现不同，那么我们将会遇到奇怪的 bug。\n\n## 更简洁的实现\n\n\n你不需要用异步生成器来生成异步可迭代对象，你可以自己生成迭代器对象。这是[Domenic Denicola](https://twitter.com/domenic/)所做的事情。这里是他的实现：\n\n```js\nfunction streamAsyncIterator(stream) {\n  // Get a lock on the stream:\n  const reader = stream.getReader();\n\n  return {\n    next() {\n      // Stream reads already resolve with {done, value}, so\n      // we can just call read:\n      return reader.read();\n    },\n    return() {\n      // Release the lock if the iterator terminates.\n      return reader.releaseLock();\n    },\n    // for-await calls this on whatever it's passed, so\n    // iterators tend to return themselves.\n    [Symbol.asyncIterator]() {\n      return this;\n    }\n  };\n}\n```\n\n可以在Chrome Canary里面运行上面所有的例子，启动的时候要加标志位`--js-flags=--harmony-async-iteration`。如果现在想把这些用于生产环境，Babel可以做转换。\n    \n原文：[https://jakearchibald.com/2017/async-iterators-and-generators/](https://jakearchibald.com/2017/async-iterators-and-generators/)\n\n译者：[Linda](https://github.com/LindaWhite)\n\n作者：[Jake](https://jakearchibald.com/2017/async-iterators-and-generators/)\n\n","slug":"2017-04-28-async-iterators-and-generators","published":1,"updated":"2017-12-01T08:50:00.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknhg0007jxs1gqel3x80","content":"<p>Chrome，Edge，Safari都支持了流式获取，有点像这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResponseSize</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(url);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reader = response.body.getReader();</span><br><span class=\"line\">  <span class=\"keyword\">let</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123;done, value&#125; = <span class=\"keyword\">await</span> reader.read();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (done) <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">\ttotal += value.length;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多亏有了async函数（如果不熟悉，这里有个<a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/async-functions\" target=\"_blank\" rel=\"noopener\">说明</a>），使得这段代码的可读性不错。但是，还是有点难以理解。</p>\n<p>值得庆幸的是，异步迭代器很快会到来，可以使得代码看上去更整洁：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResponseSize</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(url);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"keyword\">await</span> (<span class=\"keyword\">const</span> chunk <span class=\"keyword\">of</span> response.body) &#123;</span><br><span class=\"line\">\ttotal += chunk.length;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>异步迭代器在Chrome Canary里面可用，启动时需要加上标志位<code>--js-flags=--harmony-async-iteration</code>。下面就看下怎么运行的，可以怎么使流迭代起来。</p>\n<a id=\"more\"></a>\n<h2 id=\"Async-iterators\"><a href=\"#Async-iterators\" class=\"headerlink\" title=\"Async iterators\"></a>Async iterators</h2><p>异步迭代器和常规迭代器的工作方式非常相似，但是异步迭代器涉及promise:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Regular iterator:</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> iterator = createNumberIterator();</span><br><span class=\"line\">  iterator.next(); <span class=\"comment\">// Object &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\">  iterator.next(); <span class=\"comment\">// Object &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\">  iterator.next(); <span class=\"comment\">// Object &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\">  iterator.next(); <span class=\"comment\">// Object &#123;value: undefined, done: true&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Async iterator:</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> asyncIterator = createAsyncNumberIterator();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = asyncIterator.next(); <span class=\"comment\">// Promise</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> p;<span class=\"comment\">// Object &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> asyncIterator.next(); <span class=\"comment\">// Object &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> asyncIterator.next(); <span class=\"comment\">// Object &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> asyncIterator.next(); <span class=\"comment\">// Object &#123;value: undefined, done: true&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两种迭代器都有一个.return()方法，这个方法通知迭代器提早结束，并且做它需要做的清理工作。</p>\n<h2 id=\"迭代器-amp-循环\"><a href=\"#迭代器-amp-循环\" class=\"headerlink\" title=\"迭代器&amp;循环\"></a>迭代器&amp;循环</h2><p>直接使用迭代器对象的情况十分少见，通常在循环上用更合适，它是在幕后使用迭代器对象的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Regular iterator:</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> thing) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// …</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"comment\">// Async iterator:</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> <span class=\"keyword\">await</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> asyncThing) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// …</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>for-of循环会通过调用<code>thing[Symbol.iterator]</code>取到对应的迭代器。而for-await循环在<code>asyncThing[Symbol.asyncIterator]</code>已经定义的情况下会通过调用它取到对应的迭代器，否则会回落到<code>asyncThing[Symbol.iterator]</code>。</p>\n<p>一旦<code>asyncIterator.next()</code> resolve，for-await 会给出每个值。因为这里涉及了awaiting promise，在迭代过程中，主线程上其他事情可以执行。直到正进行的迭代完成，<code>asyncIterator.next()</code>才会被下个条目调用。这意味着要按顺序获得条目，并且循环的迭代不会重叠。</p>\n<p>for-await可以回落到<code>Symbol.iterator</code>非常cool。这意味着它可作用于像数组这种常规可迭代的对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arrayOfFetchPromises = [</span><br><span class=\"line\">    fetch(<span class=\"string\">'1.txt'</span>),</span><br><span class=\"line\">    fetch(<span class=\"string\">'2.txt'</span>),</span><br><span class=\"line\">    fetch(<span class=\"string\">'3.txt'</span>)</span><br><span class=\"line\">  ];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Regular iterator:</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> arrayOfFetchPromises) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(item); <span class=\"comment\">// Logs a promise</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Async iterator:</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"keyword\">await</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> arrayOfFetchPromises) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(item); <span class=\"comment\">// Logs a response</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这种情况下，for-await从数组中取每个条目，并且等待它resolve。可以得到第一个响应，即使第二个响应仍然没有准备好，但是总是会按照正确的顺序获得响应。</p>\n<h2 id=\"异步生成器：创建你自己的异步迭代器\"><a href=\"#异步生成器：创建你自己的异步迭代器\" class=\"headerlink\" title=\"异步生成器：创建你自己的异步迭代器\"></a>异步生成器：创建你自己的异步迭代器</h2><p>就像可以使用生成器来创建迭代器工厂一样，可以使用异步生成器来创建异步迭代器工厂。<br>异步生成器是一系列异步函数和生成器的混合体。假设我们想要生成一个返回随机数的迭代器，但是那些随机数来自一个web服务：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Note the * after \"function\"</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">asyncRandomNumbers</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// This is a web service that returns a random number</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"string\">'https://www.random.org/decimal-fractions/?num=1&amp;dec=10&amp;col=1&amp;format=plain&amp;rnd=new'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(url);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> text = <span class=\"keyword\">await</span> response.text();</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"built_in\">Number</span>(text);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个迭代器不会自然的结束–会一直获取数字。庆幸的是，可以用<code>break</code>来结束：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"keyword\">await</span> (<span class=\"keyword\">const</span> number <span class=\"keyword\">of</span> asyncRandomNumbers()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(number);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (number &gt; <span class=\"number\">0.95</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://jsbin.com/folotu/edit?js,console\" title=\"在线示例\" target=\"_blank\" rel=\"noopener\">在线实例</a>  </p>\n<p>像常规的生成器一样，可以yield值，但和常规生成器不同的是，可以await promise。</p>\n<p>和所有的for循环一样，可以在你想要break的时候break。这致使循环调用<code>iterator.return()</code>，会导致生成器会像在现在的（或下一个）yield后面有个return声明一样运行。</p>\n<p>用web service来获取随机数是一个有点没意义的例子，可以看一些更实际的东西。</p>\n<h2 id=\"使流迭代起来\"><a href=\"#使流迭代起来\" class=\"headerlink\" title=\"使流迭代起来\"></a>使流迭代起来</h2><p>像我在文章开头提到的那样，很快可以这样做：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(url);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"keyword\">await</span> (<span class=\"keyword\">const</span> chunk <span class=\"keyword\">of</span> response.body) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// …</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>…但是还没有被规范化。那么，我们来实现一个迭代流的异步迭代器吧！它有如下特性：</p>\n<p>1.在流上加个锁，这样当我们在迭代的时候，没有其他东西可以使用流。</p>\n<p>2.流的值可以被yield</p>\n<p>3.完成之后释放掉锁。</p>\n<p>释放锁很重要。如果开发者中断了循环，我们希望可以从中断的地方继续使用流。所以：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">streamAsyncIterator</span>(<span class=\"params\">stream</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Get a lock on the stream</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> reader = stream.getReader();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Read from the stream</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123;done, value&#125; = <span class=\"keyword\">await</span> reader.read();</span><br><span class=\"line\">      <span class=\"comment\">// Exit if we're done</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (done) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"comment\">// Else yield the chunk</span></span><br><span class=\"line\">      <span class=\"keyword\">yield</span> value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\treader.releaseLock();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的finally从句相当重要。如果用户在循环中跳出，会导致我们的异步生成器在现在的（或下一个）yield点返回。如果这情况发生了，我们仍然想解reader上的锁，<code>finally</code>是唯一可以在<code>return</code>之后执行的东西。</p>\n<p>就是这样！现在可以：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(url);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"keyword\">await</span> (<span class=\"keyword\">const</span> chunk <span class=\"keyword\">of</span> streamAsyncIterator(response.body)) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// …</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://jsbin.com/codapog/edit?js,console\" title=\"在线示例\" target=\"_blank\" rel=\"noopener\">在线实例</a> </p>\n<p>解锁意味着你在循环之后仍然可以控制流。假设我们想要在HTML spec里面找到第一个“J”字节的位置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> find = <span class=\"string\">'J'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> findCode = find.codePointAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(<span class=\"string\">'https://html.spec.whatwg.org'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> bytes = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"keyword\">await</span> (<span class=\"keyword\">const</span> chunk <span class=\"keyword\">of</span> streamAsyncIterator(response.body)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = chunk.indexOf(findCode);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      bytes += index;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`Found <span class=\"subst\">$&#123;find&#125;</span> at byte <span class=\"subst\">$&#123;bytes&#125;</span>.`</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    bytes += chunk.length;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  response.body.cancel();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://jsbin.com/gucesat/edit?js,console\" title=\"在线示例\" target=\"_blank\" rel=\"noopener\">在线实例</a></p>\n<p>这里当我们找到一个匹配的时候，跳出了循环。由于<code>streamAsyncIterator</code>在流上释放了锁，我们可以取消剩下的部分，来节省带宽。</p>\n<p>注意这里没有把<code>streamAsyncIterator</code> 赋值给<code>ReadableStream.prototype[Symbol.asyncIterator]</code>。如果这样做的话，我们是可以直接迭代流，但是也弄脏了不属于我们的对象。如果以后流天然支持异步迭代，且其规范化的实现与我们的实现不同，那么我们将会遇到奇怪的 bug。</p>\n<h2 id=\"更简洁的实现\"><a href=\"#更简洁的实现\" class=\"headerlink\" title=\"更简洁的实现\"></a>更简洁的实现</h2><p>你不需要用异步生成器来生成异步可迭代对象，你可以自己生成迭代器对象。这是<a href=\"https://twitter.com/domenic/\" target=\"_blank\" rel=\"noopener\">Domenic Denicola</a>所做的事情。这里是他的实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">streamAsyncIterator</span>(<span class=\"params\">stream</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Get a lock on the stream:</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> reader = stream.getReader();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    next() &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Stream reads already resolve with &#123;done, value&#125;, so</span></span><br><span class=\"line\">      <span class=\"comment\">// we can just call read:</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> reader.read();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">return</span>() &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Release the lock if the iterator terminates.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> reader.releaseLock();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// for-await calls this on whatever it's passed, so</span></span><br><span class=\"line\">    <span class=\"comment\">// iterators tend to return themselves.</span></span><br><span class=\"line\">    [<span class=\"built_in\">Symbol</span>.asyncIterator]() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以在Chrome Canary里面运行上面所有的例子，启动的时候要加标志位<code>--js-flags=--harmony-async-iteration</code>。如果现在想把这些用于生产环境，Babel可以做转换。</p>\n<p>原文：<a href=\"https://jakearchibald.com/2017/async-iterators-and-generators/\" target=\"_blank\" rel=\"noopener\">https://jakearchibald.com/2017/async-iterators-and-generators/</a></p>\n<p>译者：<a href=\"https://github.com/LindaWhite\" target=\"_blank\" rel=\"noopener\">Linda</a></p>\n<p>作者：<a href=\"https://jakearchibald.com/2017/async-iterators-and-generators/\" target=\"_blank\" rel=\"noopener\">Jake</a></p>\n","site":{"data":{}},"excerpt":"<p>Chrome，Edge，Safari都支持了流式获取，有点像这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResponseSize</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(url);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reader = response.body.getReader();</span><br><span class=\"line\">  <span class=\"keyword\">let</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> &#123;done, value&#125; = <span class=\"keyword\">await</span> reader.read();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (done) <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">\ttotal += value.length;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多亏有了async函数（如果不熟悉，这里有个<a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/async-functions\" target=\"_blank\" rel=\"noopener\">说明</a>），使得这段代码的可读性不错。但是，还是有点难以理解。</p>\n<p>值得庆幸的是，异步迭代器很快会到来，可以使得代码看上去更整洁：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResponseSize</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(url);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"keyword\">await</span> (<span class=\"keyword\">const</span> chunk <span class=\"keyword\">of</span> response.body) &#123;</span><br><span class=\"line\">\ttotal += chunk.length;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>异步迭代器在Chrome Canary里面可用，启动时需要加上标志位<code>--js-flags=--harmony-async-iteration</code>。下面就看下怎么运行的，可以怎么使流迭代起来。</p>","more":"<h2 id=\"Async-iterators\"><a href=\"#Async-iterators\" class=\"headerlink\" title=\"Async iterators\"></a>Async iterators</h2><p>异步迭代器和常规迭代器的工作方式非常相似，但是异步迭代器涉及promise:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Regular iterator:</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> iterator = createNumberIterator();</span><br><span class=\"line\">  iterator.next(); <span class=\"comment\">// Object &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\">  iterator.next(); <span class=\"comment\">// Object &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\">  iterator.next(); <span class=\"comment\">// Object &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\">  iterator.next(); <span class=\"comment\">// Object &#123;value: undefined, done: true&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Async iterator:</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> asyncIterator = createAsyncNumberIterator();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = asyncIterator.next(); <span class=\"comment\">// Promise</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> p;<span class=\"comment\">// Object &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> asyncIterator.next(); <span class=\"comment\">// Object &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> asyncIterator.next(); <span class=\"comment\">// Object &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> asyncIterator.next(); <span class=\"comment\">// Object &#123;value: undefined, done: true&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两种迭代器都有一个.return()方法，这个方法通知迭代器提早结束，并且做它需要做的清理工作。</p>\n<h2 id=\"迭代器-amp-循环\"><a href=\"#迭代器-amp-循环\" class=\"headerlink\" title=\"迭代器&amp;循环\"></a>迭代器&amp;循环</h2><p>直接使用迭代器对象的情况十分少见，通常在循环上用更合适，它是在幕后使用迭代器对象的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Regular iterator:</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> thing) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// …</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"comment\">// Async iterator:</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> <span class=\"keyword\">await</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> asyncThing) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// …</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>for-of循环会通过调用<code>thing[Symbol.iterator]</code>取到对应的迭代器。而for-await循环在<code>asyncThing[Symbol.asyncIterator]</code>已经定义的情况下会通过调用它取到对应的迭代器，否则会回落到<code>asyncThing[Symbol.iterator]</code>。</p>\n<p>一旦<code>asyncIterator.next()</code> resolve，for-await 会给出每个值。因为这里涉及了awaiting promise，在迭代过程中，主线程上其他事情可以执行。直到正进行的迭代完成，<code>asyncIterator.next()</code>才会被下个条目调用。这意味着要按顺序获得条目，并且循环的迭代不会重叠。</p>\n<p>for-await可以回落到<code>Symbol.iterator</code>非常cool。这意味着它可作用于像数组这种常规可迭代的对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arrayOfFetchPromises = [</span><br><span class=\"line\">    fetch(<span class=\"string\">'1.txt'</span>),</span><br><span class=\"line\">    fetch(<span class=\"string\">'2.txt'</span>),</span><br><span class=\"line\">    fetch(<span class=\"string\">'3.txt'</span>)</span><br><span class=\"line\">  ];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Regular iterator:</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> arrayOfFetchPromises) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(item); <span class=\"comment\">// Logs a promise</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Async iterator:</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"keyword\">await</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> arrayOfFetchPromises) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(item); <span class=\"comment\">// Logs a response</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这种情况下，for-await从数组中取每个条目，并且等待它resolve。可以得到第一个响应，即使第二个响应仍然没有准备好，但是总是会按照正确的顺序获得响应。</p>\n<h2 id=\"异步生成器：创建你自己的异步迭代器\"><a href=\"#异步生成器：创建你自己的异步迭代器\" class=\"headerlink\" title=\"异步生成器：创建你自己的异步迭代器\"></a>异步生成器：创建你自己的异步迭代器</h2><p>就像可以使用生成器来创建迭代器工厂一样，可以使用异步生成器来创建异步迭代器工厂。<br>异步生成器是一系列异步函数和生成器的混合体。假设我们想要生成一个返回随机数的迭代器，但是那些随机数来自一个web服务：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Note the * after \"function\"</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">asyncRandomNumbers</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// This is a web service that returns a random number</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"string\">'https://www.random.org/decimal-fractions/?num=1&amp;dec=10&amp;col=1&amp;format=plain&amp;rnd=new'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(url);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> text = <span class=\"keyword\">await</span> response.text();</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"built_in\">Number</span>(text);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个迭代器不会自然的结束–会一直获取数字。庆幸的是，可以用<code>break</code>来结束：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"keyword\">await</span> (<span class=\"keyword\">const</span> number <span class=\"keyword\">of</span> asyncRandomNumbers()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(number);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (number &gt; <span class=\"number\">0.95</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://jsbin.com/folotu/edit?js,console\" title=\"在线示例\" target=\"_blank\" rel=\"noopener\">在线实例</a>  </p>\n<p>像常规的生成器一样，可以yield值，但和常规生成器不同的是，可以await promise。</p>\n<p>和所有的for循环一样，可以在你想要break的时候break。这致使循环调用<code>iterator.return()</code>，会导致生成器会像在现在的（或下一个）yield后面有个return声明一样运行。</p>\n<p>用web service来获取随机数是一个有点没意义的例子，可以看一些更实际的东西。</p>\n<h2 id=\"使流迭代起来\"><a href=\"#使流迭代起来\" class=\"headerlink\" title=\"使流迭代起来\"></a>使流迭代起来</h2><p>像我在文章开头提到的那样，很快可以这样做：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(url);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"keyword\">await</span> (<span class=\"keyword\">const</span> chunk <span class=\"keyword\">of</span> response.body) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// …</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>…但是还没有被规范化。那么，我们来实现一个迭代流的异步迭代器吧！它有如下特性：</p>\n<p>1.在流上加个锁，这样当我们在迭代的时候，没有其他东西可以使用流。</p>\n<p>2.流的值可以被yield</p>\n<p>3.完成之后释放掉锁。</p>\n<p>释放锁很重要。如果开发者中断了循环，我们希望可以从中断的地方继续使用流。所以：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">streamAsyncIterator</span>(<span class=\"params\">stream</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Get a lock on the stream</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> reader = stream.getReader();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Read from the stream</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123;done, value&#125; = <span class=\"keyword\">await</span> reader.read();</span><br><span class=\"line\">      <span class=\"comment\">// Exit if we're done</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (done) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"comment\">// Else yield the chunk</span></span><br><span class=\"line\">      <span class=\"keyword\">yield</span> value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\treader.releaseLock();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的finally从句相当重要。如果用户在循环中跳出，会导致我们的异步生成器在现在的（或下一个）yield点返回。如果这情况发生了，我们仍然想解reader上的锁，<code>finally</code>是唯一可以在<code>return</code>之后执行的东西。</p>\n<p>就是这样！现在可以：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(url);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"keyword\">await</span> (<span class=\"keyword\">const</span> chunk <span class=\"keyword\">of</span> streamAsyncIterator(response.body)) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// …</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://jsbin.com/codapog/edit?js,console\" title=\"在线示例\" target=\"_blank\" rel=\"noopener\">在线实例</a> </p>\n<p>解锁意味着你在循环之后仍然可以控制流。假设我们想要在HTML spec里面找到第一个“J”字节的位置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> find = <span class=\"string\">'J'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> findCode = find.codePointAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(<span class=\"string\">'https://html.spec.whatwg.org'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> bytes = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"keyword\">await</span> (<span class=\"keyword\">const</span> chunk <span class=\"keyword\">of</span> streamAsyncIterator(response.body)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = chunk.indexOf(findCode);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      bytes += index;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`Found <span class=\"subst\">$&#123;find&#125;</span> at byte <span class=\"subst\">$&#123;bytes&#125;</span>.`</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    bytes += chunk.length;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  response.body.cancel();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://jsbin.com/gucesat/edit?js,console\" title=\"在线示例\" target=\"_blank\" rel=\"noopener\">在线实例</a></p>\n<p>这里当我们找到一个匹配的时候，跳出了循环。由于<code>streamAsyncIterator</code>在流上释放了锁，我们可以取消剩下的部分，来节省带宽。</p>\n<p>注意这里没有把<code>streamAsyncIterator</code> 赋值给<code>ReadableStream.prototype[Symbol.asyncIterator]</code>。如果这样做的话，我们是可以直接迭代流，但是也弄脏了不属于我们的对象。如果以后流天然支持异步迭代，且其规范化的实现与我们的实现不同，那么我们将会遇到奇怪的 bug。</p>\n<h2 id=\"更简洁的实现\"><a href=\"#更简洁的实现\" class=\"headerlink\" title=\"更简洁的实现\"></a>更简洁的实现</h2><p>你不需要用异步生成器来生成异步可迭代对象，你可以自己生成迭代器对象。这是<a href=\"https://twitter.com/domenic/\" target=\"_blank\" rel=\"noopener\">Domenic Denicola</a>所做的事情。这里是他的实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">streamAsyncIterator</span>(<span class=\"params\">stream</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Get a lock on the stream:</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> reader = stream.getReader();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    next() &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Stream reads already resolve with &#123;done, value&#125;, so</span></span><br><span class=\"line\">      <span class=\"comment\">// we can just call read:</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> reader.read();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">return</span>() &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Release the lock if the iterator terminates.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> reader.releaseLock();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// for-await calls this on whatever it's passed, so</span></span><br><span class=\"line\">    <span class=\"comment\">// iterators tend to return themselves.</span></span><br><span class=\"line\">    [<span class=\"built_in\">Symbol</span>.asyncIterator]() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以在Chrome Canary里面运行上面所有的例子，启动的时候要加标志位<code>--js-flags=--harmony-async-iteration</code>。如果现在想把这些用于生产环境，Babel可以做转换。</p>\n<p>原文：<a href=\"https://jakearchibald.com/2017/async-iterators-and-generators/\" target=\"_blank\" rel=\"noopener\">https://jakearchibald.com/2017/async-iterators-and-generators/</a></p>\n<p>译者：<a href=\"https://github.com/LindaWhite\" target=\"_blank\" rel=\"noopener\">Linda</a></p>\n<p>作者：<a href=\"https://jakearchibald.com/2017/async-iterators-and-generators/\" target=\"_blank\" rel=\"noopener\">Jake</a></p>"},{"title":"【译】nginx是如何处理请求的","date":"2017-05-05T04:55:00.000Z","author":"TooBug","_content":"\nNginx首先需要确定由哪个`server`来处理请求。我们看一个简单的配置文件，在`*:80`端口上包含了三个虚拟主机（`server`）：\n\n```\nserver {\n    listen      80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      80;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      80;\n    server_name example.com www.example.com;\n    ...\n}\n```\n\n在这个配置下，Nginx只通过请求的`Host`头来决定路由到哪个`server`。如果`Host`头的值跟所有的`server`的`server_name`都不匹配，或者请求中没有包含这个阔大，Nginx会使用这个端口上的默认`server`。在这个配置文件中，默认`server`是指第一个，这正是Nginx标准的默认行为。默认`server`也可以通过配置显示指定，只需要在`listen`指令值中加上`default_server`参数即可。\n\n<!-- more -->\n\n```\nserver {\n    listen      80 default_server;\n    server_name example.net www.example.net;\n    ...\n}\n```\n\n> `default_server`参数在 0.8.21 版本之后可用。在更早的版本中，应该使用`default`参数。\n\n值得注意的是，默认`server`是`listen`指令的参数，而不是`server_name`的。下文会详细介绍。\n\n## 如何阻止没有指明 Host 的请求\n\n如果要禁止没有包含`Host`头的请求，可以用下面的配置让一个`server`丢弃这样的请求：\n\n```\nserver {\n    listen      80;\n    server_name \"\";\n    return      444;\n}\n```\n\n如果请求没有带`Host`头，将与`server_name`为空字符串的`server`匹配，返回非标准的私有状态码444时，Nginx会关闭连接。\n\n> 从 0.8.48 版本开始，空字符串是`server_name`的默认值，因此`server_name \"\"`可以省略。在更早的版本中，默认值是机器的主机名。\n\n## 基于 IP 和基于主机名的虚拟主机\n\n我们来看一个更复杂的例子，这个例子中有一些监听在不同地址上的`server`：\n\n```\nserver {\n    listen      192.168.1.1:80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      192.168.1.1:80;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      192.168.1.2:80;\n    server_name example.com www.example.com;\n    ...\n}\n```\n\n在这个配置中，Nginx 首先将请求的 IP 地址和端口与`server`进行匹配，得到一些匹配的`server`。然后根据请求的`Host`头与这些`server`的`server_name`进行匹配。如果`server_name`无法匹配，则请求将由默认`server`处理。例如，在`192.168.1.1:80`上收到一个`www.example.com`的请求，这个请求将由`192.168.1.1:80`上的默认`server`进行处理，也就是由第一个`server`进行处理，因为无法在这个（IP 地址和）端口上匹配到`www.example.com`。\n\n前面已经说过，默认`server`是`listen`指令的一个参数，那么监听不同的（IP 地址和）端口就可以指定不同的默认`server`：\n\n```\nserver {\n    listen      192.168.1.1:80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      192.168.1.1:80 default_server;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      192.168.1.2:80 default_server;\n    server_name example.com www.example.com;\n    ...\n}\n```\n\n## 一个简单的 PHP 站点配置\n\n现在我们通过一个简单的 PHP 站点来看一下 Nginx 是如何处理`location`的：\n\n```\nserver {\n    listen      80;\n    server_name example.org www.example.org;\n    root        /data/www;\n\n    location / {\n        index   index.html index.php;\n    }\n\n    location ~* \\.(gif|jpg|png)$ {\n        expires 30d;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_pass  localhost:9000;\n        fastcgi_param SCRIPT_FILENAME\n                      $document_root$fastcgi_script_name;\n        include       fastcgi_params;\n    }\n}\n```\n\nNginx 首先会通过遍历字符串的方式查找指向最具体的`location`前缀，这与配置顺便无关。在上面的楝文件中，唯一的前缀是`/`，它可以匹配任意请求，将被最后使用。然后 Nginx 会按照配置书写的顺序进行正则表达式匹配。一旦匹配到第一条规则，则会停止后续查找，Nginx 将使用这个`location`。如果正则表达式匹配全部失败了，则 Nginx 会使用前面找到的前缀指向最具体的`location`。\n\n值得注意的是，所有类型的`location`都只匹配请求的`URI`部分，不包括任何参数。这是因为请求的参数可能有很多种形式，例如：\n\n```\n/index.php?user=john&page=1\n/index.php?page=1&user=john\n```\n\n此外，用户可以在参数中随便添加任何东西：\n\n```\n/index.php?page=1&something+else&user=john\n```\n\n现在我们来看看，按上面的配置文件，一个请求将如何被处理：\n\n- 请求`/logo.gif`首先被前缀`location` `/`匹配到，然后被正则表达式`\\.(gif|jpg|png)$`匹配到。这样的话，它将由后者进行处理。因为指定了`root /data/www`，因此这个请求将被映射到`/data/www/logo.gif`，这个文件将被发送到客户端。\n- 请求`/index.php`也被前缀`location ` `/`匹配到，然后被正则表达式`\\.(php)$`匹配到。这样的话，它将由后者进行处理。请求被转交到监听在`localhost:9000`的 FastCGI 服务进行处理。`fastcgi_param`指令会将 FastCGI 的参数`SCRIPT_FILENAME`设置为`/data/www/index.php`，然后 FastCGI 服务会执行这个文件。`$document_root`变量的值等于`root`指令的值，变量`$fastcgi_script_name`的值等于请求的 URI ，也就是`/index.php`。\n- 请求`/about.html`只被前缀`location` `/`匹配到，这样它将被在这个`location`中进行处理。因为指定了`root /data/www`，因此这个请求将被映射到`/data/www/about.html`，这个文件将被发送到客户端。\n- 请求`/`的处理更复杂一些。它只被前缀`location` `/`匹配到，这样它将被在这个`location`中进行处理。接下来`index`指令将根据`root /data/www`指令的路径探测`index`参数中指定的文件是否存在。如果`/data/www/index.html`不存在，而`/data/www/index.php`存在，则该指令将内部跳转到`/index.php`，然后 Nginx 会像对待新请求一样重新匹配这个请求。如前文所述，这个请求将被 FastCGI 服务进行处理。\n\n编写：Igor Sysoev 编辑：Brian Mercer\n\n原文：<http://nginx.org/en/docs/http/request_processing.html>\n","source":"_posts/2017-05-05-how-nginx-processes-a-request.md","raw":"---\ntitle: 【译】nginx是如何处理请求的\ndate: 2017-05-05 12:55\ncategory: 翻译\ntags: [nginx]\nauthor: TooBug\n---\n\nNginx首先需要确定由哪个`server`来处理请求。我们看一个简单的配置文件，在`*:80`端口上包含了三个虚拟主机（`server`）：\n\n```\nserver {\n    listen      80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      80;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      80;\n    server_name example.com www.example.com;\n    ...\n}\n```\n\n在这个配置下，Nginx只通过请求的`Host`头来决定路由到哪个`server`。如果`Host`头的值跟所有的`server`的`server_name`都不匹配，或者请求中没有包含这个阔大，Nginx会使用这个端口上的默认`server`。在这个配置文件中，默认`server`是指第一个，这正是Nginx标准的默认行为。默认`server`也可以通过配置显示指定，只需要在`listen`指令值中加上`default_server`参数即可。\n\n<!-- more -->\n\n```\nserver {\n    listen      80 default_server;\n    server_name example.net www.example.net;\n    ...\n}\n```\n\n> `default_server`参数在 0.8.21 版本之后可用。在更早的版本中，应该使用`default`参数。\n\n值得注意的是，默认`server`是`listen`指令的参数，而不是`server_name`的。下文会详细介绍。\n\n## 如何阻止没有指明 Host 的请求\n\n如果要禁止没有包含`Host`头的请求，可以用下面的配置让一个`server`丢弃这样的请求：\n\n```\nserver {\n    listen      80;\n    server_name \"\";\n    return      444;\n}\n```\n\n如果请求没有带`Host`头，将与`server_name`为空字符串的`server`匹配，返回非标准的私有状态码444时，Nginx会关闭连接。\n\n> 从 0.8.48 版本开始，空字符串是`server_name`的默认值，因此`server_name \"\"`可以省略。在更早的版本中，默认值是机器的主机名。\n\n## 基于 IP 和基于主机名的虚拟主机\n\n我们来看一个更复杂的例子，这个例子中有一些监听在不同地址上的`server`：\n\n```\nserver {\n    listen      192.168.1.1:80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      192.168.1.1:80;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      192.168.1.2:80;\n    server_name example.com www.example.com;\n    ...\n}\n```\n\n在这个配置中，Nginx 首先将请求的 IP 地址和端口与`server`进行匹配，得到一些匹配的`server`。然后根据请求的`Host`头与这些`server`的`server_name`进行匹配。如果`server_name`无法匹配，则请求将由默认`server`处理。例如，在`192.168.1.1:80`上收到一个`www.example.com`的请求，这个请求将由`192.168.1.1:80`上的默认`server`进行处理，也就是由第一个`server`进行处理，因为无法在这个（IP 地址和）端口上匹配到`www.example.com`。\n\n前面已经说过，默认`server`是`listen`指令的一个参数，那么监听不同的（IP 地址和）端口就可以指定不同的默认`server`：\n\n```\nserver {\n    listen      192.168.1.1:80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      192.168.1.1:80 default_server;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      192.168.1.2:80 default_server;\n    server_name example.com www.example.com;\n    ...\n}\n```\n\n## 一个简单的 PHP 站点配置\n\n现在我们通过一个简单的 PHP 站点来看一下 Nginx 是如何处理`location`的：\n\n```\nserver {\n    listen      80;\n    server_name example.org www.example.org;\n    root        /data/www;\n\n    location / {\n        index   index.html index.php;\n    }\n\n    location ~* \\.(gif|jpg|png)$ {\n        expires 30d;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_pass  localhost:9000;\n        fastcgi_param SCRIPT_FILENAME\n                      $document_root$fastcgi_script_name;\n        include       fastcgi_params;\n    }\n}\n```\n\nNginx 首先会通过遍历字符串的方式查找指向最具体的`location`前缀，这与配置顺便无关。在上面的楝文件中，唯一的前缀是`/`，它可以匹配任意请求，将被最后使用。然后 Nginx 会按照配置书写的顺序进行正则表达式匹配。一旦匹配到第一条规则，则会停止后续查找，Nginx 将使用这个`location`。如果正则表达式匹配全部失败了，则 Nginx 会使用前面找到的前缀指向最具体的`location`。\n\n值得注意的是，所有类型的`location`都只匹配请求的`URI`部分，不包括任何参数。这是因为请求的参数可能有很多种形式，例如：\n\n```\n/index.php?user=john&page=1\n/index.php?page=1&user=john\n```\n\n此外，用户可以在参数中随便添加任何东西：\n\n```\n/index.php?page=1&something+else&user=john\n```\n\n现在我们来看看，按上面的配置文件，一个请求将如何被处理：\n\n- 请求`/logo.gif`首先被前缀`location` `/`匹配到，然后被正则表达式`\\.(gif|jpg|png)$`匹配到。这样的话，它将由后者进行处理。因为指定了`root /data/www`，因此这个请求将被映射到`/data/www/logo.gif`，这个文件将被发送到客户端。\n- 请求`/index.php`也被前缀`location ` `/`匹配到，然后被正则表达式`\\.(php)$`匹配到。这样的话，它将由后者进行处理。请求被转交到监听在`localhost:9000`的 FastCGI 服务进行处理。`fastcgi_param`指令会将 FastCGI 的参数`SCRIPT_FILENAME`设置为`/data/www/index.php`，然后 FastCGI 服务会执行这个文件。`$document_root`变量的值等于`root`指令的值，变量`$fastcgi_script_name`的值等于请求的 URI ，也就是`/index.php`。\n- 请求`/about.html`只被前缀`location` `/`匹配到，这样它将被在这个`location`中进行处理。因为指定了`root /data/www`，因此这个请求将被映射到`/data/www/about.html`，这个文件将被发送到客户端。\n- 请求`/`的处理更复杂一些。它只被前缀`location` `/`匹配到，这样它将被在这个`location`中进行处理。接下来`index`指令将根据`root /data/www`指令的路径探测`index`参数中指定的文件是否存在。如果`/data/www/index.html`不存在，而`/data/www/index.php`存在，则该指令将内部跳转到`/index.php`，然后 Nginx 会像对待新请求一样重新匹配这个请求。如前文所述，这个请求将被 FastCGI 服务进行处理。\n\n编写：Igor Sysoev 编辑：Brian Mercer\n\n原文：<http://nginx.org/en/docs/http/request_processing.html>\n","slug":"2017-05-05-how-nginx-processes-a-request","published":1,"updated":"2017-12-01T08:50:00.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknhi0008jxs141at636d","content":"<p>Nginx首先需要确定由哪个<code>server</code>来处理请求。我们看一个简单的配置文件，在<code>*:80</code>端口上包含了三个虚拟主机（<code>server</code>）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      80;</span><br><span class=\"line\">    server_name example.org www.example.org;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      80;</span><br><span class=\"line\">    server_name example.net www.example.net;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      80;</span><br><span class=\"line\">    server_name example.com www.example.com;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个配置下，Nginx只通过请求的<code>Host</code>头来决定路由到哪个<code>server</code>。如果<code>Host</code>头的值跟所有的<code>server</code>的<code>server_name</code>都不匹配，或者请求中没有包含这个阔大，Nginx会使用这个端口上的默认<code>server</code>。在这个配置文件中，默认<code>server</code>是指第一个，这正是Nginx标准的默认行为。默认<code>server</code>也可以通过配置显示指定，只需要在<code>listen</code>指令值中加上<code>default_server</code>参数即可。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      80 default_server;</span><br><span class=\"line\">    server_name example.net www.example.net;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>default_server</code>参数在 0.8.21 版本之后可用。在更早的版本中，应该使用<code>default</code>参数。</p>\n</blockquote>\n<p>值得注意的是，默认<code>server</code>是<code>listen</code>指令的参数，而不是<code>server_name</code>的。下文会详细介绍。</p>\n<h2 id=\"如何阻止没有指明-Host-的请求\"><a href=\"#如何阻止没有指明-Host-的请求\" class=\"headerlink\" title=\"如何阻止没有指明 Host 的请求\"></a>如何阻止没有指明 Host 的请求</h2><p>如果要禁止没有包含<code>Host</code>头的请求，可以用下面的配置让一个<code>server</code>丢弃这样的请求：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      80;</span><br><span class=\"line\">    server_name &quot;&quot;;</span><br><span class=\"line\">    return      444;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果请求没有带<code>Host</code>头，将与<code>server_name</code>为空字符串的<code>server</code>匹配，返回非标准的私有状态码444时，Nginx会关闭连接。</p>\n<blockquote>\n<p>从 0.8.48 版本开始，空字符串是<code>server_name</code>的默认值，因此<code>server_name &quot;&quot;</code>可以省略。在更早的版本中，默认值是机器的主机名。</p>\n</blockquote>\n<h2 id=\"基于-IP-和基于主机名的虚拟主机\"><a href=\"#基于-IP-和基于主机名的虚拟主机\" class=\"headerlink\" title=\"基于 IP 和基于主机名的虚拟主机\"></a>基于 IP 和基于主机名的虚拟主机</h2><p>我们来看一个更复杂的例子，这个例子中有一些监听在不同地址上的<code>server</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      192.168.1.1:80;</span><br><span class=\"line\">    server_name example.org www.example.org;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      192.168.1.1:80;</span><br><span class=\"line\">    server_name example.net www.example.net;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      192.168.1.2:80;</span><br><span class=\"line\">    server_name example.com www.example.com;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个配置中，Nginx 首先将请求的 IP 地址和端口与<code>server</code>进行匹配，得到一些匹配的<code>server</code>。然后根据请求的<code>Host</code>头与这些<code>server</code>的<code>server_name</code>进行匹配。如果<code>server_name</code>无法匹配，则请求将由默认<code>server</code>处理。例如，在<code>192.168.1.1:80</code>上收到一个<code>www.example.com</code>的请求，这个请求将由<code>192.168.1.1:80</code>上的默认<code>server</code>进行处理，也就是由第一个<code>server</code>进行处理，因为无法在这个（IP 地址和）端口上匹配到<code>www.example.com</code>。</p>\n<p>前面已经说过，默认<code>server</code>是<code>listen</code>指令的一个参数，那么监听不同的（IP 地址和）端口就可以指定不同的默认<code>server</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      192.168.1.1:80;</span><br><span class=\"line\">    server_name example.org www.example.org;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      192.168.1.1:80 default_server;</span><br><span class=\"line\">    server_name example.net www.example.net;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      192.168.1.2:80 default_server;</span><br><span class=\"line\">    server_name example.com www.example.com;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"一个简单的-PHP-站点配置\"><a href=\"#一个简单的-PHP-站点配置\" class=\"headerlink\" title=\"一个简单的 PHP 站点配置\"></a>一个简单的 PHP 站点配置</h2><p>现在我们通过一个简单的 PHP 站点来看一下 Nginx 是如何处理<code>location</code>的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      80;</span><br><span class=\"line\">    server_name example.org www.example.org;</span><br><span class=\"line\">    root        /data/www;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        index   index.html index.php;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~* \\.(gif|jpg|png)$ &#123;</span><br><span class=\"line\">        expires 30d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ \\.php$ &#123;</span><br><span class=\"line\">        fastcgi_pass  localhost:9000;</span><br><span class=\"line\">        fastcgi_param SCRIPT_FILENAME</span><br><span class=\"line\">                      $document_root$fastcgi_script_name;</span><br><span class=\"line\">        include       fastcgi_params;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Nginx 首先会通过遍历字符串的方式查找指向最具体的<code>location</code>前缀，这与配置顺便无关。在上面的楝文件中，唯一的前缀是<code>/</code>，它可以匹配任意请求，将被最后使用。然后 Nginx 会按照配置书写的顺序进行正则表达式匹配。一旦匹配到第一条规则，则会停止后续查找，Nginx 将使用这个<code>location</code>。如果正则表达式匹配全部失败了，则 Nginx 会使用前面找到的前缀指向最具体的<code>location</code>。</p>\n<p>值得注意的是，所有类型的<code>location</code>都只匹配请求的<code>URI</code>部分，不包括任何参数。这是因为请求的参数可能有很多种形式，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/index.php?user=john&amp;page=1</span><br><span class=\"line\">/index.php?page=1&amp;user=john</span><br></pre></td></tr></table></figure>\n<p>此外，用户可以在参数中随便添加任何东西：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/index.php?page=1&amp;something+else&amp;user=john</span><br></pre></td></tr></table></figure>\n<p>现在我们来看看，按上面的配置文件，一个请求将如何被处理：</p>\n<ul>\n<li>请求<code>/logo.gif</code>首先被前缀<code>location</code> <code>/</code>匹配到，然后被正则表达式<code>\\.(gif|jpg|png)$</code>匹配到。这样的话，它将由后者进行处理。因为指定了<code>root /data/www</code>，因此这个请求将被映射到<code>/data/www/logo.gif</code>，这个文件将被发送到客户端。</li>\n<li>请求<code>/index.php</code>也被前缀<code>location</code> <code>/</code>匹配到，然后被正则表达式<code>\\.(php)$</code>匹配到。这样的话，它将由后者进行处理。请求被转交到监听在<code>localhost:9000</code>的 FastCGI 服务进行处理。<code>fastcgi_param</code>指令会将 FastCGI 的参数<code>SCRIPT_FILENAME</code>设置为<code>/data/www/index.php</code>，然后 FastCGI 服务会执行这个文件。<code>$document_root</code>变量的值等于<code>root</code>指令的值，变量<code>$fastcgi_script_name</code>的值等于请求的 URI ，也就是<code>/index.php</code>。</li>\n<li>请求<code>/about.html</code>只被前缀<code>location</code> <code>/</code>匹配到，这样它将被在这个<code>location</code>中进行处理。因为指定了<code>root /data/www</code>，因此这个请求将被映射到<code>/data/www/about.html</code>，这个文件将被发送到客户端。</li>\n<li>请求<code>/</code>的处理更复杂一些。它只被前缀<code>location</code> <code>/</code>匹配到，这样它将被在这个<code>location</code>中进行处理。接下来<code>index</code>指令将根据<code>root /data/www</code>指令的路径探测<code>index</code>参数中指定的文件是否存在。如果<code>/data/www/index.html</code>不存在，而<code>/data/www/index.php</code>存在，则该指令将内部跳转到<code>/index.php</code>，然后 Nginx 会像对待新请求一样重新匹配这个请求。如前文所述，这个请求将被 FastCGI 服务进行处理。</li>\n</ul>\n<p>编写：Igor Sysoev 编辑：Brian Mercer</p>\n<p>原文：<a href=\"http://nginx.org/en/docs/http/request_processing.html\" target=\"_blank\" rel=\"noopener\">http://nginx.org/en/docs/http/request_processing.html</a></p>\n","site":{"data":{}},"excerpt":"<p>Nginx首先需要确定由哪个<code>server</code>来处理请求。我们看一个简单的配置文件，在<code>*:80</code>端口上包含了三个虚拟主机（<code>server</code>）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      80;</span><br><span class=\"line\">    server_name example.org www.example.org;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      80;</span><br><span class=\"line\">    server_name example.net www.example.net;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      80;</span><br><span class=\"line\">    server_name example.com www.example.com;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个配置下，Nginx只通过请求的<code>Host</code>头来决定路由到哪个<code>server</code>。如果<code>Host</code>头的值跟所有的<code>server</code>的<code>server_name</code>都不匹配，或者请求中没有包含这个阔大，Nginx会使用这个端口上的默认<code>server</code>。在这个配置文件中，默认<code>server</code>是指第一个，这正是Nginx标准的默认行为。默认<code>server</code>也可以通过配置显示指定，只需要在<code>listen</code>指令值中加上<code>default_server</code>参数即可。</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      80 default_server;</span><br><span class=\"line\">    server_name example.net www.example.net;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>default_server</code>参数在 0.8.21 版本之后可用。在更早的版本中，应该使用<code>default</code>参数。</p>\n</blockquote>\n<p>值得注意的是，默认<code>server</code>是<code>listen</code>指令的参数，而不是<code>server_name</code>的。下文会详细介绍。</p>\n<h2 id=\"如何阻止没有指明-Host-的请求\"><a href=\"#如何阻止没有指明-Host-的请求\" class=\"headerlink\" title=\"如何阻止没有指明 Host 的请求\"></a>如何阻止没有指明 Host 的请求</h2><p>如果要禁止没有包含<code>Host</code>头的请求，可以用下面的配置让一个<code>server</code>丢弃这样的请求：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      80;</span><br><span class=\"line\">    server_name &quot;&quot;;</span><br><span class=\"line\">    return      444;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果请求没有带<code>Host</code>头，将与<code>server_name</code>为空字符串的<code>server</code>匹配，返回非标准的私有状态码444时，Nginx会关闭连接。</p>\n<blockquote>\n<p>从 0.8.48 版本开始，空字符串是<code>server_name</code>的默认值，因此<code>server_name &quot;&quot;</code>可以省略。在更早的版本中，默认值是机器的主机名。</p>\n</blockquote>\n<h2 id=\"基于-IP-和基于主机名的虚拟主机\"><a href=\"#基于-IP-和基于主机名的虚拟主机\" class=\"headerlink\" title=\"基于 IP 和基于主机名的虚拟主机\"></a>基于 IP 和基于主机名的虚拟主机</h2><p>我们来看一个更复杂的例子，这个例子中有一些监听在不同地址上的<code>server</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      192.168.1.1:80;</span><br><span class=\"line\">    server_name example.org www.example.org;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      192.168.1.1:80;</span><br><span class=\"line\">    server_name example.net www.example.net;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      192.168.1.2:80;</span><br><span class=\"line\">    server_name example.com www.example.com;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个配置中，Nginx 首先将请求的 IP 地址和端口与<code>server</code>进行匹配，得到一些匹配的<code>server</code>。然后根据请求的<code>Host</code>头与这些<code>server</code>的<code>server_name</code>进行匹配。如果<code>server_name</code>无法匹配，则请求将由默认<code>server</code>处理。例如，在<code>192.168.1.1:80</code>上收到一个<code>www.example.com</code>的请求，这个请求将由<code>192.168.1.1:80</code>上的默认<code>server</code>进行处理，也就是由第一个<code>server</code>进行处理，因为无法在这个（IP 地址和）端口上匹配到<code>www.example.com</code>。</p>\n<p>前面已经说过，默认<code>server</code>是<code>listen</code>指令的一个参数，那么监听不同的（IP 地址和）端口就可以指定不同的默认<code>server</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      192.168.1.1:80;</span><br><span class=\"line\">    server_name example.org www.example.org;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      192.168.1.1:80 default_server;</span><br><span class=\"line\">    server_name example.net www.example.net;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      192.168.1.2:80 default_server;</span><br><span class=\"line\">    server_name example.com www.example.com;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"一个简单的-PHP-站点配置\"><a href=\"#一个简单的-PHP-站点配置\" class=\"headerlink\" title=\"一个简单的 PHP 站点配置\"></a>一个简单的 PHP 站点配置</h2><p>现在我们通过一个简单的 PHP 站点来看一下 Nginx 是如何处理<code>location</code>的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      80;</span><br><span class=\"line\">    server_name example.org www.example.org;</span><br><span class=\"line\">    root        /data/www;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        index   index.html index.php;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~* \\.(gif|jpg|png)$ &#123;</span><br><span class=\"line\">        expires 30d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ \\.php$ &#123;</span><br><span class=\"line\">        fastcgi_pass  localhost:9000;</span><br><span class=\"line\">        fastcgi_param SCRIPT_FILENAME</span><br><span class=\"line\">                      $document_root$fastcgi_script_name;</span><br><span class=\"line\">        include       fastcgi_params;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Nginx 首先会通过遍历字符串的方式查找指向最具体的<code>location</code>前缀，这与配置顺便无关。在上面的楝文件中，唯一的前缀是<code>/</code>，它可以匹配任意请求，将被最后使用。然后 Nginx 会按照配置书写的顺序进行正则表达式匹配。一旦匹配到第一条规则，则会停止后续查找，Nginx 将使用这个<code>location</code>。如果正则表达式匹配全部失败了，则 Nginx 会使用前面找到的前缀指向最具体的<code>location</code>。</p>\n<p>值得注意的是，所有类型的<code>location</code>都只匹配请求的<code>URI</code>部分，不包括任何参数。这是因为请求的参数可能有很多种形式，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/index.php?user=john&amp;page=1</span><br><span class=\"line\">/index.php?page=1&amp;user=john</span><br></pre></td></tr></table></figure>\n<p>此外，用户可以在参数中随便添加任何东西：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/index.php?page=1&amp;something+else&amp;user=john</span><br></pre></td></tr></table></figure>\n<p>现在我们来看看，按上面的配置文件，一个请求将如何被处理：</p>\n<ul>\n<li>请求<code>/logo.gif</code>首先被前缀<code>location</code> <code>/</code>匹配到，然后被正则表达式<code>\\.(gif|jpg|png)$</code>匹配到。这样的话，它将由后者进行处理。因为指定了<code>root /data/www</code>，因此这个请求将被映射到<code>/data/www/logo.gif</code>，这个文件将被发送到客户端。</li>\n<li>请求<code>/index.php</code>也被前缀<code>location</code> <code>/</code>匹配到，然后被正则表达式<code>\\.(php)$</code>匹配到。这样的话，它将由后者进行处理。请求被转交到监听在<code>localhost:9000</code>的 FastCGI 服务进行处理。<code>fastcgi_param</code>指令会将 FastCGI 的参数<code>SCRIPT_FILENAME</code>设置为<code>/data/www/index.php</code>，然后 FastCGI 服务会执行这个文件。<code>$document_root</code>变量的值等于<code>root</code>指令的值，变量<code>$fastcgi_script_name</code>的值等于请求的 URI ，也就是<code>/index.php</code>。</li>\n<li>请求<code>/about.html</code>只被前缀<code>location</code> <code>/</code>匹配到，这样它将被在这个<code>location</code>中进行处理。因为指定了<code>root /data/www</code>，因此这个请求将被映射到<code>/data/www/about.html</code>，这个文件将被发送到客户端。</li>\n<li>请求<code>/</code>的处理更复杂一些。它只被前缀<code>location</code> <code>/</code>匹配到，这样它将被在这个<code>location</code>中进行处理。接下来<code>index</code>指令将根据<code>root /data/www</code>指令的路径探测<code>index</code>参数中指定的文件是否存在。如果<code>/data/www/index.html</code>不存在，而<code>/data/www/index.php</code>存在，则该指令将内部跳转到<code>/index.php</code>，然后 Nginx 会像对待新请求一样重新匹配这个请求。如前文所述，这个请求将被 FastCGI 服务进行处理。</li>\n</ul>\n<p>编写：Igor Sysoev 编辑：Brian Mercer</p>\n<p>原文：<a href=\"http://nginx.org/en/docs/http/request_processing.html\" target=\"_blank\" rel=\"noopener\">http://nginx.org/en/docs/http/request_processing.html</a></p>"},{"title":"【译】使用async/await玩函数式编程","date":"2017-05-06T06:00:00.000Z","author":"Jin","_content":"\n[Async/await](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)使得像[`for`循环，`if`表达式和`try/catch`等这样的块级命令结构可以很容易的结合异步行为](http://thecodebarbarian.com/common-async-await-design-patterns-in-node.js.html)。不同的是，它对功能结构的处理与`forEach`，`map`，`reduce`和`filter`等函数不同。`async`异步功能结构的行为是乎令人费解。这篇文章，我将向你展示在JavaScript的内置数组函数封装为`async`异步函数时遇到的一些陷阱以及如何解决它。\n\n> 注意：以下的代码只在Node v.7.6.0+版本测试通过，以下例子只供参考和学习。我不建议在生产中使用它。\n\n<!-- more -->\n\n## 动机和 `forEach`\n`forEach`会同步的顺序的为数组的每一个元素都执行一次函数。例如，下面的JavaScript代码会打印`[0-9]`：\n\n```js\nfunction print(n) {\n  console.log(n);\n}\n\nfunction test() {\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].forEach(print);\n}\n\ntest();\n```\n\n不幸的是，异步函数就变得微妙起来。以下JavaScript代码会反序输出`[0-9]`：\n\n```js\nasync function print(n) {\n  // Wait 1 second before printing 0, 0.9 seconds before printing 1, etc.\n  await new Promise(resolve => setTimeout(() => resolve(), 1000 - n * 100));\n  // Will usually print 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 but order is not strictly\n  // guaranteed.\n  console.log(n);\n}\n\nasync function test() {\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].forEach(print);\n}\n\ntest();\n```\n\n尽管2个函数都是异步的，Node.js不会等到第一个`print()`执行完成后再去执行下一个！\n可以就只使用一个`await`吗？看看效果：\n\n```js\nasync function test() {\n  // SyntaxError: Unexpected identifier\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].forEach(n => { await print(n); });\n}\n```\n\n不能像上面只使用一个`await`，不然你就是[Star Fox](http://knowyourmeme.com/memes/i-can-t-let-you-do-that-starfox)，这样写有语法问题的，因为`await`必须在`async`当前代码作用域内。在这一点上，你可以放弃,改为使用[非标准`Promise.series()`函数](https://www.npmjs.com/package/promise-series)。假如你意识到`async`函数只是返回`Promise`函数，那么你可以在`.reduce()`中使用`Promise`的链式调用来实现一个顺序的`forEach()`。\n\n```js\nasync function print(n) {\n  await new Promise(resolve => setTimeout(() => resolve(), 1000 - n * 100));\n  console.log(n);\n}\n\nasync function test() {\n  // This is where the magic happens. Each `print()` call returns a promise,\n  // so calling `then()` chains them together in order and prints 0-9 in order.\n  await [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].\n    reduce((promise, n) => promise.then(() => print(n)), Promise.resolve());\n}\n\ntest();\n```\n\n你完全可以把这个函数改成名为`forEachAsync`的函数：\n\n```js\nasync function print(n) {\n  await new Promise(resolve => setTimeout(() => resolve(), 1000 - n * 100));\n  console.log(n);\n}\n\nArray.prototype.forEachAsync = function(fn) {\n  return this.reduce((promise, n) => promise.then(() => fn(n)), Promise.resolve());\n};\n\nasync function test() {\n  await [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].forEachAsync(print);\n}\n\ntest();\n```\n\n## `map()`和`filter()`的链式调用\nJavaScript有一个很大的优势那就是数组方法是可以链式调用的。下面的代码主要做的事是，根据你提供的`id`数组分别到数据库`db1`和`db2`查询到你想要的对应`id`的文本内容，过滤掉`db2`数据库的部分，然后把`db1`剩下的部分保存到`db2`数据库。虽然希望你乎略业务功能，但是里面还是有很多的中间值。\n\n```js\nconst { MongoClient } = require('mongodb');\n\nasync function copy(ids, db1, db2) {\n  // Find all docs from db1\n  const fromDb1 = await db1.collection('Test').find({ _id: { $in: ids } }).sort({ _id: 1 }).toArray();\n  // And db2\n  const fromDb2 = await db2.collection('Test').find({ _id: { $in: ids } }).sort({ _id: 1 }).toArray();\n\n  // Find all docs from db1 that aren't in db2\n  const toInsert = [];\n  for (const doc of fromDb1) {\n    if (!fromDb2.find(_doc => _doc._id === doc._id)) {\n      toInsert.push(doc);\n      console.log('Insert', doc);\n    }\n  }\n  // And insert all of them\n  await db2.collection('Test').insertMany(toInsert);\n}\n\nasync function test() {\n  const db1 = await MongoClient.connect('mongodb://localhost:27017/db1');\n  const db2 = await MongoClient.connect('mongodb://localhost:27017/db2');\n  await db1.dropDatabase();\n  await db2.dropDatabase();\n\n  const docs = [\n    { _id: 1 },\n    { _id: 2 },\n    { _id: 3 },\n    { _id: 4 }\n  ];\n  await db1.collection('Test').insertMany(docs);\n  // Only insert docs with _id 2 and 4 into db2\n  await db2.collection('Test').insertMany(docs.filter(doc => doc._id % 2 === 0));\n\n  await copy(docs.map(doc => doc._id), db1, db2);\n}\n\ntest();\n```\n\n函数体希望做到尽可能的干净——你只需要这样做`ids.map().filter().forEach()`，但是`map()`，`filter()`和`each()`中的任何一个都需要封装为异步函数。我们上面已经实现过`forEachAsync()`，照葫芦画瓢，实现`mapAsync()`和`filterAsync()`应该不会很难。\n\n```js\nArray.prototype.mapAsync = function(fn) {\n  return Promise.all(this.map(fn));\n};\n\nArray.prototype.filterAsync = function(fn) {\n  return this.mapAsync(fn).then(_arr => this.filter((v, i) => !!_arr[i]));\n};\n```\n\n然而，链式调用却会出现问题。你怎么同时链式调用`mapAsync()`和`filterAsync()`？你可能会考虑用`then()`，但是这样调用不够整洁。相反，你应该创建一个`AsyncArray`的类并且接受和保存一个`Promise`实例，这个`Promise`实例最终会返回一个数组。并且在这个类添加上我们创建的`mapAsync`，`filterAsync`和`forEachAsync`方法：\n\n```js\nclass AsyncArray {\n  constructor(promise) {\n    this.$promise = promise || Promise.resolve();\n  }\n\n  then(resolve, reject) {\n    return new AsyncArray(this.$promise.then(resolve, reject));\n  }\n\n  catch(reject) {\n    return this.then(null, reject);\n  }\n\n  mapAsync(fn) {\n    return this.then(arr => Promise.all(arr.map(fn)));\n  }\n\n  filterAsync(fn) {\n    return new AsyncArray(Promise.all([this, this.mapAsync(fn)]).then(([arr, _arr]) => arr.filter((v, i) => !!_arr[i])));\n  }\n\n  forEachAsync(fn) {\n    return this.then(arr => arr.reduce((promise, n) => promise.then(() => fn(n)), Promise.resolve()));\n  }\n}\n```\n\n通过使用`AsyncArray`，就可以链式的调用`mapAsync()`，`filterAsync()`和`forEachAsync()`，因为每个方法都会返回`AsyncArray`本身。现在我们再来看看上面的例子的另一种实现：\n\n```js\nasync function copy(ids, db1, db2) {\n  new AsyncArray(Promise.resolve(ids)).\n    mapAsync(function(_id) {\n      return db1.collection('Test').findOne({ _id });\n    }).\n    filterAsync(async function(doc) {\n      const _doc = await db2.collection('Test').findOne({ _id: doc._id });\n      return !_doc;\n    }).\n    forEachAsync(async function(doc) {\n      console.log('Insert', doc);\n      await db2.collection('Test').insertOne(doc);\n    }).\n    catch(error => console.error(error));\n}\n\nasync function test() {\n  const db1 = await MongoClient.connect('mongodb://localhost:27017/db1');\n  const db2 = await MongoClient.connect('mongodb://localhost:27017/db2');\n  await db1.dropDatabase();\n  await db2.dropDatabase();\n\n  const docs = [\n    { _id: 1 },\n    { _id: 2 },\n    { _id: 3 },\n    { _id: 4 }\n  ];\n\n  await db1.collection('Test').insertMany(docs);\n  // Only insert docs with _id 2 and 4 into db2\n  await db2.collection('Test').insertMany(docs.filter(doc => doc._id % 2 === 0));\n\n  await copy(docs.map(doc => doc._id), db1, db2);\n}\n\ntest();\n```\n\n## 封装 `reduce()`\n现在我们已经封装了`mapAsync()`，`filterAsync()`和`forEachAsync()`，为什么不以相同的方式实现`reduceAsync()`？\n\n```js\nreduceAsync(fn, initial) {\n    return Promise.resolve(initial).then(cur => {\n      return this.forEachAsync(async function(v, i) {\n        cur = await fn(cur, v, i);\n      }).then(() => cur);\n    });\n  }\n```\n\n看看`reduceAsync()`如何使用：\n\n```js\nasync function test() {\n  const db = await MongoClient.connect('mongodb://localhost:27017/test');\n  await db.dropDatabase();\n\n  const docs = [\n    { _id: 1, name: 'Axl' },\n    { _id: 2, name: 'Slash' },\n    { _id: 3, name: 'Duff' },\n    { _id: 4, name: 'Izzy' },\n    { _id: 5, name: 'Adler' }\n  ];\n\n  await db.collection('People').insertMany(docs);\n\n  const ids = docs.map(doc => doc._id);\n\n  const nameToId = await new AsyncArray(Promise.resolve(ids)).\n    reduceAsync(async function (cur, _id) {\n      const doc = await db.collection('People').findOne({ _id });\n      cur[doc.name] = doc._id;\n      return cur;\n    }, {});\n  console.log(nameToId);\n}\n\ntest();\n```\n\n到这里，我们已经可以异步的使用`map()`，`filter()`，`reduce()`和`forEach()`函数，但是需要自己进行封装函数并且里面的`Promise`调用链很复杂。我很期待，有一个人能写出一个`Promise`版的库来无缝操作数组。函数式编程使得同步操作数组变得清洁和优雅，通过链式调用省掉了很多不必要的中间值。添加帮助库，操作`Promise`版的数组确实有点让人兴奋。\n\n> `Async/Await`虽然用处非常大，但是如果你使用的是Node.js 4+或者是Node.js 6+ 长期稳定版（[Node.js 8 延迟发布](https://github.com/nodejs/CTC/issues/99)），引入[co](http://npmjs.org/package/co)你仍然可以在使用类似的函数式编程模式中使用ES6 generator。如果你想深入研究`co`并且想自己写一个类似的库，你可以点击查看我写的这本书：[《The 80/20 Guide to ES2015 Generators》](http://es2015generators.com/)\n\n\n原文：[http://thecodebarbarian.com/basic-functional-programming-with-async-await.html](http://thecodebarbarian.com/basic-functional-programming-with-async-await.html)\n\n译者：[Jin](https://github.com/Yi-love)\n\n作者：[Valeri Karpov](https://github.com/vkarpov15)\n\n\n\n\n\n\n","source":"_posts/2017-05-06-async-await.md","raw":"---\ntitle: 【译】使用async/await玩函数式编程\ndate: 2017-05-06 14:00\ncategory: 翻译\ntags: [aysnc/await]\nauthor: Jin\n---\n\n[Async/await](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)使得像[`for`循环，`if`表达式和`try/catch`等这样的块级命令结构可以很容易的结合异步行为](http://thecodebarbarian.com/common-async-await-design-patterns-in-node.js.html)。不同的是，它对功能结构的处理与`forEach`，`map`，`reduce`和`filter`等函数不同。`async`异步功能结构的行为是乎令人费解。这篇文章，我将向你展示在JavaScript的内置数组函数封装为`async`异步函数时遇到的一些陷阱以及如何解决它。\n\n> 注意：以下的代码只在Node v.7.6.0+版本测试通过，以下例子只供参考和学习。我不建议在生产中使用它。\n\n<!-- more -->\n\n## 动机和 `forEach`\n`forEach`会同步的顺序的为数组的每一个元素都执行一次函数。例如，下面的JavaScript代码会打印`[0-9]`：\n\n```js\nfunction print(n) {\n  console.log(n);\n}\n\nfunction test() {\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].forEach(print);\n}\n\ntest();\n```\n\n不幸的是，异步函数就变得微妙起来。以下JavaScript代码会反序输出`[0-9]`：\n\n```js\nasync function print(n) {\n  // Wait 1 second before printing 0, 0.9 seconds before printing 1, etc.\n  await new Promise(resolve => setTimeout(() => resolve(), 1000 - n * 100));\n  // Will usually print 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 but order is not strictly\n  // guaranteed.\n  console.log(n);\n}\n\nasync function test() {\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].forEach(print);\n}\n\ntest();\n```\n\n尽管2个函数都是异步的，Node.js不会等到第一个`print()`执行完成后再去执行下一个！\n可以就只使用一个`await`吗？看看效果：\n\n```js\nasync function test() {\n  // SyntaxError: Unexpected identifier\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].forEach(n => { await print(n); });\n}\n```\n\n不能像上面只使用一个`await`，不然你就是[Star Fox](http://knowyourmeme.com/memes/i-can-t-let-you-do-that-starfox)，这样写有语法问题的，因为`await`必须在`async`当前代码作用域内。在这一点上，你可以放弃,改为使用[非标准`Promise.series()`函数](https://www.npmjs.com/package/promise-series)。假如你意识到`async`函数只是返回`Promise`函数，那么你可以在`.reduce()`中使用`Promise`的链式调用来实现一个顺序的`forEach()`。\n\n```js\nasync function print(n) {\n  await new Promise(resolve => setTimeout(() => resolve(), 1000 - n * 100));\n  console.log(n);\n}\n\nasync function test() {\n  // This is where the magic happens. Each `print()` call returns a promise,\n  // so calling `then()` chains them together in order and prints 0-9 in order.\n  await [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].\n    reduce((promise, n) => promise.then(() => print(n)), Promise.resolve());\n}\n\ntest();\n```\n\n你完全可以把这个函数改成名为`forEachAsync`的函数：\n\n```js\nasync function print(n) {\n  await new Promise(resolve => setTimeout(() => resolve(), 1000 - n * 100));\n  console.log(n);\n}\n\nArray.prototype.forEachAsync = function(fn) {\n  return this.reduce((promise, n) => promise.then(() => fn(n)), Promise.resolve());\n};\n\nasync function test() {\n  await [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].forEachAsync(print);\n}\n\ntest();\n```\n\n## `map()`和`filter()`的链式调用\nJavaScript有一个很大的优势那就是数组方法是可以链式调用的。下面的代码主要做的事是，根据你提供的`id`数组分别到数据库`db1`和`db2`查询到你想要的对应`id`的文本内容，过滤掉`db2`数据库的部分，然后把`db1`剩下的部分保存到`db2`数据库。虽然希望你乎略业务功能，但是里面还是有很多的中间值。\n\n```js\nconst { MongoClient } = require('mongodb');\n\nasync function copy(ids, db1, db2) {\n  // Find all docs from db1\n  const fromDb1 = await db1.collection('Test').find({ _id: { $in: ids } }).sort({ _id: 1 }).toArray();\n  // And db2\n  const fromDb2 = await db2.collection('Test').find({ _id: { $in: ids } }).sort({ _id: 1 }).toArray();\n\n  // Find all docs from db1 that aren't in db2\n  const toInsert = [];\n  for (const doc of fromDb1) {\n    if (!fromDb2.find(_doc => _doc._id === doc._id)) {\n      toInsert.push(doc);\n      console.log('Insert', doc);\n    }\n  }\n  // And insert all of them\n  await db2.collection('Test').insertMany(toInsert);\n}\n\nasync function test() {\n  const db1 = await MongoClient.connect('mongodb://localhost:27017/db1');\n  const db2 = await MongoClient.connect('mongodb://localhost:27017/db2');\n  await db1.dropDatabase();\n  await db2.dropDatabase();\n\n  const docs = [\n    { _id: 1 },\n    { _id: 2 },\n    { _id: 3 },\n    { _id: 4 }\n  ];\n  await db1.collection('Test').insertMany(docs);\n  // Only insert docs with _id 2 and 4 into db2\n  await db2.collection('Test').insertMany(docs.filter(doc => doc._id % 2 === 0));\n\n  await copy(docs.map(doc => doc._id), db1, db2);\n}\n\ntest();\n```\n\n函数体希望做到尽可能的干净——你只需要这样做`ids.map().filter().forEach()`，但是`map()`，`filter()`和`each()`中的任何一个都需要封装为异步函数。我们上面已经实现过`forEachAsync()`，照葫芦画瓢，实现`mapAsync()`和`filterAsync()`应该不会很难。\n\n```js\nArray.prototype.mapAsync = function(fn) {\n  return Promise.all(this.map(fn));\n};\n\nArray.prototype.filterAsync = function(fn) {\n  return this.mapAsync(fn).then(_arr => this.filter((v, i) => !!_arr[i]));\n};\n```\n\n然而，链式调用却会出现问题。你怎么同时链式调用`mapAsync()`和`filterAsync()`？你可能会考虑用`then()`，但是这样调用不够整洁。相反，你应该创建一个`AsyncArray`的类并且接受和保存一个`Promise`实例，这个`Promise`实例最终会返回一个数组。并且在这个类添加上我们创建的`mapAsync`，`filterAsync`和`forEachAsync`方法：\n\n```js\nclass AsyncArray {\n  constructor(promise) {\n    this.$promise = promise || Promise.resolve();\n  }\n\n  then(resolve, reject) {\n    return new AsyncArray(this.$promise.then(resolve, reject));\n  }\n\n  catch(reject) {\n    return this.then(null, reject);\n  }\n\n  mapAsync(fn) {\n    return this.then(arr => Promise.all(arr.map(fn)));\n  }\n\n  filterAsync(fn) {\n    return new AsyncArray(Promise.all([this, this.mapAsync(fn)]).then(([arr, _arr]) => arr.filter((v, i) => !!_arr[i])));\n  }\n\n  forEachAsync(fn) {\n    return this.then(arr => arr.reduce((promise, n) => promise.then(() => fn(n)), Promise.resolve()));\n  }\n}\n```\n\n通过使用`AsyncArray`，就可以链式的调用`mapAsync()`，`filterAsync()`和`forEachAsync()`，因为每个方法都会返回`AsyncArray`本身。现在我们再来看看上面的例子的另一种实现：\n\n```js\nasync function copy(ids, db1, db2) {\n  new AsyncArray(Promise.resolve(ids)).\n    mapAsync(function(_id) {\n      return db1.collection('Test').findOne({ _id });\n    }).\n    filterAsync(async function(doc) {\n      const _doc = await db2.collection('Test').findOne({ _id: doc._id });\n      return !_doc;\n    }).\n    forEachAsync(async function(doc) {\n      console.log('Insert', doc);\n      await db2.collection('Test').insertOne(doc);\n    }).\n    catch(error => console.error(error));\n}\n\nasync function test() {\n  const db1 = await MongoClient.connect('mongodb://localhost:27017/db1');\n  const db2 = await MongoClient.connect('mongodb://localhost:27017/db2');\n  await db1.dropDatabase();\n  await db2.dropDatabase();\n\n  const docs = [\n    { _id: 1 },\n    { _id: 2 },\n    { _id: 3 },\n    { _id: 4 }\n  ];\n\n  await db1.collection('Test').insertMany(docs);\n  // Only insert docs with _id 2 and 4 into db2\n  await db2.collection('Test').insertMany(docs.filter(doc => doc._id % 2 === 0));\n\n  await copy(docs.map(doc => doc._id), db1, db2);\n}\n\ntest();\n```\n\n## 封装 `reduce()`\n现在我们已经封装了`mapAsync()`，`filterAsync()`和`forEachAsync()`，为什么不以相同的方式实现`reduceAsync()`？\n\n```js\nreduceAsync(fn, initial) {\n    return Promise.resolve(initial).then(cur => {\n      return this.forEachAsync(async function(v, i) {\n        cur = await fn(cur, v, i);\n      }).then(() => cur);\n    });\n  }\n```\n\n看看`reduceAsync()`如何使用：\n\n```js\nasync function test() {\n  const db = await MongoClient.connect('mongodb://localhost:27017/test');\n  await db.dropDatabase();\n\n  const docs = [\n    { _id: 1, name: 'Axl' },\n    { _id: 2, name: 'Slash' },\n    { _id: 3, name: 'Duff' },\n    { _id: 4, name: 'Izzy' },\n    { _id: 5, name: 'Adler' }\n  ];\n\n  await db.collection('People').insertMany(docs);\n\n  const ids = docs.map(doc => doc._id);\n\n  const nameToId = await new AsyncArray(Promise.resolve(ids)).\n    reduceAsync(async function (cur, _id) {\n      const doc = await db.collection('People').findOne({ _id });\n      cur[doc.name] = doc._id;\n      return cur;\n    }, {});\n  console.log(nameToId);\n}\n\ntest();\n```\n\n到这里，我们已经可以异步的使用`map()`，`filter()`，`reduce()`和`forEach()`函数，但是需要自己进行封装函数并且里面的`Promise`调用链很复杂。我很期待，有一个人能写出一个`Promise`版的库来无缝操作数组。函数式编程使得同步操作数组变得清洁和优雅，通过链式调用省掉了很多不必要的中间值。添加帮助库，操作`Promise`版的数组确实有点让人兴奋。\n\n> `Async/Await`虽然用处非常大，但是如果你使用的是Node.js 4+或者是Node.js 6+ 长期稳定版（[Node.js 8 延迟发布](https://github.com/nodejs/CTC/issues/99)），引入[co](http://npmjs.org/package/co)你仍然可以在使用类似的函数式编程模式中使用ES6 generator。如果你想深入研究`co`并且想自己写一个类似的库，你可以点击查看我写的这本书：[《The 80/20 Guide to ES2015 Generators》](http://es2015generators.com/)\n\n\n原文：[http://thecodebarbarian.com/basic-functional-programming-with-async-await.html](http://thecodebarbarian.com/basic-functional-programming-with-async-await.html)\n\n译者：[Jin](https://github.com/Yi-love)\n\n作者：[Valeri Karpov](https://github.com/vkarpov15)\n\n\n\n\n\n\n","slug":"2017-05-06-async-await","published":1,"updated":"2017-12-01T08:50:00.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknhp000bjxs1yoitjw4b","content":"<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\" target=\"_blank\" rel=\"noopener\">Async/await</a>使得像<a href=\"http://thecodebarbarian.com/common-async-await-design-patterns-in-node.js.html\" target=\"_blank\" rel=\"noopener\"><code>for</code>循环，<code>if</code>表达式和<code>try/catch</code>等这样的块级命令结构可以很容易的结合异步行为</a>。不同的是，它对功能结构的处理与<code>forEach</code>，<code>map</code>，<code>reduce</code>和<code>filter</code>等函数不同。<code>async</code>异步功能结构的行为是乎令人费解。这篇文章，我将向你展示在JavaScript的内置数组函数封装为<code>async</code>异步函数时遇到的一些陷阱以及如何解决它。</p>\n<blockquote>\n<p>注意：以下的代码只在Node v.7.6.0+版本测试通过，以下例子只供参考和学习。我不建议在生产中使用它。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"动机和-forEach\"><a href=\"#动机和-forEach\" class=\"headerlink\" title=\"动机和 forEach\"></a>动机和 <code>forEach</code></h2><p><code>forEach</code>会同步的顺序的为数组的每一个元素都执行一次函数。例如，下面的JavaScript代码会打印<code>[0-9]</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>].forEach(print);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<p>不幸的是，异步函数就变得微妙起来。以下JavaScript代码会反序输出<code>[0-9]</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Wait 1 second before printing 0, 0.9 seconds before printing 1, etc.</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> resolve(), <span class=\"number\">1000</span> - n * <span class=\"number\">100</span>));</span><br><span class=\"line\">  <span class=\"comment\">// Will usually print 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 but order is not strictly</span></span><br><span class=\"line\">  <span class=\"comment\">// guaranteed.</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>].forEach(print);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<p>尽管2个函数都是异步的，Node.js不会等到第一个<code>print()</code>执行完成后再去执行下一个！<br>可以就只使用一个<code>await</code>吗？看看效果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// SyntaxError: Unexpected identifier</span></span><br><span class=\"line\">  [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>].forEach(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123; <span class=\"keyword\">await</span> print(n); &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不能像上面只使用一个<code>await</code>，不然你就是<a href=\"http://knowyourmeme.com/memes/i-can-t-let-you-do-that-starfox\" target=\"_blank\" rel=\"noopener\">Star Fox</a>，这样写有语法问题的，因为<code>await</code>必须在<code>async</code>当前代码作用域内。在这一点上，你可以放弃,改为使用<a href=\"https://www.npmjs.com/package/promise-series\" target=\"_blank\" rel=\"noopener\">非标准<code>Promise.series()</code>函数</a>。假如你意识到<code>async</code>函数只是返回<code>Promise</code>函数，那么你可以在<code>.reduce()</code>中使用<code>Promise</code>的链式调用来实现一个顺序的<code>forEach()</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> resolve(), <span class=\"number\">1000</span> - n * <span class=\"number\">100</span>));</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// This is where the magic happens. Each `print()` call returns a promise,</span></span><br><span class=\"line\">  <span class=\"comment\">// so calling `then()` chains them together in order and prints 0-9 in order.</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>].</span><br><span class=\"line\">    reduce(<span class=\"function\">(<span class=\"params\">promise, n</span>) =&gt;</span> promise.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> print(n)), <span class=\"built_in\">Promise</span>.resolve());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<p>你完全可以把这个函数改成名为<code>forEachAsync</code>的函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> resolve(), <span class=\"number\">1000</span> - n * <span class=\"number\">100</span>));</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.forEachAsync = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.reduce(<span class=\"function\">(<span class=\"params\">promise, n</span>) =&gt;</span> promise.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> fn(n)), <span class=\"built_in\">Promise</span>.resolve());</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>].forEachAsync(print);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<h2 id=\"map-和filter-的链式调用\"><a href=\"#map-和filter-的链式调用\" class=\"headerlink\" title=\"map()和filter()的链式调用\"></a><code>map()</code>和<code>filter()</code>的链式调用</h2><p>JavaScript有一个很大的优势那就是数组方法是可以链式调用的。下面的代码主要做的事是，根据你提供的<code>id</code>数组分别到数据库<code>db1</code>和<code>db2</code>查询到你想要的对应<code>id</code>的文本内容，过滤掉<code>db2</code>数据库的部分，然后把<code>db1</code>剩下的部分保存到<code>db2</code>数据库。虽然希望你乎略业务功能，但是里面还是有很多的中间值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; MongoClient &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copy</span>(<span class=\"params\">ids, db1, db2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Find all docs from db1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fromDb1 = <span class=\"keyword\">await</span> db1.collection(<span class=\"string\">'Test'</span>).find(&#123; <span class=\"attr\">_id</span>: &#123; <span class=\"attr\">$in</span>: ids &#125; &#125;).sort(&#123; <span class=\"attr\">_id</span>: <span class=\"number\">1</span> &#125;).toArray();</span><br><span class=\"line\">  <span class=\"comment\">// And db2</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fromDb2 = <span class=\"keyword\">await</span> db2.collection(<span class=\"string\">'Test'</span>).find(&#123; <span class=\"attr\">_id</span>: &#123; <span class=\"attr\">$in</span>: ids &#125; &#125;).sort(&#123; <span class=\"attr\">_id</span>: <span class=\"number\">1</span> &#125;).toArray();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Find all docs from db1 that aren't in db2</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> toInsert = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> doc <span class=\"keyword\">of</span> fromDb1) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fromDb2.find(<span class=\"function\"><span class=\"params\">_doc</span> =&gt;</span> _doc._id === doc._id)) &#123;</span><br><span class=\"line\">      toInsert.push(doc);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Insert'</span>, doc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// And insert all of them</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> db2.collection(<span class=\"string\">'Test'</span>).insertMany(toInsert);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> db1 = <span class=\"keyword\">await</span> MongoClient.connect(<span class=\"string\">'mongodb://localhost:27017/db1'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> db2 = <span class=\"keyword\">await</span> MongoClient.connect(<span class=\"string\">'mongodb://localhost:27017/db2'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db1.dropDatabase();</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db2.dropDatabase();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> docs = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">4</span> &#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db1.collection(<span class=\"string\">'Test'</span>).insertMany(docs);</span><br><span class=\"line\">  <span class=\"comment\">// Only insert docs with _id 2 and 4 into db2</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> db2.collection(<span class=\"string\">'Test'</span>).insertMany(docs.filter(<span class=\"function\"><span class=\"params\">doc</span> =&gt;</span> doc._id % <span class=\"number\">2</span> === <span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">await</span> copy(docs.map(<span class=\"function\"><span class=\"params\">doc</span> =&gt;</span> doc._id), db1, db2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<p>函数体希望做到尽可能的干净——你只需要这样做<code>ids.map().filter().forEach()</code>，但是<code>map()</code>，<code>filter()</code>和<code>each()</code>中的任何一个都需要封装为异步函数。我们上面已经实现过<code>forEachAsync()</code>，照葫芦画瓢，实现<code>mapAsync()</code>和<code>filterAsync()</code>应该不会很难。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.mapAsync = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all(<span class=\"keyword\">this</span>.map(fn));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.filterAsync = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.mapAsync(fn).then(<span class=\"function\"><span class=\"params\">_arr</span> =&gt;</span> <span class=\"keyword\">this</span>.filter(<span class=\"function\">(<span class=\"params\">v, i</span>) =&gt;</span> !!_arr[i]));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>然而，链式调用却会出现问题。你怎么同时链式调用<code>mapAsync()</code>和<code>filterAsync()</code>？你可能会考虑用<code>then()</code>，但是这样调用不够整洁。相反，你应该创建一个<code>AsyncArray</code>的类并且接受和保存一个<code>Promise</code>实例，这个<code>Promise</code>实例最终会返回一个数组。并且在这个类添加上我们创建的<code>mapAsync</code>，<code>filterAsync</code>和<code>forEachAsync</code>方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncArray</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(promise) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$promise = promise || <span class=\"built_in\">Promise</span>.resolve();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  then(resolve, reject) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AsyncArray(<span class=\"keyword\">this</span>.$promise.then(resolve, reject));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">catch</span>(reject) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>, reject);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  mapAsync(fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> <span class=\"built_in\">Promise</span>.all(arr.map(fn)));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  filterAsync(fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AsyncArray(<span class=\"built_in\">Promise</span>.all([<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.mapAsync(fn)]).then(<span class=\"function\">(<span class=\"params\">[arr, _arr]</span>) =&gt;</span> arr.filter(<span class=\"function\">(<span class=\"params\">v, i</span>) =&gt;</span> !!_arr[i])));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  forEachAsync(fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr.reduce(<span class=\"function\">(<span class=\"params\">promise, n</span>) =&gt;</span> promise.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> fn(n)), <span class=\"built_in\">Promise</span>.resolve()));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过使用<code>AsyncArray</code>，就可以链式的调用<code>mapAsync()</code>，<code>filterAsync()</code>和<code>forEachAsync()</code>，因为每个方法都会返回<code>AsyncArray</code>本身。现在我们再来看看上面的例子的另一种实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copy</span>(<span class=\"params\">ids, db1, db2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> AsyncArray(<span class=\"built_in\">Promise</span>.resolve(ids)).</span><br><span class=\"line\">    mapAsync(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_id</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> db1.collection(<span class=\"string\">'Test'</span>).findOne(&#123; _id &#125;);</span><br><span class=\"line\">    &#125;).</span><br><span class=\"line\">    filterAsync(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">doc</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> _doc = <span class=\"keyword\">await</span> db2.collection(<span class=\"string\">'Test'</span>).findOne(&#123; <span class=\"attr\">_id</span>: doc._id &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> !_doc;</span><br><span class=\"line\">    &#125;).</span><br><span class=\"line\">    forEachAsync(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">doc</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Insert'</span>, doc);</span><br><span class=\"line\">      <span class=\"keyword\">await</span> db2.collection(<span class=\"string\">'Test'</span>).insertOne(doc);</span><br><span class=\"line\">    &#125;).</span><br><span class=\"line\">    <span class=\"keyword\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.error(error));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> db1 = <span class=\"keyword\">await</span> MongoClient.connect(<span class=\"string\">'mongodb://localhost:27017/db1'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> db2 = <span class=\"keyword\">await</span> MongoClient.connect(<span class=\"string\">'mongodb://localhost:27017/db2'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db1.dropDatabase();</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db2.dropDatabase();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> docs = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">4</span> &#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">await</span> db1.collection(<span class=\"string\">'Test'</span>).insertMany(docs);</span><br><span class=\"line\">  <span class=\"comment\">// Only insert docs with _id 2 and 4 into db2</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> db2.collection(<span class=\"string\">'Test'</span>).insertMany(docs.filter(<span class=\"function\"><span class=\"params\">doc</span> =&gt;</span> doc._id % <span class=\"number\">2</span> === <span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">await</span> copy(docs.map(<span class=\"function\"><span class=\"params\">doc</span> =&gt;</span> doc._id), db1, db2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<h2 id=\"封装-reduce\"><a href=\"#封装-reduce\" class=\"headerlink\" title=\"封装 reduce()\"></a>封装 <code>reduce()</code></h2><p>现在我们已经封装了<code>mapAsync()</code>，<code>filterAsync()</code>和<code>forEachAsync()</code>，为什么不以相同的方式实现<code>reduceAsync()</code>？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reduceAsync(fn, initial) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(initial).then(<span class=\"function\"><span class=\"params\">cur</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.forEachAsync(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v, i</span>) </span>&#123;</span><br><span class=\"line\">        cur = <span class=\"keyword\">await</span> fn(cur, v, i);</span><br><span class=\"line\">      &#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> cur);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>看看<code>reduceAsync()</code>如何使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> db = <span class=\"keyword\">await</span> MongoClient.connect(<span class=\"string\">'mongodb://localhost:27017/test'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db.dropDatabase();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> docs = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Axl'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Slash'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Duff'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Izzy'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Adler'</span> &#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">await</span> db.collection(<span class=\"string\">'People'</span>).insertMany(docs);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ids = docs.map(<span class=\"function\"><span class=\"params\">doc</span> =&gt;</span> doc._id);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> nameToId = <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> AsyncArray(<span class=\"built_in\">Promise</span>.resolve(ids)).</span><br><span class=\"line\">    reduceAsync(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cur, _id</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> doc = <span class=\"keyword\">await</span> db.collection(<span class=\"string\">'People'</span>).findOne(&#123; _id &#125;);</span><br><span class=\"line\">      cur[doc.name] = doc._id;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cur;</span><br><span class=\"line\">    &#125;, &#123;&#125;);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(nameToId);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<p>到这里，我们已经可以异步的使用<code>map()</code>，<code>filter()</code>，<code>reduce()</code>和<code>forEach()</code>函数，但是需要自己进行封装函数并且里面的<code>Promise</code>调用链很复杂。我很期待，有一个人能写出一个<code>Promise</code>版的库来无缝操作数组。函数式编程使得同步操作数组变得清洁和优雅，通过链式调用省掉了很多不必要的中间值。添加帮助库，操作<code>Promise</code>版的数组确实有点让人兴奋。</p>\n<blockquote>\n<p><code>Async/Await</code>虽然用处非常大，但是如果你使用的是Node.js 4+或者是Node.js 6+ 长期稳定版（<a href=\"https://github.com/nodejs/CTC/issues/99\" target=\"_blank\" rel=\"noopener\">Node.js 8 延迟发布</a>），引入<a href=\"http://npmjs.org/package/co\" target=\"_blank\" rel=\"noopener\">co</a>你仍然可以在使用类似的函数式编程模式中使用ES6 generator。如果你想深入研究<code>co</code>并且想自己写一个类似的库，你可以点击查看我写的这本书：<a href=\"http://es2015generators.com/\" target=\"_blank\" rel=\"noopener\">《The 80/20 Guide to ES2015 Generators》</a></p>\n</blockquote>\n<p>原文：<a href=\"http://thecodebarbarian.com/basic-functional-programming-with-async-await.html\" target=\"_blank\" rel=\"noopener\">http://thecodebarbarian.com/basic-functional-programming-with-async-await.html</a></p>\n<p>译者：<a href=\"https://github.com/Yi-love\" target=\"_blank\" rel=\"noopener\">Jin</a></p>\n<p>作者：<a href=\"https://github.com/vkarpov15\" target=\"_blank\" rel=\"noopener\">Valeri Karpov</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\" target=\"_blank\" rel=\"noopener\">Async/await</a>使得像<a href=\"http://thecodebarbarian.com/common-async-await-design-patterns-in-node.js.html\" target=\"_blank\" rel=\"noopener\"><code>for</code>循环，<code>if</code>表达式和<code>try/catch</code>等这样的块级命令结构可以很容易的结合异步行为</a>。不同的是，它对功能结构的处理与<code>forEach</code>，<code>map</code>，<code>reduce</code>和<code>filter</code>等函数不同。<code>async</code>异步功能结构的行为是乎令人费解。这篇文章，我将向你展示在JavaScript的内置数组函数封装为<code>async</code>异步函数时遇到的一些陷阱以及如何解决它。</p>\n<blockquote>\n<p>注意：以下的代码只在Node v.7.6.0+版本测试通过，以下例子只供参考和学习。我不建议在生产中使用它。</p>\n</blockquote>","more":"<h2 id=\"动机和-forEach\"><a href=\"#动机和-forEach\" class=\"headerlink\" title=\"动机和 forEach\"></a>动机和 <code>forEach</code></h2><p><code>forEach</code>会同步的顺序的为数组的每一个元素都执行一次函数。例如，下面的JavaScript代码会打印<code>[0-9]</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>].forEach(print);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<p>不幸的是，异步函数就变得微妙起来。以下JavaScript代码会反序输出<code>[0-9]</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Wait 1 second before printing 0, 0.9 seconds before printing 1, etc.</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> resolve(), <span class=\"number\">1000</span> - n * <span class=\"number\">100</span>));</span><br><span class=\"line\">  <span class=\"comment\">// Will usually print 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 but order is not strictly</span></span><br><span class=\"line\">  <span class=\"comment\">// guaranteed.</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>].forEach(print);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<p>尽管2个函数都是异步的，Node.js不会等到第一个<code>print()</code>执行完成后再去执行下一个！<br>可以就只使用一个<code>await</code>吗？看看效果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// SyntaxError: Unexpected identifier</span></span><br><span class=\"line\">  [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>].forEach(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> &#123; <span class=\"keyword\">await</span> print(n); &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不能像上面只使用一个<code>await</code>，不然你就是<a href=\"http://knowyourmeme.com/memes/i-can-t-let-you-do-that-starfox\" target=\"_blank\" rel=\"noopener\">Star Fox</a>，这样写有语法问题的，因为<code>await</code>必须在<code>async</code>当前代码作用域内。在这一点上，你可以放弃,改为使用<a href=\"https://www.npmjs.com/package/promise-series\" target=\"_blank\" rel=\"noopener\">非标准<code>Promise.series()</code>函数</a>。假如你意识到<code>async</code>函数只是返回<code>Promise</code>函数，那么你可以在<code>.reduce()</code>中使用<code>Promise</code>的链式调用来实现一个顺序的<code>forEach()</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> resolve(), <span class=\"number\">1000</span> - n * <span class=\"number\">100</span>));</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// This is where the magic happens. Each `print()` call returns a promise,</span></span><br><span class=\"line\">  <span class=\"comment\">// so calling `then()` chains them together in order and prints 0-9 in order.</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>].</span><br><span class=\"line\">    reduce(<span class=\"function\">(<span class=\"params\">promise, n</span>) =&gt;</span> promise.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> print(n)), <span class=\"built_in\">Promise</span>.resolve());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<p>你完全可以把这个函数改成名为<code>forEachAsync</code>的函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> resolve(), <span class=\"number\">1000</span> - n * <span class=\"number\">100</span>));</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.forEachAsync = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.reduce(<span class=\"function\">(<span class=\"params\">promise, n</span>) =&gt;</span> promise.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> fn(n)), <span class=\"built_in\">Promise</span>.resolve());</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>].forEachAsync(print);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<h2 id=\"map-和filter-的链式调用\"><a href=\"#map-和filter-的链式调用\" class=\"headerlink\" title=\"map()和filter()的链式调用\"></a><code>map()</code>和<code>filter()</code>的链式调用</h2><p>JavaScript有一个很大的优势那就是数组方法是可以链式调用的。下面的代码主要做的事是，根据你提供的<code>id</code>数组分别到数据库<code>db1</code>和<code>db2</code>查询到你想要的对应<code>id</code>的文本内容，过滤掉<code>db2</code>数据库的部分，然后把<code>db1</code>剩下的部分保存到<code>db2</code>数据库。虽然希望你乎略业务功能，但是里面还是有很多的中间值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; MongoClient &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copy</span>(<span class=\"params\">ids, db1, db2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Find all docs from db1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fromDb1 = <span class=\"keyword\">await</span> db1.collection(<span class=\"string\">'Test'</span>).find(&#123; <span class=\"attr\">_id</span>: &#123; <span class=\"attr\">$in</span>: ids &#125; &#125;).sort(&#123; <span class=\"attr\">_id</span>: <span class=\"number\">1</span> &#125;).toArray();</span><br><span class=\"line\">  <span class=\"comment\">// And db2</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fromDb2 = <span class=\"keyword\">await</span> db2.collection(<span class=\"string\">'Test'</span>).find(&#123; <span class=\"attr\">_id</span>: &#123; <span class=\"attr\">$in</span>: ids &#125; &#125;).sort(&#123; <span class=\"attr\">_id</span>: <span class=\"number\">1</span> &#125;).toArray();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Find all docs from db1 that aren't in db2</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> toInsert = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> doc <span class=\"keyword\">of</span> fromDb1) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fromDb2.find(<span class=\"function\"><span class=\"params\">_doc</span> =&gt;</span> _doc._id === doc._id)) &#123;</span><br><span class=\"line\">      toInsert.push(doc);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Insert'</span>, doc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// And insert all of them</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> db2.collection(<span class=\"string\">'Test'</span>).insertMany(toInsert);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> db1 = <span class=\"keyword\">await</span> MongoClient.connect(<span class=\"string\">'mongodb://localhost:27017/db1'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> db2 = <span class=\"keyword\">await</span> MongoClient.connect(<span class=\"string\">'mongodb://localhost:27017/db2'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db1.dropDatabase();</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db2.dropDatabase();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> docs = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">4</span> &#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db1.collection(<span class=\"string\">'Test'</span>).insertMany(docs);</span><br><span class=\"line\">  <span class=\"comment\">// Only insert docs with _id 2 and 4 into db2</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> db2.collection(<span class=\"string\">'Test'</span>).insertMany(docs.filter(<span class=\"function\"><span class=\"params\">doc</span> =&gt;</span> doc._id % <span class=\"number\">2</span> === <span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">await</span> copy(docs.map(<span class=\"function\"><span class=\"params\">doc</span> =&gt;</span> doc._id), db1, db2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<p>函数体希望做到尽可能的干净——你只需要这样做<code>ids.map().filter().forEach()</code>，但是<code>map()</code>，<code>filter()</code>和<code>each()</code>中的任何一个都需要封装为异步函数。我们上面已经实现过<code>forEachAsync()</code>，照葫芦画瓢，实现<code>mapAsync()</code>和<code>filterAsync()</code>应该不会很难。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.mapAsync = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all(<span class=\"keyword\">this</span>.map(fn));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.filterAsync = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.mapAsync(fn).then(<span class=\"function\"><span class=\"params\">_arr</span> =&gt;</span> <span class=\"keyword\">this</span>.filter(<span class=\"function\">(<span class=\"params\">v, i</span>) =&gt;</span> !!_arr[i]));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>然而，链式调用却会出现问题。你怎么同时链式调用<code>mapAsync()</code>和<code>filterAsync()</code>？你可能会考虑用<code>then()</code>，但是这样调用不够整洁。相反，你应该创建一个<code>AsyncArray</code>的类并且接受和保存一个<code>Promise</code>实例，这个<code>Promise</code>实例最终会返回一个数组。并且在这个类添加上我们创建的<code>mapAsync</code>，<code>filterAsync</code>和<code>forEachAsync</code>方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncArray</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(promise) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$promise = promise || <span class=\"built_in\">Promise</span>.resolve();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  then(resolve, reject) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AsyncArray(<span class=\"keyword\">this</span>.$promise.then(resolve, reject));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">catch</span>(reject) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>, reject);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  mapAsync(fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> <span class=\"built_in\">Promise</span>.all(arr.map(fn)));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  filterAsync(fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AsyncArray(<span class=\"built_in\">Promise</span>.all([<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.mapAsync(fn)]).then(<span class=\"function\">(<span class=\"params\">[arr, _arr]</span>) =&gt;</span> arr.filter(<span class=\"function\">(<span class=\"params\">v, i</span>) =&gt;</span> !!_arr[i])));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  forEachAsync(fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr.reduce(<span class=\"function\">(<span class=\"params\">promise, n</span>) =&gt;</span> promise.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> fn(n)), <span class=\"built_in\">Promise</span>.resolve()));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过使用<code>AsyncArray</code>，就可以链式的调用<code>mapAsync()</code>，<code>filterAsync()</code>和<code>forEachAsync()</code>，因为每个方法都会返回<code>AsyncArray</code>本身。现在我们再来看看上面的例子的另一种实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copy</span>(<span class=\"params\">ids, db1, db2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> AsyncArray(<span class=\"built_in\">Promise</span>.resolve(ids)).</span><br><span class=\"line\">    mapAsync(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_id</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> db1.collection(<span class=\"string\">'Test'</span>).findOne(&#123; _id &#125;);</span><br><span class=\"line\">    &#125;).</span><br><span class=\"line\">    filterAsync(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">doc</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> _doc = <span class=\"keyword\">await</span> db2.collection(<span class=\"string\">'Test'</span>).findOne(&#123; <span class=\"attr\">_id</span>: doc._id &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> !_doc;</span><br><span class=\"line\">    &#125;).</span><br><span class=\"line\">    forEachAsync(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">doc</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Insert'</span>, doc);</span><br><span class=\"line\">      <span class=\"keyword\">await</span> db2.collection(<span class=\"string\">'Test'</span>).insertOne(doc);</span><br><span class=\"line\">    &#125;).</span><br><span class=\"line\">    <span class=\"keyword\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.error(error));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> db1 = <span class=\"keyword\">await</span> MongoClient.connect(<span class=\"string\">'mongodb://localhost:27017/db1'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> db2 = <span class=\"keyword\">await</span> MongoClient.connect(<span class=\"string\">'mongodb://localhost:27017/db2'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db1.dropDatabase();</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db2.dropDatabase();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> docs = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">4</span> &#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">await</span> db1.collection(<span class=\"string\">'Test'</span>).insertMany(docs);</span><br><span class=\"line\">  <span class=\"comment\">// Only insert docs with _id 2 and 4 into db2</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> db2.collection(<span class=\"string\">'Test'</span>).insertMany(docs.filter(<span class=\"function\"><span class=\"params\">doc</span> =&gt;</span> doc._id % <span class=\"number\">2</span> === <span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">await</span> copy(docs.map(<span class=\"function\"><span class=\"params\">doc</span> =&gt;</span> doc._id), db1, db2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<h2 id=\"封装-reduce\"><a href=\"#封装-reduce\" class=\"headerlink\" title=\"封装 reduce()\"></a>封装 <code>reduce()</code></h2><p>现在我们已经封装了<code>mapAsync()</code>，<code>filterAsync()</code>和<code>forEachAsync()</code>，为什么不以相同的方式实现<code>reduceAsync()</code>？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reduceAsync(fn, initial) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(initial).then(<span class=\"function\"><span class=\"params\">cur</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.forEachAsync(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v, i</span>) </span>&#123;</span><br><span class=\"line\">        cur = <span class=\"keyword\">await</span> fn(cur, v, i);</span><br><span class=\"line\">      &#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> cur);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>看看<code>reduceAsync()</code>如何使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> db = <span class=\"keyword\">await</span> MongoClient.connect(<span class=\"string\">'mongodb://localhost:27017/test'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db.dropDatabase();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> docs = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Axl'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Slash'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Duff'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Izzy'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Adler'</span> &#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">await</span> db.collection(<span class=\"string\">'People'</span>).insertMany(docs);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ids = docs.map(<span class=\"function\"><span class=\"params\">doc</span> =&gt;</span> doc._id);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> nameToId = <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> AsyncArray(<span class=\"built_in\">Promise</span>.resolve(ids)).</span><br><span class=\"line\">    reduceAsync(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cur, _id</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> doc = <span class=\"keyword\">await</span> db.collection(<span class=\"string\">'People'</span>).findOne(&#123; _id &#125;);</span><br><span class=\"line\">      cur[doc.name] = doc._id;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cur;</span><br><span class=\"line\">    &#125;, &#123;&#125;);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(nameToId);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<p>到这里，我们已经可以异步的使用<code>map()</code>，<code>filter()</code>，<code>reduce()</code>和<code>forEach()</code>函数，但是需要自己进行封装函数并且里面的<code>Promise</code>调用链很复杂。我很期待，有一个人能写出一个<code>Promise</code>版的库来无缝操作数组。函数式编程使得同步操作数组变得清洁和优雅，通过链式调用省掉了很多不必要的中间值。添加帮助库，操作<code>Promise</code>版的数组确实有点让人兴奋。</p>\n<blockquote>\n<p><code>Async/Await</code>虽然用处非常大，但是如果你使用的是Node.js 4+或者是Node.js 6+ 长期稳定版（<a href=\"https://github.com/nodejs/CTC/issues/99\" target=\"_blank\" rel=\"noopener\">Node.js 8 延迟发布</a>），引入<a href=\"http://npmjs.org/package/co\" target=\"_blank\" rel=\"noopener\">co</a>你仍然可以在使用类似的函数式编程模式中使用ES6 generator。如果你想深入研究<code>co</code>并且想自己写一个类似的库，你可以点击查看我写的这本书：<a href=\"http://es2015generators.com/\" target=\"_blank\" rel=\"noopener\">《The 80/20 Guide to ES2015 Generators》</a></p>\n</blockquote>\n<p>原文：<a href=\"http://thecodebarbarian.com/basic-functional-programming-with-async-await.html\" target=\"_blank\" rel=\"noopener\">http://thecodebarbarian.com/basic-functional-programming-with-async-await.html</a></p>\n<p>译者：<a href=\"https://github.com/Yi-love\" target=\"_blank\" rel=\"noopener\">Jin</a></p>\n<p>作者：<a href=\"https://github.com/vkarpov15\" target=\"_blank\" rel=\"noopener\">Valeri Karpov</a></p>"},{"title":"【译】CSS动画 vs Web动画API","date":"2017-05-08T04:22:00.000Z","author":"Timi","_content":"\n上周，我写了篇关于[如何用css制作bitsofcode的logo动画](https://bitsofco.de/how-i-animated-the-bitsofcode-logo/)的文章。有人建议说可以试着去比较一下css动画和web动画API，于是就有了今天这篇文章。\n\n<!-- more -->\n\n## web动画API简介\n像上周一样，我先简单介绍一下web动画API。web动画API为开发者们提供了一个直接用JavaScript操作浏览器动画引擎的方法。\n\n### 创建一个动画\n我们可以用`Element.animate()`函数来创建一个动画，它接受两个入参`keyframes`和`options`。\n\n```js\nelement.animate(keyframes, options);\n```\n\n#### keyframes关键帧\n`keyframes`对象表示动画时间轴中的一些关键事件。有两种方法去写这个对象。让我们以一个名为`grow`的动画为例，此动画会将元素放大两倍。这里是用css `@keyframes`的实现：\n\n```css\n@keyframes grow {\n    0% {\n        transform: none;\n    }\n    100% {\n        transform: scale(2);\n    }\n}\n```\n\n`keyframes`的第一种表示方法是通过对象，对象的每个属性对应相应的css动画属性，属性的值是一个数组，里面是我们想表现的css动画对应的值，每个值可以看做时间轴上的一点。\n\n```js\nconst growKeyframes = {\n    transform: ['none', 'scale(2)'];\n}\n```\n\n第二种`keyframes`的表示方法是用数组，数组每个元素表示相应时间轴上的一点，这样可以讲css属性和值与这点对应。\n\n```js\nconst growKeyframes = [  \n    { transform: 'none' },\n    { transform: 'scale(2)' }\n]\n```\n\n默认情况下，每个点在时间轴上是等分的。比方说时间轴上如果有5个点，那么每个点之间的动效时间都等于20%的总时间。\n\n如果我们想调节时间，可以在`keyframes`的第二种写法里加上`offset`属性，值是一个0到1之间的数，代表动画运行的时间点。用一下css举例：\n\n```css\n@keyframes alteredGrow {\n    0% { transform: none; }\n    10% { transform: scale(1.5); }\n    30% { transform: scale(1.9); }\n    100% { transform: scale(2); }\n}\n```\n\n考虑到不等分的时间点，我们可以这样写：\n\n```js\nconst alteredGrowKeyframes = [  \n    { transform: 'none' },\n    { transform: 'scale(1.5)', offset: 0.1 },\n    { transform: 'scale(1.9)', offset: 0.3 },\n    { transform: 'scale(2)' }\n]\n```\n\n#### options选项\n`animate()`函数的第二个参数是包含一些特殊选项的对象。此对象可以用来精确定义对应css动效的所有属性，有九个值可以定义：\n\n| 选项 | 描述 |\n| :-------- | :-------- | \n| *id* | 动画的唯一标识 |\n| *delay* | 动画开始前的延时，对应css的`animation-delay`属性 |\n| *duration* | 动画所需总时间，对应css的`animation-duration`属性 |\n| *iterations* | 动画播放次数，对应css的`animation-iteration-count`属性 |\n| *direction* | 动画运行的方向，对应css的`animation-direction`属性 |\n| *easing* | 动画关键帧之间的过渡效果，对应css的`animation-timing-function`属性 |\n| *fill* | 动画播放前后时的停留状态，对应css的`animation-fill-mode`属性 |\n| *endDelay* | 动画结束后的延时时间 |\n| *iterationStart* | 动画的开始播放点 |\n\n以`alteredGrow`这个动画举例，用css我们设置总时间为3秒，无限循环，互换方向，延时2秒开始：\n\n```css\n.animated-element {\n    animation-name: alteredGrow;\n    animation-duration: 3s;\n    animation-iteration-count: infinite;\n    animation-direction: alternate;\n    animation-delay: 2s;\n}\n```\n\n用web动画API，我们可以这样写：\n\n```js\nconst alteredGrowOptions = {  \n    duration: 3000,\n    iterations: Infinity,\n    direction: 'alternate',\n    delay: 2000\n};\n```\n\n### 使用动画\n将动画应用到一个元素是通过调用其本身的`animate()`方法，并传入`keyframes`和`options`参数。\n\n```js\nconst element = document.querySelector('.animated-element');  \nelement.animate(alteredGrowKeyframes, alteredGrowOptions);\n```\n\n方法一被调用，动画会自动开始播放。不过我们也可以通过`play()`和`pause()`方法来控制动画的开始和暂停。\n\n```js\nconst element = document.querySelector('.animated-element');  \nconst myAnimation = element.animate(alteredGrowKeyframes, alteredGrowOptions);\n\nmyAnimation.pause();  \nmyAnimation.play(); \n```\n\n### 浏览器支持\n<iframe src=\"//caniuse.bitsofco.de/embed/index.html?feat=web-animation&amp;periods=future_1,current,past_1\" frameborder=\"0\" width=\"100%\" height=\"500px\"></iframe>\n\n## bitsofcode Logo动画\n我重构了一下之前的css动画，比较如下：\n\n<video width=\"640\" controls=\"\" muted=\"\" playsinline=\"\" poster=\"http://res.cloudinary.com/ireaderinokun/video/upload/v1493313196/Animating_bitsofcode_pa16yn.jpg\">  \n    <source type=\"video/webm\" src=\"http://res.cloudinary.com/ireaderinokun/video/upload/v1493313196/Animating_bitsofcode_pa16yn.webm\">\n    <img src=\"http://res.cloudinary.com/ireaderinokun/video/upload/v1493313196/Animating_bitsofcode_pa16yn.jpg\">\n</video>\n\n### 创建时间轴\nlogo左半部分（bitso）动画效果概况如下：\n \n1. 左移\n2. 回到中央\n3. 中央停留，等待右半部分的动画\n4. 左移\n5. 旋转\n6. 慢速旋转\n7. 恢复旋转前的位置\n8. 回到中央\n \n以上步骤对应如下时间轴：\n\n![timeline](https://bitsofco.de/content/images/2017/04/timline-bitsofcode.png)\n\n根据时间轴可以写出`keyframes`对象:\n\n```js\nconst logoSectionLeftKeyframes = [  \n  { transform: 'none' },\n  { offset: 0.125, transform: 'translateX(-15px)' },\n  { offset: 0.25, transform: 'none' },\n  { offset: 0.5, transform: 'none' },\n  { offset: 0.625, transform: 'translateX(-15px)' },\n  { offset: 0.67, transform: 'translateX(-15px) rotate(-10deg)' },\n  { offset: 0.72, transform: 'translateX(-15px) rotate(-10deg)' },\n  { offset: 0.82, transform: 'translateX(-15px) rotate(-15deg)' },\n  { offset: 0.875, transform: 'translateX(-15px)' },\n  { transform: 'none' }\n];\n```\n\n因为需要使用`offset`属性，我决定用数组形式表示`keyframes`。\n\n### 设置Options\n每段动画对应的options很简单，运行3秒，无限循环。\n\n```js\nconst logoSectionOptions = {  \n  duration: 3000,\n  iterations: Infinity\n};\n```\n\n### 应用动画\n用web API实现动画比用css繁琐很多，因为我希望只有当logo被hover或focus的时候才运行动画，但之前也提到过默认情况下，动画一被应用是自动运行的。\n\n为了实现这一效果，我先创建了一个动画，立马暂停，然后为动画的播放和暂停加上时间监听。除此之外，因为每个单词会应用上独立的动画，我必须同时处理很多动画，实现如下：\n\n```js\n// 保存所有动画的数组\nconst animations = [];\n\nfunction playLogoAnimation() {  \n  animations.map((animation) => animation.play())\n}\n\nfunction pauseLogoAnimation() {  \n  animations.map((animation) => {\n      animation.pause();\n      animation.currentTime = 0; // 将动画恢复为初始状态\n  })\n}\n\nfunction createLogoAnimation() {  \n  const logoSectionLeftEls = Array.from( document.querySelectorAll('.logo-section-left') );\n  logoSectionLeftEls.forEach((el) => animations.push(el.animate(logoSectionLeftKeyframes, logoSectionTiming)))\n\n  // 省略logo中间及右边部分的动画代码 …\n\n  // 立即暂停动画\n  pauseLogoAnimation();\n}\n\ncreateLogoAnimation();\n\n// 动画播放及暂停的时间监听\nconst siteTitleLink = document.querySelector('.site__title a');  \nsiteTitleLink.addEventListener('mouseover', playLogoAnimation);  \nsiteTitleLink.addEventListener('mouseout', pauseLogoAnimation);  \nsiteTitleLink.addEventListener('keyup', (e) => {  \n  if ( e.keyCode === 9 ) playLogoAnimation();\n});\nsiteTitleLink.addEventListener('keydown', (e) => {  \n  if ( e.keyCode === 9 ) pauseLogoAnimation();\n});\n```\n\n完成后的CodePen展示：\n<iframe id=\"cp_embed_MmJOzR\" src=\"//codepen.io/ire/embed/MmJOzR?height=400&amp;theme-id=21401&amp;slug-hash=MmJOzR&amp;default-tab=result&amp;user=ire&amp;embed-version=2&amp;pen-title=MmJOzR\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"MmJOzR\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"></iframe>\n\n## CSS动画 vs Web动画API\n使用css还是js动画很大程度上取决于这个动画本身的情况。一般来说，css动画多用于一些小的UI有关的动画展示，比如tooltip之类的。Web动画API会被用在更复杂，需要更多细微控制的场景。以下是仅对logo动画而言两者的比较。\n\n### 性能\ncss和js动画的性能根据所用的不同动画属性会产生很大的差异。一般建议仅在`transform`和`opacity`属性上应用动画效果，因为它们可以在浏览器的子线程中运行，不影响浏览器主线程。\n\n> 改变`transform`不会触发重排，这点很棒，这意味着这一操作可以被GPU的合成线程大大加速。\n> —— [CSS Triggers](https://csstriggers.com/transform)\n\n由于我的动画只用到了`transform`属性，所以并不能看出这两种实现方法之间的显著差别。用火狐的开发者工具，我测量了它们两者的帧率，即使在关闭主线程动画的情况下，两者的帧率也都是60帧每秒。\n\n除此之外我没有什么其他的方法去评估两者的性能了。如果你知道更好的方法请务必评论告诉我。\n\n### 开发体验\n仅针对这个动画而言，我个人觉得css动画比web动画API更容易实现，主要原因是js要绑定很多播放，暂停的操作。如果我去做一些更复杂的动画，例如游戏的话，web动画API肯定是首选项。但就这个动画来说css写起来更简单一些。\n\n\n\n原文：[CSS Animations vs the Web Animations API: A Case Study](https://bitsofco.de/css-animations-vs-the-web-animations-api/)\n\n作者：[Ire Aderinokun](https://ireaderinokun.com/)\n\n译者：[Timi](http://tianq.space/posts/2017/CSS动画%20vs%20web动画API/)\n\n\n","source":"_posts/2017-05-08-CSS-Animations-vs-the-Web-Animations-API.md","raw":"---\ntitle: 【译】CSS动画 vs Web动画API\ndate: 2017-05-08 12:22\ncategory: 翻译\ntags: [JS,技术,css,animation]\nauthor: Timi\n---\n\n上周，我写了篇关于[如何用css制作bitsofcode的logo动画](https://bitsofco.de/how-i-animated-the-bitsofcode-logo/)的文章。有人建议说可以试着去比较一下css动画和web动画API，于是就有了今天这篇文章。\n\n<!-- more -->\n\n## web动画API简介\n像上周一样，我先简单介绍一下web动画API。web动画API为开发者们提供了一个直接用JavaScript操作浏览器动画引擎的方法。\n\n### 创建一个动画\n我们可以用`Element.animate()`函数来创建一个动画，它接受两个入参`keyframes`和`options`。\n\n```js\nelement.animate(keyframes, options);\n```\n\n#### keyframes关键帧\n`keyframes`对象表示动画时间轴中的一些关键事件。有两种方法去写这个对象。让我们以一个名为`grow`的动画为例，此动画会将元素放大两倍。这里是用css `@keyframes`的实现：\n\n```css\n@keyframes grow {\n    0% {\n        transform: none;\n    }\n    100% {\n        transform: scale(2);\n    }\n}\n```\n\n`keyframes`的第一种表示方法是通过对象，对象的每个属性对应相应的css动画属性，属性的值是一个数组，里面是我们想表现的css动画对应的值，每个值可以看做时间轴上的一点。\n\n```js\nconst growKeyframes = {\n    transform: ['none', 'scale(2)'];\n}\n```\n\n第二种`keyframes`的表示方法是用数组，数组每个元素表示相应时间轴上的一点，这样可以讲css属性和值与这点对应。\n\n```js\nconst growKeyframes = [  \n    { transform: 'none' },\n    { transform: 'scale(2)' }\n]\n```\n\n默认情况下，每个点在时间轴上是等分的。比方说时间轴上如果有5个点，那么每个点之间的动效时间都等于20%的总时间。\n\n如果我们想调节时间，可以在`keyframes`的第二种写法里加上`offset`属性，值是一个0到1之间的数，代表动画运行的时间点。用一下css举例：\n\n```css\n@keyframes alteredGrow {\n    0% { transform: none; }\n    10% { transform: scale(1.5); }\n    30% { transform: scale(1.9); }\n    100% { transform: scale(2); }\n}\n```\n\n考虑到不等分的时间点，我们可以这样写：\n\n```js\nconst alteredGrowKeyframes = [  \n    { transform: 'none' },\n    { transform: 'scale(1.5)', offset: 0.1 },\n    { transform: 'scale(1.9)', offset: 0.3 },\n    { transform: 'scale(2)' }\n]\n```\n\n#### options选项\n`animate()`函数的第二个参数是包含一些特殊选项的对象。此对象可以用来精确定义对应css动效的所有属性，有九个值可以定义：\n\n| 选项 | 描述 |\n| :-------- | :-------- | \n| *id* | 动画的唯一标识 |\n| *delay* | 动画开始前的延时，对应css的`animation-delay`属性 |\n| *duration* | 动画所需总时间，对应css的`animation-duration`属性 |\n| *iterations* | 动画播放次数，对应css的`animation-iteration-count`属性 |\n| *direction* | 动画运行的方向，对应css的`animation-direction`属性 |\n| *easing* | 动画关键帧之间的过渡效果，对应css的`animation-timing-function`属性 |\n| *fill* | 动画播放前后时的停留状态，对应css的`animation-fill-mode`属性 |\n| *endDelay* | 动画结束后的延时时间 |\n| *iterationStart* | 动画的开始播放点 |\n\n以`alteredGrow`这个动画举例，用css我们设置总时间为3秒，无限循环，互换方向，延时2秒开始：\n\n```css\n.animated-element {\n    animation-name: alteredGrow;\n    animation-duration: 3s;\n    animation-iteration-count: infinite;\n    animation-direction: alternate;\n    animation-delay: 2s;\n}\n```\n\n用web动画API，我们可以这样写：\n\n```js\nconst alteredGrowOptions = {  \n    duration: 3000,\n    iterations: Infinity,\n    direction: 'alternate',\n    delay: 2000\n};\n```\n\n### 使用动画\n将动画应用到一个元素是通过调用其本身的`animate()`方法，并传入`keyframes`和`options`参数。\n\n```js\nconst element = document.querySelector('.animated-element');  \nelement.animate(alteredGrowKeyframes, alteredGrowOptions);\n```\n\n方法一被调用，动画会自动开始播放。不过我们也可以通过`play()`和`pause()`方法来控制动画的开始和暂停。\n\n```js\nconst element = document.querySelector('.animated-element');  \nconst myAnimation = element.animate(alteredGrowKeyframes, alteredGrowOptions);\n\nmyAnimation.pause();  \nmyAnimation.play(); \n```\n\n### 浏览器支持\n<iframe src=\"//caniuse.bitsofco.de/embed/index.html?feat=web-animation&amp;periods=future_1,current,past_1\" frameborder=\"0\" width=\"100%\" height=\"500px\"></iframe>\n\n## bitsofcode Logo动画\n我重构了一下之前的css动画，比较如下：\n\n<video width=\"640\" controls=\"\" muted=\"\" playsinline=\"\" poster=\"http://res.cloudinary.com/ireaderinokun/video/upload/v1493313196/Animating_bitsofcode_pa16yn.jpg\">  \n    <source type=\"video/webm\" src=\"http://res.cloudinary.com/ireaderinokun/video/upload/v1493313196/Animating_bitsofcode_pa16yn.webm\">\n    <img src=\"http://res.cloudinary.com/ireaderinokun/video/upload/v1493313196/Animating_bitsofcode_pa16yn.jpg\">\n</video>\n\n### 创建时间轴\nlogo左半部分（bitso）动画效果概况如下：\n \n1. 左移\n2. 回到中央\n3. 中央停留，等待右半部分的动画\n4. 左移\n5. 旋转\n6. 慢速旋转\n7. 恢复旋转前的位置\n8. 回到中央\n \n以上步骤对应如下时间轴：\n\n![timeline](https://bitsofco.de/content/images/2017/04/timline-bitsofcode.png)\n\n根据时间轴可以写出`keyframes`对象:\n\n```js\nconst logoSectionLeftKeyframes = [  \n  { transform: 'none' },\n  { offset: 0.125, transform: 'translateX(-15px)' },\n  { offset: 0.25, transform: 'none' },\n  { offset: 0.5, transform: 'none' },\n  { offset: 0.625, transform: 'translateX(-15px)' },\n  { offset: 0.67, transform: 'translateX(-15px) rotate(-10deg)' },\n  { offset: 0.72, transform: 'translateX(-15px) rotate(-10deg)' },\n  { offset: 0.82, transform: 'translateX(-15px) rotate(-15deg)' },\n  { offset: 0.875, transform: 'translateX(-15px)' },\n  { transform: 'none' }\n];\n```\n\n因为需要使用`offset`属性，我决定用数组形式表示`keyframes`。\n\n### 设置Options\n每段动画对应的options很简单，运行3秒，无限循环。\n\n```js\nconst logoSectionOptions = {  \n  duration: 3000,\n  iterations: Infinity\n};\n```\n\n### 应用动画\n用web API实现动画比用css繁琐很多，因为我希望只有当logo被hover或focus的时候才运行动画，但之前也提到过默认情况下，动画一被应用是自动运行的。\n\n为了实现这一效果，我先创建了一个动画，立马暂停，然后为动画的播放和暂停加上时间监听。除此之外，因为每个单词会应用上独立的动画，我必须同时处理很多动画，实现如下：\n\n```js\n// 保存所有动画的数组\nconst animations = [];\n\nfunction playLogoAnimation() {  \n  animations.map((animation) => animation.play())\n}\n\nfunction pauseLogoAnimation() {  \n  animations.map((animation) => {\n      animation.pause();\n      animation.currentTime = 0; // 将动画恢复为初始状态\n  })\n}\n\nfunction createLogoAnimation() {  \n  const logoSectionLeftEls = Array.from( document.querySelectorAll('.logo-section-left') );\n  logoSectionLeftEls.forEach((el) => animations.push(el.animate(logoSectionLeftKeyframes, logoSectionTiming)))\n\n  // 省略logo中间及右边部分的动画代码 …\n\n  // 立即暂停动画\n  pauseLogoAnimation();\n}\n\ncreateLogoAnimation();\n\n// 动画播放及暂停的时间监听\nconst siteTitleLink = document.querySelector('.site__title a');  \nsiteTitleLink.addEventListener('mouseover', playLogoAnimation);  \nsiteTitleLink.addEventListener('mouseout', pauseLogoAnimation);  \nsiteTitleLink.addEventListener('keyup', (e) => {  \n  if ( e.keyCode === 9 ) playLogoAnimation();\n});\nsiteTitleLink.addEventListener('keydown', (e) => {  \n  if ( e.keyCode === 9 ) pauseLogoAnimation();\n});\n```\n\n完成后的CodePen展示：\n<iframe id=\"cp_embed_MmJOzR\" src=\"//codepen.io/ire/embed/MmJOzR?height=400&amp;theme-id=21401&amp;slug-hash=MmJOzR&amp;default-tab=result&amp;user=ire&amp;embed-version=2&amp;pen-title=MmJOzR\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"MmJOzR\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"></iframe>\n\n## CSS动画 vs Web动画API\n使用css还是js动画很大程度上取决于这个动画本身的情况。一般来说，css动画多用于一些小的UI有关的动画展示，比如tooltip之类的。Web动画API会被用在更复杂，需要更多细微控制的场景。以下是仅对logo动画而言两者的比较。\n\n### 性能\ncss和js动画的性能根据所用的不同动画属性会产生很大的差异。一般建议仅在`transform`和`opacity`属性上应用动画效果，因为它们可以在浏览器的子线程中运行，不影响浏览器主线程。\n\n> 改变`transform`不会触发重排，这点很棒，这意味着这一操作可以被GPU的合成线程大大加速。\n> —— [CSS Triggers](https://csstriggers.com/transform)\n\n由于我的动画只用到了`transform`属性，所以并不能看出这两种实现方法之间的显著差别。用火狐的开发者工具，我测量了它们两者的帧率，即使在关闭主线程动画的情况下，两者的帧率也都是60帧每秒。\n\n除此之外我没有什么其他的方法去评估两者的性能了。如果你知道更好的方法请务必评论告诉我。\n\n### 开发体验\n仅针对这个动画而言，我个人觉得css动画比web动画API更容易实现，主要原因是js要绑定很多播放，暂停的操作。如果我去做一些更复杂的动画，例如游戏的话，web动画API肯定是首选项。但就这个动画来说css写起来更简单一些。\n\n\n\n原文：[CSS Animations vs the Web Animations API: A Case Study](https://bitsofco.de/css-animations-vs-the-web-animations-api/)\n\n作者：[Ire Aderinokun](https://ireaderinokun.com/)\n\n译者：[Timi](http://tianq.space/posts/2017/CSS动画%20vs%20web动画API/)\n\n\n","slug":"2017-05-08-CSS-Animations-vs-the-Web-Animations-API","published":1,"updated":"2017-12-01T08:50:00.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknhr000cjxs1jqr45hcl","content":"<p>上周，我写了篇关于<a href=\"https://bitsofco.de/how-i-animated-the-bitsofcode-logo/\" target=\"_blank\" rel=\"noopener\">如何用css制作bitsofcode的logo动画</a>的文章。有人建议说可以试着去比较一下css动画和web动画API，于是就有了今天这篇文章。</p>\n<a id=\"more\"></a>\n<h2 id=\"web动画API简介\"><a href=\"#web动画API简介\" class=\"headerlink\" title=\"web动画API简介\"></a>web动画API简介</h2><p>像上周一样，我先简单介绍一下web动画API。web动画API为开发者们提供了一个直接用JavaScript操作浏览器动画引擎的方法。</p>\n<h3 id=\"创建一个动画\"><a href=\"#创建一个动画\" class=\"headerlink\" title=\"创建一个动画\"></a>创建一个动画</h3><p>我们可以用<code>Element.animate()</code>函数来创建一个动画，它接受两个入参<code>keyframes</code>和<code>options</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.animate(keyframes, options);</span><br></pre></td></tr></table></figure>\n<h4 id=\"keyframes关键帧\"><a href=\"#keyframes关键帧\" class=\"headerlink\" title=\"keyframes关键帧\"></a>keyframes关键帧</h4><p><code>keyframes</code>对象表示动画时间轴中的一些关键事件。有两种方法去写这个对象。让我们以一个名为<code>grow</code>的动画为例，此动画会将元素放大两倍。这里是用css <code>@keyframes</code>的实现：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> grow &#123;</span><br><span class=\"line\">    0% &#123;</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    100% &#123;</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>keyframes</code>的第一种表示方法是通过对象，对象的每个属性对应相应的css动画属性，属性的值是一个数组，里面是我们想表现的css动画对应的值，每个值可以看做时间轴上的一点。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> growKeyframes = &#123;</span><br><span class=\"line\">    transform: [<span class=\"string\">'none'</span>, <span class=\"string\">'scale(2)'</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二种<code>keyframes</code>的表示方法是用数组，数组每个元素表示相应时间轴上的一点，这样可以讲css属性和值与这点对应。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> growKeyframes = [  </span><br><span class=\"line\">    &#123; <span class=\"attr\">transform</span>: <span class=\"string\">'none'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">transform</span>: <span class=\"string\">'scale(2)'</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>默认情况下，每个点在时间轴上是等分的。比方说时间轴上如果有5个点，那么每个点之间的动效时间都等于20%的总时间。</p>\n<p>如果我们想调节时间，可以在<code>keyframes</code>的第二种写法里加上<code>offset</code>属性，值是一个0到1之间的数，代表动画运行的时间点。用一下css举例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> alteredGrow &#123;</span><br><span class=\"line\">    0% &#123; <span class=\"attribute\">transform</span>: none; &#125;</span><br><span class=\"line\">    10% &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.5); &#125;</span><br><span class=\"line\">    30% &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.9); &#125;</span><br><span class=\"line\">    100% &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(2); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>考虑到不等分的时间点，我们可以这样写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> alteredGrowKeyframes = [  </span><br><span class=\"line\">    &#123; <span class=\"attr\">transform</span>: <span class=\"string\">'none'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">transform</span>: <span class=\"string\">'scale(1.5)'</span>, <span class=\"attr\">offset</span>: <span class=\"number\">0.1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">transform</span>: <span class=\"string\">'scale(1.9)'</span>, <span class=\"attr\">offset</span>: <span class=\"number\">0.3</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">transform</span>: <span class=\"string\">'scale(2)'</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h4 id=\"options选项\"><a href=\"#options选项\" class=\"headerlink\" title=\"options选项\"></a>options选项</h4><p><code>animate()</code>函数的第二个参数是包含一些特殊选项的对象。此对象可以用来精确定义对应css动效的所有属性，有九个值可以定义：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><em>id</em></td>\n<td style=\"text-align:left\">动画的唯一标识</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>delay</em></td>\n<td style=\"text-align:left\">动画开始前的延时，对应css的<code>animation-delay</code>属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>duration</em></td>\n<td style=\"text-align:left\">动画所需总时间，对应css的<code>animation-duration</code>属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>iterations</em></td>\n<td style=\"text-align:left\">动画播放次数，对应css的<code>animation-iteration-count</code>属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>direction</em></td>\n<td style=\"text-align:left\">动画运行的方向，对应css的<code>animation-direction</code>属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>easing</em></td>\n<td style=\"text-align:left\">动画关键帧之间的过渡效果，对应css的<code>animation-timing-function</code>属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>fill</em></td>\n<td style=\"text-align:left\">动画播放前后时的停留状态，对应css的<code>animation-fill-mode</code>属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>endDelay</em></td>\n<td style=\"text-align:left\">动画结束后的延时时间</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>iterationStart</em></td>\n<td style=\"text-align:left\">动画的开始播放点</td>\n</tr>\n</tbody>\n</table>\n<p>以<code>alteredGrow</code>这个动画举例，用css我们设置总时间为3秒，无限循环，互换方向，延时2秒开始：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.animated-element</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">animation-name</span>: alteredGrow;</span><br><span class=\"line\">    <span class=\"attribute\">animation-duration</span>: <span class=\"number\">3s</span>;</span><br><span class=\"line\">    <span class=\"attribute\">animation-iteration-count</span>: infinite;</span><br><span class=\"line\">    <span class=\"attribute\">animation-direction</span>: alternate;</span><br><span class=\"line\">    <span class=\"attribute\">animation-delay</span>: <span class=\"number\">2s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用web动画API，我们可以这样写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> alteredGrowOptions = &#123;  </span><br><span class=\"line\">    duration: <span class=\"number\">3000</span>,</span><br><span class=\"line\">    iterations: <span class=\"literal\">Infinity</span>,</span><br><span class=\"line\">    direction: <span class=\"string\">'alternate'</span>,</span><br><span class=\"line\">    delay: <span class=\"number\">2000</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用动画\"><a href=\"#使用动画\" class=\"headerlink\" title=\"使用动画\"></a>使用动画</h3><p>将动画应用到一个元素是通过调用其本身的<code>animate()</code>方法，并传入<code>keyframes</code>和<code>options</code>参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.animated-element'</span>);  </span><br><span class=\"line\">element.animate(alteredGrowKeyframes, alteredGrowOptions);</span><br></pre></td></tr></table></figure>\n<p>方法一被调用，动画会自动开始播放。不过我们也可以通过<code>play()</code>和<code>pause()</code>方法来控制动画的开始和暂停。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.animated-element'</span>);  </span><br><span class=\"line\"><span class=\"keyword\">const</span> myAnimation = element.animate(alteredGrowKeyframes, alteredGrowOptions);</span><br><span class=\"line\"></span><br><span class=\"line\">myAnimation.pause();  </span><br><span class=\"line\">myAnimation.play();</span><br></pre></td></tr></table></figure>\n<h3 id=\"浏览器支持\"><a href=\"#浏览器支持\" class=\"headerlink\" title=\"浏览器支持\"></a>浏览器支持</h3><iframe src=\"//caniuse.bitsofco.de/embed/index.html?feat=web-animation&amp;periods=future_1,current,past_1\" frameborder=\"0\" width=\"100%\" height=\"500px\"></iframe>\n\n<h2 id=\"bitsofcode-Logo动画\"><a href=\"#bitsofcode-Logo动画\" class=\"headerlink\" title=\"bitsofcode Logo动画\"></a>bitsofcode Logo动画</h2><p>我重构了一下之前的css动画，比较如下：</p>\n<video width=\"640\" controls muted playsinline=\"\" poster=\"http://res.cloudinary.com/ireaderinokun/video/upload/v1493313196/Animating_bitsofcode_pa16yn.jpg\"><br>    <source type=\"video/webm\" src=\"http://res.cloudinary.com/ireaderinokun/video/upload/v1493313196/Animating_bitsofcode_pa16yn.webm\"><br>    <img src=\"http://res.cloudinary.com/ireaderinokun/video/upload/v1493313196/Animating_bitsofcode_pa16yn.jpg\"><br></video>\n\n<h3 id=\"创建时间轴\"><a href=\"#创建时间轴\" class=\"headerlink\" title=\"创建时间轴\"></a>创建时间轴</h3><p>logo左半部分（bitso）动画效果概况如下：</p>\n<ol>\n<li>左移</li>\n<li>回到中央</li>\n<li>中央停留，等待右半部分的动画</li>\n<li>左移</li>\n<li>旋转</li>\n<li>慢速旋转</li>\n<li>恢复旋转前的位置</li>\n<li>回到中央</li>\n</ol>\n<p>以上步骤对应如下时间轴：</p>\n<p><img src=\"https://bitsofco.de/content/images/2017/04/timline-bitsofcode.png\" alt=\"timeline\"></p>\n<p>根据时间轴可以写出<code>keyframes</code>对象:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> logoSectionLeftKeyframes = [  </span><br><span class=\"line\">  &#123; <span class=\"attr\">transform</span>: <span class=\"string\">'none'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">offset</span>: <span class=\"number\">0.125</span>, <span class=\"attr\">transform</span>: <span class=\"string\">'translateX(-15px)'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">offset</span>: <span class=\"number\">0.25</span>, <span class=\"attr\">transform</span>: <span class=\"string\">'none'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">offset</span>: <span class=\"number\">0.5</span>, <span class=\"attr\">transform</span>: <span class=\"string\">'none'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">offset</span>: <span class=\"number\">0.625</span>, <span class=\"attr\">transform</span>: <span class=\"string\">'translateX(-15px)'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">offset</span>: <span class=\"number\">0.67</span>, <span class=\"attr\">transform</span>: <span class=\"string\">'translateX(-15px) rotate(-10deg)'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">offset</span>: <span class=\"number\">0.72</span>, <span class=\"attr\">transform</span>: <span class=\"string\">'translateX(-15px) rotate(-10deg)'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">offset</span>: <span class=\"number\">0.82</span>, <span class=\"attr\">transform</span>: <span class=\"string\">'translateX(-15px) rotate(-15deg)'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">offset</span>: <span class=\"number\">0.875</span>, <span class=\"attr\">transform</span>: <span class=\"string\">'translateX(-15px)'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">transform</span>: <span class=\"string\">'none'</span> &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>因为需要使用<code>offset</code>属性，我决定用数组形式表示<code>keyframes</code>。</p>\n<h3 id=\"设置Options\"><a href=\"#设置Options\" class=\"headerlink\" title=\"设置Options\"></a>设置Options</h3><p>每段动画对应的options很简单，运行3秒，无限循环。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> logoSectionOptions = &#123;  </span><br><span class=\"line\">  duration: <span class=\"number\">3000</span>,</span><br><span class=\"line\">  iterations: <span class=\"literal\">Infinity</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"应用动画\"><a href=\"#应用动画\" class=\"headerlink\" title=\"应用动画\"></a>应用动画</h3><p>用web API实现动画比用css繁琐很多，因为我希望只有当logo被hover或focus的时候才运行动画，但之前也提到过默认情况下，动画一被应用是自动运行的。</p>\n<p>为了实现这一效果，我先创建了一个动画，立马暂停，然后为动画的播放和暂停加上时间监听。除此之外，因为每个单词会应用上独立的动画，我必须同时处理很多动画，实现如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 保存所有动画的数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> animations = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">playLogoAnimation</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  animations.map(<span class=\"function\">(<span class=\"params\">animation</span>) =&gt;</span> animation.play())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pauseLogoAnimation</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  animations.map(<span class=\"function\">(<span class=\"params\">animation</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      animation.pause();</span><br><span class=\"line\">      animation.currentTime = <span class=\"number\">0</span>; <span class=\"comment\">// 将动画恢复为初始状态</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createLogoAnimation</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> logoSectionLeftEls = <span class=\"built_in\">Array</span>.from( <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.logo-section-left'</span>) );</span><br><span class=\"line\">  logoSectionLeftEls.forEach(<span class=\"function\">(<span class=\"params\">el</span>) =&gt;</span> animations.push(el.animate(logoSectionLeftKeyframes, logoSectionTiming)))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 省略logo中间及右边部分的动画代码 …</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 立即暂停动画</span></span><br><span class=\"line\">  pauseLogoAnimation();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">createLogoAnimation();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 动画播放及暂停的时间监听</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> siteTitleLink = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.site__title a'</span>);  </span><br><span class=\"line\">siteTitleLink.addEventListener(<span class=\"string\">'mouseover'</span>, playLogoAnimation);  </span><br><span class=\"line\">siteTitleLink.addEventListener(<span class=\"string\">'mouseout'</span>, pauseLogoAnimation);  </span><br><span class=\"line\">siteTitleLink.addEventListener(<span class=\"string\">'keyup'</span>, (e) =&gt; &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( e.keyCode === <span class=\"number\">9</span> ) playLogoAnimation();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">siteTitleLink.addEventListener(<span class=\"string\">'keydown'</span>, (e) =&gt; &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( e.keyCode === <span class=\"number\">9</span> ) pauseLogoAnimation();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>完成后的CodePen展示：</p>\n<iframe id=\"cp_embed_MmJOzR\" src=\"//codepen.io/ire/embed/MmJOzR?height=400&amp;theme-id=21401&amp;slug-hash=MmJOzR&amp;default-tab=result&amp;user=ire&amp;embed-version=2&amp;pen-title=MmJOzR\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"MmJOzR\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"></iframe>\n\n<h2 id=\"CSS动画-vs-Web动画API\"><a href=\"#CSS动画-vs-Web动画API\" class=\"headerlink\" title=\"CSS动画 vs Web动画API\"></a>CSS动画 vs Web动画API</h2><p>使用css还是js动画很大程度上取决于这个动画本身的情况。一般来说，css动画多用于一些小的UI有关的动画展示，比如tooltip之类的。Web动画API会被用在更复杂，需要更多细微控制的场景。以下是仅对logo动画而言两者的比较。</p>\n<h3 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h3><p>css和js动画的性能根据所用的不同动画属性会产生很大的差异。一般建议仅在<code>transform</code>和<code>opacity</code>属性上应用动画效果，因为它们可以在浏览器的子线程中运行，不影响浏览器主线程。</p>\n<blockquote>\n<p>改变<code>transform</code>不会触发重排，这点很棒，这意味着这一操作可以被GPU的合成线程大大加速。<br>—— <a href=\"https://csstriggers.com/transform\" target=\"_blank\" rel=\"noopener\">CSS Triggers</a></p>\n</blockquote>\n<p>由于我的动画只用到了<code>transform</code>属性，所以并不能看出这两种实现方法之间的显著差别。用火狐的开发者工具，我测量了它们两者的帧率，即使在关闭主线程动画的情况下，两者的帧率也都是60帧每秒。</p>\n<p>除此之外我没有什么其他的方法去评估两者的性能了。如果你知道更好的方法请务必评论告诉我。</p>\n<h3 id=\"开发体验\"><a href=\"#开发体验\" class=\"headerlink\" title=\"开发体验\"></a>开发体验</h3><p>仅针对这个动画而言，我个人觉得css动画比web动画API更容易实现，主要原因是js要绑定很多播放，暂停的操作。如果我去做一些更复杂的动画，例如游戏的话，web动画API肯定是首选项。但就这个动画来说css写起来更简单一些。</p>\n<p>原文：<a href=\"https://bitsofco.de/css-animations-vs-the-web-animations-api/\" target=\"_blank\" rel=\"noopener\">CSS Animations vs the Web Animations API: A Case Study</a></p>\n<p>作者：<a href=\"https://ireaderinokun.com/\" target=\"_blank\" rel=\"noopener\">Ire Aderinokun</a></p>\n<p>译者：<a href=\"http://tianq.space/posts/2017/CSS动画%20vs%20web动画API/\" target=\"_blank\" rel=\"noopener\">Timi</a></p>\n","site":{"data":{}},"excerpt":"<p>上周，我写了篇关于<a href=\"https://bitsofco.de/how-i-animated-the-bitsofcode-logo/\" target=\"_blank\" rel=\"noopener\">如何用css制作bitsofcode的logo动画</a>的文章。有人建议说可以试着去比较一下css动画和web动画API，于是就有了今天这篇文章。</p>","more":"<h2 id=\"web动画API简介\"><a href=\"#web动画API简介\" class=\"headerlink\" title=\"web动画API简介\"></a>web动画API简介</h2><p>像上周一样，我先简单介绍一下web动画API。web动画API为开发者们提供了一个直接用JavaScript操作浏览器动画引擎的方法。</p>\n<h3 id=\"创建一个动画\"><a href=\"#创建一个动画\" class=\"headerlink\" title=\"创建一个动画\"></a>创建一个动画</h3><p>我们可以用<code>Element.animate()</code>函数来创建一个动画，它接受两个入参<code>keyframes</code>和<code>options</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.animate(keyframes, options);</span><br></pre></td></tr></table></figure>\n<h4 id=\"keyframes关键帧\"><a href=\"#keyframes关键帧\" class=\"headerlink\" title=\"keyframes关键帧\"></a>keyframes关键帧</h4><p><code>keyframes</code>对象表示动画时间轴中的一些关键事件。有两种方法去写这个对象。让我们以一个名为<code>grow</code>的动画为例，此动画会将元素放大两倍。这里是用css <code>@keyframes</code>的实现：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> grow &#123;</span><br><span class=\"line\">    0% &#123;</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    100% &#123;</span><br><span class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>keyframes</code>的第一种表示方法是通过对象，对象的每个属性对应相应的css动画属性，属性的值是一个数组，里面是我们想表现的css动画对应的值，每个值可以看做时间轴上的一点。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> growKeyframes = &#123;</span><br><span class=\"line\">    transform: [<span class=\"string\">'none'</span>, <span class=\"string\">'scale(2)'</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二种<code>keyframes</code>的表示方法是用数组，数组每个元素表示相应时间轴上的一点，这样可以讲css属性和值与这点对应。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> growKeyframes = [  </span><br><span class=\"line\">    &#123; <span class=\"attr\">transform</span>: <span class=\"string\">'none'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">transform</span>: <span class=\"string\">'scale(2)'</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>默认情况下，每个点在时间轴上是等分的。比方说时间轴上如果有5个点，那么每个点之间的动效时间都等于20%的总时间。</p>\n<p>如果我们想调节时间，可以在<code>keyframes</code>的第二种写法里加上<code>offset</code>属性，值是一个0到1之间的数，代表动画运行的时间点。用一下css举例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> alteredGrow &#123;</span><br><span class=\"line\">    0% &#123; <span class=\"attribute\">transform</span>: none; &#125;</span><br><span class=\"line\">    10% &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.5); &#125;</span><br><span class=\"line\">    30% &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.9); &#125;</span><br><span class=\"line\">    100% &#123; <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(2); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>考虑到不等分的时间点，我们可以这样写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> alteredGrowKeyframes = [  </span><br><span class=\"line\">    &#123; <span class=\"attr\">transform</span>: <span class=\"string\">'none'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">transform</span>: <span class=\"string\">'scale(1.5)'</span>, <span class=\"attr\">offset</span>: <span class=\"number\">0.1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">transform</span>: <span class=\"string\">'scale(1.9)'</span>, <span class=\"attr\">offset</span>: <span class=\"number\">0.3</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">transform</span>: <span class=\"string\">'scale(2)'</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h4 id=\"options选项\"><a href=\"#options选项\" class=\"headerlink\" title=\"options选项\"></a>options选项</h4><p><code>animate()</code>函数的第二个参数是包含一些特殊选项的对象。此对象可以用来精确定义对应css动效的所有属性，有九个值可以定义：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><em>id</em></td>\n<td style=\"text-align:left\">动画的唯一标识</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>delay</em></td>\n<td style=\"text-align:left\">动画开始前的延时，对应css的<code>animation-delay</code>属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>duration</em></td>\n<td style=\"text-align:left\">动画所需总时间，对应css的<code>animation-duration</code>属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>iterations</em></td>\n<td style=\"text-align:left\">动画播放次数，对应css的<code>animation-iteration-count</code>属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>direction</em></td>\n<td style=\"text-align:left\">动画运行的方向，对应css的<code>animation-direction</code>属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>easing</em></td>\n<td style=\"text-align:left\">动画关键帧之间的过渡效果，对应css的<code>animation-timing-function</code>属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>fill</em></td>\n<td style=\"text-align:left\">动画播放前后时的停留状态，对应css的<code>animation-fill-mode</code>属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>endDelay</em></td>\n<td style=\"text-align:left\">动画结束后的延时时间</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>iterationStart</em></td>\n<td style=\"text-align:left\">动画的开始播放点</td>\n</tr>\n</tbody>\n</table>\n<p>以<code>alteredGrow</code>这个动画举例，用css我们设置总时间为3秒，无限循环，互换方向，延时2秒开始：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.animated-element</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">animation-name</span>: alteredGrow;</span><br><span class=\"line\">    <span class=\"attribute\">animation-duration</span>: <span class=\"number\">3s</span>;</span><br><span class=\"line\">    <span class=\"attribute\">animation-iteration-count</span>: infinite;</span><br><span class=\"line\">    <span class=\"attribute\">animation-direction</span>: alternate;</span><br><span class=\"line\">    <span class=\"attribute\">animation-delay</span>: <span class=\"number\">2s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用web动画API，我们可以这样写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> alteredGrowOptions = &#123;  </span><br><span class=\"line\">    duration: <span class=\"number\">3000</span>,</span><br><span class=\"line\">    iterations: <span class=\"literal\">Infinity</span>,</span><br><span class=\"line\">    direction: <span class=\"string\">'alternate'</span>,</span><br><span class=\"line\">    delay: <span class=\"number\">2000</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用动画\"><a href=\"#使用动画\" class=\"headerlink\" title=\"使用动画\"></a>使用动画</h3><p>将动画应用到一个元素是通过调用其本身的<code>animate()</code>方法，并传入<code>keyframes</code>和<code>options</code>参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.animated-element'</span>);  </span><br><span class=\"line\">element.animate(alteredGrowKeyframes, alteredGrowOptions);</span><br></pre></td></tr></table></figure>\n<p>方法一被调用，动画会自动开始播放。不过我们也可以通过<code>play()</code>和<code>pause()</code>方法来控制动画的开始和暂停。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.animated-element'</span>);  </span><br><span class=\"line\"><span class=\"keyword\">const</span> myAnimation = element.animate(alteredGrowKeyframes, alteredGrowOptions);</span><br><span class=\"line\"></span><br><span class=\"line\">myAnimation.pause();  </span><br><span class=\"line\">myAnimation.play();</span><br></pre></td></tr></table></figure>\n<h3 id=\"浏览器支持\"><a href=\"#浏览器支持\" class=\"headerlink\" title=\"浏览器支持\"></a>浏览器支持</h3><iframe src=\"//caniuse.bitsofco.de/embed/index.html?feat=web-animation&amp;periods=future_1,current,past_1\" frameborder=\"0\" width=\"100%\" height=\"500px\"></iframe>\n\n<h2 id=\"bitsofcode-Logo动画\"><a href=\"#bitsofcode-Logo动画\" class=\"headerlink\" title=\"bitsofcode Logo动画\"></a>bitsofcode Logo动画</h2><p>我重构了一下之前的css动画，比较如下：</p>\n<video width=\"640\" controls muted playsinline=\"\" poster=\"http://res.cloudinary.com/ireaderinokun/video/upload/v1493313196/Animating_bitsofcode_pa16yn.jpg\"><br>    <source type=\"video/webm\" src=\"http://res.cloudinary.com/ireaderinokun/video/upload/v1493313196/Animating_bitsofcode_pa16yn.webm\"><br>    <img src=\"http://res.cloudinary.com/ireaderinokun/video/upload/v1493313196/Animating_bitsofcode_pa16yn.jpg\"><br></video>\n\n<h3 id=\"创建时间轴\"><a href=\"#创建时间轴\" class=\"headerlink\" title=\"创建时间轴\"></a>创建时间轴</h3><p>logo左半部分（bitso）动画效果概况如下：</p>\n<ol>\n<li>左移</li>\n<li>回到中央</li>\n<li>中央停留，等待右半部分的动画</li>\n<li>左移</li>\n<li>旋转</li>\n<li>慢速旋转</li>\n<li>恢复旋转前的位置</li>\n<li>回到中央</li>\n</ol>\n<p>以上步骤对应如下时间轴：</p>\n<p><img src=\"https://bitsofco.de/content/images/2017/04/timline-bitsofcode.png\" alt=\"timeline\"></p>\n<p>根据时间轴可以写出<code>keyframes</code>对象:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> logoSectionLeftKeyframes = [  </span><br><span class=\"line\">  &#123; <span class=\"attr\">transform</span>: <span class=\"string\">'none'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">offset</span>: <span class=\"number\">0.125</span>, <span class=\"attr\">transform</span>: <span class=\"string\">'translateX(-15px)'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">offset</span>: <span class=\"number\">0.25</span>, <span class=\"attr\">transform</span>: <span class=\"string\">'none'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">offset</span>: <span class=\"number\">0.5</span>, <span class=\"attr\">transform</span>: <span class=\"string\">'none'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">offset</span>: <span class=\"number\">0.625</span>, <span class=\"attr\">transform</span>: <span class=\"string\">'translateX(-15px)'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">offset</span>: <span class=\"number\">0.67</span>, <span class=\"attr\">transform</span>: <span class=\"string\">'translateX(-15px) rotate(-10deg)'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">offset</span>: <span class=\"number\">0.72</span>, <span class=\"attr\">transform</span>: <span class=\"string\">'translateX(-15px) rotate(-10deg)'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">offset</span>: <span class=\"number\">0.82</span>, <span class=\"attr\">transform</span>: <span class=\"string\">'translateX(-15px) rotate(-15deg)'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">offset</span>: <span class=\"number\">0.875</span>, <span class=\"attr\">transform</span>: <span class=\"string\">'translateX(-15px)'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">transform</span>: <span class=\"string\">'none'</span> &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>因为需要使用<code>offset</code>属性，我决定用数组形式表示<code>keyframes</code>。</p>\n<h3 id=\"设置Options\"><a href=\"#设置Options\" class=\"headerlink\" title=\"设置Options\"></a>设置Options</h3><p>每段动画对应的options很简单，运行3秒，无限循环。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> logoSectionOptions = &#123;  </span><br><span class=\"line\">  duration: <span class=\"number\">3000</span>,</span><br><span class=\"line\">  iterations: <span class=\"literal\">Infinity</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"应用动画\"><a href=\"#应用动画\" class=\"headerlink\" title=\"应用动画\"></a>应用动画</h3><p>用web API实现动画比用css繁琐很多，因为我希望只有当logo被hover或focus的时候才运行动画，但之前也提到过默认情况下，动画一被应用是自动运行的。</p>\n<p>为了实现这一效果，我先创建了一个动画，立马暂停，然后为动画的播放和暂停加上时间监听。除此之外，因为每个单词会应用上独立的动画，我必须同时处理很多动画，实现如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 保存所有动画的数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> animations = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">playLogoAnimation</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  animations.map(<span class=\"function\">(<span class=\"params\">animation</span>) =&gt;</span> animation.play())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pauseLogoAnimation</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  animations.map(<span class=\"function\">(<span class=\"params\">animation</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      animation.pause();</span><br><span class=\"line\">      animation.currentTime = <span class=\"number\">0</span>; <span class=\"comment\">// 将动画恢复为初始状态</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createLogoAnimation</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> logoSectionLeftEls = <span class=\"built_in\">Array</span>.from( <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.logo-section-left'</span>) );</span><br><span class=\"line\">  logoSectionLeftEls.forEach(<span class=\"function\">(<span class=\"params\">el</span>) =&gt;</span> animations.push(el.animate(logoSectionLeftKeyframes, logoSectionTiming)))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 省略logo中间及右边部分的动画代码 …</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 立即暂停动画</span></span><br><span class=\"line\">  pauseLogoAnimation();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">createLogoAnimation();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 动画播放及暂停的时间监听</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> siteTitleLink = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.site__title a'</span>);  </span><br><span class=\"line\">siteTitleLink.addEventListener(<span class=\"string\">'mouseover'</span>, playLogoAnimation);  </span><br><span class=\"line\">siteTitleLink.addEventListener(<span class=\"string\">'mouseout'</span>, pauseLogoAnimation);  </span><br><span class=\"line\">siteTitleLink.addEventListener(<span class=\"string\">'keyup'</span>, (e) =&gt; &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( e.keyCode === <span class=\"number\">9</span> ) playLogoAnimation();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">siteTitleLink.addEventListener(<span class=\"string\">'keydown'</span>, (e) =&gt; &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( e.keyCode === <span class=\"number\">9</span> ) pauseLogoAnimation();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>完成后的CodePen展示：</p>\n<iframe id=\"cp_embed_MmJOzR\" src=\"//codepen.io/ire/embed/MmJOzR?height=400&amp;theme-id=21401&amp;slug-hash=MmJOzR&amp;default-tab=result&amp;user=ire&amp;embed-version=2&amp;pen-title=MmJOzR\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"MmJOzR\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"></iframe>\n\n<h2 id=\"CSS动画-vs-Web动画API\"><a href=\"#CSS动画-vs-Web动画API\" class=\"headerlink\" title=\"CSS动画 vs Web动画API\"></a>CSS动画 vs Web动画API</h2><p>使用css还是js动画很大程度上取决于这个动画本身的情况。一般来说，css动画多用于一些小的UI有关的动画展示，比如tooltip之类的。Web动画API会被用在更复杂，需要更多细微控制的场景。以下是仅对logo动画而言两者的比较。</p>\n<h3 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h3><p>css和js动画的性能根据所用的不同动画属性会产生很大的差异。一般建议仅在<code>transform</code>和<code>opacity</code>属性上应用动画效果，因为它们可以在浏览器的子线程中运行，不影响浏览器主线程。</p>\n<blockquote>\n<p>改变<code>transform</code>不会触发重排，这点很棒，这意味着这一操作可以被GPU的合成线程大大加速。<br>—— <a href=\"https://csstriggers.com/transform\" target=\"_blank\" rel=\"noopener\">CSS Triggers</a></p>\n</blockquote>\n<p>由于我的动画只用到了<code>transform</code>属性，所以并不能看出这两种实现方法之间的显著差别。用火狐的开发者工具，我测量了它们两者的帧率，即使在关闭主线程动画的情况下，两者的帧率也都是60帧每秒。</p>\n<p>除此之外我没有什么其他的方法去评估两者的性能了。如果你知道更好的方法请务必评论告诉我。</p>\n<h3 id=\"开发体验\"><a href=\"#开发体验\" class=\"headerlink\" title=\"开发体验\"></a>开发体验</h3><p>仅针对这个动画而言，我个人觉得css动画比web动画API更容易实现，主要原因是js要绑定很多播放，暂停的操作。如果我去做一些更复杂的动画，例如游戏的话，web动画API肯定是首选项。但就这个动画来说css写起来更简单一些。</p>\n<p>原文：<a href=\"https://bitsofco.de/css-animations-vs-the-web-animations-api/\" target=\"_blank\" rel=\"noopener\">CSS Animations vs the Web Animations API: A Case Study</a></p>\n<p>作者：<a href=\"https://ireaderinokun.com/\" target=\"_blank\" rel=\"noopener\">Ire Aderinokun</a></p>\n<p>译者：<a href=\"http://tianq.space/posts/2017/CSS动画%20vs%20web动画API/\" target=\"_blank\" rel=\"noopener\">Timi</a></p>"},{"title":"【译】7个处理javascript的`undefined`的tips","date":"2017-05-20T08:30:00.000Z","author":"Cynthia","_content":"\n在8年前，我刚开始学习javascript时，让我觉得有点奇怪的是，`undefined`和`null`同样代表空值。它们之间是否有明确的不同？它们看起来都定义为“空”，此外，比较`null==undefined`的结果是`true`。\n\n大多数的现代语言如`Ruby`, `Python` 或`Java`只有一个空值(`nil`或`null`)，而这，似乎才是合理的。\n\n<!-- more -->\n\n在javascript中，当访问一个尚未初始化的变量或对象属性时，解释器会返回`undefined`。如下：\n\n```js\nlet company;  \ncompany;    // => undefined  \nlet person = { name: 'John Smith' };  \nperson.age; // => undefined \n```\n\n另一方面，`null`代表一个缺失的对象引用。javascript自身不会将变量或对象属性设为`null`。  \n一些像`String.prototype.match()`的原生方法可以返回`null`以表示为缺失对象。看一下这个例子：\n\n```js\nlet array = null;  \narray;                // => null  \nlet movie = { name: 'Starship Troopers',  musicBy: null };  \nmovie.musicBy;        // => null  \n'abc'.match(/[0-9]/); // => null \n```\n\n由于javascript是非常宽松的，所以开发者有可能访问到未初始化的值。我也有这样的坏习惯。\n\n通常这样冒险的行为会产生`undefined`的相关错误，从而导致脚本闪电般结束。常见的相关错误有：\n\n- `TypeError: 'undefined' is not a function`\n- `TypeError: Cannot read property '<prop-name>' of undefined`\n- 类似的*类型错误*。\n\nJavaScript开发人员应该可以理解这个笑话里的讽刺：\n\n```js\nfunction undefined() {  \n  // problem solved\n}\n```\n\n为减少这类错误的风险，你必须了解`undefined`会在什么时候生成。更重要的是，要在你的程序中抑制它的出现和传播，以提高代码的健壮性。\n\n让我们详细地探明`undefined`对代码安全性的影响。\n\n\n## 1. 什么是`undefined`\n\njavascript 有6种基本类型\n\n- ***Boolean***: `true` or `false`\n- ***Number***: `1`, `6.7`, `0xFF`\n- ***String***: `\"Gorilla and banana\"`\n- ***Symbol***: `Symbol(\"name\")` (始于ES2015)\n- ***Null***: `null`\n- ***Undefined***: `undefined`.\n\n和一种单独的对象类型：`{name: \"Dmitri\"}, [\"apple\", \"orange\"]`\n\n在这6种基本类型中，`undefined`是一个特殊的值，它有自己的类型Undefined。[根据ECMAScript规范](https://www.ecma-international.org/ecma-262/7.0/#sec-undefined-value):\n\n> **Undefined value** primitive value is used when a variable has not been assigned a value.(当一个变量没有被赋值时，`undefined`值作为原始值使用。)\n\n规范明确定义了，在访问未初始化变量，不存在的对象属性，不存在的的数组元素等时，将得到`undefined`值。举例：\n\n```js\nlet number;  \nnumber;     // => undefined  \nlet movie = { name: 'Interstellar' };  \nmovie.year; // => undefined  \nlet movies = ['Interstellar', 'Alexander'];  \nmovies[3];  // => undefined\n```\n\n如上所示，当访问:\n\n- 一个*未初始化*变量 `number`\n- 一个*不存在的*对象属性 `movie.year`\n- 或一个*不存在的*数组元素 `movies[3]`\n\n会被赋值为`undefined`\n\nECMAScript规范定义了`undefined`值的类型：\n\n> **Undefined type** is a type whose sole value is the `undefined` value.(Undefined类型的唯一值是`udnefined`)\n\n从这个意义上讲，用`typeof`运算符操作一个`undefined`值，返回`'undefined'`字符串。\n\n```js\ntypeof undefined === 'undefined'; // => true\n```\n\n当然，`typeof` 可以很好地验证一个变量是否为`undefined`值。\n\n```js\nlet nothing;  \ntypeof nothing === 'undefined';   // => true \n```\n\n## 2. 生成`undefined`的常见场景\n\n### 2.1未初始化变量\n\n>A declared variable that is not yet assigned with a value (**uninitialized**) is by default `undefined`.(一个未赋值(未初始化)的已声明的变量默认为`undefined`。)\n\n一个平淡朴素的例子：\n\n```js\nlet myVariable;  \nmyVariable; // => undefined\n```\n\n`myVariable`已声明，但未赋值，访问该变量得到的值为`undefined`。\n\n解决未初始化变量问题的一个有效方法是尽可能的赋予初始值。在未初始化状态下的变量越少越好。理想情况是当你声明变量后应立刻赋值`const myVariable = 'Initial value'`，但这并不总是可能的。\n\n**Tip 1：赞成使用`const`，其次`let`，告别`var`**\n\n我认为，ECMAScript2015的最好的特性之一是使用`const`和`let`声明变量。这些声明是块级作用域（与旧的函数作用域的`var`相反），并且在声明语句前，变量都处于[临时死区](https://rainsoft.io/variables-lifecycle-and-why-let-is-not-hoisted/#5letvariableslifecycle)，这是一个很大的进步。\n\n当一个变量只赋值一次，且不再改变时，我建议使用`const`声明。它创建了一个[不可变的绑定关系](https://mathiasbynens.be/notes/es6-const)。\n\n`const`的特征之一是，你必须给*变量赋值*，`const myVariable = 'initial'`，该变量不会暴露在未初始化状态，所以是不可能访问到`undefined`。\n\n让我们检查一下这个函数，验证一个单词是否为回文:\n\n```js\nfunction isPalindrome(word) {  \n  const length = word.length;\n  const half = Math.floor(length / 2);\n  for (let index = 0; index < half; index++) {\n    if (word[index] !== word[length - index - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\nisPalindrome('madam'); // => true  \nisPalindrome('hello'); // => false\n```\n\n`length`和`half`只被赋值一次，因此这些变量不会改变，所以似乎有理由将它们声明为`const`。\n\n如果你需要重新绑定变量（即多次赋值），用`let`声明，无论如何尽可能给它赋予初始值，如`let index=0`.\n\n那旧的`var`了？就ES2015而言，我建议是[停止使用它](https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75#.hvdxtd30t)。\n\n![忘记`var`，使用`const`或`let`](/images/2017-05-20-7-tips-to-handle-undefined-in-JavaScript/1.png)\n\n`var`声明的问题是，在整个函数作用域内的[变量提升](https://rainsoft.io/javascript-hoisting-in-details/#hoistingandvar)。你在函数的尾部声明一个`var`变量，但仍可以在声明之前访问它：你将得到`undefined`。\n\n```js\nfunction bigFunction() {  \n  // code...\n  myVariable; // => undefined\n  // code...\n  var myVariable = 'Initial value';\n  // code...\n  myVariable; // => 'Initial value'\n}\nbigFunction();  \n```\n\n`myVariable`是可以访问的，但在声明行`var myVariable = 'Initial value'`之前为`undefined`。\n\n相反，一个`let`(包括`const`)变量在声明语句之前都无法访问。这是因为变量在声明之前处于[临时死区](https://rainsoft.io/variables-lifecycle-and-why-let-is-not-hoisted/#5letvariableslifecycle)。这很好，因为你很少有机会得到`undefined`。\n\n将上面的例子改为`let`(而不是`var`)，会抛出`ReferenceError`，因为在临时死区的变量是不可访问的。\n\n```js\nfunction bigFunction() {  \n  // code...\n  myVariable; // => Throws 'ReferenceError: myVariable is not defined'\n  // code...\n  let myVariable = 'Initial value';\n  // code...\n  myVariable; // => 'Initial value'\n}\nbigFunction(); \n```\n\n进行不可变的绑定鼓励使用`const`，否则使用`let`，以确保尽可能少暴露未初始化变量。\n\n**Tip 2: 增强内聚**\n\n[内聚](https://en.wikipedia.org/wiki/Cohesion_(computer_science))描述了模块的元素(命名空间，类，方法，代码块)紧密联系的程度。对内聚的度量通常被描述为高内聚或低内聚。\n\n高内聚是可取的，因为它建议设计模块的元素时只关注单任务，它使得模块：\n\n- *专注和可理解的*：更容易理解模块所做的事情\n- *可维护和易于重构*：模块的更改影响更少的模块\n- *可重用*：专注于单个任务，使模块更易于重用\n- *可测试的*：您将更容易地测试一个专注于单一任务的模块\n\n![高内聚](/images/2017-05-20-7-tips-to-handle-undefined-in-JavaScript/2.svg)\n\n高内聚和[低耦合](https://en.wikipedia.org/wiki/Loose_coupling)是设计良好的系统的特点。\n\n代码块本身就可能被认为是一个小模块。为了从高内聚的好处中获益，你需要尽可能使变量靠近调用它的代码块。\n\n例如，一个变量只在某块级作用域中使用，那就声明并允许变量只在那个块（使用`const`或`let`声明），不要将这变量暴露给外部的块级作用域，因为外面的块级作用域并不关心这个变量。\n\n在函数中使用`for`循环是变量不必要延伸的典型例子：\n\n```js\nfunction someFunc(array) {  \n  var index, item, length = array.length;\n  // some code...\n  // some code...\n  for (index = 0; index < length; index++) {\n    item = array[index];\n    // some code...\n  }\n  return 'some result';\n}\n```\n\n`index`，`item`，`length`在函数体的顶部就被声明，但它们却只在尾部时才被调用，那这种方法的有什么问题呢？\n\n在顶部的声明和`for`语句的使用之间，`index`，`item`，`length`都没有初始化，且暴露为`undefined`，它们在整个函数作用域内有一个很长的生命周期，这是不合理的。\n\n更好的方法是将这些变量尽可能地移到它们的使用位置附近：\n\n```js\nfunction someFunc(array) {  \n  // some code...\n  // some code...\n  const length = array.length;\n  for (let index = 0; index < length; index++) {\n    const item = array[index];\n    // some \n  }\n  return 'some result';\n}\n```\n\n`index`，`item`只存在于`for`语句的块级作用域中，在`for`语句外它们没有任何意义。 \n\n`length`也在接近其使用的源代码时才声明。\n\n为什么修改后的版本比初始版本更好？我们看：\n\n- 变量不会暴露为未初始化状态，那你就没有访问到`undefined`的风险。\n- 将变量尽可能地移动到它们的使用位置附近会增加代码的可读性。\n- 高内聚的代码块在必要时更易于重构和提取到单独的函数中。\n\n### 2.2访问不存在的属性\n\n>When accessing a ***non-existing object property***, JavaScript returns `undefined`.(当访问一个不存在的属性，javascript返回`undefined`)\n\n我们用例子演示一下：\n\n```js\nlet favoriteMovie = {  \n  title: 'Blade Runner'\n};\nfavoriteMovie.actors; // => undefined\n```\n\n对象`favoriteMovie`只有一个属性`title`，当使用属性访问器`favoriteMovie.actors`访问一个不存在的对象属性`actors`时将返回`undefined`。\n\n当访问一个不存在的属性时不会抛出错误。但试图从一个不存在的属性值中获取数据时，真正的问题就出现了。这是最常见的`undefined`的相关问题，这反映在众所周知的错误消息中：`TypeError: Cannot read property <prop> of undefined.`\n\n让我们稍微修改前面的代码来说明`TypeError`的抛出：\n\n```js\nlet favoriteMovie = {  \n  title: 'Blade Runner'\n};\nfavoriteMovie.actors[0];  \n// TypeError: Cannot read property '0' of undefined\n```\n\n`favoriteMovie`没有属性`actors`，所以`favoriteMovie.actors`的值为`undefined`。\n\n因此，访问表达式`favoriteMovie.actors[0]`，即求`undefined`值的第一项，就会抛出`TypeError`异常。\n\njavascript允许访问不存在属性的宽容本质是混乱的来源：属性可能设置了，但也可能没有。绕过这个问题的理想方法是始终定义对象的属性以限制对象。\n\n不幸的是，你通常无法控制你所使用的对象。在不同的场景中，这些对象可能具有不同的属性集，所以你必须手动处理这些情况。\n\n让我们实现一个函数`append(array, toAppend)`，在数组的头部和/或尾部添加一个新元素，`toAppend`参数接受一个带有属性的对象。\n\n- `first`:要添加到数组头部的元素\n- `last`: 要添加到数组尾部的元素\n\n该函数返回一个新的数组实例，不改变原数组（即它是一个[纯函数](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976#.tyinnrzbi)）。\n\n第一个版本的`append()`，有些天真，看起来像这样：\n\n```js\nfunction append(array, toAppend) {  \n  const arrayCopy = array.slice();\n  if (toAppend.first) {\n    arrayCopy.unshift(toAppend.first);\n  }\n  if (toAppend.last) {\n    arrayCopy.push(toAppend.last);\n  }\n  return arrayCopy;\n}\nappend([2, 3, 4], { first: 1, last: 5 }); // => [1, 2, 3, 4, 5]  \nappend(['Hello'], { last: 'World' });     // => ['Hello', 'World']  \nappend([8, 16], { first: 4 });            // => [4, 8, 16] \n```\n\n因为对象`toAppend`可以省略属性`first`或`last`，所以必须检查这些属性是否存在于`toAppend`中。\n\n如果属性不存在，属性访问器则返回`undefined`，第一个诱惑出现，检查`first`和`last`属性是否存在,是通过验证它们是否为`undefined`。这我们在条件语句`if(toAppend.first){}`和`if(toAppend.last){}`中验证...\n\n*没这么快*，这种方法有个严重的缺陷，`undefined`，以及`false`，`null`，`0`，`NaN`都是[falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy)值。\n\n在`append()`的实现中，函数不允许插入假值。\n\n```js\nappend([10], { first: 0, last: false }); // => [10]\n```\n\n`0`和`false`都为*falsy*，因为`if(toAppend.first){}` 和 `if(toAppend.last){}`实际上和*falsy*比较，因此元素并没有插入数组中，函数返回初始数组`[10]`，没有被修改。\n\n下面的提示解释了如何正确地检查属性的存在。\n\n**Tip 3:检查属性是否存在**\n\n幸运的是，javascript有一堆方法验证对象是否存在特殊属性\n\n- `obj.prop!==undefined`:直接和`undefined`作比较\n- `typeof obj.prop!=='undefined'`:验证属性值的类型\n- `obj.hasOwnProperty('prop')`: 验证属性是否为对象的自身属性\n- `'prop' in obj`: 验证属性是否为对象自身或继承的属性\n\n我的建议是使用`in`运算符，它是一个简短且亲切的语法。`in`运算符的存在表明了一个明确的意图，即检查对象是否具有特定的属性，而不访问实际的属性值。\n\n![为清晰的意图而偏爱明确的代码](/images/2017-05-20-7-tips-to-handle-undefined-in-JavaScript/3.png)\n\n`obj.hasOwnProperty('prop')`也是一个不错的选择，它稍微比`in`操作符长，且只验证对象的自身属性。\n\n那两种与`undefined`比较的方法可能有用...但对于我来说，`obj.prop !== undefined` 和 `typeof obj.prop !== 'undefined'`看起来冗余且怪异，而且直接处理`undefined`是一种存疑的做法。\n\n让我们用`in`运算符改善一下`append(array，toAppend)`函数：\n\n```js\nfunction append(array, toAppend) {  \n  const arrayCopy = array.slice();\n  if ('first' in toAppend) {\n    arrayCopy.unshift(toAppend.first);\n  }\n  if ('last' in toAppend) {\n    arrayCopy.push(toAppend.last);\n  }\n  return arrayCopy;\n}\nappend([2, 3, 4], { first: 1, last: 5 }); // => [1, 2, 3, 4, 5]  \nappend([10], { first: 0, last: false });  // => [0, 10, false] \n```\n\n当相应的属性存在，`'first' in toAppend` (和 `'last' in toAppend`)为`true`，否则为`false`。\n\n`in`运算符的使用解决了插入*falsy*元素`0`或`false`的问题。现在，插入这些元素在`[10]`的头部和尾部得到了预期的结果`[0, 10, false]`。\n\n**Tip 4: 解构访问对象属性**\n\n当访问一个对象属性时，有时如果属性不存在，则需要指出默认值。\n\n你可以用三元运算符实现它：\n\n```js\nconst object = { };  \nconst prop = 'prop' in object ? object.prop : 'default';  \nprop; // => 'default' \n```\n当要检查的属性数量增加时，三元运算符语法的使用会变得令人生畏。对于每个属性，您必须创建一个新的代码行来处理默认值。这类似的三元运算符的使用是丑陋的。\n\n为了使用一种更优雅的方法，我们需要熟悉一下ES2015的新特征：*对象解构*（object destructuring）。\n\n[对象解构](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring)允许将值从对象属性直接提取到变量中，并在属性不存在时设置默认值，是一种避免直接处理`undefined`的方法。\n\n实际上，现在的属性提取看起来很短，更有意义：\n\n```js\nconst object = {};  \nconst { prop = 'default' } = object;  \nprop; // => 'default'\n```\n\n为观察事情的运行，让我们定义了一个有用的函数，它将字符串包含在引号中。`quote(subject, config)`接受第一个参数作为被包含的字符串，第二个参数`config`是一个对象，有这些属性：\n\n- `char`: 引号字符，如`'`（单字符）或`\"`（双字符），默认`\"`。\n- `skipIfQuoted`: boolean值，确认当字符串已经被引用，是否跳过引用，默认是`true`。\n\n应用对象解构的好处，让我们实现`quote()`:\n\n```js\nfunction quote(str, config) {  \n  const { char = '\"', skipIfQuoted = true } = config;\n  const length = str.length;\n  if (skipIfQuoted\n      && str[0] === char\n      && str[length - 1] === char) {\n    return str;\n  }\n  return char + str + char;\n}\nquote('Hello World', { char: '*' });        // => '*Hello World*'  \nquote('\"Welcome\"', { skipIfQuoted: true }); // => '\"Welcome\"'\n```\n\n一行代码`const { char = '\"', skipIfQuoted = true } = config`完成了从`config`中提取属性`char`和`skipIfQuoted`的解构赋值。  \n如果`config`对象中没有对应的属性，解构赋值会设置默认值，`char`为`\"`，`skipIfQuoted`为`false`(译者注：原文应该是写错了，应该是`true`)。\n\n幸运的是，这个函数还有空间改进。\n\n让我们将解构赋值移到参数部分。且给`config`参数设置一个默认值（一个空对象`{}`）.当默认设置够用时，跳过第二个参数。\n\n```js\nfunction quote(str, { char = '\"', skipIfQuoted = true } = {}) {  \n  const length = str.length;\n  if (skipIfQuoted\n      && str[0] === char\n      && str[length - 1] === char) {\n    return str;\n  }\n  return char + str + char;\n}\nquote('Hello World', { char: '*' }); // => '*Hello World*'  \nquote('Sunny day');                  // => '\"Sunny day\"'\n```\n\n注意，在函数签名时解构赋值替代了`config`参数。我喜欢这，因为`quote()`短了一行。  \n`={}`在解构赋值的右侧，保证了当第二个参数完全没有指定时，如`quote('Sunny day')`，一个空对象能起效。\n\n对象解构是一种功能强大的特性，可以有效地处理对象的属性。我喜欢在访问的属性不存在时指定一个默认值作为返回值。这样，您可以避免和处理`undefined`的问题。\n\n\n**Tip 5：使用默认属性填充对象**\n\n如果没有像解析赋值那样为每个属性创建一个变量的必要的话，可以用默认值覆盖缺失某些属性的对象。\n\nES2015的`Object.assign(target, source1, source2, ...)`方法用于将所有可枚举的属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。\n\n例如，你需要访问对象`unsafeOptions`的属性，但它并不总是包含全部属性。\n\n当从`unsafeOptions`访问不存在属性的时候，为避免`undefined`,我们需要做一些调整：\n\n- 定义一个对象`defaults`，它包含所有默认属性。\n- 调用`Object.assign({ }, defaults, unsafeOptions)`生成一个新的对象`options`。这个新对象接收`unsafeOptions`的所有属性，缺失的属性从`defaults`中获得。\n\n```js\nconst unsafeOptions = {  \n  fontSize: 18\n};\nconst defaults = {  \n  fontSize: 16,\n  color: 'black'\n};\nconst options = Object.assign({}, defaults, unsafeOptions);  \noptions.fontSize; // => 18  \noptions.color;    // => 'black' \n```\n\n`unsafeOptions`只包含属性`fontSize`，对象`defaults`定义了属性`fontSize`和`color`的默认值。\n\n`Object.assign()`的第一个参数作为目标对象`{}`，目标对象从源对象`unsafeOptions`中获得属性`fontSize`的值，从源对象`default`中获得属性`color`的值，这是因为`unsafeOptions`没有包含`color`。      \n枚举源对象的顺序是很重要的：后面的源对象的相同属性会覆盖前者的。\n\n你现在可以安全地访问`options`里的任何属性，包括最初不能在`unsafeOptions`中访问的`options.color`。\n\n幸运的是，存在一种更简单、更轻松的方法来填充对象的默认属性。我建议使用一个新的JavaScript特性(现在在[阶段3](https://tc39.github.io/process-document/))，它允许[在对象初始化器中扩展属性](https://github.com/tc39/proposal-object-rest-spread).\n\n不是调用`Object.assign()`，而是用对象扩展语句，从源对象中复制自身的所有可枚举的属性到目标对象中:\n\n```js\nconst unsafeOptions = {  \n  fontSize: 18\n};\nconst defaults = {  \n  fontSize: 16,\n  color: 'black'\n};\nconst options = {  \n  ...defaults,\n  ...unsafeOptions\n};\noptions.fontSize; // => 18  \noptions.color;    // => 'black'\n```\n\n对象初始化器从源对象`defaults`和`unsafeOptions`中扩展属性。指定的源对象的顺序很重要：后面的源对象的属性会覆盖前者的。\n\n用默认的属性值填充一个不完整的对象是一种有效的策略，可以使您的代码更安全、更健壮。无论什么情况，对象总要包含完整的属性集：那`undefined`不会生成。\n\n### 2.3 函数参数\n\n>The function parameters implicitly default to `undefined`.（函数参数隐式默认为`undefined`）\n\n通常，一个用特定数量的参数定义的函数应该用相同数量的参数来调用。在这种情况下，参数得到您所期望的值：\n\n```js\nfunction multiply(a, b) {  \n  a; // => 5\n  b; // => 3\n  return a * b;\n}\nmultiply(5, 3); // => 15 \n```\n\n调用`multiply(5, 3)`使得参数`a`和`b`得到相应的值`5`和`3`。乘法按预期计算：`5 * 3 = 15`。\n\n当你在调用时省略一个参数会发生什么事？函数内的参数会变成`undefined`。\n\n让我们稍微改动一下之前的例子，使之只用一个参数调用函数。\n\n```js\nfunction multiply(a, b) {  \n  a; // => 5\n  b; // => undefined\n  return a * b;\n}\nmultiply(5); // => NaN\n```\n\n`function multiply(a, b) { }`含有两个参数`a`和`b`。     \n`multiply(5) `的调用却只用一个参数执行：所以参数`a`为`5`，参数`b`为`undefined`。\n\n**Tip 6：使用默认参数值**\n\n有时，函数调用并不要求全部参数，你可以简单地为一些没有值的参数设定默认值。\n\n回到之前的例子，让我们做一些改善。如果参数`b`是`undefined`的话，我们为之设定默认值`2`：\n\n```js\nfunction multiply(a, b) {  \n  if (b === undefined) {\n    b = 2;\n  }\n  a; // => 5\n  b; // => 2\n  return a * b;\n}\nmultiply(5); // => 10  \n```\n\n函数只使用一个参数调用` multiply(5)`。最初，参数`a`为5，参数`b`为`undefined`。      \n利用条件语句验证`b`是否为`undefined`，如果是，`b=2`将赋予默认值。\n\n虽然提供的设置默认值方法是有效，但我不建议直接和`undefined`作比较。它有点冗余和看起来hack。\n\n更好的方法是使用ES2015的新特性：[默认参数值](https://www.sitepoint.com/es6-default-parameters/)。它更简明，且没有直接与`undefined`比较。\n\n修改之前的例子，使之使用默认参数`b`。这看起来更好了。\n\n```js\nfunction multiply(a, b = 2) {  \n  a; // => 5\n  b; // => 2\n  return a * b;\n}\nmultiply(5);            // => 10  \nmultiply(5, undefined); // => 10  \n```\n\n在[函数签名](https://developer.mozilla.org/en-US/docs/Glossary/Signature/Function)中，`b=2`保证了当`b`为`undefined`时，参数能默认为`2`。\n\nES2015的特性默认参数值直观且有表现能力，总是使用它，为可选参数设定默认值。\n\n### 2.4函数返回值\n\n>*Implicitly, without `return` statement, a JavaScript function returns `undefined`*.（没有`return`语句，javascript函数默认返回`undefined`）\n\n在javascript中，函数没有任何`return`语句，则默认返回`undefined`。\n\n```js\nfunction square(x) {  \n  const res = x * x;\n}\nsquare(2); // => undefined \n```\n\n函数`square() `没有返回任何计算结果。所以调用函数的结果是`undefined`。\n\n当`return`语句存在，但后面没有任何表达式，将得到一样的结果。\n\n```js\nfunction square(x) {  \n  const res = x * x;\n  return;\n}\nsquare(2); // => undefined \n```\n\n`return;`语句被执行，但它没有返回任何表达式。调用的结果依然是`undefined`。\n\n当然，如果指明`return`后的表达式，那将返回预期值。\n\n```js\nfunction square(x) {  \n  const res = x * x;\n  return res;\n}\nsquare(2); // => 4 \n```\n\n现在，函数调用的结果是`2`的平方`4`。\n\n**Tip7：不要相信会自动插入分号**\n\n在JavaScript中，下列语句必须要以分号(`;`)结束：\n\n- 空语句\n- `let`， `const`， `var`， `import`， `export`声明\n- 表达式语句\n- `debugger`语句\n- `continue`语句和`break`语句\n- `throw`语句\n- `return`语句\n\n如果你使用了上述的语句，请确保在句末指明一个分号。\n\n```js\nfunction getNum() {  \n  // Notice the semicolons at the end\n  let num = 1; \n  return num;\n}\ngetNum(); // => 1\n```\n\n在`let`声明和`return`语句的最后，必须强制编写一个分号。\n\n当你不想指明这些分号，会发生什么事？例如，为了减少源文件的大小。\n\n在这种情况下，ECMAScript提供了[自动分号插入](http://www.ecma-international.org/ecma-262/6.0/index.html#sec-automatic-semicolon-insertion)(ASI)机制，它会自动插入你所缺失的分号。\n\n在ASI的帮助下，你可以对之前的例子删除分号：\n\n```js\nfunction getNum() {  \n  // Notice that semicolons are missing\n  let num = 1\n  return num\n}\ngetNum() // => 1 \n```\n\n上述的文本是有效的javascript代码，缺失的分号会自动插入。\n\n乍一看，它看起来很有前途，ASI机制可以让你跳过不必要的分号。您可以使JavaScript代码更小、更容易阅读。\n\n这是ASI的一个小而恼人的陷阱，当换行符在`return`和`return`的表达式之间时`return \\n expression`，ASI会自动在换行符前插入分号`return; \\n expression`。\n\n在函数中有语句`return;`代表什么？函数会返回`undefined`。如果你不是很清楚ASI机制的细节，意外返回的`undefined`是具有误导性的。\n\n例如，我们研究一下调用`getPrimeNumbers()`后的返回结果。\n\n```js\nfunction getPrimeNumbers() {  \n  return \n    [ 2, 3, 5, 7, 11, 13, 17 ]\n}\ngetPrimeNumbers() // => undefined \n```\n\n在`return`语句和数组字面量之间存在一个换行符，javascript会自动在`return`语句后插入分号，解析后的代码如下：\n\n```js\nfunction getPrimeNumbers() {  \n  return; \n  [ 2, 3, 5, 7, 11, 13, 17 ];\n}\ngetPrimeNumbers(); // => undefined\n```\n\n`return ;`语句使得`getPrimeNumbers()`函数返回`undefined`，而不是预期的数组。\n\n通过移除`return`语句和数组字面量之间的换行符可以解决这个问题。\n\n```js\nfunction getPrimeNumbers() {  \n  return [ \n    2, 3, 5, 7, 11, 13, 17 \n  ];\n}\ngetPrimeNumbers(); // => [2, 3, 5, 7, 11, 13, 17] \n```\n\n我的建议是确切地研究ASI的[工作原理](http://www.bradoncode.com/blog/2015/08/26/javascript-semi-colon-insertion/)来避免这种情况。\n\n当然，绝不在`return`语句和返回表达式之间换行。\n\n### 2.5 `void`运算符\n\n`void expression`对给定的表达式进行求值，并无论结果是什么，都返回`undefined`。\n\n```js\nvoid 1;                    // => undefined  \nvoid (false);              // => undefined  \nvoid {name: 'John Smith'}; // => undefined  \nvoid Math.min(1, 3);       // => undefined \n```\n\n`void`运算符的[一个用例](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void#JavaScript_URIs)是向期望一个表达式的值是undefined的地方，插入会产生副作用的表达式。\n\n## 3.数组中的`undefined`\n\n当访问超过数组的边界索引的元素时，你会得到一个`undefined`值。\n\n```js\nconst colors = ['blue', 'white', 'red'];  \ncolors[5];  // => undefined  \ncolors[-1]; // => undefined  \n```\n\n数组`colors`有3个元素，他们的有效索引是`0`，`1`和`2`。\n\n因为没有数组元素的索引是`-1`和`5`，所以访问`colors[-1]`和`colors[5]`时返回`undefined`。\n\n在javascript中，你可能遇到过所谓的稀疏数组。这是有缺口的数组，即一些索引的元素没有定义。\n\n当在稀疏数组中访问一个缺口(也就是空隙)时，你也会得到`undefined`。\n\n下面的例子生成了稀疏数组，并尝试访问它们的空隙:\n\n```js\nconst sparse1 = new Array(3);  \nsparse1;       // => [<empty slot>, <empty slot>, <empty slot>]  \nsparse1[0];    // => undefined  \nsparse1[1];    // => undefined  \nconst sparse2 = ['white',  ,'blue']  \nsparse2;       // => ['white', <empty slot>, 'blue']  \nsparse2[1];    // => undefined  \n```\n\n`sparse1`通过一个数字参数的数组构造函数的调用生成。它有3个空隙。\n\n`sparse2`通过数组字面量生成，它缺少第二个元素。\n\n当使用数组时，为避免获取到`undefined`，请确保使用有效的数组索引，并避免创建稀疏数组.\n\n## 4.`undefined`和`null`的区别\n\n一个合理的问题出现了:`undefined`和`null`之间的主要区别是什么?两个特殊值都表示一个空状态。\n\n主要的区别是，`undefined`代表一个没有初始化的变量的值，`null`表示有意缺失的对象。\n\n让我们在一些例子中探索这些区别：\n\n```js\nlet number;  \nnumber; // => undefined \n```\n\n变量`number`是`undefined`，它清楚地表示一个未初始化的变量。\n\n未初始化的对象属性被访问时，同样未初始化的概念也会发生。\n\n```js\nconst obj = { firstName: 'Dmitri' };  \nobj.lastName; // => undefined\n```\n\n因为对象`obj`中不存在属性`lastName`，Javascript正确地将`obj.lastName `定为`undefined`。\n\n在其他情况下，您知道一个变量期望是一个对象或一个函数会返回一个对象。但是出于某种原因，你不能实例化这个对象。在这种情况下，`null`是丢失对象的一个有意义的指示器。\n\n例如，函数`clone()`是用于克隆普通的对象，它预期返回一个对象：\n\n```js\nfunction clone(obj) {  \n  if (typeof obj === 'object' && obj !== null) {\n    return Object.assign({}, obj);\n  }\n  return null;\n}\nclone({name: 'John'}); // => {name: 'John'}  \nclone(15);             // => null  \nclone(null);           // => null \n```\n\n然而，函数`clone()`可能会被非对象参数调用，像`5`或`null`（通常是原始值，`null`或`undefined`）.在这种情况下不可能生成一个克隆，因此它有理由返回`null` —— 缺失对象的指示器。\n\n`typeof`操作符能对这两个值作出区别：\n\n```js\ntypeof undefined; // => 'undefined'  \ntypeof null;      // => 'object'\n```\n\n[严格比较运算符](https://rainsoft.io/the-legend-of-javascript-equality-operator/#theidentityoperator)`===`能正确地区分`undefined`和`null`.\n\n```javacript\nlet nothing = undefined;  \nlet missingObject = null;  \nnothing === missingObject; // => false  \n```\n\n## 5.总结\n\n`undefined`的存在是JavaScript的宽松本性的结果。它允许这些用法：\n\n- 未初始化变量\n- 不存在的对象属性或方法\n- 访问边界索引的数组元素\n- 不返回任何结果的函数的调用结果\n\n通常，直接与`undefined`的比较是一种不好的做法，因为您可能依赖于上面提到的一种允许但不鼓励的实践。\n\n一个有效的策略是尽可能减少代码中`undefined`关键字的出现。与此同时，要记住它的潜在出现，并通过应用好习惯来防止它的发生：\n\n- 减少未初始化变量的使用\n- 使变量生命周期缩短，并接近其使用源\n- 无论如何，尽可能给变量赋值\n- 支持`const`，否则使用`let`\n- 为无关紧要的函数参数使用默认值\n- 验证属性是否存在，或者用默认属性填充不安全的对象\n- 避免使用稀疏数组\n\n你对javascript中的`undefined`有什么看法，请在下面的评论中畅所欲言。\n\n\n\n原文：[7 tips to handle undefined in JavaScript](https://rainsoft.io/7-tips-to-handle-undefined-in-javascript/)\n\n译者：cynthia\n\n作者：[Dmitri Pavlutin](https://rainsoft.io/author/dmitri-pavlutin/)","source":"_posts/2017-05-20-7-tips-to-handle-undefined-in-JavaScript.md","raw":"---\ntitle: 【译】7个处理javascript的`undefined`的tips\ndate: 2017-05-20 16:30\ncategory: 翻译\ntags: [javascript,undefined]\nauthor: Cynthia\n---\n\n在8年前，我刚开始学习javascript时，让我觉得有点奇怪的是，`undefined`和`null`同样代表空值。它们之间是否有明确的不同？它们看起来都定义为“空”，此外，比较`null==undefined`的结果是`true`。\n\n大多数的现代语言如`Ruby`, `Python` 或`Java`只有一个空值(`nil`或`null`)，而这，似乎才是合理的。\n\n<!-- more -->\n\n在javascript中，当访问一个尚未初始化的变量或对象属性时，解释器会返回`undefined`。如下：\n\n```js\nlet company;  \ncompany;    // => undefined  \nlet person = { name: 'John Smith' };  \nperson.age; // => undefined \n```\n\n另一方面，`null`代表一个缺失的对象引用。javascript自身不会将变量或对象属性设为`null`。  \n一些像`String.prototype.match()`的原生方法可以返回`null`以表示为缺失对象。看一下这个例子：\n\n```js\nlet array = null;  \narray;                // => null  \nlet movie = { name: 'Starship Troopers',  musicBy: null };  \nmovie.musicBy;        // => null  \n'abc'.match(/[0-9]/); // => null \n```\n\n由于javascript是非常宽松的，所以开发者有可能访问到未初始化的值。我也有这样的坏习惯。\n\n通常这样冒险的行为会产生`undefined`的相关错误，从而导致脚本闪电般结束。常见的相关错误有：\n\n- `TypeError: 'undefined' is not a function`\n- `TypeError: Cannot read property '<prop-name>' of undefined`\n- 类似的*类型错误*。\n\nJavaScript开发人员应该可以理解这个笑话里的讽刺：\n\n```js\nfunction undefined() {  \n  // problem solved\n}\n```\n\n为减少这类错误的风险，你必须了解`undefined`会在什么时候生成。更重要的是，要在你的程序中抑制它的出现和传播，以提高代码的健壮性。\n\n让我们详细地探明`undefined`对代码安全性的影响。\n\n\n## 1. 什么是`undefined`\n\njavascript 有6种基本类型\n\n- ***Boolean***: `true` or `false`\n- ***Number***: `1`, `6.7`, `0xFF`\n- ***String***: `\"Gorilla and banana\"`\n- ***Symbol***: `Symbol(\"name\")` (始于ES2015)\n- ***Null***: `null`\n- ***Undefined***: `undefined`.\n\n和一种单独的对象类型：`{name: \"Dmitri\"}, [\"apple\", \"orange\"]`\n\n在这6种基本类型中，`undefined`是一个特殊的值，它有自己的类型Undefined。[根据ECMAScript规范](https://www.ecma-international.org/ecma-262/7.0/#sec-undefined-value):\n\n> **Undefined value** primitive value is used when a variable has not been assigned a value.(当一个变量没有被赋值时，`undefined`值作为原始值使用。)\n\n规范明确定义了，在访问未初始化变量，不存在的对象属性，不存在的的数组元素等时，将得到`undefined`值。举例：\n\n```js\nlet number;  \nnumber;     // => undefined  \nlet movie = { name: 'Interstellar' };  \nmovie.year; // => undefined  \nlet movies = ['Interstellar', 'Alexander'];  \nmovies[3];  // => undefined\n```\n\n如上所示，当访问:\n\n- 一个*未初始化*变量 `number`\n- 一个*不存在的*对象属性 `movie.year`\n- 或一个*不存在的*数组元素 `movies[3]`\n\n会被赋值为`undefined`\n\nECMAScript规范定义了`undefined`值的类型：\n\n> **Undefined type** is a type whose sole value is the `undefined` value.(Undefined类型的唯一值是`udnefined`)\n\n从这个意义上讲，用`typeof`运算符操作一个`undefined`值，返回`'undefined'`字符串。\n\n```js\ntypeof undefined === 'undefined'; // => true\n```\n\n当然，`typeof` 可以很好地验证一个变量是否为`undefined`值。\n\n```js\nlet nothing;  \ntypeof nothing === 'undefined';   // => true \n```\n\n## 2. 生成`undefined`的常见场景\n\n### 2.1未初始化变量\n\n>A declared variable that is not yet assigned with a value (**uninitialized**) is by default `undefined`.(一个未赋值(未初始化)的已声明的变量默认为`undefined`。)\n\n一个平淡朴素的例子：\n\n```js\nlet myVariable;  \nmyVariable; // => undefined\n```\n\n`myVariable`已声明，但未赋值，访问该变量得到的值为`undefined`。\n\n解决未初始化变量问题的一个有效方法是尽可能的赋予初始值。在未初始化状态下的变量越少越好。理想情况是当你声明变量后应立刻赋值`const myVariable = 'Initial value'`，但这并不总是可能的。\n\n**Tip 1：赞成使用`const`，其次`let`，告别`var`**\n\n我认为，ECMAScript2015的最好的特性之一是使用`const`和`let`声明变量。这些声明是块级作用域（与旧的函数作用域的`var`相反），并且在声明语句前，变量都处于[临时死区](https://rainsoft.io/variables-lifecycle-and-why-let-is-not-hoisted/#5letvariableslifecycle)，这是一个很大的进步。\n\n当一个变量只赋值一次，且不再改变时，我建议使用`const`声明。它创建了一个[不可变的绑定关系](https://mathiasbynens.be/notes/es6-const)。\n\n`const`的特征之一是，你必须给*变量赋值*，`const myVariable = 'initial'`，该变量不会暴露在未初始化状态，所以是不可能访问到`undefined`。\n\n让我们检查一下这个函数，验证一个单词是否为回文:\n\n```js\nfunction isPalindrome(word) {  \n  const length = word.length;\n  const half = Math.floor(length / 2);\n  for (let index = 0; index < half; index++) {\n    if (word[index] !== word[length - index - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\nisPalindrome('madam'); // => true  \nisPalindrome('hello'); // => false\n```\n\n`length`和`half`只被赋值一次，因此这些变量不会改变，所以似乎有理由将它们声明为`const`。\n\n如果你需要重新绑定变量（即多次赋值），用`let`声明，无论如何尽可能给它赋予初始值，如`let index=0`.\n\n那旧的`var`了？就ES2015而言，我建议是[停止使用它](https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75#.hvdxtd30t)。\n\n![忘记`var`，使用`const`或`let`](/images/2017-05-20-7-tips-to-handle-undefined-in-JavaScript/1.png)\n\n`var`声明的问题是，在整个函数作用域内的[变量提升](https://rainsoft.io/javascript-hoisting-in-details/#hoistingandvar)。你在函数的尾部声明一个`var`变量，但仍可以在声明之前访问它：你将得到`undefined`。\n\n```js\nfunction bigFunction() {  \n  // code...\n  myVariable; // => undefined\n  // code...\n  var myVariable = 'Initial value';\n  // code...\n  myVariable; // => 'Initial value'\n}\nbigFunction();  \n```\n\n`myVariable`是可以访问的，但在声明行`var myVariable = 'Initial value'`之前为`undefined`。\n\n相反，一个`let`(包括`const`)变量在声明语句之前都无法访问。这是因为变量在声明之前处于[临时死区](https://rainsoft.io/variables-lifecycle-and-why-let-is-not-hoisted/#5letvariableslifecycle)。这很好，因为你很少有机会得到`undefined`。\n\n将上面的例子改为`let`(而不是`var`)，会抛出`ReferenceError`，因为在临时死区的变量是不可访问的。\n\n```js\nfunction bigFunction() {  \n  // code...\n  myVariable; // => Throws 'ReferenceError: myVariable is not defined'\n  // code...\n  let myVariable = 'Initial value';\n  // code...\n  myVariable; // => 'Initial value'\n}\nbigFunction(); \n```\n\n进行不可变的绑定鼓励使用`const`，否则使用`let`，以确保尽可能少暴露未初始化变量。\n\n**Tip 2: 增强内聚**\n\n[内聚](https://en.wikipedia.org/wiki/Cohesion_(computer_science))描述了模块的元素(命名空间，类，方法，代码块)紧密联系的程度。对内聚的度量通常被描述为高内聚或低内聚。\n\n高内聚是可取的，因为它建议设计模块的元素时只关注单任务，它使得模块：\n\n- *专注和可理解的*：更容易理解模块所做的事情\n- *可维护和易于重构*：模块的更改影响更少的模块\n- *可重用*：专注于单个任务，使模块更易于重用\n- *可测试的*：您将更容易地测试一个专注于单一任务的模块\n\n![高内聚](/images/2017-05-20-7-tips-to-handle-undefined-in-JavaScript/2.svg)\n\n高内聚和[低耦合](https://en.wikipedia.org/wiki/Loose_coupling)是设计良好的系统的特点。\n\n代码块本身就可能被认为是一个小模块。为了从高内聚的好处中获益，你需要尽可能使变量靠近调用它的代码块。\n\n例如，一个变量只在某块级作用域中使用，那就声明并允许变量只在那个块（使用`const`或`let`声明），不要将这变量暴露给外部的块级作用域，因为外面的块级作用域并不关心这个变量。\n\n在函数中使用`for`循环是变量不必要延伸的典型例子：\n\n```js\nfunction someFunc(array) {  \n  var index, item, length = array.length;\n  // some code...\n  // some code...\n  for (index = 0; index < length; index++) {\n    item = array[index];\n    // some code...\n  }\n  return 'some result';\n}\n```\n\n`index`，`item`，`length`在函数体的顶部就被声明，但它们却只在尾部时才被调用，那这种方法的有什么问题呢？\n\n在顶部的声明和`for`语句的使用之间，`index`，`item`，`length`都没有初始化，且暴露为`undefined`，它们在整个函数作用域内有一个很长的生命周期，这是不合理的。\n\n更好的方法是将这些变量尽可能地移到它们的使用位置附近：\n\n```js\nfunction someFunc(array) {  \n  // some code...\n  // some code...\n  const length = array.length;\n  for (let index = 0; index < length; index++) {\n    const item = array[index];\n    // some \n  }\n  return 'some result';\n}\n```\n\n`index`，`item`只存在于`for`语句的块级作用域中，在`for`语句外它们没有任何意义。 \n\n`length`也在接近其使用的源代码时才声明。\n\n为什么修改后的版本比初始版本更好？我们看：\n\n- 变量不会暴露为未初始化状态，那你就没有访问到`undefined`的风险。\n- 将变量尽可能地移动到它们的使用位置附近会增加代码的可读性。\n- 高内聚的代码块在必要时更易于重构和提取到单独的函数中。\n\n### 2.2访问不存在的属性\n\n>When accessing a ***non-existing object property***, JavaScript returns `undefined`.(当访问一个不存在的属性，javascript返回`undefined`)\n\n我们用例子演示一下：\n\n```js\nlet favoriteMovie = {  \n  title: 'Blade Runner'\n};\nfavoriteMovie.actors; // => undefined\n```\n\n对象`favoriteMovie`只有一个属性`title`，当使用属性访问器`favoriteMovie.actors`访问一个不存在的对象属性`actors`时将返回`undefined`。\n\n当访问一个不存在的属性时不会抛出错误。但试图从一个不存在的属性值中获取数据时，真正的问题就出现了。这是最常见的`undefined`的相关问题，这反映在众所周知的错误消息中：`TypeError: Cannot read property <prop> of undefined.`\n\n让我们稍微修改前面的代码来说明`TypeError`的抛出：\n\n```js\nlet favoriteMovie = {  \n  title: 'Blade Runner'\n};\nfavoriteMovie.actors[0];  \n// TypeError: Cannot read property '0' of undefined\n```\n\n`favoriteMovie`没有属性`actors`，所以`favoriteMovie.actors`的值为`undefined`。\n\n因此，访问表达式`favoriteMovie.actors[0]`，即求`undefined`值的第一项，就会抛出`TypeError`异常。\n\njavascript允许访问不存在属性的宽容本质是混乱的来源：属性可能设置了，但也可能没有。绕过这个问题的理想方法是始终定义对象的属性以限制对象。\n\n不幸的是，你通常无法控制你所使用的对象。在不同的场景中，这些对象可能具有不同的属性集，所以你必须手动处理这些情况。\n\n让我们实现一个函数`append(array, toAppend)`，在数组的头部和/或尾部添加一个新元素，`toAppend`参数接受一个带有属性的对象。\n\n- `first`:要添加到数组头部的元素\n- `last`: 要添加到数组尾部的元素\n\n该函数返回一个新的数组实例，不改变原数组（即它是一个[纯函数](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976#.tyinnrzbi)）。\n\n第一个版本的`append()`，有些天真，看起来像这样：\n\n```js\nfunction append(array, toAppend) {  \n  const arrayCopy = array.slice();\n  if (toAppend.first) {\n    arrayCopy.unshift(toAppend.first);\n  }\n  if (toAppend.last) {\n    arrayCopy.push(toAppend.last);\n  }\n  return arrayCopy;\n}\nappend([2, 3, 4], { first: 1, last: 5 }); // => [1, 2, 3, 4, 5]  \nappend(['Hello'], { last: 'World' });     // => ['Hello', 'World']  \nappend([8, 16], { first: 4 });            // => [4, 8, 16] \n```\n\n因为对象`toAppend`可以省略属性`first`或`last`，所以必须检查这些属性是否存在于`toAppend`中。\n\n如果属性不存在，属性访问器则返回`undefined`，第一个诱惑出现，检查`first`和`last`属性是否存在,是通过验证它们是否为`undefined`。这我们在条件语句`if(toAppend.first){}`和`if(toAppend.last){}`中验证...\n\n*没这么快*，这种方法有个严重的缺陷，`undefined`，以及`false`，`null`，`0`，`NaN`都是[falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy)值。\n\n在`append()`的实现中，函数不允许插入假值。\n\n```js\nappend([10], { first: 0, last: false }); // => [10]\n```\n\n`0`和`false`都为*falsy*，因为`if(toAppend.first){}` 和 `if(toAppend.last){}`实际上和*falsy*比较，因此元素并没有插入数组中，函数返回初始数组`[10]`，没有被修改。\n\n下面的提示解释了如何正确地检查属性的存在。\n\n**Tip 3:检查属性是否存在**\n\n幸运的是，javascript有一堆方法验证对象是否存在特殊属性\n\n- `obj.prop!==undefined`:直接和`undefined`作比较\n- `typeof obj.prop!=='undefined'`:验证属性值的类型\n- `obj.hasOwnProperty('prop')`: 验证属性是否为对象的自身属性\n- `'prop' in obj`: 验证属性是否为对象自身或继承的属性\n\n我的建议是使用`in`运算符，它是一个简短且亲切的语法。`in`运算符的存在表明了一个明确的意图，即检查对象是否具有特定的属性，而不访问实际的属性值。\n\n![为清晰的意图而偏爱明确的代码](/images/2017-05-20-7-tips-to-handle-undefined-in-JavaScript/3.png)\n\n`obj.hasOwnProperty('prop')`也是一个不错的选择，它稍微比`in`操作符长，且只验证对象的自身属性。\n\n那两种与`undefined`比较的方法可能有用...但对于我来说，`obj.prop !== undefined` 和 `typeof obj.prop !== 'undefined'`看起来冗余且怪异，而且直接处理`undefined`是一种存疑的做法。\n\n让我们用`in`运算符改善一下`append(array，toAppend)`函数：\n\n```js\nfunction append(array, toAppend) {  \n  const arrayCopy = array.slice();\n  if ('first' in toAppend) {\n    arrayCopy.unshift(toAppend.first);\n  }\n  if ('last' in toAppend) {\n    arrayCopy.push(toAppend.last);\n  }\n  return arrayCopy;\n}\nappend([2, 3, 4], { first: 1, last: 5 }); // => [1, 2, 3, 4, 5]  \nappend([10], { first: 0, last: false });  // => [0, 10, false] \n```\n\n当相应的属性存在，`'first' in toAppend` (和 `'last' in toAppend`)为`true`，否则为`false`。\n\n`in`运算符的使用解决了插入*falsy*元素`0`或`false`的问题。现在，插入这些元素在`[10]`的头部和尾部得到了预期的结果`[0, 10, false]`。\n\n**Tip 4: 解构访问对象属性**\n\n当访问一个对象属性时，有时如果属性不存在，则需要指出默认值。\n\n你可以用三元运算符实现它：\n\n```js\nconst object = { };  \nconst prop = 'prop' in object ? object.prop : 'default';  \nprop; // => 'default' \n```\n当要检查的属性数量增加时，三元运算符语法的使用会变得令人生畏。对于每个属性，您必须创建一个新的代码行来处理默认值。这类似的三元运算符的使用是丑陋的。\n\n为了使用一种更优雅的方法，我们需要熟悉一下ES2015的新特征：*对象解构*（object destructuring）。\n\n[对象解构](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring)允许将值从对象属性直接提取到变量中，并在属性不存在时设置默认值，是一种避免直接处理`undefined`的方法。\n\n实际上，现在的属性提取看起来很短，更有意义：\n\n```js\nconst object = {};  \nconst { prop = 'default' } = object;  \nprop; // => 'default'\n```\n\n为观察事情的运行，让我们定义了一个有用的函数，它将字符串包含在引号中。`quote(subject, config)`接受第一个参数作为被包含的字符串，第二个参数`config`是一个对象，有这些属性：\n\n- `char`: 引号字符，如`'`（单字符）或`\"`（双字符），默认`\"`。\n- `skipIfQuoted`: boolean值，确认当字符串已经被引用，是否跳过引用，默认是`true`。\n\n应用对象解构的好处，让我们实现`quote()`:\n\n```js\nfunction quote(str, config) {  \n  const { char = '\"', skipIfQuoted = true } = config;\n  const length = str.length;\n  if (skipIfQuoted\n      && str[0] === char\n      && str[length - 1] === char) {\n    return str;\n  }\n  return char + str + char;\n}\nquote('Hello World', { char: '*' });        // => '*Hello World*'  \nquote('\"Welcome\"', { skipIfQuoted: true }); // => '\"Welcome\"'\n```\n\n一行代码`const { char = '\"', skipIfQuoted = true } = config`完成了从`config`中提取属性`char`和`skipIfQuoted`的解构赋值。  \n如果`config`对象中没有对应的属性，解构赋值会设置默认值，`char`为`\"`，`skipIfQuoted`为`false`(译者注：原文应该是写错了，应该是`true`)。\n\n幸运的是，这个函数还有空间改进。\n\n让我们将解构赋值移到参数部分。且给`config`参数设置一个默认值（一个空对象`{}`）.当默认设置够用时，跳过第二个参数。\n\n```js\nfunction quote(str, { char = '\"', skipIfQuoted = true } = {}) {  \n  const length = str.length;\n  if (skipIfQuoted\n      && str[0] === char\n      && str[length - 1] === char) {\n    return str;\n  }\n  return char + str + char;\n}\nquote('Hello World', { char: '*' }); // => '*Hello World*'  \nquote('Sunny day');                  // => '\"Sunny day\"'\n```\n\n注意，在函数签名时解构赋值替代了`config`参数。我喜欢这，因为`quote()`短了一行。  \n`={}`在解构赋值的右侧，保证了当第二个参数完全没有指定时，如`quote('Sunny day')`，一个空对象能起效。\n\n对象解构是一种功能强大的特性，可以有效地处理对象的属性。我喜欢在访问的属性不存在时指定一个默认值作为返回值。这样，您可以避免和处理`undefined`的问题。\n\n\n**Tip 5：使用默认属性填充对象**\n\n如果没有像解析赋值那样为每个属性创建一个变量的必要的话，可以用默认值覆盖缺失某些属性的对象。\n\nES2015的`Object.assign(target, source1, source2, ...)`方法用于将所有可枚举的属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。\n\n例如，你需要访问对象`unsafeOptions`的属性，但它并不总是包含全部属性。\n\n当从`unsafeOptions`访问不存在属性的时候，为避免`undefined`,我们需要做一些调整：\n\n- 定义一个对象`defaults`，它包含所有默认属性。\n- 调用`Object.assign({ }, defaults, unsafeOptions)`生成一个新的对象`options`。这个新对象接收`unsafeOptions`的所有属性，缺失的属性从`defaults`中获得。\n\n```js\nconst unsafeOptions = {  \n  fontSize: 18\n};\nconst defaults = {  \n  fontSize: 16,\n  color: 'black'\n};\nconst options = Object.assign({}, defaults, unsafeOptions);  \noptions.fontSize; // => 18  \noptions.color;    // => 'black' \n```\n\n`unsafeOptions`只包含属性`fontSize`，对象`defaults`定义了属性`fontSize`和`color`的默认值。\n\n`Object.assign()`的第一个参数作为目标对象`{}`，目标对象从源对象`unsafeOptions`中获得属性`fontSize`的值，从源对象`default`中获得属性`color`的值，这是因为`unsafeOptions`没有包含`color`。      \n枚举源对象的顺序是很重要的：后面的源对象的相同属性会覆盖前者的。\n\n你现在可以安全地访问`options`里的任何属性，包括最初不能在`unsafeOptions`中访问的`options.color`。\n\n幸运的是，存在一种更简单、更轻松的方法来填充对象的默认属性。我建议使用一个新的JavaScript特性(现在在[阶段3](https://tc39.github.io/process-document/))，它允许[在对象初始化器中扩展属性](https://github.com/tc39/proposal-object-rest-spread).\n\n不是调用`Object.assign()`，而是用对象扩展语句，从源对象中复制自身的所有可枚举的属性到目标对象中:\n\n```js\nconst unsafeOptions = {  \n  fontSize: 18\n};\nconst defaults = {  \n  fontSize: 16,\n  color: 'black'\n};\nconst options = {  \n  ...defaults,\n  ...unsafeOptions\n};\noptions.fontSize; // => 18  \noptions.color;    // => 'black'\n```\n\n对象初始化器从源对象`defaults`和`unsafeOptions`中扩展属性。指定的源对象的顺序很重要：后面的源对象的属性会覆盖前者的。\n\n用默认的属性值填充一个不完整的对象是一种有效的策略，可以使您的代码更安全、更健壮。无论什么情况，对象总要包含完整的属性集：那`undefined`不会生成。\n\n### 2.3 函数参数\n\n>The function parameters implicitly default to `undefined`.（函数参数隐式默认为`undefined`）\n\n通常，一个用特定数量的参数定义的函数应该用相同数量的参数来调用。在这种情况下，参数得到您所期望的值：\n\n```js\nfunction multiply(a, b) {  \n  a; // => 5\n  b; // => 3\n  return a * b;\n}\nmultiply(5, 3); // => 15 \n```\n\n调用`multiply(5, 3)`使得参数`a`和`b`得到相应的值`5`和`3`。乘法按预期计算：`5 * 3 = 15`。\n\n当你在调用时省略一个参数会发生什么事？函数内的参数会变成`undefined`。\n\n让我们稍微改动一下之前的例子，使之只用一个参数调用函数。\n\n```js\nfunction multiply(a, b) {  \n  a; // => 5\n  b; // => undefined\n  return a * b;\n}\nmultiply(5); // => NaN\n```\n\n`function multiply(a, b) { }`含有两个参数`a`和`b`。     \n`multiply(5) `的调用却只用一个参数执行：所以参数`a`为`5`，参数`b`为`undefined`。\n\n**Tip 6：使用默认参数值**\n\n有时，函数调用并不要求全部参数，你可以简单地为一些没有值的参数设定默认值。\n\n回到之前的例子，让我们做一些改善。如果参数`b`是`undefined`的话，我们为之设定默认值`2`：\n\n```js\nfunction multiply(a, b) {  \n  if (b === undefined) {\n    b = 2;\n  }\n  a; // => 5\n  b; // => 2\n  return a * b;\n}\nmultiply(5); // => 10  \n```\n\n函数只使用一个参数调用` multiply(5)`。最初，参数`a`为5，参数`b`为`undefined`。      \n利用条件语句验证`b`是否为`undefined`，如果是，`b=2`将赋予默认值。\n\n虽然提供的设置默认值方法是有效，但我不建议直接和`undefined`作比较。它有点冗余和看起来hack。\n\n更好的方法是使用ES2015的新特性：[默认参数值](https://www.sitepoint.com/es6-default-parameters/)。它更简明，且没有直接与`undefined`比较。\n\n修改之前的例子，使之使用默认参数`b`。这看起来更好了。\n\n```js\nfunction multiply(a, b = 2) {  \n  a; // => 5\n  b; // => 2\n  return a * b;\n}\nmultiply(5);            // => 10  \nmultiply(5, undefined); // => 10  \n```\n\n在[函数签名](https://developer.mozilla.org/en-US/docs/Glossary/Signature/Function)中，`b=2`保证了当`b`为`undefined`时，参数能默认为`2`。\n\nES2015的特性默认参数值直观且有表现能力，总是使用它，为可选参数设定默认值。\n\n### 2.4函数返回值\n\n>*Implicitly, without `return` statement, a JavaScript function returns `undefined`*.（没有`return`语句，javascript函数默认返回`undefined`）\n\n在javascript中，函数没有任何`return`语句，则默认返回`undefined`。\n\n```js\nfunction square(x) {  \n  const res = x * x;\n}\nsquare(2); // => undefined \n```\n\n函数`square() `没有返回任何计算结果。所以调用函数的结果是`undefined`。\n\n当`return`语句存在，但后面没有任何表达式，将得到一样的结果。\n\n```js\nfunction square(x) {  \n  const res = x * x;\n  return;\n}\nsquare(2); // => undefined \n```\n\n`return;`语句被执行，但它没有返回任何表达式。调用的结果依然是`undefined`。\n\n当然，如果指明`return`后的表达式，那将返回预期值。\n\n```js\nfunction square(x) {  \n  const res = x * x;\n  return res;\n}\nsquare(2); // => 4 \n```\n\n现在，函数调用的结果是`2`的平方`4`。\n\n**Tip7：不要相信会自动插入分号**\n\n在JavaScript中，下列语句必须要以分号(`;`)结束：\n\n- 空语句\n- `let`， `const`， `var`， `import`， `export`声明\n- 表达式语句\n- `debugger`语句\n- `continue`语句和`break`语句\n- `throw`语句\n- `return`语句\n\n如果你使用了上述的语句，请确保在句末指明一个分号。\n\n```js\nfunction getNum() {  \n  // Notice the semicolons at the end\n  let num = 1; \n  return num;\n}\ngetNum(); // => 1\n```\n\n在`let`声明和`return`语句的最后，必须强制编写一个分号。\n\n当你不想指明这些分号，会发生什么事？例如，为了减少源文件的大小。\n\n在这种情况下，ECMAScript提供了[自动分号插入](http://www.ecma-international.org/ecma-262/6.0/index.html#sec-automatic-semicolon-insertion)(ASI)机制，它会自动插入你所缺失的分号。\n\n在ASI的帮助下，你可以对之前的例子删除分号：\n\n```js\nfunction getNum() {  \n  // Notice that semicolons are missing\n  let num = 1\n  return num\n}\ngetNum() // => 1 \n```\n\n上述的文本是有效的javascript代码，缺失的分号会自动插入。\n\n乍一看，它看起来很有前途，ASI机制可以让你跳过不必要的分号。您可以使JavaScript代码更小、更容易阅读。\n\n这是ASI的一个小而恼人的陷阱，当换行符在`return`和`return`的表达式之间时`return \\n expression`，ASI会自动在换行符前插入分号`return; \\n expression`。\n\n在函数中有语句`return;`代表什么？函数会返回`undefined`。如果你不是很清楚ASI机制的细节，意外返回的`undefined`是具有误导性的。\n\n例如，我们研究一下调用`getPrimeNumbers()`后的返回结果。\n\n```js\nfunction getPrimeNumbers() {  \n  return \n    [ 2, 3, 5, 7, 11, 13, 17 ]\n}\ngetPrimeNumbers() // => undefined \n```\n\n在`return`语句和数组字面量之间存在一个换行符，javascript会自动在`return`语句后插入分号，解析后的代码如下：\n\n```js\nfunction getPrimeNumbers() {  \n  return; \n  [ 2, 3, 5, 7, 11, 13, 17 ];\n}\ngetPrimeNumbers(); // => undefined\n```\n\n`return ;`语句使得`getPrimeNumbers()`函数返回`undefined`，而不是预期的数组。\n\n通过移除`return`语句和数组字面量之间的换行符可以解决这个问题。\n\n```js\nfunction getPrimeNumbers() {  \n  return [ \n    2, 3, 5, 7, 11, 13, 17 \n  ];\n}\ngetPrimeNumbers(); // => [2, 3, 5, 7, 11, 13, 17] \n```\n\n我的建议是确切地研究ASI的[工作原理](http://www.bradoncode.com/blog/2015/08/26/javascript-semi-colon-insertion/)来避免这种情况。\n\n当然，绝不在`return`语句和返回表达式之间换行。\n\n### 2.5 `void`运算符\n\n`void expression`对给定的表达式进行求值，并无论结果是什么，都返回`undefined`。\n\n```js\nvoid 1;                    // => undefined  \nvoid (false);              // => undefined  \nvoid {name: 'John Smith'}; // => undefined  \nvoid Math.min(1, 3);       // => undefined \n```\n\n`void`运算符的[一个用例](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void#JavaScript_URIs)是向期望一个表达式的值是undefined的地方，插入会产生副作用的表达式。\n\n## 3.数组中的`undefined`\n\n当访问超过数组的边界索引的元素时，你会得到一个`undefined`值。\n\n```js\nconst colors = ['blue', 'white', 'red'];  \ncolors[5];  // => undefined  \ncolors[-1]; // => undefined  \n```\n\n数组`colors`有3个元素，他们的有效索引是`0`，`1`和`2`。\n\n因为没有数组元素的索引是`-1`和`5`，所以访问`colors[-1]`和`colors[5]`时返回`undefined`。\n\n在javascript中，你可能遇到过所谓的稀疏数组。这是有缺口的数组，即一些索引的元素没有定义。\n\n当在稀疏数组中访问一个缺口(也就是空隙)时，你也会得到`undefined`。\n\n下面的例子生成了稀疏数组，并尝试访问它们的空隙:\n\n```js\nconst sparse1 = new Array(3);  \nsparse1;       // => [<empty slot>, <empty slot>, <empty slot>]  \nsparse1[0];    // => undefined  \nsparse1[1];    // => undefined  \nconst sparse2 = ['white',  ,'blue']  \nsparse2;       // => ['white', <empty slot>, 'blue']  \nsparse2[1];    // => undefined  \n```\n\n`sparse1`通过一个数字参数的数组构造函数的调用生成。它有3个空隙。\n\n`sparse2`通过数组字面量生成，它缺少第二个元素。\n\n当使用数组时，为避免获取到`undefined`，请确保使用有效的数组索引，并避免创建稀疏数组.\n\n## 4.`undefined`和`null`的区别\n\n一个合理的问题出现了:`undefined`和`null`之间的主要区别是什么?两个特殊值都表示一个空状态。\n\n主要的区别是，`undefined`代表一个没有初始化的变量的值，`null`表示有意缺失的对象。\n\n让我们在一些例子中探索这些区别：\n\n```js\nlet number;  \nnumber; // => undefined \n```\n\n变量`number`是`undefined`，它清楚地表示一个未初始化的变量。\n\n未初始化的对象属性被访问时，同样未初始化的概念也会发生。\n\n```js\nconst obj = { firstName: 'Dmitri' };  \nobj.lastName; // => undefined\n```\n\n因为对象`obj`中不存在属性`lastName`，Javascript正确地将`obj.lastName `定为`undefined`。\n\n在其他情况下，您知道一个变量期望是一个对象或一个函数会返回一个对象。但是出于某种原因，你不能实例化这个对象。在这种情况下，`null`是丢失对象的一个有意义的指示器。\n\n例如，函数`clone()`是用于克隆普通的对象，它预期返回一个对象：\n\n```js\nfunction clone(obj) {  \n  if (typeof obj === 'object' && obj !== null) {\n    return Object.assign({}, obj);\n  }\n  return null;\n}\nclone({name: 'John'}); // => {name: 'John'}  \nclone(15);             // => null  \nclone(null);           // => null \n```\n\n然而，函数`clone()`可能会被非对象参数调用，像`5`或`null`（通常是原始值，`null`或`undefined`）.在这种情况下不可能生成一个克隆，因此它有理由返回`null` —— 缺失对象的指示器。\n\n`typeof`操作符能对这两个值作出区别：\n\n```js\ntypeof undefined; // => 'undefined'  \ntypeof null;      // => 'object'\n```\n\n[严格比较运算符](https://rainsoft.io/the-legend-of-javascript-equality-operator/#theidentityoperator)`===`能正确地区分`undefined`和`null`.\n\n```javacript\nlet nothing = undefined;  \nlet missingObject = null;  \nnothing === missingObject; // => false  \n```\n\n## 5.总结\n\n`undefined`的存在是JavaScript的宽松本性的结果。它允许这些用法：\n\n- 未初始化变量\n- 不存在的对象属性或方法\n- 访问边界索引的数组元素\n- 不返回任何结果的函数的调用结果\n\n通常，直接与`undefined`的比较是一种不好的做法，因为您可能依赖于上面提到的一种允许但不鼓励的实践。\n\n一个有效的策略是尽可能减少代码中`undefined`关键字的出现。与此同时，要记住它的潜在出现，并通过应用好习惯来防止它的发生：\n\n- 减少未初始化变量的使用\n- 使变量生命周期缩短，并接近其使用源\n- 无论如何，尽可能给变量赋值\n- 支持`const`，否则使用`let`\n- 为无关紧要的函数参数使用默认值\n- 验证属性是否存在，或者用默认属性填充不安全的对象\n- 避免使用稀疏数组\n\n你对javascript中的`undefined`有什么看法，请在下面的评论中畅所欲言。\n\n\n\n原文：[7 tips to handle undefined in JavaScript](https://rainsoft.io/7-tips-to-handle-undefined-in-javascript/)\n\n译者：cynthia\n\n作者：[Dmitri Pavlutin](https://rainsoft.io/author/dmitri-pavlutin/)","slug":"2017-05-20-7-tips-to-handle-undefined-in-JavaScript","published":1,"updated":"2017-12-01T08:50:00.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknhv000gjxs1glmtloyf","content":"<p>在8年前，我刚开始学习javascript时，让我觉得有点奇怪的是，<code>undefined</code>和<code>null</code>同样代表空值。它们之间是否有明确的不同？它们看起来都定义为“空”，此外，比较<code>null==undefined</code>的结果是<code>true</code>。</p>\n<p>大多数的现代语言如<code>Ruby</code>, <code>Python</code> 或<code>Java</code>只有一个空值(<code>nil</code>或<code>null</code>)，而这，似乎才是合理的。</p>\n<a id=\"more\"></a>\n<p>在javascript中，当访问一个尚未初始化的变量或对象属性时，解释器会返回<code>undefined</code>。如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> company;  </span><br><span class=\"line\">company;    <span class=\"comment\">// =&gt; undefined  </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'John Smith'</span> &#125;;  </span><br><span class=\"line\">person.age; <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p>另一方面，<code>null</code>代表一个缺失的对象引用。javascript自身不会将变量或对象属性设为<code>null</code>。<br>一些像<code>String.prototype.match()</code>的原生方法可以返回<code>null</code>以表示为缺失对象。看一下这个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = <span class=\"literal\">null</span>;  </span><br><span class=\"line\">array;                <span class=\"comment\">// =&gt; null  </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> movie = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Starship Troopers'</span>,  <span class=\"attr\">musicBy</span>: <span class=\"literal\">null</span> &#125;;  </span><br><span class=\"line\">movie.musicBy;        <span class=\"comment\">// =&gt; null  </span></span><br><span class=\"line\"><span class=\"string\">'abc'</span>.match(<span class=\"regexp\">/[0-9]/</span>); <span class=\"comment\">// =&gt; null</span></span><br></pre></td></tr></table></figure>\n<p>由于javascript是非常宽松的，所以开发者有可能访问到未初始化的值。我也有这样的坏习惯。</p>\n<p>通常这样冒险的行为会产生<code>undefined</code>的相关错误，从而导致脚本闪电般结束。常见的相关错误有：</p>\n<ul>\n<li><code>TypeError: &#39;undefined&#39; is not a function</code></li>\n<li><code>TypeError: Cannot read property &#39;&lt;prop-name&gt;&#39; of undefined</code></li>\n<li>类似的<em>类型错误</em>。</li>\n</ul>\n<p>JavaScript开发人员应该可以理解这个笑话里的讽刺：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">undefined</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"comment\">// problem solved</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为减少这类错误的风险，你必须了解<code>undefined</code>会在什么时候生成。更重要的是，要在你的程序中抑制它的出现和传播，以提高代码的健壮性。</p>\n<p>让我们详细地探明<code>undefined</code>对代码安全性的影响。</p>\n<h2 id=\"1-什么是undefined\"><a href=\"#1-什么是undefined\" class=\"headerlink\" title=\"1. 什么是undefined\"></a>1. 什么是<code>undefined</code></h2><p>javascript 有6种基本类型</p>\n<ul>\n<li><strong><em>Boolean</em></strong>: <code>true</code> or <code>false</code></li>\n<li><strong><em>Number</em></strong>: <code>1</code>, <code>6.7</code>, <code>0xFF</code></li>\n<li><strong><em>String</em></strong>: <code>&quot;Gorilla and banana&quot;</code></li>\n<li><strong><em>Symbol</em></strong>: <code>Symbol(&quot;name&quot;)</code> (始于ES2015)</li>\n<li><strong><em>Null</em></strong>: <code>null</code></li>\n<li><strong><em>Undefined</em></strong>: <code>undefined</code>.</li>\n</ul>\n<p>和一种单独的对象类型：<code>{name: &quot;Dmitri&quot;}, [&quot;apple&quot;, &quot;orange&quot;]</code></p>\n<p>在这6种基本类型中，<code>undefined</code>是一个特殊的值，它有自己的类型Undefined。<a href=\"https://www.ecma-international.org/ecma-262/7.0/#sec-undefined-value\" target=\"_blank\" rel=\"noopener\">根据ECMAScript规范</a>:</p>\n<blockquote>\n<p><strong>Undefined value</strong> primitive value is used when a variable has not been assigned a value.(当一个变量没有被赋值时，<code>undefined</code>值作为原始值使用。)</p>\n</blockquote>\n<p>规范明确定义了，在访问未初始化变量，不存在的对象属性，不存在的的数组元素等时，将得到<code>undefined</code>值。举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> number;  </span><br><span class=\"line\">number;     <span class=\"comment\">// =&gt; undefined  </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> movie = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Interstellar'</span> &#125;;  </span><br><span class=\"line\">movie.year; <span class=\"comment\">// =&gt; undefined  </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> movies = [<span class=\"string\">'Interstellar'</span>, <span class=\"string\">'Alexander'</span>];  </span><br><span class=\"line\">movies[<span class=\"number\">3</span>];  <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p>如上所示，当访问:</p>\n<ul>\n<li>一个<em>未初始化</em>变量 <code>number</code></li>\n<li>一个<em>不存在的</em>对象属性 <code>movie.year</code></li>\n<li>或一个<em>不存在的</em>数组元素 <code>movies[3]</code></li>\n</ul>\n<p>会被赋值为<code>undefined</code></p>\n<p>ECMAScript规范定义了<code>undefined</code>值的类型：</p>\n<blockquote>\n<p><strong>Undefined type</strong> is a type whose sole value is the <code>undefined</code> value.(Undefined类型的唯一值是<code>udnefined</code>)</p>\n</blockquote>\n<p>从这个意义上讲，用<code>typeof</code>运算符操作一个<code>undefined</code>值，返回<code>&#39;undefined&#39;</code>字符串。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span> === <span class=\"string\">'undefined'</span>; <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>当然，<code>typeof</code> 可以很好地验证一个变量是否为<code>undefined</code>值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> nothing;  </span><br><span class=\"line\"><span class=\"keyword\">typeof</span> nothing === <span class=\"string\">'undefined'</span>;   <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-生成undefined的常见场景\"><a href=\"#2-生成undefined的常见场景\" class=\"headerlink\" title=\"2. 生成undefined的常见场景\"></a>2. 生成<code>undefined</code>的常见场景</h2><h3 id=\"2-1未初始化变量\"><a href=\"#2-1未初始化变量\" class=\"headerlink\" title=\"2.1未初始化变量\"></a>2.1未初始化变量</h3><blockquote>\n<p>A declared variable that is not yet assigned with a value (<strong>uninitialized</strong>) is by default <code>undefined</code>.(一个未赋值(未初始化)的已声明的变量默认为<code>undefined</code>。)</p>\n</blockquote>\n<p>一个平淡朴素的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myVariable;  </span><br><span class=\"line\">myVariable; <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p><code>myVariable</code>已声明，但未赋值，访问该变量得到的值为<code>undefined</code>。</p>\n<p>解决未初始化变量问题的一个有效方法是尽可能的赋予初始值。在未初始化状态下的变量越少越好。理想情况是当你声明变量后应立刻赋值<code>const myVariable = &#39;Initial value&#39;</code>，但这并不总是可能的。</p>\n<p><strong>Tip 1：赞成使用<code>const</code>，其次<code>let</code>，告别<code>var</code></strong></p>\n<p>我认为，ECMAScript2015的最好的特性之一是使用<code>const</code>和<code>let</code>声明变量。这些声明是块级作用域（与旧的函数作用域的<code>var</code>相反），并且在声明语句前，变量都处于<a href=\"https://rainsoft.io/variables-lifecycle-and-why-let-is-not-hoisted/#5letvariableslifecycle\" target=\"_blank\" rel=\"noopener\">临时死区</a>，这是一个很大的进步。</p>\n<p>当一个变量只赋值一次，且不再改变时，我建议使用<code>const</code>声明。它创建了一个<a href=\"https://mathiasbynens.be/notes/es6-const\" target=\"_blank\" rel=\"noopener\">不可变的绑定关系</a>。</p>\n<p><code>const</code>的特征之一是，你必须给<em>变量赋值</em>，<code>const myVariable = &#39;initial&#39;</code>，该变量不会暴露在未初始化状态，所以是不可能访问到<code>undefined</code>。</p>\n<p>让我们检查一下这个函数，验证一个单词是否为回文:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPalindrome</span>(<span class=\"params\">word</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> length = word.length;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> half = <span class=\"built_in\">Math</span>.floor(length / <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; half; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (word[index] !== word[length - index - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">isPalindrome(<span class=\"string\">'madam'</span>); <span class=\"comment\">// =&gt; true  </span></span><br><span class=\"line\">isPalindrome(<span class=\"string\">'hello'</span>); <span class=\"comment\">// =&gt; false</span></span><br></pre></td></tr></table></figure>\n<p><code>length</code>和<code>half</code>只被赋值一次，因此这些变量不会改变，所以似乎有理由将它们声明为<code>const</code>。</p>\n<p>如果你需要重新绑定变量（即多次赋值），用<code>let</code>声明，无论如何尽可能给它赋予初始值，如<code>let index=0</code>.</p>\n<p>那旧的<code>var</code>了？就ES2015而言，我建议是<a href=\"https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75#.hvdxtd30t\" target=\"_blank\" rel=\"noopener\">停止使用它</a>。</p>\n<p><img src=\"/images/2017-05-20-7-tips-to-handle-undefined-in-JavaScript/1.png\" alt=\"忘记`var`，使用`const`或`let`\"></p>\n<p><code>var</code>声明的问题是，在整个函数作用域内的<a href=\"https://rainsoft.io/javascript-hoisting-in-details/#hoistingandvar\" target=\"_blank\" rel=\"noopener\">变量提升</a>。你在函数的尾部声明一个<code>var</code>变量，但仍可以在声明之前访问它：你将得到<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bigFunction</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"comment\">// code...</span></span><br><span class=\"line\">  myVariable; <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\">  <span class=\"comment\">// code...</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> myVariable = <span class=\"string\">'Initial value'</span>;</span><br><span class=\"line\">  <span class=\"comment\">// code...</span></span><br><span class=\"line\">  myVariable; <span class=\"comment\">// =&gt; 'Initial value'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bigFunction();</span><br></pre></td></tr></table></figure>\n<p><code>myVariable</code>是可以访问的，但在声明行<code>var myVariable = &#39;Initial value&#39;</code>之前为<code>undefined</code>。</p>\n<p>相反，一个<code>let</code>(包括<code>const</code>)变量在声明语句之前都无法访问。这是因为变量在声明之前处于<a href=\"https://rainsoft.io/variables-lifecycle-and-why-let-is-not-hoisted/#5letvariableslifecycle\" target=\"_blank\" rel=\"noopener\">临时死区</a>。这很好，因为你很少有机会得到<code>undefined</code>。</p>\n<p>将上面的例子改为<code>let</code>(而不是<code>var</code>)，会抛出<code>ReferenceError</code>，因为在临时死区的变量是不可访问的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bigFunction</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"comment\">// code...</span></span><br><span class=\"line\">  myVariable; <span class=\"comment\">// =&gt; Throws 'ReferenceError: myVariable is not defined'</span></span><br><span class=\"line\">  <span class=\"comment\">// code...</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> myVariable = <span class=\"string\">'Initial value'</span>;</span><br><span class=\"line\">  <span class=\"comment\">// code...</span></span><br><span class=\"line\">  myVariable; <span class=\"comment\">// =&gt; 'Initial value'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bigFunction();</span><br></pre></td></tr></table></figure>\n<p>进行不可变的绑定鼓励使用<code>const</code>，否则使用<code>let</code>，以确保尽可能少暴露未初始化变量。</p>\n<p><strong>Tip 2: 增强内聚</strong></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Cohesion_(computer_science\" target=\"_blank\" rel=\"noopener\">内聚</a>)描述了模块的元素(命名空间，类，方法，代码块)紧密联系的程度。对内聚的度量通常被描述为高内聚或低内聚。</p>\n<p>高内聚是可取的，因为它建议设计模块的元素时只关注单任务，它使得模块：</p>\n<ul>\n<li><em>专注和可理解的</em>：更容易理解模块所做的事情</li>\n<li><em>可维护和易于重构</em>：模块的更改影响更少的模块</li>\n<li><em>可重用</em>：专注于单个任务，使模块更易于重用</li>\n<li><em>可测试的</em>：您将更容易地测试一个专注于单一任务的模块</li>\n</ul>\n<p><img src=\"/images/2017-05-20-7-tips-to-handle-undefined-in-JavaScript/2.svg\" alt=\"高内聚\"></p>\n<p>高内聚和<a href=\"https://en.wikipedia.org/wiki/Loose_coupling\" target=\"_blank\" rel=\"noopener\">低耦合</a>是设计良好的系统的特点。</p>\n<p>代码块本身就可能被认为是一个小模块。为了从高内聚的好处中获益，你需要尽可能使变量靠近调用它的代码块。</p>\n<p>例如，一个变量只在某块级作用域中使用，那就声明并允许变量只在那个块（使用<code>const</code>或<code>let</code>声明），不要将这变量暴露给外部的块级作用域，因为外面的块级作用域并不关心这个变量。</p>\n<p>在函数中使用<code>for</code>循环是变量不必要延伸的典型例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someFunc</span>(<span class=\"params\">array</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">var</span> index, item, length = array.length;</span><br><span class=\"line\">  <span class=\"comment\">// some code...</span></span><br><span class=\"line\">  <span class=\"comment\">// some code...</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">    item = array[index];</span><br><span class=\"line\">    <span class=\"comment\">// some code...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'some result'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>index</code>，<code>item</code>，<code>length</code>在函数体的顶部就被声明，但它们却只在尾部时才被调用，那这种方法的有什么问题呢？</p>\n<p>在顶部的声明和<code>for</code>语句的使用之间，<code>index</code>，<code>item</code>，<code>length</code>都没有初始化，且暴露为<code>undefined</code>，它们在整个函数作用域内有一个很长的生命周期，这是不合理的。</p>\n<p>更好的方法是将这些变量尽可能地移到它们的使用位置附近：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someFunc</span>(<span class=\"params\">array</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"comment\">// some code...</span></span><br><span class=\"line\">  <span class=\"comment\">// some code...</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> length = array.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> item = array[index];</span><br><span class=\"line\">    <span class=\"comment\">// some </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'some result'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>index</code>，<code>item</code>只存在于<code>for</code>语句的块级作用域中，在<code>for</code>语句外它们没有任何意义。 </p>\n<p><code>length</code>也在接近其使用的源代码时才声明。</p>\n<p>为什么修改后的版本比初始版本更好？我们看：</p>\n<ul>\n<li>变量不会暴露为未初始化状态，那你就没有访问到<code>undefined</code>的风险。</li>\n<li>将变量尽可能地移动到它们的使用位置附近会增加代码的可读性。</li>\n<li>高内聚的代码块在必要时更易于重构和提取到单独的函数中。</li>\n</ul>\n<h3 id=\"2-2访问不存在的属性\"><a href=\"#2-2访问不存在的属性\" class=\"headerlink\" title=\"2.2访问不存在的属性\"></a>2.2访问不存在的属性</h3><blockquote>\n<p>When accessing a <strong><em>non-existing object property</em></strong>, JavaScript returns <code>undefined</code>.(当访问一个不存在的属性，javascript返回<code>undefined</code>)</p>\n</blockquote>\n<p>我们用例子演示一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> favoriteMovie = &#123;  </span><br><span class=\"line\">  title: <span class=\"string\">'Blade Runner'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">favoriteMovie.actors; <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p>对象<code>favoriteMovie</code>只有一个属性<code>title</code>，当使用属性访问器<code>favoriteMovie.actors</code>访问一个不存在的对象属性<code>actors</code>时将返回<code>undefined</code>。</p>\n<p>当访问一个不存在的属性时不会抛出错误。但试图从一个不存在的属性值中获取数据时，真正的问题就出现了。这是最常见的<code>undefined</code>的相关问题，这反映在众所周知的错误消息中：<code>TypeError: Cannot read property &lt;prop&gt; of undefined.</code></p>\n<p>让我们稍微修改前面的代码来说明<code>TypeError</code>的抛出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> favoriteMovie = &#123;  </span><br><span class=\"line\">  title: <span class=\"string\">'Blade Runner'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">favoriteMovie.actors[<span class=\"number\">0</span>];  </span><br><span class=\"line\"><span class=\"comment\">// TypeError: Cannot read property '0' of undefined</span></span><br></pre></td></tr></table></figure>\n<p><code>favoriteMovie</code>没有属性<code>actors</code>，所以<code>favoriteMovie.actors</code>的值为<code>undefined</code>。</p>\n<p>因此，访问表达式<code>favoriteMovie.actors[0]</code>，即求<code>undefined</code>值的第一项，就会抛出<code>TypeError</code>异常。</p>\n<p>javascript允许访问不存在属性的宽容本质是混乱的来源：属性可能设置了，但也可能没有。绕过这个问题的理想方法是始终定义对象的属性以限制对象。</p>\n<p>不幸的是，你通常无法控制你所使用的对象。在不同的场景中，这些对象可能具有不同的属性集，所以你必须手动处理这些情况。</p>\n<p>让我们实现一个函数<code>append(array, toAppend)</code>，在数组的头部和/或尾部添加一个新元素，<code>toAppend</code>参数接受一个带有属性的对象。</p>\n<ul>\n<li><code>first</code>:要添加到数组头部的元素</li>\n<li><code>last</code>: 要添加到数组尾部的元素</li>\n</ul>\n<p>该函数返回一个新的数组实例，不改变原数组（即它是一个<a href=\"https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976#.tyinnrzbi\" target=\"_blank\" rel=\"noopener\">纯函数</a>）。</p>\n<p>第一个版本的<code>append()</code>，有些天真，看起来像这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">append</span>(<span class=\"params\">array, toAppend</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> arrayCopy = array.slice();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (toAppend.first) &#123;</span><br><span class=\"line\">    arrayCopy.unshift(toAppend.first);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (toAppend.last) &#123;</span><br><span class=\"line\">    arrayCopy.push(toAppend.last);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arrayCopy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">append([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], &#123; <span class=\"attr\">first</span>: <span class=\"number\">1</span>, <span class=\"attr\">last</span>: <span class=\"number\">5</span> &#125;); <span class=\"comment\">// =&gt; [1, 2, 3, 4, 5]  </span></span><br><span class=\"line\">append([<span class=\"string\">'Hello'</span>], &#123; <span class=\"attr\">last</span>: <span class=\"string\">'World'</span> &#125;);     <span class=\"comment\">// =&gt; ['Hello', 'World']  </span></span><br><span class=\"line\">append([<span class=\"number\">8</span>, <span class=\"number\">16</span>], &#123; <span class=\"attr\">first</span>: <span class=\"number\">4</span> &#125;);            <span class=\"comment\">// =&gt; [4, 8, 16]</span></span><br></pre></td></tr></table></figure>\n<p>因为对象<code>toAppend</code>可以省略属性<code>first</code>或<code>last</code>，所以必须检查这些属性是否存在于<code>toAppend</code>中。</p>\n<p>如果属性不存在，属性访问器则返回<code>undefined</code>，第一个诱惑出现，检查<code>first</code>和<code>last</code>属性是否存在,是通过验证它们是否为<code>undefined</code>。这我们在条件语句<code>if(toAppend.first){}</code>和<code>if(toAppend.last){}</code>中验证…</p>\n<p><em>没这么快</em>，这种方法有个严重的缺陷，<code>undefined</code>，以及<code>false</code>，<code>null</code>，<code>0</code>，<code>NaN</code>都是<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" target=\"_blank\" rel=\"noopener\">falsy</a>值。</p>\n<p>在<code>append()</code>的实现中，函数不允许插入假值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">append([<span class=\"number\">10</span>], &#123; <span class=\"attr\">first</span>: <span class=\"number\">0</span>, <span class=\"attr\">last</span>: <span class=\"literal\">false</span> &#125;); <span class=\"comment\">// =&gt; [10]</span></span><br></pre></td></tr></table></figure>\n<p><code>0</code>和<code>false</code>都为<em>falsy</em>，因为<code>if(toAppend.first){}</code> 和 <code>if(toAppend.last){}</code>实际上和<em>falsy</em>比较，因此元素并没有插入数组中，函数返回初始数组<code>[10]</code>，没有被修改。</p>\n<p>下面的提示解释了如何正确地检查属性的存在。</p>\n<p><strong>Tip 3:检查属性是否存在</strong></p>\n<p>幸运的是，javascript有一堆方法验证对象是否存在特殊属性</p>\n<ul>\n<li><code>obj.prop!==undefined</code>:直接和<code>undefined</code>作比较</li>\n<li><code>typeof obj.prop!==&#39;undefined&#39;</code>:验证属性值的类型</li>\n<li><code>obj.hasOwnProperty(&#39;prop&#39;)</code>: 验证属性是否为对象的自身属性</li>\n<li><code>&#39;prop&#39; in obj</code>: 验证属性是否为对象自身或继承的属性</li>\n</ul>\n<p>我的建议是使用<code>in</code>运算符，它是一个简短且亲切的语法。<code>in</code>运算符的存在表明了一个明确的意图，即检查对象是否具有特定的属性，而不访问实际的属性值。</p>\n<p><img src=\"/images/2017-05-20-7-tips-to-handle-undefined-in-JavaScript/3.png\" alt=\"为清晰的意图而偏爱明确的代码\"></p>\n<p><code>obj.hasOwnProperty(&#39;prop&#39;)</code>也是一个不错的选择，它稍微比<code>in</code>操作符长，且只验证对象的自身属性。</p>\n<p>那两种与<code>undefined</code>比较的方法可能有用…但对于我来说，<code>obj.prop !== undefined</code> 和 <code>typeof obj.prop !== &#39;undefined&#39;</code>看起来冗余且怪异，而且直接处理<code>undefined</code>是一种存疑的做法。</p>\n<p>让我们用<code>in</code>运算符改善一下<code>append(array，toAppend)</code>函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">append</span>(<span class=\"params\">array, toAppend</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> arrayCopy = array.slice();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">'first'</span> <span class=\"keyword\">in</span> toAppend) &#123;</span><br><span class=\"line\">    arrayCopy.unshift(toAppend.first);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">'last'</span> <span class=\"keyword\">in</span> toAppend) &#123;</span><br><span class=\"line\">    arrayCopy.push(toAppend.last);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arrayCopy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">append([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], &#123; <span class=\"attr\">first</span>: <span class=\"number\">1</span>, <span class=\"attr\">last</span>: <span class=\"number\">5</span> &#125;); <span class=\"comment\">// =&gt; [1, 2, 3, 4, 5]  </span></span><br><span class=\"line\">append([<span class=\"number\">10</span>], &#123; <span class=\"attr\">first</span>: <span class=\"number\">0</span>, <span class=\"attr\">last</span>: <span class=\"literal\">false</span> &#125;);  <span class=\"comment\">// =&gt; [0, 10, false]</span></span><br></pre></td></tr></table></figure>\n<p>当相应的属性存在，<code>&#39;first&#39; in toAppend</code> (和 <code>&#39;last&#39; in toAppend</code>)为<code>true</code>，否则为<code>false</code>。</p>\n<p><code>in</code>运算符的使用解决了插入<em>falsy</em>元素<code>0</code>或<code>false</code>的问题。现在，插入这些元素在<code>[10]</code>的头部和尾部得到了预期的结果<code>[0, 10, false]</code>。</p>\n<p><strong>Tip 4: 解构访问对象属性</strong></p>\n<p>当访问一个对象属性时，有时如果属性不存在，则需要指出默认值。</p>\n<p>你可以用三元运算符实现它：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> object = &#123; &#125;;  </span><br><span class=\"line\"><span class=\"keyword\">const</span> prop = <span class=\"string\">'prop'</span> <span class=\"keyword\">in</span> object ? object.prop : <span class=\"string\">'default'</span>;  </span><br><span class=\"line\">prop; <span class=\"comment\">// =&gt; 'default'</span></span><br></pre></td></tr></table></figure>\n<p>当要检查的属性数量增加时，三元运算符语法的使用会变得令人生畏。对于每个属性，您必须创建一个新的代码行来处理默认值。这类似的三元运算符的使用是丑陋的。</p>\n<p>为了使用一种更优雅的方法，我们需要熟悉一下ES2015的新特征：<em>对象解构</em>（object destructuring）。</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring\" target=\"_blank\" rel=\"noopener\">对象解构</a>允许将值从对象属性直接提取到变量中，并在属性不存在时设置默认值，是一种避免直接处理<code>undefined</code>的方法。</p>\n<p>实际上，现在的属性提取看起来很短，更有意义：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> object = &#123;&#125;;  </span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; prop = <span class=\"string\">'default'</span> &#125; = object;  </span><br><span class=\"line\">prop; <span class=\"comment\">// =&gt; 'default'</span></span><br></pre></td></tr></table></figure>\n<p>为观察事情的运行，让我们定义了一个有用的函数，它将字符串包含在引号中。<code>quote(subject, config)</code>接受第一个参数作为被包含的字符串，第二个参数<code>config</code>是一个对象，有这些属性：</p>\n<ul>\n<li><code>char</code>: 引号字符，如<code>&#39;</code>（单字符）或<code>&quot;</code>（双字符），默认<code>&quot;</code>。</li>\n<li><code>skipIfQuoted</code>: boolean值，确认当字符串已经被引用，是否跳过引用，默认是<code>true</code>。</li>\n</ul>\n<p>应用对象解构的好处，让我们实现<code>quote()</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quote</span>(<span class=\"params\">str, config</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; char = <span class=\"string\">'\"'</span>, skipIfQuoted = <span class=\"literal\">true</span> &#125; = config;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> length = str.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (skipIfQuoted</span><br><span class=\"line\">      &amp;&amp; str[<span class=\"number\">0</span>] === char</span><br><span class=\"line\">      &amp;&amp; str[length - <span class=\"number\">1</span>] === char) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> char + str + char;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">quote(<span class=\"string\">'Hello World'</span>, &#123; <span class=\"attr\">char</span>: <span class=\"string\">'*'</span> &#125;);        <span class=\"comment\">// =&gt; '*Hello World*'  </span></span><br><span class=\"line\">quote(<span class=\"string\">'\"Welcome\"'</span>, &#123; <span class=\"attr\">skipIfQuoted</span>: <span class=\"literal\">true</span> &#125;); <span class=\"comment\">// =&gt; '\"Welcome\"'</span></span><br></pre></td></tr></table></figure>\n<p>一行代码<code>const { char = &#39;&quot;&#39;, skipIfQuoted = true } = config</code>完成了从<code>config</code>中提取属性<code>char</code>和<code>skipIfQuoted</code>的解构赋值。<br>如果<code>config</code>对象中没有对应的属性，解构赋值会设置默认值，<code>char</code>为<code>&quot;</code>，<code>skipIfQuoted</code>为<code>false</code>(译者注：原文应该是写错了，应该是<code>true</code>)。</p>\n<p>幸运的是，这个函数还有空间改进。</p>\n<p>让我们将解构赋值移到参数部分。且给<code>config</code>参数设置一个默认值（一个空对象<code>{}</code>）.当默认设置够用时，跳过第二个参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quote</span>(<span class=\"params\">str, &#123; char = <span class=\"string\">'\"'</span>, skipIfQuoted = true &#125; = &#123;&#125;</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> length = str.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (skipIfQuoted</span><br><span class=\"line\">      &amp;&amp; str[<span class=\"number\">0</span>] === char</span><br><span class=\"line\">      &amp;&amp; str[length - <span class=\"number\">1</span>] === char) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> char + str + char;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">quote(<span class=\"string\">'Hello World'</span>, &#123; <span class=\"attr\">char</span>: <span class=\"string\">'*'</span> &#125;); <span class=\"comment\">// =&gt; '*Hello World*'  </span></span><br><span class=\"line\">quote(<span class=\"string\">'Sunny day'</span>);                  <span class=\"comment\">// =&gt; '\"Sunny day\"'</span></span><br></pre></td></tr></table></figure>\n<p>注意，在函数签名时解构赋值替代了<code>config</code>参数。我喜欢这，因为<code>quote()</code>短了一行。<br><code>={}</code>在解构赋值的右侧，保证了当第二个参数完全没有指定时，如<code>quote(&#39;Sunny day&#39;)</code>，一个空对象能起效。</p>\n<p>对象解构是一种功能强大的特性，可以有效地处理对象的属性。我喜欢在访问的属性不存在时指定一个默认值作为返回值。这样，您可以避免和处理<code>undefined</code>的问题。</p>\n<p><strong>Tip 5：使用默认属性填充对象</strong></p>\n<p>如果没有像解析赋值那样为每个属性创建一个变量的必要的话，可以用默认值覆盖缺失某些属性的对象。</p>\n<p>ES2015的<code>Object.assign(target, source1, source2, ...)</code>方法用于将所有可枚举的属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</p>\n<p>例如，你需要访问对象<code>unsafeOptions</code>的属性，但它并不总是包含全部属性。</p>\n<p>当从<code>unsafeOptions</code>访问不存在属性的时候，为避免<code>undefined</code>,我们需要做一些调整：</p>\n<ul>\n<li>定义一个对象<code>defaults</code>，它包含所有默认属性。</li>\n<li>调用<code>Object.assign({ }, defaults, unsafeOptions)</code>生成一个新的对象<code>options</code>。这个新对象接收<code>unsafeOptions</code>的所有属性，缺失的属性从<code>defaults</code>中获得。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unsafeOptions = &#123;  </span><br><span class=\"line\">  fontSize: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> defaults = &#123;  </span><br><span class=\"line\">  fontSize: <span class=\"number\">16</span>,</span><br><span class=\"line\">  color: <span class=\"string\">'black'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> options = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, defaults, unsafeOptions);  </span><br><span class=\"line\">options.fontSize; <span class=\"comment\">// =&gt; 18  </span></span><br><span class=\"line\">options.color;    <span class=\"comment\">// =&gt; 'black'</span></span><br></pre></td></tr></table></figure>\n<p><code>unsafeOptions</code>只包含属性<code>fontSize</code>，对象<code>defaults</code>定义了属性<code>fontSize</code>和<code>color</code>的默认值。</p>\n<p><code>Object.assign()</code>的第一个参数作为目标对象<code>{}</code>，目标对象从源对象<code>unsafeOptions</code>中获得属性<code>fontSize</code>的值，从源对象<code>default</code>中获得属性<code>color</code>的值，这是因为<code>unsafeOptions</code>没有包含<code>color</code>。<br>枚举源对象的顺序是很重要的：后面的源对象的相同属性会覆盖前者的。</p>\n<p>你现在可以安全地访问<code>options</code>里的任何属性，包括最初不能在<code>unsafeOptions</code>中访问的<code>options.color</code>。</p>\n<p>幸运的是，存在一种更简单、更轻松的方法来填充对象的默认属性。我建议使用一个新的JavaScript特性(现在在<a href=\"https://tc39.github.io/process-document/\" target=\"_blank\" rel=\"noopener\">阶段3</a>)，它允许<a href=\"https://github.com/tc39/proposal-object-rest-spread\" target=\"_blank\" rel=\"noopener\">在对象初始化器中扩展属性</a>.</p>\n<p>不是调用<code>Object.assign()</code>，而是用对象扩展语句，从源对象中复制自身的所有可枚举的属性到目标对象中:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unsafeOptions = &#123;  </span><br><span class=\"line\">  fontSize: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> defaults = &#123;  </span><br><span class=\"line\">  fontSize: <span class=\"number\">16</span>,</span><br><span class=\"line\">  color: <span class=\"string\">'black'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;  </span><br><span class=\"line\">  ...defaults,</span><br><span class=\"line\">  ...unsafeOptions</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">options.fontSize; <span class=\"comment\">// =&gt; 18  </span></span><br><span class=\"line\">options.color;    <span class=\"comment\">// =&gt; 'black'</span></span><br></pre></td></tr></table></figure>\n<p>对象初始化器从源对象<code>defaults</code>和<code>unsafeOptions</code>中扩展属性。指定的源对象的顺序很重要：后面的源对象的属性会覆盖前者的。</p>\n<p>用默认的属性值填充一个不完整的对象是一种有效的策略，可以使您的代码更安全、更健壮。无论什么情况，对象总要包含完整的属性集：那<code>undefined</code>不会生成。</p>\n<h3 id=\"2-3-函数参数\"><a href=\"#2-3-函数参数\" class=\"headerlink\" title=\"2.3 函数参数\"></a>2.3 函数参数</h3><blockquote>\n<p>The function parameters implicitly default to <code>undefined</code>.（函数参数隐式默认为<code>undefined</code>）</p>\n</blockquote>\n<p>通常，一个用特定数量的参数定义的函数应该用相同数量的参数来调用。在这种情况下，参数得到您所期望的值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiply</span>(<span class=\"params\">a, b</span>) </span>&#123;  </span><br><span class=\"line\">  a; <span class=\"comment\">// =&gt; 5</span></span><br><span class=\"line\">  b; <span class=\"comment\">// =&gt; 3</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a * b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">multiply(<span class=\"number\">5</span>, <span class=\"number\">3</span>); <span class=\"comment\">// =&gt; 15</span></span><br></pre></td></tr></table></figure>\n<p>调用<code>multiply(5, 3)</code>使得参数<code>a</code>和<code>b</code>得到相应的值<code>5</code>和<code>3</code>。乘法按预期计算：<code>5 * 3 = 15</code>。</p>\n<p>当你在调用时省略一个参数会发生什么事？函数内的参数会变成<code>undefined</code>。</p>\n<p>让我们稍微改动一下之前的例子，使之只用一个参数调用函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiply</span>(<span class=\"params\">a, b</span>) </span>&#123;  </span><br><span class=\"line\">  a; <span class=\"comment\">// =&gt; 5</span></span><br><span class=\"line\">  b; <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a * b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">multiply(<span class=\"number\">5</span>); <span class=\"comment\">// =&gt; NaN</span></span><br></pre></td></tr></table></figure>\n<p><code>function multiply(a, b) { }</code>含有两个参数<code>a</code>和<code>b</code>。<br><code>multiply(5)</code>的调用却只用一个参数执行：所以参数<code>a</code>为<code>5</code>，参数<code>b</code>为<code>undefined</code>。</p>\n<p><strong>Tip 6：使用默认参数值</strong></p>\n<p>有时，函数调用并不要求全部参数，你可以简单地为一些没有值的参数设定默认值。</p>\n<p>回到之前的例子，让我们做一些改善。如果参数<code>b</code>是<code>undefined</code>的话，我们为之设定默认值<code>2</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiply</span>(<span class=\"params\">a, b</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (b === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  a; <span class=\"comment\">// =&gt; 5</span></span><br><span class=\"line\">  b; <span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a * b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">multiply(<span class=\"number\">5</span>); <span class=\"comment\">// =&gt; 10</span></span><br></pre></td></tr></table></figure>\n<p>函数只使用一个参数调用<code>multiply(5)</code>。最初，参数<code>a</code>为5，参数<code>b</code>为<code>undefined</code>。<br>利用条件语句验证<code>b</code>是否为<code>undefined</code>，如果是，<code>b=2</code>将赋予默认值。</p>\n<p>虽然提供的设置默认值方法是有效，但我不建议直接和<code>undefined</code>作比较。它有点冗余和看起来hack。</p>\n<p>更好的方法是使用ES2015的新特性：<a href=\"https://www.sitepoint.com/es6-default-parameters/\" target=\"_blank\" rel=\"noopener\">默认参数值</a>。它更简明，且没有直接与<code>undefined</code>比较。</p>\n<p>修改之前的例子，使之使用默认参数<code>b</code>。这看起来更好了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiply</span>(<span class=\"params\">a, b = <span class=\"number\">2</span></span>) </span>&#123;  </span><br><span class=\"line\">  a; <span class=\"comment\">// =&gt; 5</span></span><br><span class=\"line\">  b; <span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a * b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">multiply(<span class=\"number\">5</span>);            <span class=\"comment\">// =&gt; 10  </span></span><br><span class=\"line\">multiply(<span class=\"number\">5</span>, <span class=\"literal\">undefined</span>); <span class=\"comment\">// =&gt; 10</span></span><br></pre></td></tr></table></figure>\n<p>在<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Signature/Function\" target=\"_blank\" rel=\"noopener\">函数签名</a>中，<code>b=2</code>保证了当<code>b</code>为<code>undefined</code>时，参数能默认为<code>2</code>。</p>\n<p>ES2015的特性默认参数值直观且有表现能力，总是使用它，为可选参数设定默认值。</p>\n<h3 id=\"2-4函数返回值\"><a href=\"#2-4函数返回值\" class=\"headerlink\" title=\"2.4函数返回值\"></a>2.4函数返回值</h3><blockquote>\n<p><em>Implicitly, without <code>return</code> statement, a JavaScript function returns <code>undefined</code></em>.（没有<code>return</code>语句，javascript函数默认返回<code>undefined</code>）</p>\n</blockquote>\n<p>在javascript中，函数没有任何<code>return</code>语句，则默认返回<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">square(<span class=\"number\">2</span>); <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p>函数<code>square()</code>没有返回任何计算结果。所以调用函数的结果是<code>undefined</code>。</p>\n<p>当<code>return</code>语句存在，但后面没有任何表达式，将得到一样的结果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = x * x;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">square(<span class=\"number\">2</span>); <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p><code>return;</code>语句被执行，但它没有返回任何表达式。调用的结果依然是<code>undefined</code>。</p>\n<p>当然，如果指明<code>return</code>后的表达式，那将返回预期值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = x * x;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">square(<span class=\"number\">2</span>); <span class=\"comment\">// =&gt; 4</span></span><br></pre></td></tr></table></figure>\n<p>现在，函数调用的结果是<code>2</code>的平方<code>4</code>。</p>\n<p><strong>Tip7：不要相信会自动插入分号</strong></p>\n<p>在JavaScript中，下列语句必须要以分号(<code>;</code>)结束：</p>\n<ul>\n<li>空语句</li>\n<li><code>let</code>， <code>const</code>， <code>var</code>， <code>import</code>， <code>export</code>声明</li>\n<li>表达式语句</li>\n<li><code>debugger</code>语句</li>\n<li><code>continue</code>语句和<code>break</code>语句</li>\n<li><code>throw</code>语句</li>\n<li><code>return</code>语句</li>\n</ul>\n<p>如果你使用了上述的语句，请确保在句末指明一个分号。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNum</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"comment\">// Notice the semicolons at the end</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = <span class=\"number\">1</span>; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getNum(); <span class=\"comment\">// =&gt; 1</span></span><br></pre></td></tr></table></figure>\n<p>在<code>let</code>声明和<code>return</code>语句的最后，必须强制编写一个分号。</p>\n<p>当你不想指明这些分号，会发生什么事？例如，为了减少源文件的大小。</p>\n<p>在这种情况下，ECMAScript提供了<a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-automatic-semicolon-insertion\" target=\"_blank\" rel=\"noopener\">自动分号插入</a>(ASI)机制，它会自动插入你所缺失的分号。</p>\n<p>在ASI的帮助下，你可以对之前的例子删除分号：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNum</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"comment\">// Notice that semicolons are missing</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> num</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getNum() <span class=\"comment\">// =&gt; 1</span></span><br></pre></td></tr></table></figure>\n<p>上述的文本是有效的javascript代码，缺失的分号会自动插入。</p>\n<p>乍一看，它看起来很有前途，ASI机制可以让你跳过不必要的分号。您可以使JavaScript代码更小、更容易阅读。</p>\n<p>这是ASI的一个小而恼人的陷阱，当换行符在<code>return</code>和<code>return</code>的表达式之间时<code>return \\n expression</code>，ASI会自动在换行符前插入分号<code>return; \\n expression</code>。</p>\n<p>在函数中有语句<code>return;</code>代表什么？函数会返回<code>undefined</code>。如果你不是很清楚ASI机制的细节，意外返回的<code>undefined</code>是具有误导性的。</p>\n<p>例如，我们研究一下调用<code>getPrimeNumbers()</code>后的返回结果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPrimeNumbers</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> </span><br><span class=\"line\">    [ <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span> ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getPrimeNumbers() <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p>在<code>return</code>语句和数组字面量之间存在一个换行符，javascript会自动在<code>return</code>语句后插入分号，解析后的代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPrimeNumbers</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span>; </span><br><span class=\"line\">  [ <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span> ];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getPrimeNumbers(); <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p><code>return ;</code>语句使得<code>getPrimeNumbers()</code>函数返回<code>undefined</code>，而不是预期的数组。</p>\n<p>通过移除<code>return</code>语句和数组字面量之间的换行符可以解决这个问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPrimeNumbers</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> [ </span><br><span class=\"line\">    <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span> </span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getPrimeNumbers(); <span class=\"comment\">// =&gt; [2, 3, 5, 7, 11, 13, 17]</span></span><br></pre></td></tr></table></figure>\n<p>我的建议是确切地研究ASI的<a href=\"http://www.bradoncode.com/blog/2015/08/26/javascript-semi-colon-insertion/\" target=\"_blank\" rel=\"noopener\">工作原理</a>来避免这种情况。</p>\n<p>当然，绝不在<code>return</code>语句和返回表达式之间换行。</p>\n<h3 id=\"2-5-void运算符\"><a href=\"#2-5-void运算符\" class=\"headerlink\" title=\"2.5 void运算符\"></a>2.5 <code>void</code>运算符</h3><p><code>void expression</code>对给定的表达式进行求值，并无论结果是什么，都返回<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"number\">1</span>;                    <span class=\"comment\">// =&gt; undefined  </span></span><br><span class=\"line\"><span class=\"keyword\">void</span> (<span class=\"literal\">false</span>);              <span class=\"comment\">// =&gt; undefined  </span></span><br><span class=\"line\"><span class=\"keyword\">void</span> &#123;<span class=\"attr\">name</span>: <span class=\"string\">'John Smith'</span>&#125;; <span class=\"comment\">// =&gt; undefined  </span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"built_in\">Math</span>.min(<span class=\"number\">1</span>, <span class=\"number\">3</span>);       <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p><code>void</code>运算符的<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void#JavaScript_URIs\" target=\"_blank\" rel=\"noopener\">一个用例</a>是向期望一个表达式的值是undefined的地方，插入会产生副作用的表达式。</p>\n<h2 id=\"3-数组中的undefined\"><a href=\"#3-数组中的undefined\" class=\"headerlink\" title=\"3.数组中的undefined\"></a>3.数组中的<code>undefined</code></h2><p>当访问超过数组的边界索引的元素时，你会得到一个<code>undefined</code>值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> colors = [<span class=\"string\">'blue'</span>, <span class=\"string\">'white'</span>, <span class=\"string\">'red'</span>];  </span><br><span class=\"line\">colors[<span class=\"number\">5</span>];  <span class=\"comment\">// =&gt; undefined  </span></span><br><span class=\"line\">colors[<span class=\"number\">-1</span>]; <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p>数组<code>colors</code>有3个元素，他们的有效索引是<code>0</code>，<code>1</code>和<code>2</code>。</p>\n<p>因为没有数组元素的索引是<code>-1</code>和<code>5</code>，所以访问<code>colors[-1]</code>和<code>colors[5]</code>时返回<code>undefined</code>。</p>\n<p>在javascript中，你可能遇到过所谓的稀疏数组。这是有缺口的数组，即一些索引的元素没有定义。</p>\n<p>当在稀疏数组中访问一个缺口(也就是空隙)时，你也会得到<code>undefined</code>。</p>\n<p>下面的例子生成了稀疏数组，并尝试访问它们的空隙:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sparse1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>);  </span><br><span class=\"line\">sparse1;       <span class=\"comment\">// =&gt; [&lt;empty slot&gt;, &lt;empty slot&gt;, &lt;empty slot&gt;]  </span></span><br><span class=\"line\">sparse1[<span class=\"number\">0</span>];    <span class=\"comment\">// =&gt; undefined  </span></span><br><span class=\"line\">sparse1[<span class=\"number\">1</span>];    <span class=\"comment\">// =&gt; undefined  </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sparse2 = [<span class=\"string\">'white'</span>,  ,<span class=\"string\">'blue'</span>]  </span><br><span class=\"line\">sparse2;       <span class=\"comment\">// =&gt; ['white', &lt;empty slot&gt;, 'blue']  </span></span><br><span class=\"line\">sparse2[<span class=\"number\">1</span>];    <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p><code>sparse1</code>通过一个数字参数的数组构造函数的调用生成。它有3个空隙。</p>\n<p><code>sparse2</code>通过数组字面量生成，它缺少第二个元素。</p>\n<p>当使用数组时，为避免获取到<code>undefined</code>，请确保使用有效的数组索引，并避免创建稀疏数组.</p>\n<h2 id=\"4-undefined和null的区别\"><a href=\"#4-undefined和null的区别\" class=\"headerlink\" title=\"4.undefined和null的区别\"></a>4.<code>undefined</code>和<code>null</code>的区别</h2><p>一个合理的问题出现了:<code>undefined</code>和<code>null</code>之间的主要区别是什么?两个特殊值都表示一个空状态。</p>\n<p>主要的区别是，<code>undefined</code>代表一个没有初始化的变量的值，<code>null</code>表示有意缺失的对象。</p>\n<p>让我们在一些例子中探索这些区别：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> number;  </span><br><span class=\"line\">number; <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p>变量<code>number</code>是<code>undefined</code>，它清楚地表示一个未初始化的变量。</p>\n<p>未初始化的对象属性被访问时，同样未初始化的概念也会发生。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; <span class=\"attr\">firstName</span>: <span class=\"string\">'Dmitri'</span> &#125;;  </span><br><span class=\"line\">obj.lastName; <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p>因为对象<code>obj</code>中不存在属性<code>lastName</code>，Javascript正确地将<code>obj.lastName</code>定为<code>undefined</code>。</p>\n<p>在其他情况下，您知道一个变量期望是一个对象或一个函数会返回一个对象。但是出于某种原因，你不能实例化这个对象。在这种情况下，<code>null</code>是丢失对象的一个有意义的指示器。</p>\n<p>例如，函数<code>clone()</code>是用于克隆普通的对象，它预期返回一个对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">obj</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj === <span class=\"string\">'object'</span> &amp;&amp; obj !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">clone(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'John'</span>&#125;); <span class=\"comment\">// =&gt; &#123;name: 'John'&#125;  </span></span><br><span class=\"line\">clone(<span class=\"number\">15</span>);             <span class=\"comment\">// =&gt; null  </span></span><br><span class=\"line\">clone(<span class=\"literal\">null</span>);           <span class=\"comment\">// =&gt; null</span></span><br></pre></td></tr></table></figure>\n<p>然而，函数<code>clone()</code>可能会被非对象参数调用，像<code>5</code>或<code>null</code>（通常是原始值，<code>null</code>或<code>undefined</code>）.在这种情况下不可能生成一个克隆，因此它有理由返回<code>null</code> —— 缺失对象的指示器。</p>\n<p><code>typeof</code>操作符能对这两个值作出区别：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>; <span class=\"comment\">// =&gt; 'undefined'  </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>;      <span class=\"comment\">// =&gt; 'object'</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://rainsoft.io/the-legend-of-javascript-equality-operator/#theidentityoperator\" target=\"_blank\" rel=\"noopener\">严格比较运算符</a><code>===</code>能正确地区分<code>undefined</code>和<code>null</code>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nothing = undefined;  </span><br><span class=\"line\">let missingObject = null;  </span><br><span class=\"line\">nothing === missingObject; // =&gt; false</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5.总结\"></a>5.总结</h2><p><code>undefined</code>的存在是JavaScript的宽松本性的结果。它允许这些用法：</p>\n<ul>\n<li>未初始化变量</li>\n<li>不存在的对象属性或方法</li>\n<li>访问边界索引的数组元素</li>\n<li>不返回任何结果的函数的调用结果</li>\n</ul>\n<p>通常，直接与<code>undefined</code>的比较是一种不好的做法，因为您可能依赖于上面提到的一种允许但不鼓励的实践。</p>\n<p>一个有效的策略是尽可能减少代码中<code>undefined</code>关键字的出现。与此同时，要记住它的潜在出现，并通过应用好习惯来防止它的发生：</p>\n<ul>\n<li>减少未初始化变量的使用</li>\n<li>使变量生命周期缩短，并接近其使用源</li>\n<li>无论如何，尽可能给变量赋值</li>\n<li>支持<code>const</code>，否则使用<code>let</code></li>\n<li>为无关紧要的函数参数使用默认值</li>\n<li>验证属性是否存在，或者用默认属性填充不安全的对象</li>\n<li>避免使用稀疏数组</li>\n</ul>\n<p>你对javascript中的<code>undefined</code>有什么看法，请在下面的评论中畅所欲言。</p>\n<p>原文：<a href=\"https://rainsoft.io/7-tips-to-handle-undefined-in-javascript/\" target=\"_blank\" rel=\"noopener\">7 tips to handle undefined in JavaScript</a></p>\n<p>译者：cynthia</p>\n<p>作者：<a href=\"https://rainsoft.io/author/dmitri-pavlutin/\" target=\"_blank\" rel=\"noopener\">Dmitri Pavlutin</a></p>\n","site":{"data":{}},"excerpt":"<p>在8年前，我刚开始学习javascript时，让我觉得有点奇怪的是，<code>undefined</code>和<code>null</code>同样代表空值。它们之间是否有明确的不同？它们看起来都定义为“空”，此外，比较<code>null==undefined</code>的结果是<code>true</code>。</p>\n<p>大多数的现代语言如<code>Ruby</code>, <code>Python</code> 或<code>Java</code>只有一个空值(<code>nil</code>或<code>null</code>)，而这，似乎才是合理的。</p>","more":"<p>在javascript中，当访问一个尚未初始化的变量或对象属性时，解释器会返回<code>undefined</code>。如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> company;  </span><br><span class=\"line\">company;    <span class=\"comment\">// =&gt; undefined  </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'John Smith'</span> &#125;;  </span><br><span class=\"line\">person.age; <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p>另一方面，<code>null</code>代表一个缺失的对象引用。javascript自身不会将变量或对象属性设为<code>null</code>。<br>一些像<code>String.prototype.match()</code>的原生方法可以返回<code>null</code>以表示为缺失对象。看一下这个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = <span class=\"literal\">null</span>;  </span><br><span class=\"line\">array;                <span class=\"comment\">// =&gt; null  </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> movie = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Starship Troopers'</span>,  <span class=\"attr\">musicBy</span>: <span class=\"literal\">null</span> &#125;;  </span><br><span class=\"line\">movie.musicBy;        <span class=\"comment\">// =&gt; null  </span></span><br><span class=\"line\"><span class=\"string\">'abc'</span>.match(<span class=\"regexp\">/[0-9]/</span>); <span class=\"comment\">// =&gt; null</span></span><br></pre></td></tr></table></figure>\n<p>由于javascript是非常宽松的，所以开发者有可能访问到未初始化的值。我也有这样的坏习惯。</p>\n<p>通常这样冒险的行为会产生<code>undefined</code>的相关错误，从而导致脚本闪电般结束。常见的相关错误有：</p>\n<ul>\n<li><code>TypeError: &#39;undefined&#39; is not a function</code></li>\n<li><code>TypeError: Cannot read property &#39;&lt;prop-name&gt;&#39; of undefined</code></li>\n<li>类似的<em>类型错误</em>。</li>\n</ul>\n<p>JavaScript开发人员应该可以理解这个笑话里的讽刺：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">undefined</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"comment\">// problem solved</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为减少这类错误的风险，你必须了解<code>undefined</code>会在什么时候生成。更重要的是，要在你的程序中抑制它的出现和传播，以提高代码的健壮性。</p>\n<p>让我们详细地探明<code>undefined</code>对代码安全性的影响。</p>\n<h2 id=\"1-什么是undefined\"><a href=\"#1-什么是undefined\" class=\"headerlink\" title=\"1. 什么是undefined\"></a>1. 什么是<code>undefined</code></h2><p>javascript 有6种基本类型</p>\n<ul>\n<li><strong><em>Boolean</em></strong>: <code>true</code> or <code>false</code></li>\n<li><strong><em>Number</em></strong>: <code>1</code>, <code>6.7</code>, <code>0xFF</code></li>\n<li><strong><em>String</em></strong>: <code>&quot;Gorilla and banana&quot;</code></li>\n<li><strong><em>Symbol</em></strong>: <code>Symbol(&quot;name&quot;)</code> (始于ES2015)</li>\n<li><strong><em>Null</em></strong>: <code>null</code></li>\n<li><strong><em>Undefined</em></strong>: <code>undefined</code>.</li>\n</ul>\n<p>和一种单独的对象类型：<code>{name: &quot;Dmitri&quot;}, [&quot;apple&quot;, &quot;orange&quot;]</code></p>\n<p>在这6种基本类型中，<code>undefined</code>是一个特殊的值，它有自己的类型Undefined。<a href=\"https://www.ecma-international.org/ecma-262/7.0/#sec-undefined-value\" target=\"_blank\" rel=\"noopener\">根据ECMAScript规范</a>:</p>\n<blockquote>\n<p><strong>Undefined value</strong> primitive value is used when a variable has not been assigned a value.(当一个变量没有被赋值时，<code>undefined</code>值作为原始值使用。)</p>\n</blockquote>\n<p>规范明确定义了，在访问未初始化变量，不存在的对象属性，不存在的的数组元素等时，将得到<code>undefined</code>值。举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> number;  </span><br><span class=\"line\">number;     <span class=\"comment\">// =&gt; undefined  </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> movie = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Interstellar'</span> &#125;;  </span><br><span class=\"line\">movie.year; <span class=\"comment\">// =&gt; undefined  </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> movies = [<span class=\"string\">'Interstellar'</span>, <span class=\"string\">'Alexander'</span>];  </span><br><span class=\"line\">movies[<span class=\"number\">3</span>];  <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p>如上所示，当访问:</p>\n<ul>\n<li>一个<em>未初始化</em>变量 <code>number</code></li>\n<li>一个<em>不存在的</em>对象属性 <code>movie.year</code></li>\n<li>或一个<em>不存在的</em>数组元素 <code>movies[3]</code></li>\n</ul>\n<p>会被赋值为<code>undefined</code></p>\n<p>ECMAScript规范定义了<code>undefined</code>值的类型：</p>\n<blockquote>\n<p><strong>Undefined type</strong> is a type whose sole value is the <code>undefined</code> value.(Undefined类型的唯一值是<code>udnefined</code>)</p>\n</blockquote>\n<p>从这个意义上讲，用<code>typeof</code>运算符操作一个<code>undefined</code>值，返回<code>&#39;undefined&#39;</code>字符串。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span> === <span class=\"string\">'undefined'</span>; <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>当然，<code>typeof</code> 可以很好地验证一个变量是否为<code>undefined</code>值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> nothing;  </span><br><span class=\"line\"><span class=\"keyword\">typeof</span> nothing === <span class=\"string\">'undefined'</span>;   <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-生成undefined的常见场景\"><a href=\"#2-生成undefined的常见场景\" class=\"headerlink\" title=\"2. 生成undefined的常见场景\"></a>2. 生成<code>undefined</code>的常见场景</h2><h3 id=\"2-1未初始化变量\"><a href=\"#2-1未初始化变量\" class=\"headerlink\" title=\"2.1未初始化变量\"></a>2.1未初始化变量</h3><blockquote>\n<p>A declared variable that is not yet assigned with a value (<strong>uninitialized</strong>) is by default <code>undefined</code>.(一个未赋值(未初始化)的已声明的变量默认为<code>undefined</code>。)</p>\n</blockquote>\n<p>一个平淡朴素的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myVariable;  </span><br><span class=\"line\">myVariable; <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p><code>myVariable</code>已声明，但未赋值，访问该变量得到的值为<code>undefined</code>。</p>\n<p>解决未初始化变量问题的一个有效方法是尽可能的赋予初始值。在未初始化状态下的变量越少越好。理想情况是当你声明变量后应立刻赋值<code>const myVariable = &#39;Initial value&#39;</code>，但这并不总是可能的。</p>\n<p><strong>Tip 1：赞成使用<code>const</code>，其次<code>let</code>，告别<code>var</code></strong></p>\n<p>我认为，ECMAScript2015的最好的特性之一是使用<code>const</code>和<code>let</code>声明变量。这些声明是块级作用域（与旧的函数作用域的<code>var</code>相反），并且在声明语句前，变量都处于<a href=\"https://rainsoft.io/variables-lifecycle-and-why-let-is-not-hoisted/#5letvariableslifecycle\" target=\"_blank\" rel=\"noopener\">临时死区</a>，这是一个很大的进步。</p>\n<p>当一个变量只赋值一次，且不再改变时，我建议使用<code>const</code>声明。它创建了一个<a href=\"https://mathiasbynens.be/notes/es6-const\" target=\"_blank\" rel=\"noopener\">不可变的绑定关系</a>。</p>\n<p><code>const</code>的特征之一是，你必须给<em>变量赋值</em>，<code>const myVariable = &#39;initial&#39;</code>，该变量不会暴露在未初始化状态，所以是不可能访问到<code>undefined</code>。</p>\n<p>让我们检查一下这个函数，验证一个单词是否为回文:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPalindrome</span>(<span class=\"params\">word</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> length = word.length;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> half = <span class=\"built_in\">Math</span>.floor(length / <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; half; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (word[index] !== word[length - index - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">isPalindrome(<span class=\"string\">'madam'</span>); <span class=\"comment\">// =&gt; true  </span></span><br><span class=\"line\">isPalindrome(<span class=\"string\">'hello'</span>); <span class=\"comment\">// =&gt; false</span></span><br></pre></td></tr></table></figure>\n<p><code>length</code>和<code>half</code>只被赋值一次，因此这些变量不会改变，所以似乎有理由将它们声明为<code>const</code>。</p>\n<p>如果你需要重新绑定变量（即多次赋值），用<code>let</code>声明，无论如何尽可能给它赋予初始值，如<code>let index=0</code>.</p>\n<p>那旧的<code>var</code>了？就ES2015而言，我建议是<a href=\"https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75#.hvdxtd30t\" target=\"_blank\" rel=\"noopener\">停止使用它</a>。</p>\n<p><img src=\"/images/2017-05-20-7-tips-to-handle-undefined-in-JavaScript/1.png\" alt=\"忘记`var`，使用`const`或`let`\"></p>\n<p><code>var</code>声明的问题是，在整个函数作用域内的<a href=\"https://rainsoft.io/javascript-hoisting-in-details/#hoistingandvar\" target=\"_blank\" rel=\"noopener\">变量提升</a>。你在函数的尾部声明一个<code>var</code>变量，但仍可以在声明之前访问它：你将得到<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bigFunction</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"comment\">// code...</span></span><br><span class=\"line\">  myVariable; <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\">  <span class=\"comment\">// code...</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> myVariable = <span class=\"string\">'Initial value'</span>;</span><br><span class=\"line\">  <span class=\"comment\">// code...</span></span><br><span class=\"line\">  myVariable; <span class=\"comment\">// =&gt; 'Initial value'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bigFunction();</span><br></pre></td></tr></table></figure>\n<p><code>myVariable</code>是可以访问的，但在声明行<code>var myVariable = &#39;Initial value&#39;</code>之前为<code>undefined</code>。</p>\n<p>相反，一个<code>let</code>(包括<code>const</code>)变量在声明语句之前都无法访问。这是因为变量在声明之前处于<a href=\"https://rainsoft.io/variables-lifecycle-and-why-let-is-not-hoisted/#5letvariableslifecycle\" target=\"_blank\" rel=\"noopener\">临时死区</a>。这很好，因为你很少有机会得到<code>undefined</code>。</p>\n<p>将上面的例子改为<code>let</code>(而不是<code>var</code>)，会抛出<code>ReferenceError</code>，因为在临时死区的变量是不可访问的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bigFunction</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"comment\">// code...</span></span><br><span class=\"line\">  myVariable; <span class=\"comment\">// =&gt; Throws 'ReferenceError: myVariable is not defined'</span></span><br><span class=\"line\">  <span class=\"comment\">// code...</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> myVariable = <span class=\"string\">'Initial value'</span>;</span><br><span class=\"line\">  <span class=\"comment\">// code...</span></span><br><span class=\"line\">  myVariable; <span class=\"comment\">// =&gt; 'Initial value'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bigFunction();</span><br></pre></td></tr></table></figure>\n<p>进行不可变的绑定鼓励使用<code>const</code>，否则使用<code>let</code>，以确保尽可能少暴露未初始化变量。</p>\n<p><strong>Tip 2: 增强内聚</strong></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Cohesion_(computer_science\" target=\"_blank\" rel=\"noopener\">内聚</a>)描述了模块的元素(命名空间，类，方法，代码块)紧密联系的程度。对内聚的度量通常被描述为高内聚或低内聚。</p>\n<p>高内聚是可取的，因为它建议设计模块的元素时只关注单任务，它使得模块：</p>\n<ul>\n<li><em>专注和可理解的</em>：更容易理解模块所做的事情</li>\n<li><em>可维护和易于重构</em>：模块的更改影响更少的模块</li>\n<li><em>可重用</em>：专注于单个任务，使模块更易于重用</li>\n<li><em>可测试的</em>：您将更容易地测试一个专注于单一任务的模块</li>\n</ul>\n<p><img src=\"/images/2017-05-20-7-tips-to-handle-undefined-in-JavaScript/2.svg\" alt=\"高内聚\"></p>\n<p>高内聚和<a href=\"https://en.wikipedia.org/wiki/Loose_coupling\" target=\"_blank\" rel=\"noopener\">低耦合</a>是设计良好的系统的特点。</p>\n<p>代码块本身就可能被认为是一个小模块。为了从高内聚的好处中获益，你需要尽可能使变量靠近调用它的代码块。</p>\n<p>例如，一个变量只在某块级作用域中使用，那就声明并允许变量只在那个块（使用<code>const</code>或<code>let</code>声明），不要将这变量暴露给外部的块级作用域，因为外面的块级作用域并不关心这个变量。</p>\n<p>在函数中使用<code>for</code>循环是变量不必要延伸的典型例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someFunc</span>(<span class=\"params\">array</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">var</span> index, item, length = array.length;</span><br><span class=\"line\">  <span class=\"comment\">// some code...</span></span><br><span class=\"line\">  <span class=\"comment\">// some code...</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">    item = array[index];</span><br><span class=\"line\">    <span class=\"comment\">// some code...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'some result'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>index</code>，<code>item</code>，<code>length</code>在函数体的顶部就被声明，但它们却只在尾部时才被调用，那这种方法的有什么问题呢？</p>\n<p>在顶部的声明和<code>for</code>语句的使用之间，<code>index</code>，<code>item</code>，<code>length</code>都没有初始化，且暴露为<code>undefined</code>，它们在整个函数作用域内有一个很长的生命周期，这是不合理的。</p>\n<p>更好的方法是将这些变量尽可能地移到它们的使用位置附近：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someFunc</span>(<span class=\"params\">array</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"comment\">// some code...</span></span><br><span class=\"line\">  <span class=\"comment\">// some code...</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> length = array.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> item = array[index];</span><br><span class=\"line\">    <span class=\"comment\">// some </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'some result'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>index</code>，<code>item</code>只存在于<code>for</code>语句的块级作用域中，在<code>for</code>语句外它们没有任何意义。 </p>\n<p><code>length</code>也在接近其使用的源代码时才声明。</p>\n<p>为什么修改后的版本比初始版本更好？我们看：</p>\n<ul>\n<li>变量不会暴露为未初始化状态，那你就没有访问到<code>undefined</code>的风险。</li>\n<li>将变量尽可能地移动到它们的使用位置附近会增加代码的可读性。</li>\n<li>高内聚的代码块在必要时更易于重构和提取到单独的函数中。</li>\n</ul>\n<h3 id=\"2-2访问不存在的属性\"><a href=\"#2-2访问不存在的属性\" class=\"headerlink\" title=\"2.2访问不存在的属性\"></a>2.2访问不存在的属性</h3><blockquote>\n<p>When accessing a <strong><em>non-existing object property</em></strong>, JavaScript returns <code>undefined</code>.(当访问一个不存在的属性，javascript返回<code>undefined</code>)</p>\n</blockquote>\n<p>我们用例子演示一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> favoriteMovie = &#123;  </span><br><span class=\"line\">  title: <span class=\"string\">'Blade Runner'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">favoriteMovie.actors; <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p>对象<code>favoriteMovie</code>只有一个属性<code>title</code>，当使用属性访问器<code>favoriteMovie.actors</code>访问一个不存在的对象属性<code>actors</code>时将返回<code>undefined</code>。</p>\n<p>当访问一个不存在的属性时不会抛出错误。但试图从一个不存在的属性值中获取数据时，真正的问题就出现了。这是最常见的<code>undefined</code>的相关问题，这反映在众所周知的错误消息中：<code>TypeError: Cannot read property &lt;prop&gt; of undefined.</code></p>\n<p>让我们稍微修改前面的代码来说明<code>TypeError</code>的抛出：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> favoriteMovie = &#123;  </span><br><span class=\"line\">  title: <span class=\"string\">'Blade Runner'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">favoriteMovie.actors[<span class=\"number\">0</span>];  </span><br><span class=\"line\"><span class=\"comment\">// TypeError: Cannot read property '0' of undefined</span></span><br></pre></td></tr></table></figure>\n<p><code>favoriteMovie</code>没有属性<code>actors</code>，所以<code>favoriteMovie.actors</code>的值为<code>undefined</code>。</p>\n<p>因此，访问表达式<code>favoriteMovie.actors[0]</code>，即求<code>undefined</code>值的第一项，就会抛出<code>TypeError</code>异常。</p>\n<p>javascript允许访问不存在属性的宽容本质是混乱的来源：属性可能设置了，但也可能没有。绕过这个问题的理想方法是始终定义对象的属性以限制对象。</p>\n<p>不幸的是，你通常无法控制你所使用的对象。在不同的场景中，这些对象可能具有不同的属性集，所以你必须手动处理这些情况。</p>\n<p>让我们实现一个函数<code>append(array, toAppend)</code>，在数组的头部和/或尾部添加一个新元素，<code>toAppend</code>参数接受一个带有属性的对象。</p>\n<ul>\n<li><code>first</code>:要添加到数组头部的元素</li>\n<li><code>last</code>: 要添加到数组尾部的元素</li>\n</ul>\n<p>该函数返回一个新的数组实例，不改变原数组（即它是一个<a href=\"https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976#.tyinnrzbi\" target=\"_blank\" rel=\"noopener\">纯函数</a>）。</p>\n<p>第一个版本的<code>append()</code>，有些天真，看起来像这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">append</span>(<span class=\"params\">array, toAppend</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> arrayCopy = array.slice();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (toAppend.first) &#123;</span><br><span class=\"line\">    arrayCopy.unshift(toAppend.first);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (toAppend.last) &#123;</span><br><span class=\"line\">    arrayCopy.push(toAppend.last);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arrayCopy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">append([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], &#123; <span class=\"attr\">first</span>: <span class=\"number\">1</span>, <span class=\"attr\">last</span>: <span class=\"number\">5</span> &#125;); <span class=\"comment\">// =&gt; [1, 2, 3, 4, 5]  </span></span><br><span class=\"line\">append([<span class=\"string\">'Hello'</span>], &#123; <span class=\"attr\">last</span>: <span class=\"string\">'World'</span> &#125;);     <span class=\"comment\">// =&gt; ['Hello', 'World']  </span></span><br><span class=\"line\">append([<span class=\"number\">8</span>, <span class=\"number\">16</span>], &#123; <span class=\"attr\">first</span>: <span class=\"number\">4</span> &#125;);            <span class=\"comment\">// =&gt; [4, 8, 16]</span></span><br></pre></td></tr></table></figure>\n<p>因为对象<code>toAppend</code>可以省略属性<code>first</code>或<code>last</code>，所以必须检查这些属性是否存在于<code>toAppend</code>中。</p>\n<p>如果属性不存在，属性访问器则返回<code>undefined</code>，第一个诱惑出现，检查<code>first</code>和<code>last</code>属性是否存在,是通过验证它们是否为<code>undefined</code>。这我们在条件语句<code>if(toAppend.first){}</code>和<code>if(toAppend.last){}</code>中验证…</p>\n<p><em>没这么快</em>，这种方法有个严重的缺陷，<code>undefined</code>，以及<code>false</code>，<code>null</code>，<code>0</code>，<code>NaN</code>都是<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" target=\"_blank\" rel=\"noopener\">falsy</a>值。</p>\n<p>在<code>append()</code>的实现中，函数不允许插入假值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">append([<span class=\"number\">10</span>], &#123; <span class=\"attr\">first</span>: <span class=\"number\">0</span>, <span class=\"attr\">last</span>: <span class=\"literal\">false</span> &#125;); <span class=\"comment\">// =&gt; [10]</span></span><br></pre></td></tr></table></figure>\n<p><code>0</code>和<code>false</code>都为<em>falsy</em>，因为<code>if(toAppend.first){}</code> 和 <code>if(toAppend.last){}</code>实际上和<em>falsy</em>比较，因此元素并没有插入数组中，函数返回初始数组<code>[10]</code>，没有被修改。</p>\n<p>下面的提示解释了如何正确地检查属性的存在。</p>\n<p><strong>Tip 3:检查属性是否存在</strong></p>\n<p>幸运的是，javascript有一堆方法验证对象是否存在特殊属性</p>\n<ul>\n<li><code>obj.prop!==undefined</code>:直接和<code>undefined</code>作比较</li>\n<li><code>typeof obj.prop!==&#39;undefined&#39;</code>:验证属性值的类型</li>\n<li><code>obj.hasOwnProperty(&#39;prop&#39;)</code>: 验证属性是否为对象的自身属性</li>\n<li><code>&#39;prop&#39; in obj</code>: 验证属性是否为对象自身或继承的属性</li>\n</ul>\n<p>我的建议是使用<code>in</code>运算符，它是一个简短且亲切的语法。<code>in</code>运算符的存在表明了一个明确的意图，即检查对象是否具有特定的属性，而不访问实际的属性值。</p>\n<p><img src=\"/images/2017-05-20-7-tips-to-handle-undefined-in-JavaScript/3.png\" alt=\"为清晰的意图而偏爱明确的代码\"></p>\n<p><code>obj.hasOwnProperty(&#39;prop&#39;)</code>也是一个不错的选择，它稍微比<code>in</code>操作符长，且只验证对象的自身属性。</p>\n<p>那两种与<code>undefined</code>比较的方法可能有用…但对于我来说，<code>obj.prop !== undefined</code> 和 <code>typeof obj.prop !== &#39;undefined&#39;</code>看起来冗余且怪异，而且直接处理<code>undefined</code>是一种存疑的做法。</p>\n<p>让我们用<code>in</code>运算符改善一下<code>append(array，toAppend)</code>函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">append</span>(<span class=\"params\">array, toAppend</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> arrayCopy = array.slice();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">'first'</span> <span class=\"keyword\">in</span> toAppend) &#123;</span><br><span class=\"line\">    arrayCopy.unshift(toAppend.first);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">'last'</span> <span class=\"keyword\">in</span> toAppend) &#123;</span><br><span class=\"line\">    arrayCopy.push(toAppend.last);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arrayCopy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">append([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], &#123; <span class=\"attr\">first</span>: <span class=\"number\">1</span>, <span class=\"attr\">last</span>: <span class=\"number\">5</span> &#125;); <span class=\"comment\">// =&gt; [1, 2, 3, 4, 5]  </span></span><br><span class=\"line\">append([<span class=\"number\">10</span>], &#123; <span class=\"attr\">first</span>: <span class=\"number\">0</span>, <span class=\"attr\">last</span>: <span class=\"literal\">false</span> &#125;);  <span class=\"comment\">// =&gt; [0, 10, false]</span></span><br></pre></td></tr></table></figure>\n<p>当相应的属性存在，<code>&#39;first&#39; in toAppend</code> (和 <code>&#39;last&#39; in toAppend</code>)为<code>true</code>，否则为<code>false</code>。</p>\n<p><code>in</code>运算符的使用解决了插入<em>falsy</em>元素<code>0</code>或<code>false</code>的问题。现在，插入这些元素在<code>[10]</code>的头部和尾部得到了预期的结果<code>[0, 10, false]</code>。</p>\n<p><strong>Tip 4: 解构访问对象属性</strong></p>\n<p>当访问一个对象属性时，有时如果属性不存在，则需要指出默认值。</p>\n<p>你可以用三元运算符实现它：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> object = &#123; &#125;;  </span><br><span class=\"line\"><span class=\"keyword\">const</span> prop = <span class=\"string\">'prop'</span> <span class=\"keyword\">in</span> object ? object.prop : <span class=\"string\">'default'</span>;  </span><br><span class=\"line\">prop; <span class=\"comment\">// =&gt; 'default'</span></span><br></pre></td></tr></table></figure>\n<p>当要检查的属性数量增加时，三元运算符语法的使用会变得令人生畏。对于每个属性，您必须创建一个新的代码行来处理默认值。这类似的三元运算符的使用是丑陋的。</p>\n<p>为了使用一种更优雅的方法，我们需要熟悉一下ES2015的新特征：<em>对象解构</em>（object destructuring）。</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring\" target=\"_blank\" rel=\"noopener\">对象解构</a>允许将值从对象属性直接提取到变量中，并在属性不存在时设置默认值，是一种避免直接处理<code>undefined</code>的方法。</p>\n<p>实际上，现在的属性提取看起来很短，更有意义：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> object = &#123;&#125;;  </span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; prop = <span class=\"string\">'default'</span> &#125; = object;  </span><br><span class=\"line\">prop; <span class=\"comment\">// =&gt; 'default'</span></span><br></pre></td></tr></table></figure>\n<p>为观察事情的运行，让我们定义了一个有用的函数，它将字符串包含在引号中。<code>quote(subject, config)</code>接受第一个参数作为被包含的字符串，第二个参数<code>config</code>是一个对象，有这些属性：</p>\n<ul>\n<li><code>char</code>: 引号字符，如<code>&#39;</code>（单字符）或<code>&quot;</code>（双字符），默认<code>&quot;</code>。</li>\n<li><code>skipIfQuoted</code>: boolean值，确认当字符串已经被引用，是否跳过引用，默认是<code>true</code>。</li>\n</ul>\n<p>应用对象解构的好处，让我们实现<code>quote()</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quote</span>(<span class=\"params\">str, config</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; char = <span class=\"string\">'\"'</span>, skipIfQuoted = <span class=\"literal\">true</span> &#125; = config;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> length = str.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (skipIfQuoted</span><br><span class=\"line\">      &amp;&amp; str[<span class=\"number\">0</span>] === char</span><br><span class=\"line\">      &amp;&amp; str[length - <span class=\"number\">1</span>] === char) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> char + str + char;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">quote(<span class=\"string\">'Hello World'</span>, &#123; <span class=\"attr\">char</span>: <span class=\"string\">'*'</span> &#125;);        <span class=\"comment\">// =&gt; '*Hello World*'  </span></span><br><span class=\"line\">quote(<span class=\"string\">'\"Welcome\"'</span>, &#123; <span class=\"attr\">skipIfQuoted</span>: <span class=\"literal\">true</span> &#125;); <span class=\"comment\">// =&gt; '\"Welcome\"'</span></span><br></pre></td></tr></table></figure>\n<p>一行代码<code>const { char = &#39;&quot;&#39;, skipIfQuoted = true } = config</code>完成了从<code>config</code>中提取属性<code>char</code>和<code>skipIfQuoted</code>的解构赋值。<br>如果<code>config</code>对象中没有对应的属性，解构赋值会设置默认值，<code>char</code>为<code>&quot;</code>，<code>skipIfQuoted</code>为<code>false</code>(译者注：原文应该是写错了，应该是<code>true</code>)。</p>\n<p>幸运的是，这个函数还有空间改进。</p>\n<p>让我们将解构赋值移到参数部分。且给<code>config</code>参数设置一个默认值（一个空对象<code>{}</code>）.当默认设置够用时，跳过第二个参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quote</span>(<span class=\"params\">str, &#123; char = <span class=\"string\">'\"'</span>, skipIfQuoted = true &#125; = &#123;&#125;</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> length = str.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (skipIfQuoted</span><br><span class=\"line\">      &amp;&amp; str[<span class=\"number\">0</span>] === char</span><br><span class=\"line\">      &amp;&amp; str[length - <span class=\"number\">1</span>] === char) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> char + str + char;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">quote(<span class=\"string\">'Hello World'</span>, &#123; <span class=\"attr\">char</span>: <span class=\"string\">'*'</span> &#125;); <span class=\"comment\">// =&gt; '*Hello World*'  </span></span><br><span class=\"line\">quote(<span class=\"string\">'Sunny day'</span>);                  <span class=\"comment\">// =&gt; '\"Sunny day\"'</span></span><br></pre></td></tr></table></figure>\n<p>注意，在函数签名时解构赋值替代了<code>config</code>参数。我喜欢这，因为<code>quote()</code>短了一行。<br><code>={}</code>在解构赋值的右侧，保证了当第二个参数完全没有指定时，如<code>quote(&#39;Sunny day&#39;)</code>，一个空对象能起效。</p>\n<p>对象解构是一种功能强大的特性，可以有效地处理对象的属性。我喜欢在访问的属性不存在时指定一个默认值作为返回值。这样，您可以避免和处理<code>undefined</code>的问题。</p>\n<p><strong>Tip 5：使用默认属性填充对象</strong></p>\n<p>如果没有像解析赋值那样为每个属性创建一个变量的必要的话，可以用默认值覆盖缺失某些属性的对象。</p>\n<p>ES2015的<code>Object.assign(target, source1, source2, ...)</code>方法用于将所有可枚举的属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</p>\n<p>例如，你需要访问对象<code>unsafeOptions</code>的属性，但它并不总是包含全部属性。</p>\n<p>当从<code>unsafeOptions</code>访问不存在属性的时候，为避免<code>undefined</code>,我们需要做一些调整：</p>\n<ul>\n<li>定义一个对象<code>defaults</code>，它包含所有默认属性。</li>\n<li>调用<code>Object.assign({ }, defaults, unsafeOptions)</code>生成一个新的对象<code>options</code>。这个新对象接收<code>unsafeOptions</code>的所有属性，缺失的属性从<code>defaults</code>中获得。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unsafeOptions = &#123;  </span><br><span class=\"line\">  fontSize: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> defaults = &#123;  </span><br><span class=\"line\">  fontSize: <span class=\"number\">16</span>,</span><br><span class=\"line\">  color: <span class=\"string\">'black'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> options = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, defaults, unsafeOptions);  </span><br><span class=\"line\">options.fontSize; <span class=\"comment\">// =&gt; 18  </span></span><br><span class=\"line\">options.color;    <span class=\"comment\">// =&gt; 'black'</span></span><br></pre></td></tr></table></figure>\n<p><code>unsafeOptions</code>只包含属性<code>fontSize</code>，对象<code>defaults</code>定义了属性<code>fontSize</code>和<code>color</code>的默认值。</p>\n<p><code>Object.assign()</code>的第一个参数作为目标对象<code>{}</code>，目标对象从源对象<code>unsafeOptions</code>中获得属性<code>fontSize</code>的值，从源对象<code>default</code>中获得属性<code>color</code>的值，这是因为<code>unsafeOptions</code>没有包含<code>color</code>。<br>枚举源对象的顺序是很重要的：后面的源对象的相同属性会覆盖前者的。</p>\n<p>你现在可以安全地访问<code>options</code>里的任何属性，包括最初不能在<code>unsafeOptions</code>中访问的<code>options.color</code>。</p>\n<p>幸运的是，存在一种更简单、更轻松的方法来填充对象的默认属性。我建议使用一个新的JavaScript特性(现在在<a href=\"https://tc39.github.io/process-document/\" target=\"_blank\" rel=\"noopener\">阶段3</a>)，它允许<a href=\"https://github.com/tc39/proposal-object-rest-spread\" target=\"_blank\" rel=\"noopener\">在对象初始化器中扩展属性</a>.</p>\n<p>不是调用<code>Object.assign()</code>，而是用对象扩展语句，从源对象中复制自身的所有可枚举的属性到目标对象中:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> unsafeOptions = &#123;  </span><br><span class=\"line\">  fontSize: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> defaults = &#123;  </span><br><span class=\"line\">  fontSize: <span class=\"number\">16</span>,</span><br><span class=\"line\">  color: <span class=\"string\">'black'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;  </span><br><span class=\"line\">  ...defaults,</span><br><span class=\"line\">  ...unsafeOptions</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">options.fontSize; <span class=\"comment\">// =&gt; 18  </span></span><br><span class=\"line\">options.color;    <span class=\"comment\">// =&gt; 'black'</span></span><br></pre></td></tr></table></figure>\n<p>对象初始化器从源对象<code>defaults</code>和<code>unsafeOptions</code>中扩展属性。指定的源对象的顺序很重要：后面的源对象的属性会覆盖前者的。</p>\n<p>用默认的属性值填充一个不完整的对象是一种有效的策略，可以使您的代码更安全、更健壮。无论什么情况，对象总要包含完整的属性集：那<code>undefined</code>不会生成。</p>\n<h3 id=\"2-3-函数参数\"><a href=\"#2-3-函数参数\" class=\"headerlink\" title=\"2.3 函数参数\"></a>2.3 函数参数</h3><blockquote>\n<p>The function parameters implicitly default to <code>undefined</code>.（函数参数隐式默认为<code>undefined</code>）</p>\n</blockquote>\n<p>通常，一个用特定数量的参数定义的函数应该用相同数量的参数来调用。在这种情况下，参数得到您所期望的值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiply</span>(<span class=\"params\">a, b</span>) </span>&#123;  </span><br><span class=\"line\">  a; <span class=\"comment\">// =&gt; 5</span></span><br><span class=\"line\">  b; <span class=\"comment\">// =&gt; 3</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a * b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">multiply(<span class=\"number\">5</span>, <span class=\"number\">3</span>); <span class=\"comment\">// =&gt; 15</span></span><br></pre></td></tr></table></figure>\n<p>调用<code>multiply(5, 3)</code>使得参数<code>a</code>和<code>b</code>得到相应的值<code>5</code>和<code>3</code>。乘法按预期计算：<code>5 * 3 = 15</code>。</p>\n<p>当你在调用时省略一个参数会发生什么事？函数内的参数会变成<code>undefined</code>。</p>\n<p>让我们稍微改动一下之前的例子，使之只用一个参数调用函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiply</span>(<span class=\"params\">a, b</span>) </span>&#123;  </span><br><span class=\"line\">  a; <span class=\"comment\">// =&gt; 5</span></span><br><span class=\"line\">  b; <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a * b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">multiply(<span class=\"number\">5</span>); <span class=\"comment\">// =&gt; NaN</span></span><br></pre></td></tr></table></figure>\n<p><code>function multiply(a, b) { }</code>含有两个参数<code>a</code>和<code>b</code>。<br><code>multiply(5)</code>的调用却只用一个参数执行：所以参数<code>a</code>为<code>5</code>，参数<code>b</code>为<code>undefined</code>。</p>\n<p><strong>Tip 6：使用默认参数值</strong></p>\n<p>有时，函数调用并不要求全部参数，你可以简单地为一些没有值的参数设定默认值。</p>\n<p>回到之前的例子，让我们做一些改善。如果参数<code>b</code>是<code>undefined</code>的话，我们为之设定默认值<code>2</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiply</span>(<span class=\"params\">a, b</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (b === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  a; <span class=\"comment\">// =&gt; 5</span></span><br><span class=\"line\">  b; <span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a * b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">multiply(<span class=\"number\">5</span>); <span class=\"comment\">// =&gt; 10</span></span><br></pre></td></tr></table></figure>\n<p>函数只使用一个参数调用<code>multiply(5)</code>。最初，参数<code>a</code>为5，参数<code>b</code>为<code>undefined</code>。<br>利用条件语句验证<code>b</code>是否为<code>undefined</code>，如果是，<code>b=2</code>将赋予默认值。</p>\n<p>虽然提供的设置默认值方法是有效，但我不建议直接和<code>undefined</code>作比较。它有点冗余和看起来hack。</p>\n<p>更好的方法是使用ES2015的新特性：<a href=\"https://www.sitepoint.com/es6-default-parameters/\" target=\"_blank\" rel=\"noopener\">默认参数值</a>。它更简明，且没有直接与<code>undefined</code>比较。</p>\n<p>修改之前的例子，使之使用默认参数<code>b</code>。这看起来更好了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiply</span>(<span class=\"params\">a, b = <span class=\"number\">2</span></span>) </span>&#123;  </span><br><span class=\"line\">  a; <span class=\"comment\">// =&gt; 5</span></span><br><span class=\"line\">  b; <span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a * b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">multiply(<span class=\"number\">5</span>);            <span class=\"comment\">// =&gt; 10  </span></span><br><span class=\"line\">multiply(<span class=\"number\">5</span>, <span class=\"literal\">undefined</span>); <span class=\"comment\">// =&gt; 10</span></span><br></pre></td></tr></table></figure>\n<p>在<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Signature/Function\" target=\"_blank\" rel=\"noopener\">函数签名</a>中，<code>b=2</code>保证了当<code>b</code>为<code>undefined</code>时，参数能默认为<code>2</code>。</p>\n<p>ES2015的特性默认参数值直观且有表现能力，总是使用它，为可选参数设定默认值。</p>\n<h3 id=\"2-4函数返回值\"><a href=\"#2-4函数返回值\" class=\"headerlink\" title=\"2.4函数返回值\"></a>2.4函数返回值</h3><blockquote>\n<p><em>Implicitly, without <code>return</code> statement, a JavaScript function returns <code>undefined</code></em>.（没有<code>return</code>语句，javascript函数默认返回<code>undefined</code>）</p>\n</blockquote>\n<p>在javascript中，函数没有任何<code>return</code>语句，则默认返回<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">square(<span class=\"number\">2</span>); <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p>函数<code>square()</code>没有返回任何计算结果。所以调用函数的结果是<code>undefined</code>。</p>\n<p>当<code>return</code>语句存在，但后面没有任何表达式，将得到一样的结果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = x * x;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">square(<span class=\"number\">2</span>); <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p><code>return;</code>语句被执行，但它没有返回任何表达式。调用的结果依然是<code>undefined</code>。</p>\n<p>当然，如果指明<code>return</code>后的表达式，那将返回预期值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = x * x;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">square(<span class=\"number\">2</span>); <span class=\"comment\">// =&gt; 4</span></span><br></pre></td></tr></table></figure>\n<p>现在，函数调用的结果是<code>2</code>的平方<code>4</code>。</p>\n<p><strong>Tip7：不要相信会自动插入分号</strong></p>\n<p>在JavaScript中，下列语句必须要以分号(<code>;</code>)结束：</p>\n<ul>\n<li>空语句</li>\n<li><code>let</code>， <code>const</code>， <code>var</code>， <code>import</code>， <code>export</code>声明</li>\n<li>表达式语句</li>\n<li><code>debugger</code>语句</li>\n<li><code>continue</code>语句和<code>break</code>语句</li>\n<li><code>throw</code>语句</li>\n<li><code>return</code>语句</li>\n</ul>\n<p>如果你使用了上述的语句，请确保在句末指明一个分号。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNum</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"comment\">// Notice the semicolons at the end</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = <span class=\"number\">1</span>; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getNum(); <span class=\"comment\">// =&gt; 1</span></span><br></pre></td></tr></table></figure>\n<p>在<code>let</code>声明和<code>return</code>语句的最后，必须强制编写一个分号。</p>\n<p>当你不想指明这些分号，会发生什么事？例如，为了减少源文件的大小。</p>\n<p>在这种情况下，ECMAScript提供了<a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-automatic-semicolon-insertion\" target=\"_blank\" rel=\"noopener\">自动分号插入</a>(ASI)机制，它会自动插入你所缺失的分号。</p>\n<p>在ASI的帮助下，你可以对之前的例子删除分号：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNum</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"comment\">// Notice that semicolons are missing</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> num</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getNum() <span class=\"comment\">// =&gt; 1</span></span><br></pre></td></tr></table></figure>\n<p>上述的文本是有效的javascript代码，缺失的分号会自动插入。</p>\n<p>乍一看，它看起来很有前途，ASI机制可以让你跳过不必要的分号。您可以使JavaScript代码更小、更容易阅读。</p>\n<p>这是ASI的一个小而恼人的陷阱，当换行符在<code>return</code>和<code>return</code>的表达式之间时<code>return \\n expression</code>，ASI会自动在换行符前插入分号<code>return; \\n expression</code>。</p>\n<p>在函数中有语句<code>return;</code>代表什么？函数会返回<code>undefined</code>。如果你不是很清楚ASI机制的细节，意外返回的<code>undefined</code>是具有误导性的。</p>\n<p>例如，我们研究一下调用<code>getPrimeNumbers()</code>后的返回结果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPrimeNumbers</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> </span><br><span class=\"line\">    [ <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span> ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getPrimeNumbers() <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p>在<code>return</code>语句和数组字面量之间存在一个换行符，javascript会自动在<code>return</code>语句后插入分号，解析后的代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPrimeNumbers</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span>; </span><br><span class=\"line\">  [ <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span> ];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getPrimeNumbers(); <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p><code>return ;</code>语句使得<code>getPrimeNumbers()</code>函数返回<code>undefined</code>，而不是预期的数组。</p>\n<p>通过移除<code>return</code>语句和数组字面量之间的换行符可以解决这个问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPrimeNumbers</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> [ </span><br><span class=\"line\">    <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span> </span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getPrimeNumbers(); <span class=\"comment\">// =&gt; [2, 3, 5, 7, 11, 13, 17]</span></span><br></pre></td></tr></table></figure>\n<p>我的建议是确切地研究ASI的<a href=\"http://www.bradoncode.com/blog/2015/08/26/javascript-semi-colon-insertion/\" target=\"_blank\" rel=\"noopener\">工作原理</a>来避免这种情况。</p>\n<p>当然，绝不在<code>return</code>语句和返回表达式之间换行。</p>\n<h3 id=\"2-5-void运算符\"><a href=\"#2-5-void运算符\" class=\"headerlink\" title=\"2.5 void运算符\"></a>2.5 <code>void</code>运算符</h3><p><code>void expression</code>对给定的表达式进行求值，并无论结果是什么，都返回<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"number\">1</span>;                    <span class=\"comment\">// =&gt; undefined  </span></span><br><span class=\"line\"><span class=\"keyword\">void</span> (<span class=\"literal\">false</span>);              <span class=\"comment\">// =&gt; undefined  </span></span><br><span class=\"line\"><span class=\"keyword\">void</span> &#123;<span class=\"attr\">name</span>: <span class=\"string\">'John Smith'</span>&#125;; <span class=\"comment\">// =&gt; undefined  </span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"built_in\">Math</span>.min(<span class=\"number\">1</span>, <span class=\"number\">3</span>);       <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p><code>void</code>运算符的<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void#JavaScript_URIs\" target=\"_blank\" rel=\"noopener\">一个用例</a>是向期望一个表达式的值是undefined的地方，插入会产生副作用的表达式。</p>\n<h2 id=\"3-数组中的undefined\"><a href=\"#3-数组中的undefined\" class=\"headerlink\" title=\"3.数组中的undefined\"></a>3.数组中的<code>undefined</code></h2><p>当访问超过数组的边界索引的元素时，你会得到一个<code>undefined</code>值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> colors = [<span class=\"string\">'blue'</span>, <span class=\"string\">'white'</span>, <span class=\"string\">'red'</span>];  </span><br><span class=\"line\">colors[<span class=\"number\">5</span>];  <span class=\"comment\">// =&gt; undefined  </span></span><br><span class=\"line\">colors[<span class=\"number\">-1</span>]; <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p>数组<code>colors</code>有3个元素，他们的有效索引是<code>0</code>，<code>1</code>和<code>2</code>。</p>\n<p>因为没有数组元素的索引是<code>-1</code>和<code>5</code>，所以访问<code>colors[-1]</code>和<code>colors[5]</code>时返回<code>undefined</code>。</p>\n<p>在javascript中，你可能遇到过所谓的稀疏数组。这是有缺口的数组，即一些索引的元素没有定义。</p>\n<p>当在稀疏数组中访问一个缺口(也就是空隙)时，你也会得到<code>undefined</code>。</p>\n<p>下面的例子生成了稀疏数组，并尝试访问它们的空隙:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sparse1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>);  </span><br><span class=\"line\">sparse1;       <span class=\"comment\">// =&gt; [&lt;empty slot&gt;, &lt;empty slot&gt;, &lt;empty slot&gt;]  </span></span><br><span class=\"line\">sparse1[<span class=\"number\">0</span>];    <span class=\"comment\">// =&gt; undefined  </span></span><br><span class=\"line\">sparse1[<span class=\"number\">1</span>];    <span class=\"comment\">// =&gt; undefined  </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sparse2 = [<span class=\"string\">'white'</span>,  ,<span class=\"string\">'blue'</span>]  </span><br><span class=\"line\">sparse2;       <span class=\"comment\">// =&gt; ['white', &lt;empty slot&gt;, 'blue']  </span></span><br><span class=\"line\">sparse2[<span class=\"number\">1</span>];    <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p><code>sparse1</code>通过一个数字参数的数组构造函数的调用生成。它有3个空隙。</p>\n<p><code>sparse2</code>通过数组字面量生成，它缺少第二个元素。</p>\n<p>当使用数组时，为避免获取到<code>undefined</code>，请确保使用有效的数组索引，并避免创建稀疏数组.</p>\n<h2 id=\"4-undefined和null的区别\"><a href=\"#4-undefined和null的区别\" class=\"headerlink\" title=\"4.undefined和null的区别\"></a>4.<code>undefined</code>和<code>null</code>的区别</h2><p>一个合理的问题出现了:<code>undefined</code>和<code>null</code>之间的主要区别是什么?两个特殊值都表示一个空状态。</p>\n<p>主要的区别是，<code>undefined</code>代表一个没有初始化的变量的值，<code>null</code>表示有意缺失的对象。</p>\n<p>让我们在一些例子中探索这些区别：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> number;  </span><br><span class=\"line\">number; <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p>变量<code>number</code>是<code>undefined</code>，它清楚地表示一个未初始化的变量。</p>\n<p>未初始化的对象属性被访问时，同样未初始化的概念也会发生。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; <span class=\"attr\">firstName</span>: <span class=\"string\">'Dmitri'</span> &#125;;  </span><br><span class=\"line\">obj.lastName; <span class=\"comment\">// =&gt; undefined</span></span><br></pre></td></tr></table></figure>\n<p>因为对象<code>obj</code>中不存在属性<code>lastName</code>，Javascript正确地将<code>obj.lastName</code>定为<code>undefined</code>。</p>\n<p>在其他情况下，您知道一个变量期望是一个对象或一个函数会返回一个对象。但是出于某种原因，你不能实例化这个对象。在这种情况下，<code>null</code>是丢失对象的一个有意义的指示器。</p>\n<p>例如，函数<code>clone()</code>是用于克隆普通的对象，它预期返回一个对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">obj</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj === <span class=\"string\">'object'</span> &amp;&amp; obj !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">clone(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'John'</span>&#125;); <span class=\"comment\">// =&gt; &#123;name: 'John'&#125;  </span></span><br><span class=\"line\">clone(<span class=\"number\">15</span>);             <span class=\"comment\">// =&gt; null  </span></span><br><span class=\"line\">clone(<span class=\"literal\">null</span>);           <span class=\"comment\">// =&gt; null</span></span><br></pre></td></tr></table></figure>\n<p>然而，函数<code>clone()</code>可能会被非对象参数调用，像<code>5</code>或<code>null</code>（通常是原始值，<code>null</code>或<code>undefined</code>）.在这种情况下不可能生成一个克隆，因此它有理由返回<code>null</code> —— 缺失对象的指示器。</p>\n<p><code>typeof</code>操作符能对这两个值作出区别：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>; <span class=\"comment\">// =&gt; 'undefined'  </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>;      <span class=\"comment\">// =&gt; 'object'</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://rainsoft.io/the-legend-of-javascript-equality-operator/#theidentityoperator\" target=\"_blank\" rel=\"noopener\">严格比较运算符</a><code>===</code>能正确地区分<code>undefined</code>和<code>null</code>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nothing = undefined;  </span><br><span class=\"line\">let missingObject = null;  </span><br><span class=\"line\">nothing === missingObject; // =&gt; false</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5.总结\"></a>5.总结</h2><p><code>undefined</code>的存在是JavaScript的宽松本性的结果。它允许这些用法：</p>\n<ul>\n<li>未初始化变量</li>\n<li>不存在的对象属性或方法</li>\n<li>访问边界索引的数组元素</li>\n<li>不返回任何结果的函数的调用结果</li>\n</ul>\n<p>通常，直接与<code>undefined</code>的比较是一种不好的做法，因为您可能依赖于上面提到的一种允许但不鼓励的实践。</p>\n<p>一个有效的策略是尽可能减少代码中<code>undefined</code>关键字的出现。与此同时，要记住它的潜在出现，并通过应用好习惯来防止它的发生：</p>\n<ul>\n<li>减少未初始化变量的使用</li>\n<li>使变量生命周期缩短，并接近其使用源</li>\n<li>无论如何，尽可能给变量赋值</li>\n<li>支持<code>const</code>，否则使用<code>let</code></li>\n<li>为无关紧要的函数参数使用默认值</li>\n<li>验证属性是否存在，或者用默认属性填充不安全的对象</li>\n<li>避免使用稀疏数组</li>\n</ul>\n<p>你对javascript中的<code>undefined</code>有什么看法，请在下面的评论中畅所欲言。</p>\n<p>原文：<a href=\"https://rainsoft.io/7-tips-to-handle-undefined-in-javascript/\" target=\"_blank\" rel=\"noopener\">7 tips to handle undefined in JavaScript</a></p>\n<p>译者：cynthia</p>\n<p>作者：<a href=\"https://rainsoft.io/author/dmitri-pavlutin/\" target=\"_blank\" rel=\"noopener\">Dmitri Pavlutin</a></p>"},{"title":"【译】Node.js之对象流（Stream）权威指南","date":"2017-05-21T06:00:00.000Z","author":"Jin","_content":"\nNode.js的`Srtream`具有强大的功能：你可以使用异步的方式处理输入和输出，可以根据所依赖的步骤来对数据进行转换。**本教程中，我将带你熟悉理论，并教你如何灵活使用`Stream`对象，就像使用`Gulp`一样。**\n\n***\n\n当我在写一本名为 [《前端工具之Gulp，Brower和Yeoman》](https://www.manning.com/books/front-end-tooling-with-gulp-bower-and-yeoman/?a_aid=fettblog&a_bid=238ac06a) 的书时，我决定不仅要展示API和使用案例，还需要关注以下的概念。\n\n\n你要知道特别是在JavaScript中，工具和框架的更新换代比你为它们注册域名和创建Github团队的速度还要快。**例如[Gulp.js](http://gulpjs.com/)，最重要的一个概念是流！**\n\n<!-- more -->\n\n## 约50年的流\n在`Gulp`里，你想要读取一些文件的数据转换为指定的数据输出，加载一些`JavaScript`文件并打包成一个文件。这些操作`Gulp`的API已经提供了一些方法来读取，转换，和写入文件，所有的这些方法都是基于流来实现的。\n\n>  在计算机中流是一个很老的概念，,源自1960年代早期Unix。\n\n“流是一个数据随着时间序列从源到目的地的过程。“ @ddprrt\n\n数据源的类型是多样化的：文件，计算机内存或者像键盘，鼠标之类的输入设备。\n\n流一旦被打开，数据就会从原点开始分割成一块块的小的数据进行传输然后消费。输入一个文件，每个字符或者字节都会被读取一次；键盘输入，每个按键将传输数据流。\n\n>  最大的优势在于一次加载所有数据,理论上,输入可以无限输入的完全没有限制。\n\n来至键盘的任意一个输入都是有意义的 —— 为什么你应该通过键盘输入控制电脑关闭输入流？\n\n输入流统称为**可读流**，这意味着它们从原点读取数据。另一方面，有输出流和终点；它们可能是文件或者某一段内存，一般输出设备可以是命令行，打印机，或屏幕之类的。\n\n它们统称为**输出流值**，意味着它们存储来着流的数据。下图说明了流是如何工作的。\n\n![流](/images/2017-05-21-object-streams-in-nodejs/01.jpg)\n\n数据是由一组可用的元素组成的序列（就像字符或者字节）。\n\n可读流可以来自不同的来源，例如输入设备（键盘），文件，内存里面的数据。可写流可以任意的终点，例如文件和内存，以及众所周知的命令行。\n\n\n可读和可写流可以互换：键盘输入可以保存在文件中,命令行输入可以作为文件的输入流。\n\n它不仅可以有无尽的输入，而且你可以结合不同的可读和可写流。关键的输入可以直接存储到一个文件中，或者你可以通过命令行和打印机打印文件。接口保持不变，无论来源或目的地是什么。\n\n在Node.js最简单的涉及到把流的从标准输入转换到标准输出的程序例子，使用控制台：\n\n```js\nprocess.stdin.pipe(process.stdout); \n```\n\n我们把我们的可读流（`process.stdin`）把它转换到可写流（`process.stdout`）上。在这之前，我们可以把任意的流内容从任意的原点转换到任意的终点。\n\n\n就以[request](https://www.npmjs.com/package/request)包为例，我们可以使用它向指定的`URL`发送`http`请求。为什么不从网上来取一些页面并且使用`process.stdin`把它打印出来？\n\n```js\nconst request = require('request');\nrequest('https://fettblog.eu').pipe(process.stdout);  \n```\n\n使用控制台输出一个`HTML`确实不怎么有用，但是使用它转换到一个文件却是网络利刃。\n\n## 转换数据\n流不仅适合用来在不同的原点和终点之间传输数据。\n\n**流一旦打开数据只会暴露一次，开发者可以在数据到达终点之前进行转换数据，最简单的例子就是把一个文件所有小写字符转换为大写字符**\n\n这是流其中的一个最大的优势所在。流一旦打开你就可以一块块的读取数据，你可以在程序的不同位置进行操作。下图说明了这个过程。\n\n\n![转换数据](/images/2017-05-21-object-streams-in-nodejs/02.jpg)\n\n对于修改数据，你只需要在输入和输出之间添加对应的程序转换代码块。\n\n本例子中，你拿到来自不同原点和渠道的输入数据并且使用`toUpperCase`进行转换。这个会把小写字符转换为它们对于的大写字符。这个函数一旦定义，就可以在不同的输入原点和输出重复使用。\n\n下面，我定义了一个`toUpperCase`的函数——用来转换任意字符对应的大写字符。创建这个函数有多种方式，但是我是Node.js流封装库像`through2`之类的超级粉丝。他们已经定义一个好的包装,可以轻松的创建一个转换体:\n\n```js\nconst through2 = require('through2');\n\nconst toUpperCase = through2((data, enc, cb) => {      /* 1 */  \n  cb(null, new Buffer(data.toString().toUpperCase())); /* 2 */\n});\n\nprocess.stdin.pipe(toUpperCase).pipe(process.stdout);  /* 3 */  \n```\n\n* 1.`through2`库绑定第一个参数为函数。 这个函数用来传递数据（默认为`Buffer`实例），传入一些字符编码和一旦我们传入回调函数我们就可以在转换完成之后进行调用。\n* 2.通常，在Node.js流里面，我们传递`Buffer`类型的数据流。可以来自`process.stdin`的数据，在我们按下回车键之后。来自一个文件，这实际上可以任何东西。我们转换当前`Buffer`为字符串，把小写转换为大写，然后转换为`Buffer`再次输出。回调函数有2个参数，第一个参数是错误信息。如果你没有对`end`事件进行监听来捕获错误，流将崩溃程序会由于异常而退出。没有异常第一个参数会返回`null`。第二个参数是转换的数据。\n* 3.我们可以传递我们可读的输入数据到这个转换函数。转换好的数据传递到我们的可读流。\n\n这是完全在函数式编程的路子。我们可以重复使用这个函数来转换不同输入或输出，只要它是可读流。我们不需要关心输入源或输出。同时,我们并不局限于一个单一的转换。我们可以同时链式调用多个转换就像这样：\n\n```js\nconst through2 = require('through2');\n\nconst toUpperCase = through2((data, enc, cb) => {  \n  cb(null, new Buffer(data.toString().toUpperCase()));\n});\n\nconst dashBetweenWords = through2((data, enc, cb) => {  \n  cb(null, new Buffer(data.toString().split(' ').join('-')));\n});\n\nprocess.stdin  \n  .pipe(toUpperCase)\n  .pipe(dashBetweenWords)\n  .pipe(process.stdout);\n```\n\n如果你熟悉`Gulp`,对上面的代码应该会有映象。很简洁，不是吗？然而，`Gulp`流需要特别注意的不同点是：不会传递`Buffer`类型的数据，我们使用的是简单的，原生的JavaScript对象。\n\n\n## 流对象\n在标准流里,通常看到的文件只是可能作为一个真实数据的输入源,要处理的数据。流一旦打开，文件的所有信息像路径或文件名等这些信息也会被传递。\n\n> 在`Gulp`里，你要处理的内容不仅是一个或多个文件，你也需要文件名以及文件系统里面的真实文件。\n\n试想一下现在有20个JavaScript文件需要进行压缩处理。你需要记住每个文件的文件名病情需要保证每个文件的数据都能正确的保存到对应的输出文件中（一些压缩文件）。\n\n**幸运的是,`Gulp`同时为你创建一个新的输入源和一个对你当前数据流非常有用的数据类型:虚拟文件对象。**\n\n`Gulp`中流一旦打开，文件的所有原始信息，物理信息都会被打包到一个虚拟的文件对象中并且保存到虚拟文件系统中，或者`Vinyl`中，好让`Gulp`中相应的组件进行调用。\n\n`Vinyl`对象，文件对象是你的虚拟文件系统，内容包含两种类型的信息：根据文件名称和路径可以定位文件的位置，以及流里面传输的文件内容。虚拟文件保存在计算机内存中，这样处理数据时更加的快速。\n\n通常所有的修改可能最终都会保存到硬盘上。把所有的东西都放在内存中进程之间在处理数据的时候就不用再执行昂贵的读写操作了，保证`Gulp`上下文迅速切换。\n\n\n在内部，`Gulp`使用对象流去一个个的加载文件到处理管道中。对象流和普通的流行为类似，而不是`Buffer`和`String`类似。\n\n我们可以使用[readable-stream](https://www.npmjs.com/package/readable-stream)包来创建我们自己的可读对象流。\n\n```js\nconst through2 = require('through2');  \nconst Readable = require('readable-stream').Readable;\n\nconst stream = Readable({objectMode: true});   /* 1 */  \nstream._read = () => {};                       /* 2 */\n\nsetInterval(() => {                            /* 3 */  \n  stream.push({\n    x: Math.random()\n  });\n}, 100);\n\nconst getX = through2.obj((data, enc, cb) => { /* 4 */  \n  cb(null, `${data.x.toString()}\\n`);\n});\n\nstream.pipe(getX).pipe(process.stdout);        /* 5 */  \n```\n\n* 最重要的是在创建可读对象流的时候要将`objectMode`设置为`true`。在这样做时，流能够通过管道传递JavaScript对象。不然它会认为是`Buffer`或者`String`。\n* 每个流都需要一个`_read`函数。这个函数会在数据块到达的时候触发。这是其它机制开始的位置，并将新内容推送到流。由于我们从外部推送数据，所以我们不需要这个功能，可以使它无效。 然而，可读流需要实现这一点，否则我们会报错误。\n* 在这里，我们正在使用演示数据填充流。 每100毫秒，我们将一个随机数的另一个对象推送到我们的流。\n* 由于我们想将对象流的结果传递给`process.stdout`，而`process.stdout`只接受字符串，所以我们需要做个小的变换，我们从传递的JavaScript对象中提取属性。\n* 我们创建一个管道。 我们可读的对象流将其所有数据传输到`getX`，最后传输到`process.stdout`。\n\n### Node.js中流包的注意事项\n您可能已经注意到，我们使用了通过NPM安装的不同流包。 不是很奇怪吗？\n\n“Streams对于异步IO来说至关重要，它们不应该成为@nodejs核心的一部分吗？ 是的没错。”\n\n然而，流的核心在Node的旧的0.x版本的时候是不断变化的，这就是为什么社区在基本软件包的基础上加入并创建了一个坚实稳定的API。 使用语义版本控制，您可以确保流媒体生态系统与您的应用程序一起很好地移动。\n\n\n## 足够的Demo演示，然我们正真的做些事\n好！让我们做一个app去读取`CVS`数据并且保存到`JSON`中。我们想要使用对象流，因为在某些时候，我们可能需要根据用例来更改数据。由于流很强大，我们希望能够将结果以不同的格式输出。\n\n\n首先我们先安装几个软件包：\n\n```js\nconst through2 = require('through2');  \nconst fs = require('fs');  \nconst split = require('split2');  \n```\n\n* 我们已经了解了`through2`。现在我们使用这个来创建转换。\n* `fs`包显然是用来读写文件的。厉害的是：它允许我们创建一个**可读的流**，这正是我们需要的。\n* 可能你不知道`fs.createReadStream`的数据如何被拉入到内存中，所以`split2`包确保您可以逐行处理数据。 注意这个可变形的名称中的“2”。 它告诉你，它是语义版本的包装生态系统的一部分。\n\n\n### 解析CVS\nCSV非常适用于解析，因为它遵循非常容易理解的格式：逗号表示新的单元格。 一行表示新行。\n\n简单。\n\n在这个例子中，第一行始终是数据的标题。 所以我们想以一种特殊的方式对待第一行：它将为我们的`JSON`对象提供字段。\n\n```js\nconst parseCSV = () => {  \n  let templateKeys = [];\n  let parseHeadline = true;\n  return through2.obj((data, enc, cb) => {       /* 1 */\n    if (parseHeadline) {\n      templateKeys = data.toString().split(',');\n      parseHeadline = false;\n      return cb(null, null);                     /* 2 */\n    }\n\n    const entries = data.toString().split(',');\n    const obj = {};\n\n    templateKeys.forEach((el, index) => {       /* 3 */\n      obj[el] = entries[index];\n    });\n\n    return cb(null, obj);                       /* 4 */\n  });\n};\n```\n\n* 我们创建一个可变对象流。 注意`.obj`方法。 即使您的输入数据只是字符串，如果要进一步触发对象，则需要对象流进行转换。\n* 在这个代码块中，我们解析标题（逗号分隔）。 这将是我们的字段模板。 我们从流中删除这一行，这就是为什么我们传递的两个参数都是`null`。\n* 对于所有其他行，我们通过我们先前解析的字段来帮助创建一个对象。\n* 我们将这个对象传递到下一个阶段。\n\n### 更改和调整数据\n一旦我们拥有可用的对象，我们可以更容易地转换数据。 删除属性，添加新的属性; 过滤，映射和缩小。 你喜欢的都可以。 对于这个例子，我们想保持简单：选择前10个条目：\n\n```js\nconst pickFirst10 = () => {  \n  let cnt = 0;\n  return through2.obj((data, enc, cb) => {\n    if (cnt++ < 10) {\n      return cb(null, data);\n    }\n    return cb(null, null);\n  });\n};\n```\n\n再次像前面的例子一样：传递回调的第二个参数的数据意味着我们将元素保留在流中。 传递`null`表示我们将数据丢弃。 这对过滤器至关重要！\n\n### 保存到JSON\n你知道JSON是什么意思？JavaScript对象。这太好了，因为我们有JavaScript对象，我们可以用字符串表示法来形容它们！\n\n所以，我们想要处理流中通过的对象保存为一个对象，并将它们存储为一个字符串表示形式。 最先考虑到的是：`JSON.stringify`。\n\n**使用流时必须知道的一件重要的事情是，一旦对象（或`Buffer`数据）转换到下一个阶段，那么这个阶段就已经消失了。**\n\n这也意味着您可以将对象传递给一个可写流，不需要太多。 然而，必须有一个方法来做与收集数据不同的事情。 如果流中没有更多数据，每个转换会调用一次`flush`方法。\n\n> 想想一个充满流体的水槽。\n\n你不能选择它的每块数据块来进行再次分析。 但是，您可以将整个数据冲刷到下一个阶段。 这是我们正在做的下一个可变换到JSON：\n\n```js\nconst toJSON = () => {  \n  let objs = [];\n  return through2.obj(function(data, enc, cb) {\n    objs.push(data);                              /* 1 */\n    cb(null, null);\n  }, function(cb) {                               /* 2 */\n    this.push(JSON.stringify(objs));\n    cb();\n  });\n};\n```\n\n* 我们把传递过来的所有数据存放到数组里。 我们从我们的流中删除对象。\n* 在第二个回调方法中，`flush`方法，我们将收集的数据转换为`JSON`字符串。 使用`this.push`（注意经典函数符号），我们将这个新对象推送到我们的流进入下一个阶段。 在这个例子中，新的“对象”只是一个字符串。 与标准可写性兼容的东西！\n\n\n例如，`Gulp`在使用链式调用行为时。 读取第一阶段的所有文件，然后将一个文件刷新到下一个阶段。\n\n### 结合一切\n到这里我又想到了函数式编程:后面的转换函数都是按行分开写的。它们完全可重用的不同场景,无论输入数据和输出格式。\n\n唯一约束是CSV格式的(第一行是字段名),`pickFirst10`和`toJSON`需要JavaScript对象作为输入。并且把前10项转为JSON格式输出到控制台:\n\n\n```js\nconst stream = fs.createReadStream('sample.csv');\n\nstream  \n  .pipe(split())\n  .pipe(parseCSV())\n  .pipe(pickFirst10())\n  .pipe(toJSON())\n  .pipe(process.stdout);\n```\n\n完美！我们可以传输不同的可写流。在Node.js里，IO的核心是依赖流的。下面是一个`HTTP`服务器并把所有数据传输到互联网的例子：\n\n```js\nconst http = require('http');\n\n// All from above\nconst stream = fs.createReadStream('sample.csv')  \n  .pipe(split())\n  .pipe(parseCSV())\n  .pipe(pickFirst10())\n  .pipe(toJSON())\n\nconst server = http.createServer((req, res) => {  \n  stream.pipe(res);\n});\n\nserver.listen(8000);  \n```\n\n这是Node.js流的一大优势所在。你可以异步的处理输入和输出，并且可以根据以依赖的步骤转换处理数据。对于对象流，你可以利用自己知道的部分去转换你的数据。\n\n\n这是`Gulp`作为一个以流为基础的构建系统，但也是一个日常开发的好工具。\n\n\n## 进一步阅读\n如果你想深入了解流,我可以推荐一些资源:\n\n* [《前端工具之Gulo,Bower和Yeoman》](https://www.manning.com/books/front-end-tooling-with-gulp-bower-and-yeoman/?a_aid=fettblog&a_bid=238ac06a)书中有一些章节是讲流工具的像合并流以及后面有章节讲转移流。\n* [Fettblog](https://fettblog.eu/) 我的博客有很多关于`Gulp`和`Gulp`插件的文章。因为所有`Gulp`插件被编写为对象,你可以学习写一个或从中学习到其它东西。\n* [Substack的一本关于流的电子书](https://github.com/substack/stream-handbook)。了解流的原理。\n* [Rod Vagg 对流核心的讲解](https://r.va.gg/2014/06/why-i-dont-use-nodes-core-stream-module.html)。有点老，但是依然是很不错的：Rod Vagg 解释为什么使用流类型的NPM包。\n\n\n原文：[https://community.risingstack.com/the-definitive-guide-to-object-streams-in-node-js/](https://community.risingstack.com/the-definitive-guide-to-object-streams-in-node-js/)\n\n译者：[Jin](https://github.com/Yi-love)\n\n作者：[Stefan Baumgartner](https://community.risingstack.com/author/stefan/)\n","source":"_posts/2017-05-21-object-streams-in-nodejs.md","raw":"---\ntitle: 【译】Node.js之对象流（Stream）权威指南\ndate: 2017-05-21 14:00\ncategory: 翻译\ntags: [nodejs,tutorial,gulp.js,object streams]\nauthor: Jin\n---\n\nNode.js的`Srtream`具有强大的功能：你可以使用异步的方式处理输入和输出，可以根据所依赖的步骤来对数据进行转换。**本教程中，我将带你熟悉理论，并教你如何灵活使用`Stream`对象，就像使用`Gulp`一样。**\n\n***\n\n当我在写一本名为 [《前端工具之Gulp，Brower和Yeoman》](https://www.manning.com/books/front-end-tooling-with-gulp-bower-and-yeoman/?a_aid=fettblog&a_bid=238ac06a) 的书时，我决定不仅要展示API和使用案例，还需要关注以下的概念。\n\n\n你要知道特别是在JavaScript中，工具和框架的更新换代比你为它们注册域名和创建Github团队的速度还要快。**例如[Gulp.js](http://gulpjs.com/)，最重要的一个概念是流！**\n\n<!-- more -->\n\n## 约50年的流\n在`Gulp`里，你想要读取一些文件的数据转换为指定的数据输出，加载一些`JavaScript`文件并打包成一个文件。这些操作`Gulp`的API已经提供了一些方法来读取，转换，和写入文件，所有的这些方法都是基于流来实现的。\n\n>  在计算机中流是一个很老的概念，,源自1960年代早期Unix。\n\n“流是一个数据随着时间序列从源到目的地的过程。“ @ddprrt\n\n数据源的类型是多样化的：文件，计算机内存或者像键盘，鼠标之类的输入设备。\n\n流一旦被打开，数据就会从原点开始分割成一块块的小的数据进行传输然后消费。输入一个文件，每个字符或者字节都会被读取一次；键盘输入，每个按键将传输数据流。\n\n>  最大的优势在于一次加载所有数据,理论上,输入可以无限输入的完全没有限制。\n\n来至键盘的任意一个输入都是有意义的 —— 为什么你应该通过键盘输入控制电脑关闭输入流？\n\n输入流统称为**可读流**，这意味着它们从原点读取数据。另一方面，有输出流和终点；它们可能是文件或者某一段内存，一般输出设备可以是命令行，打印机，或屏幕之类的。\n\n它们统称为**输出流值**，意味着它们存储来着流的数据。下图说明了流是如何工作的。\n\n![流](/images/2017-05-21-object-streams-in-nodejs/01.jpg)\n\n数据是由一组可用的元素组成的序列（就像字符或者字节）。\n\n可读流可以来自不同的来源，例如输入设备（键盘），文件，内存里面的数据。可写流可以任意的终点，例如文件和内存，以及众所周知的命令行。\n\n\n可读和可写流可以互换：键盘输入可以保存在文件中,命令行输入可以作为文件的输入流。\n\n它不仅可以有无尽的输入，而且你可以结合不同的可读和可写流。关键的输入可以直接存储到一个文件中，或者你可以通过命令行和打印机打印文件。接口保持不变，无论来源或目的地是什么。\n\n在Node.js最简单的涉及到把流的从标准输入转换到标准输出的程序例子，使用控制台：\n\n```js\nprocess.stdin.pipe(process.stdout); \n```\n\n我们把我们的可读流（`process.stdin`）把它转换到可写流（`process.stdout`）上。在这之前，我们可以把任意的流内容从任意的原点转换到任意的终点。\n\n\n就以[request](https://www.npmjs.com/package/request)包为例，我们可以使用它向指定的`URL`发送`http`请求。为什么不从网上来取一些页面并且使用`process.stdin`把它打印出来？\n\n```js\nconst request = require('request');\nrequest('https://fettblog.eu').pipe(process.stdout);  \n```\n\n使用控制台输出一个`HTML`确实不怎么有用，但是使用它转换到一个文件却是网络利刃。\n\n## 转换数据\n流不仅适合用来在不同的原点和终点之间传输数据。\n\n**流一旦打开数据只会暴露一次，开发者可以在数据到达终点之前进行转换数据，最简单的例子就是把一个文件所有小写字符转换为大写字符**\n\n这是流其中的一个最大的优势所在。流一旦打开你就可以一块块的读取数据，你可以在程序的不同位置进行操作。下图说明了这个过程。\n\n\n![转换数据](/images/2017-05-21-object-streams-in-nodejs/02.jpg)\n\n对于修改数据，你只需要在输入和输出之间添加对应的程序转换代码块。\n\n本例子中，你拿到来自不同原点和渠道的输入数据并且使用`toUpperCase`进行转换。这个会把小写字符转换为它们对于的大写字符。这个函数一旦定义，就可以在不同的输入原点和输出重复使用。\n\n下面，我定义了一个`toUpperCase`的函数——用来转换任意字符对应的大写字符。创建这个函数有多种方式，但是我是Node.js流封装库像`through2`之类的超级粉丝。他们已经定义一个好的包装,可以轻松的创建一个转换体:\n\n```js\nconst through2 = require('through2');\n\nconst toUpperCase = through2((data, enc, cb) => {      /* 1 */  \n  cb(null, new Buffer(data.toString().toUpperCase())); /* 2 */\n});\n\nprocess.stdin.pipe(toUpperCase).pipe(process.stdout);  /* 3 */  \n```\n\n* 1.`through2`库绑定第一个参数为函数。 这个函数用来传递数据（默认为`Buffer`实例），传入一些字符编码和一旦我们传入回调函数我们就可以在转换完成之后进行调用。\n* 2.通常，在Node.js流里面，我们传递`Buffer`类型的数据流。可以来自`process.stdin`的数据，在我们按下回车键之后。来自一个文件，这实际上可以任何东西。我们转换当前`Buffer`为字符串，把小写转换为大写，然后转换为`Buffer`再次输出。回调函数有2个参数，第一个参数是错误信息。如果你没有对`end`事件进行监听来捕获错误，流将崩溃程序会由于异常而退出。没有异常第一个参数会返回`null`。第二个参数是转换的数据。\n* 3.我们可以传递我们可读的输入数据到这个转换函数。转换好的数据传递到我们的可读流。\n\n这是完全在函数式编程的路子。我们可以重复使用这个函数来转换不同输入或输出，只要它是可读流。我们不需要关心输入源或输出。同时,我们并不局限于一个单一的转换。我们可以同时链式调用多个转换就像这样：\n\n```js\nconst through2 = require('through2');\n\nconst toUpperCase = through2((data, enc, cb) => {  \n  cb(null, new Buffer(data.toString().toUpperCase()));\n});\n\nconst dashBetweenWords = through2((data, enc, cb) => {  \n  cb(null, new Buffer(data.toString().split(' ').join('-')));\n});\n\nprocess.stdin  \n  .pipe(toUpperCase)\n  .pipe(dashBetweenWords)\n  .pipe(process.stdout);\n```\n\n如果你熟悉`Gulp`,对上面的代码应该会有映象。很简洁，不是吗？然而，`Gulp`流需要特别注意的不同点是：不会传递`Buffer`类型的数据，我们使用的是简单的，原生的JavaScript对象。\n\n\n## 流对象\n在标准流里,通常看到的文件只是可能作为一个真实数据的输入源,要处理的数据。流一旦打开，文件的所有信息像路径或文件名等这些信息也会被传递。\n\n> 在`Gulp`里，你要处理的内容不仅是一个或多个文件，你也需要文件名以及文件系统里面的真实文件。\n\n试想一下现在有20个JavaScript文件需要进行压缩处理。你需要记住每个文件的文件名病情需要保证每个文件的数据都能正确的保存到对应的输出文件中（一些压缩文件）。\n\n**幸运的是,`Gulp`同时为你创建一个新的输入源和一个对你当前数据流非常有用的数据类型:虚拟文件对象。**\n\n`Gulp`中流一旦打开，文件的所有原始信息，物理信息都会被打包到一个虚拟的文件对象中并且保存到虚拟文件系统中，或者`Vinyl`中，好让`Gulp`中相应的组件进行调用。\n\n`Vinyl`对象，文件对象是你的虚拟文件系统，内容包含两种类型的信息：根据文件名称和路径可以定位文件的位置，以及流里面传输的文件内容。虚拟文件保存在计算机内存中，这样处理数据时更加的快速。\n\n通常所有的修改可能最终都会保存到硬盘上。把所有的东西都放在内存中进程之间在处理数据的时候就不用再执行昂贵的读写操作了，保证`Gulp`上下文迅速切换。\n\n\n在内部，`Gulp`使用对象流去一个个的加载文件到处理管道中。对象流和普通的流行为类似，而不是`Buffer`和`String`类似。\n\n我们可以使用[readable-stream](https://www.npmjs.com/package/readable-stream)包来创建我们自己的可读对象流。\n\n```js\nconst through2 = require('through2');  \nconst Readable = require('readable-stream').Readable;\n\nconst stream = Readable({objectMode: true});   /* 1 */  \nstream._read = () => {};                       /* 2 */\n\nsetInterval(() => {                            /* 3 */  \n  stream.push({\n    x: Math.random()\n  });\n}, 100);\n\nconst getX = through2.obj((data, enc, cb) => { /* 4 */  \n  cb(null, `${data.x.toString()}\\n`);\n});\n\nstream.pipe(getX).pipe(process.stdout);        /* 5 */  \n```\n\n* 最重要的是在创建可读对象流的时候要将`objectMode`设置为`true`。在这样做时，流能够通过管道传递JavaScript对象。不然它会认为是`Buffer`或者`String`。\n* 每个流都需要一个`_read`函数。这个函数会在数据块到达的时候触发。这是其它机制开始的位置，并将新内容推送到流。由于我们从外部推送数据，所以我们不需要这个功能，可以使它无效。 然而，可读流需要实现这一点，否则我们会报错误。\n* 在这里，我们正在使用演示数据填充流。 每100毫秒，我们将一个随机数的另一个对象推送到我们的流。\n* 由于我们想将对象流的结果传递给`process.stdout`，而`process.stdout`只接受字符串，所以我们需要做个小的变换，我们从传递的JavaScript对象中提取属性。\n* 我们创建一个管道。 我们可读的对象流将其所有数据传输到`getX`，最后传输到`process.stdout`。\n\n### Node.js中流包的注意事项\n您可能已经注意到，我们使用了通过NPM安装的不同流包。 不是很奇怪吗？\n\n“Streams对于异步IO来说至关重要，它们不应该成为@nodejs核心的一部分吗？ 是的没错。”\n\n然而，流的核心在Node的旧的0.x版本的时候是不断变化的，这就是为什么社区在基本软件包的基础上加入并创建了一个坚实稳定的API。 使用语义版本控制，您可以确保流媒体生态系统与您的应用程序一起很好地移动。\n\n\n## 足够的Demo演示，然我们正真的做些事\n好！让我们做一个app去读取`CVS`数据并且保存到`JSON`中。我们想要使用对象流，因为在某些时候，我们可能需要根据用例来更改数据。由于流很强大，我们希望能够将结果以不同的格式输出。\n\n\n首先我们先安装几个软件包：\n\n```js\nconst through2 = require('through2');  \nconst fs = require('fs');  \nconst split = require('split2');  \n```\n\n* 我们已经了解了`through2`。现在我们使用这个来创建转换。\n* `fs`包显然是用来读写文件的。厉害的是：它允许我们创建一个**可读的流**，这正是我们需要的。\n* 可能你不知道`fs.createReadStream`的数据如何被拉入到内存中，所以`split2`包确保您可以逐行处理数据。 注意这个可变形的名称中的“2”。 它告诉你，它是语义版本的包装生态系统的一部分。\n\n\n### 解析CVS\nCSV非常适用于解析，因为它遵循非常容易理解的格式：逗号表示新的单元格。 一行表示新行。\n\n简单。\n\n在这个例子中，第一行始终是数据的标题。 所以我们想以一种特殊的方式对待第一行：它将为我们的`JSON`对象提供字段。\n\n```js\nconst parseCSV = () => {  \n  let templateKeys = [];\n  let parseHeadline = true;\n  return through2.obj((data, enc, cb) => {       /* 1 */\n    if (parseHeadline) {\n      templateKeys = data.toString().split(',');\n      parseHeadline = false;\n      return cb(null, null);                     /* 2 */\n    }\n\n    const entries = data.toString().split(',');\n    const obj = {};\n\n    templateKeys.forEach((el, index) => {       /* 3 */\n      obj[el] = entries[index];\n    });\n\n    return cb(null, obj);                       /* 4 */\n  });\n};\n```\n\n* 我们创建一个可变对象流。 注意`.obj`方法。 即使您的输入数据只是字符串，如果要进一步触发对象，则需要对象流进行转换。\n* 在这个代码块中，我们解析标题（逗号分隔）。 这将是我们的字段模板。 我们从流中删除这一行，这就是为什么我们传递的两个参数都是`null`。\n* 对于所有其他行，我们通过我们先前解析的字段来帮助创建一个对象。\n* 我们将这个对象传递到下一个阶段。\n\n### 更改和调整数据\n一旦我们拥有可用的对象，我们可以更容易地转换数据。 删除属性，添加新的属性; 过滤，映射和缩小。 你喜欢的都可以。 对于这个例子，我们想保持简单：选择前10个条目：\n\n```js\nconst pickFirst10 = () => {  \n  let cnt = 0;\n  return through2.obj((data, enc, cb) => {\n    if (cnt++ < 10) {\n      return cb(null, data);\n    }\n    return cb(null, null);\n  });\n};\n```\n\n再次像前面的例子一样：传递回调的第二个参数的数据意味着我们将元素保留在流中。 传递`null`表示我们将数据丢弃。 这对过滤器至关重要！\n\n### 保存到JSON\n你知道JSON是什么意思？JavaScript对象。这太好了，因为我们有JavaScript对象，我们可以用字符串表示法来形容它们！\n\n所以，我们想要处理流中通过的对象保存为一个对象，并将它们存储为一个字符串表示形式。 最先考虑到的是：`JSON.stringify`。\n\n**使用流时必须知道的一件重要的事情是，一旦对象（或`Buffer`数据）转换到下一个阶段，那么这个阶段就已经消失了。**\n\n这也意味着您可以将对象传递给一个可写流，不需要太多。 然而，必须有一个方法来做与收集数据不同的事情。 如果流中没有更多数据，每个转换会调用一次`flush`方法。\n\n> 想想一个充满流体的水槽。\n\n你不能选择它的每块数据块来进行再次分析。 但是，您可以将整个数据冲刷到下一个阶段。 这是我们正在做的下一个可变换到JSON：\n\n```js\nconst toJSON = () => {  \n  let objs = [];\n  return through2.obj(function(data, enc, cb) {\n    objs.push(data);                              /* 1 */\n    cb(null, null);\n  }, function(cb) {                               /* 2 */\n    this.push(JSON.stringify(objs));\n    cb();\n  });\n};\n```\n\n* 我们把传递过来的所有数据存放到数组里。 我们从我们的流中删除对象。\n* 在第二个回调方法中，`flush`方法，我们将收集的数据转换为`JSON`字符串。 使用`this.push`（注意经典函数符号），我们将这个新对象推送到我们的流进入下一个阶段。 在这个例子中，新的“对象”只是一个字符串。 与标准可写性兼容的东西！\n\n\n例如，`Gulp`在使用链式调用行为时。 读取第一阶段的所有文件，然后将一个文件刷新到下一个阶段。\n\n### 结合一切\n到这里我又想到了函数式编程:后面的转换函数都是按行分开写的。它们完全可重用的不同场景,无论输入数据和输出格式。\n\n唯一约束是CSV格式的(第一行是字段名),`pickFirst10`和`toJSON`需要JavaScript对象作为输入。并且把前10项转为JSON格式输出到控制台:\n\n\n```js\nconst stream = fs.createReadStream('sample.csv');\n\nstream  \n  .pipe(split())\n  .pipe(parseCSV())\n  .pipe(pickFirst10())\n  .pipe(toJSON())\n  .pipe(process.stdout);\n```\n\n完美！我们可以传输不同的可写流。在Node.js里，IO的核心是依赖流的。下面是一个`HTTP`服务器并把所有数据传输到互联网的例子：\n\n```js\nconst http = require('http');\n\n// All from above\nconst stream = fs.createReadStream('sample.csv')  \n  .pipe(split())\n  .pipe(parseCSV())\n  .pipe(pickFirst10())\n  .pipe(toJSON())\n\nconst server = http.createServer((req, res) => {  \n  stream.pipe(res);\n});\n\nserver.listen(8000);  \n```\n\n这是Node.js流的一大优势所在。你可以异步的处理输入和输出，并且可以根据以依赖的步骤转换处理数据。对于对象流，你可以利用自己知道的部分去转换你的数据。\n\n\n这是`Gulp`作为一个以流为基础的构建系统，但也是一个日常开发的好工具。\n\n\n## 进一步阅读\n如果你想深入了解流,我可以推荐一些资源:\n\n* [《前端工具之Gulo,Bower和Yeoman》](https://www.manning.com/books/front-end-tooling-with-gulp-bower-and-yeoman/?a_aid=fettblog&a_bid=238ac06a)书中有一些章节是讲流工具的像合并流以及后面有章节讲转移流。\n* [Fettblog](https://fettblog.eu/) 我的博客有很多关于`Gulp`和`Gulp`插件的文章。因为所有`Gulp`插件被编写为对象,你可以学习写一个或从中学习到其它东西。\n* [Substack的一本关于流的电子书](https://github.com/substack/stream-handbook)。了解流的原理。\n* [Rod Vagg 对流核心的讲解](https://r.va.gg/2014/06/why-i-dont-use-nodes-core-stream-module.html)。有点老，但是依然是很不错的：Rod Vagg 解释为什么使用流类型的NPM包。\n\n\n原文：[https://community.risingstack.com/the-definitive-guide-to-object-streams-in-node-js/](https://community.risingstack.com/the-definitive-guide-to-object-streams-in-node-js/)\n\n译者：[Jin](https://github.com/Yi-love)\n\n作者：[Stefan Baumgartner](https://community.risingstack.com/author/stefan/)\n","slug":"2017-05-21-object-streams-in-nodejs","published":1,"updated":"2017-12-01T08:50:00.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknhx000jjxs1cglb0s9t","content":"<p>Node.js的<code>Srtream</code>具有强大的功能：你可以使用异步的方式处理输入和输出，可以根据所依赖的步骤来对数据进行转换。<strong>本教程中，我将带你熟悉理论，并教你如何灵活使用<code>Stream</code>对象，就像使用<code>Gulp</code>一样。</strong></p>\n<hr>\n<p>当我在写一本名为 <a href=\"https://www.manning.com/books/front-end-tooling-with-gulp-bower-and-yeoman/?a_aid=fettblog&amp;a_bid=238ac06a\" target=\"_blank\" rel=\"noopener\">《前端工具之Gulp，Brower和Yeoman》</a> 的书时，我决定不仅要展示API和使用案例，还需要关注以下的概念。</p>\n<p>你要知道特别是在JavaScript中，工具和框架的更新换代比你为它们注册域名和创建Github团队的速度还要快。<strong>例如<a href=\"http://gulpjs.com/\" target=\"_blank\" rel=\"noopener\">Gulp.js</a>，最重要的一个概念是流！</strong></p>\n<a id=\"more\"></a>\n<h2 id=\"约50年的流\"><a href=\"#约50年的流\" class=\"headerlink\" title=\"约50年的流\"></a>约50年的流</h2><p>在<code>Gulp</code>里，你想要读取一些文件的数据转换为指定的数据输出，加载一些<code>JavaScript</code>文件并打包成一个文件。这些操作<code>Gulp</code>的API已经提供了一些方法来读取，转换，和写入文件，所有的这些方法都是基于流来实现的。</p>\n<blockquote>\n<p> 在计算机中流是一个很老的概念，,源自1960年代早期Unix。</p>\n</blockquote>\n<p>“流是一个数据随着时间序列从源到目的地的过程。“ @ddprrt</p>\n<p>数据源的类型是多样化的：文件，计算机内存或者像键盘，鼠标之类的输入设备。</p>\n<p>流一旦被打开，数据就会从原点开始分割成一块块的小的数据进行传输然后消费。输入一个文件，每个字符或者字节都会被读取一次；键盘输入，每个按键将传输数据流。</p>\n<blockquote>\n<p> 最大的优势在于一次加载所有数据,理论上,输入可以无限输入的完全没有限制。</p>\n</blockquote>\n<p>来至键盘的任意一个输入都是有意义的 —— 为什么你应该通过键盘输入控制电脑关闭输入流？</p>\n<p>输入流统称为<strong>可读流</strong>，这意味着它们从原点读取数据。另一方面，有输出流和终点；它们可能是文件或者某一段内存，一般输出设备可以是命令行，打印机，或屏幕之类的。</p>\n<p>它们统称为<strong>输出流值</strong>，意味着它们存储来着流的数据。下图说明了流是如何工作的。</p>\n<p><img src=\"/images/2017-05-21-object-streams-in-nodejs/01.jpg\" alt=\"流\"></p>\n<p>数据是由一组可用的元素组成的序列（就像字符或者字节）。</p>\n<p>可读流可以来自不同的来源，例如输入设备（键盘），文件，内存里面的数据。可写流可以任意的终点，例如文件和内存，以及众所周知的命令行。</p>\n<p>可读和可写流可以互换：键盘输入可以保存在文件中,命令行输入可以作为文件的输入流。</p>\n<p>它不仅可以有无尽的输入，而且你可以结合不同的可读和可写流。关键的输入可以直接存储到一个文件中，或者你可以通过命令行和打印机打印文件。接口保持不变，无论来源或目的地是什么。</p>\n<p>在Node.js最简单的涉及到把流的从标准输入转换到标准输出的程序例子，使用控制台：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.stdin.pipe(process.stdout);</span><br></pre></td></tr></table></figure>\n<p>我们把我们的可读流（<code>process.stdin</code>）把它转换到可写流（<code>process.stdout</code>）上。在这之前，我们可以把任意的流内容从任意的原点转换到任意的终点。</p>\n<p>就以<a href=\"https://www.npmjs.com/package/request\" target=\"_blank\" rel=\"noopener\">request</a>包为例，我们可以使用它向指定的<code>URL</code>发送<code>http</code>请求。为什么不从网上来取一些页面并且使用<code>process.stdin</code>把它打印出来？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</span><br><span class=\"line\">request(<span class=\"string\">'https://fettblog.eu'</span>).pipe(process.stdout);</span><br></pre></td></tr></table></figure>\n<p>使用控制台输出一个<code>HTML</code>确实不怎么有用，但是使用它转换到一个文件却是网络利刃。</p>\n<h2 id=\"转换数据\"><a href=\"#转换数据\" class=\"headerlink\" title=\"转换数据\"></a>转换数据</h2><p>流不仅适合用来在不同的原点和终点之间传输数据。</p>\n<p><strong>流一旦打开数据只会暴露一次，开发者可以在数据到达终点之前进行转换数据，最简单的例子就是把一个文件所有小写字符转换为大写字符</strong></p>\n<p>这是流其中的一个最大的优势所在。流一旦打开你就可以一块块的读取数据，你可以在程序的不同位置进行操作。下图说明了这个过程。</p>\n<p><img src=\"/images/2017-05-21-object-streams-in-nodejs/02.jpg\" alt=\"转换数据\"></p>\n<p>对于修改数据，你只需要在输入和输出之间添加对应的程序转换代码块。</p>\n<p>本例子中，你拿到来自不同原点和渠道的输入数据并且使用<code>toUpperCase</code>进行转换。这个会把小写字符转换为它们对于的大写字符。这个函数一旦定义，就可以在不同的输入原点和输出重复使用。</p>\n<p>下面，我定义了一个<code>toUpperCase</code>的函数——用来转换任意字符对应的大写字符。创建这个函数有多种方式，但是我是Node.js流封装库像<code>through2</code>之类的超级粉丝。他们已经定义一个好的包装,可以轻松的创建一个转换体:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> through2 = <span class=\"built_in\">require</span>(<span class=\"string\">'through2'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toUpperCase = through2(<span class=\"function\">(<span class=\"params\">data, enc, cb</span>) =&gt;</span> &#123;      <span class=\"comment\">/* 1 */</span>  </span><br><span class=\"line\">  cb(<span class=\"literal\">null</span>, <span class=\"keyword\">new</span> Buffer(data.toString().toUpperCase())); <span class=\"comment\">/* 2 */</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">process.stdin.pipe(toUpperCase).pipe(process.stdout);  <span class=\"comment\">/* 3 */</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>1.<code>through2</code>库绑定第一个参数为函数。 这个函数用来传递数据（默认为<code>Buffer</code>实例），传入一些字符编码和一旦我们传入回调函数我们就可以在转换完成之后进行调用。</li>\n<li>2.通常，在Node.js流里面，我们传递<code>Buffer</code>类型的数据流。可以来自<code>process.stdin</code>的数据，在我们按下回车键之后。来自一个文件，这实际上可以任何东西。我们转换当前<code>Buffer</code>为字符串，把小写转换为大写，然后转换为<code>Buffer</code>再次输出。回调函数有2个参数，第一个参数是错误信息。如果你没有对<code>end</code>事件进行监听来捕获错误，流将崩溃程序会由于异常而退出。没有异常第一个参数会返回<code>null</code>。第二个参数是转换的数据。</li>\n<li>3.我们可以传递我们可读的输入数据到这个转换函数。转换好的数据传递到我们的可读流。</li>\n</ul>\n<p>这是完全在函数式编程的路子。我们可以重复使用这个函数来转换不同输入或输出，只要它是可读流。我们不需要关心输入源或输出。同时,我们并不局限于一个单一的转换。我们可以同时链式调用多个转换就像这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> through2 = <span class=\"built_in\">require</span>(<span class=\"string\">'through2'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toUpperCase = through2(<span class=\"function\">(<span class=\"params\">data, enc, cb</span>) =&gt;</span> &#123;  </span><br><span class=\"line\">  cb(<span class=\"literal\">null</span>, <span class=\"keyword\">new</span> Buffer(data.toString().toUpperCase()));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dashBetweenWords = through2(<span class=\"function\">(<span class=\"params\">data, enc, cb</span>) =&gt;</span> &#123;  </span><br><span class=\"line\">  cb(<span class=\"literal\">null</span>, <span class=\"keyword\">new</span> Buffer(data.toString().split(<span class=\"string\">' '</span>).join(<span class=\"string\">'-'</span>)));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">process.stdin  </span><br><span class=\"line\">  .pipe(toUpperCase)</span><br><span class=\"line\">  .pipe(dashBetweenWords)</span><br><span class=\"line\">  .pipe(process.stdout);</span><br></pre></td></tr></table></figure>\n<p>如果你熟悉<code>Gulp</code>,对上面的代码应该会有映象。很简洁，不是吗？然而，<code>Gulp</code>流需要特别注意的不同点是：不会传递<code>Buffer</code>类型的数据，我们使用的是简单的，原生的JavaScript对象。</p>\n<h2 id=\"流对象\"><a href=\"#流对象\" class=\"headerlink\" title=\"流对象\"></a>流对象</h2><p>在标准流里,通常看到的文件只是可能作为一个真实数据的输入源,要处理的数据。流一旦打开，文件的所有信息像路径或文件名等这些信息也会被传递。</p>\n<blockquote>\n<p>在<code>Gulp</code>里，你要处理的内容不仅是一个或多个文件，你也需要文件名以及文件系统里面的真实文件。</p>\n</blockquote>\n<p>试想一下现在有20个JavaScript文件需要进行压缩处理。你需要记住每个文件的文件名病情需要保证每个文件的数据都能正确的保存到对应的输出文件中（一些压缩文件）。</p>\n<p><strong>幸运的是,<code>Gulp</code>同时为你创建一个新的输入源和一个对你当前数据流非常有用的数据类型:虚拟文件对象。</strong></p>\n<p><code>Gulp</code>中流一旦打开，文件的所有原始信息，物理信息都会被打包到一个虚拟的文件对象中并且保存到虚拟文件系统中，或者<code>Vinyl</code>中，好让<code>Gulp</code>中相应的组件进行调用。</p>\n<p><code>Vinyl</code>对象，文件对象是你的虚拟文件系统，内容包含两种类型的信息：根据文件名称和路径可以定位文件的位置，以及流里面传输的文件内容。虚拟文件保存在计算机内存中，这样处理数据时更加的快速。</p>\n<p>通常所有的修改可能最终都会保存到硬盘上。把所有的东西都放在内存中进程之间在处理数据的时候就不用再执行昂贵的读写操作了，保证<code>Gulp</code>上下文迅速切换。</p>\n<p>在内部，<code>Gulp</code>使用对象流去一个个的加载文件到处理管道中。对象流和普通的流行为类似，而不是<code>Buffer</code>和<code>String</code>类似。</p>\n<p>我们可以使用<a href=\"https://www.npmjs.com/package/readable-stream\" target=\"_blank\" rel=\"noopener\">readable-stream</a>包来创建我们自己的可读对象流。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> through2 = <span class=\"built_in\">require</span>(<span class=\"string\">'through2'</span>);  </span><br><span class=\"line\"><span class=\"keyword\">const</span> Readable = <span class=\"built_in\">require</span>(<span class=\"string\">'readable-stream'</span>).Readable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> stream = Readable(&#123;<span class=\"attr\">objectMode</span>: <span class=\"literal\">true</span>&#125;);   <span class=\"comment\">/* 1 */</span>  </span><br><span class=\"line\">stream._read = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;                       <span class=\"comment\">/* 2 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;                            <span class=\"comment\">/* 3 */</span>  </span><br><span class=\"line\">  stream.push(&#123;</span><br><span class=\"line\">    x: <span class=\"built_in\">Math</span>.random()</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getX = through2.obj(<span class=\"function\">(<span class=\"params\">data, enc, cb</span>) =&gt;</span> &#123; <span class=\"comment\">/* 4 */</span>  </span><br><span class=\"line\">  cb(<span class=\"literal\">null</span>, <span class=\"string\">`<span class=\"subst\">$&#123;data.x.toString()&#125;</span>\\n`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">stream.pipe(getX).pipe(process.stdout);        <span class=\"comment\">/* 5 */</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>最重要的是在创建可读对象流的时候要将<code>objectMode</code>设置为<code>true</code>。在这样做时，流能够通过管道传递JavaScript对象。不然它会认为是<code>Buffer</code>或者<code>String</code>。</li>\n<li>每个流都需要一个<code>_read</code>函数。这个函数会在数据块到达的时候触发。这是其它机制开始的位置，并将新内容推送到流。由于我们从外部推送数据，所以我们不需要这个功能，可以使它无效。 然而，可读流需要实现这一点，否则我们会报错误。</li>\n<li>在这里，我们正在使用演示数据填充流。 每100毫秒，我们将一个随机数的另一个对象推送到我们的流。</li>\n<li>由于我们想将对象流的结果传递给<code>process.stdout</code>，而<code>process.stdout</code>只接受字符串，所以我们需要做个小的变换，我们从传递的JavaScript对象中提取属性。</li>\n<li>我们创建一个管道。 我们可读的对象流将其所有数据传输到<code>getX</code>，最后传输到<code>process.stdout</code>。</li>\n</ul>\n<h3 id=\"Node-js中流包的注意事项\"><a href=\"#Node-js中流包的注意事项\" class=\"headerlink\" title=\"Node.js中流包的注意事项\"></a>Node.js中流包的注意事项</h3><p>您可能已经注意到，我们使用了通过NPM安装的不同流包。 不是很奇怪吗？</p>\n<p>“Streams对于异步IO来说至关重要，它们不应该成为@nodejs核心的一部分吗？ 是的没错。”</p>\n<p>然而，流的核心在Node的旧的0.x版本的时候是不断变化的，这就是为什么社区在基本软件包的基础上加入并创建了一个坚实稳定的API。 使用语义版本控制，您可以确保流媒体生态系统与您的应用程序一起很好地移动。</p>\n<h2 id=\"足够的Demo演示，然我们正真的做些事\"><a href=\"#足够的Demo演示，然我们正真的做些事\" class=\"headerlink\" title=\"足够的Demo演示，然我们正真的做些事\"></a>足够的Demo演示，然我们正真的做些事</h2><p>好！让我们做一个app去读取<code>CVS</code>数据并且保存到<code>JSON</code>中。我们想要使用对象流，因为在某些时候，我们可能需要根据用例来更改数据。由于流很强大，我们希望能够将结果以不同的格式输出。</p>\n<p>首先我们先安装几个软件包：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> through2 = <span class=\"built_in\">require</span>(<span class=\"string\">'through2'</span>);  </span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);  </span><br><span class=\"line\"><span class=\"keyword\">const</span> split = <span class=\"built_in\">require</span>(<span class=\"string\">'split2'</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>我们已经了解了<code>through2</code>。现在我们使用这个来创建转换。</li>\n<li><code>fs</code>包显然是用来读写文件的。厉害的是：它允许我们创建一个<strong>可读的流</strong>，这正是我们需要的。</li>\n<li>可能你不知道<code>fs.createReadStream</code>的数据如何被拉入到内存中，所以<code>split2</code>包确保您可以逐行处理数据。 注意这个可变形的名称中的“2”。 它告诉你，它是语义版本的包装生态系统的一部分。</li>\n</ul>\n<h3 id=\"解析CVS\"><a href=\"#解析CVS\" class=\"headerlink\" title=\"解析CVS\"></a>解析CVS</h3><p>CSV非常适用于解析，因为它遵循非常容易理解的格式：逗号表示新的单元格。 一行表示新行。</p>\n<p>简单。</p>\n<p>在这个例子中，第一行始终是数据的标题。 所以我们想以一种特殊的方式对待第一行：它将为我们的<code>JSON</code>对象提供字段。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parseCSV = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> templateKeys = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> parseHeadline = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> through2.obj(<span class=\"function\">(<span class=\"params\">data, enc, cb</span>) =&gt;</span> &#123;       <span class=\"comment\">/* 1 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parseHeadline) &#123;</span><br><span class=\"line\">      templateKeys = data.toString().split(<span class=\"string\">','</span>);</span><br><span class=\"line\">      parseHeadline = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cb(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>);                     <span class=\"comment\">/* 2 */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> entries = data.toString().split(<span class=\"string\">','</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    templateKeys.forEach(<span class=\"function\">(<span class=\"params\">el, index</span>) =&gt;</span> &#123;       <span class=\"comment\">/* 3 */</span></span><br><span class=\"line\">      obj[el] = entries[index];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cb(<span class=\"literal\">null</span>, obj);                       <span class=\"comment\">/* 4 */</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>我们创建一个可变对象流。 注意<code>.obj</code>方法。 即使您的输入数据只是字符串，如果要进一步触发对象，则需要对象流进行转换。</li>\n<li>在这个代码块中，我们解析标题（逗号分隔）。 这将是我们的字段模板。 我们从流中删除这一行，这就是为什么我们传递的两个参数都是<code>null</code>。</li>\n<li>对于所有其他行，我们通过我们先前解析的字段来帮助创建一个对象。</li>\n<li>我们将这个对象传递到下一个阶段。</li>\n</ul>\n<h3 id=\"更改和调整数据\"><a href=\"#更改和调整数据\" class=\"headerlink\" title=\"更改和调整数据\"></a>更改和调整数据</h3><p>一旦我们拥有可用的对象，我们可以更容易地转换数据。 删除属性，添加新的属性; 过滤，映射和缩小。 你喜欢的都可以。 对于这个例子，我们想保持简单：选择前10个条目：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pickFirst10 = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> through2.obj(<span class=\"function\">(<span class=\"params\">data, enc, cb</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cnt++ <span class=\"xml\"><span class=\"tag\">&lt; <span class=\"attr\">10</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"xml\">      return cb(null, data);</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    return cb(null, null);</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;);</span></span><br><span class=\"line\"><span class=\"xml\">&#125;;</span></span><br></pre></td></tr></table></figure>\n<p>再次像前面的例子一样：传递回调的第二个参数的数据意味着我们将元素保留在流中。 传递<code>null</code>表示我们将数据丢弃。 这对过滤器至关重要！</p>\n<h3 id=\"保存到JSON\"><a href=\"#保存到JSON\" class=\"headerlink\" title=\"保存到JSON\"></a>保存到JSON</h3><p>你知道JSON是什么意思？JavaScript对象。这太好了，因为我们有JavaScript对象，我们可以用字符串表示法来形容它们！</p>\n<p>所以，我们想要处理流中通过的对象保存为一个对象，并将它们存储为一个字符串表示形式。 最先考虑到的是：<code>JSON.stringify</code>。</p>\n<p><strong>使用流时必须知道的一件重要的事情是，一旦对象（或<code>Buffer</code>数据）转换到下一个阶段，那么这个阶段就已经消失了。</strong></p>\n<p>这也意味着您可以将对象传递给一个可写流，不需要太多。 然而，必须有一个方法来做与收集数据不同的事情。 如果流中没有更多数据，每个转换会调用一次<code>flush</code>方法。</p>\n<blockquote>\n<p>想想一个充满流体的水槽。</p>\n</blockquote>\n<p>你不能选择它的每块数据块来进行再次分析。 但是，您可以将整个数据冲刷到下一个阶段。 这是我们正在做的下一个可变换到JSON：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> toJSON = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> objs = [];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> through2.obj(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, enc, cb</span>) </span>&#123;</span><br><span class=\"line\">    objs.push(data);                              <span class=\"comment\">/* 1 */</span></span><br><span class=\"line\">    cb(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;                               <span class=\"comment\">/* 2 */</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.push(<span class=\"built_in\">JSON</span>.stringify(objs));</span><br><span class=\"line\">    cb();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>我们把传递过来的所有数据存放到数组里。 我们从我们的流中删除对象。</li>\n<li>在第二个回调方法中，<code>flush</code>方法，我们将收集的数据转换为<code>JSON</code>字符串。 使用<code>this.push</code>（注意经典函数符号），我们将这个新对象推送到我们的流进入下一个阶段。 在这个例子中，新的“对象”只是一个字符串。 与标准可写性兼容的东西！</li>\n</ul>\n<p>例如，<code>Gulp</code>在使用链式调用行为时。 读取第一阶段的所有文件，然后将一个文件刷新到下一个阶段。</p>\n<h3 id=\"结合一切\"><a href=\"#结合一切\" class=\"headerlink\" title=\"结合一切\"></a>结合一切</h3><p>到这里我又想到了函数式编程:后面的转换函数都是按行分开写的。它们完全可重用的不同场景,无论输入数据和输出格式。</p>\n<p>唯一约束是CSV格式的(第一行是字段名),<code>pickFirst10</code>和<code>toJSON</code>需要JavaScript对象作为输入。并且把前10项转为JSON格式输出到控制台:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stream = fs.createReadStream(<span class=\"string\">'sample.csv'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">stream  </span><br><span class=\"line\">  .pipe(split())</span><br><span class=\"line\">  .pipe(parseCSV())</span><br><span class=\"line\">  .pipe(pickFirst10())</span><br><span class=\"line\">  .pipe(toJSON())</span><br><span class=\"line\">  .pipe(process.stdout);</span><br></pre></td></tr></table></figure>\n<p>完美！我们可以传输不同的可写流。在Node.js里，IO的核心是依赖流的。下面是一个<code>HTTP</code>服务器并把所有数据传输到互联网的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// All from above</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> stream = fs.createReadStream(<span class=\"string\">'sample.csv'</span>)  </span><br><span class=\"line\">  .pipe(split())</span><br><span class=\"line\">  .pipe(parseCSV())</span><br><span class=\"line\">  .pipe(pickFirst10())</span><br><span class=\"line\">  .pipe(toJSON())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;  </span><br><span class=\"line\">  stream.pipe(res);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">8000</span>);</span><br></pre></td></tr></table></figure>\n<p>这是Node.js流的一大优势所在。你可以异步的处理输入和输出，并且可以根据以依赖的步骤转换处理数据。对于对象流，你可以利用自己知道的部分去转换你的数据。</p>\n<p>这是<code>Gulp</code>作为一个以流为基础的构建系统，但也是一个日常开发的好工具。</p>\n<h2 id=\"进一步阅读\"><a href=\"#进一步阅读\" class=\"headerlink\" title=\"进一步阅读\"></a>进一步阅读</h2><p>如果你想深入了解流,我可以推荐一些资源:</p>\n<ul>\n<li><a href=\"https://www.manning.com/books/front-end-tooling-with-gulp-bower-and-yeoman/?a_aid=fettblog&amp;a_bid=238ac06a\" target=\"_blank\" rel=\"noopener\">《前端工具之Gulo,Bower和Yeoman》</a>书中有一些章节是讲流工具的像合并流以及后面有章节讲转移流。</li>\n<li><a href=\"https://fettblog.eu/\" target=\"_blank\" rel=\"noopener\">Fettblog</a> 我的博客有很多关于<code>Gulp</code>和<code>Gulp</code>插件的文章。因为所有<code>Gulp</code>插件被编写为对象,你可以学习写一个或从中学习到其它东西。</li>\n<li><a href=\"https://github.com/substack/stream-handbook\" target=\"_blank\" rel=\"noopener\">Substack的一本关于流的电子书</a>。了解流的原理。</li>\n<li><a href=\"https://r.va.gg/2014/06/why-i-dont-use-nodes-core-stream-module.html\" target=\"_blank\" rel=\"noopener\">Rod Vagg 对流核心的讲解</a>。有点老，但是依然是很不错的：Rod Vagg 解释为什么使用流类型的NPM包。</li>\n</ul>\n<p>原文：<a href=\"https://community.risingstack.com/the-definitive-guide-to-object-streams-in-node-js/\" target=\"_blank\" rel=\"noopener\">https://community.risingstack.com/the-definitive-guide-to-object-streams-in-node-js/</a></p>\n<p>译者：<a href=\"https://github.com/Yi-love\" target=\"_blank\" rel=\"noopener\">Jin</a></p>\n<p>作者：<a href=\"https://community.risingstack.com/author/stefan/\" target=\"_blank\" rel=\"noopener\">Stefan Baumgartner</a></p>\n","site":{"data":{}},"excerpt":"<p>Node.js的<code>Srtream</code>具有强大的功能：你可以使用异步的方式处理输入和输出，可以根据所依赖的步骤来对数据进行转换。<strong>本教程中，我将带你熟悉理论，并教你如何灵活使用<code>Stream</code>对象，就像使用<code>Gulp</code>一样。</strong></p>\n<hr>\n<p>当我在写一本名为 <a href=\"https://www.manning.com/books/front-end-tooling-with-gulp-bower-and-yeoman/?a_aid=fettblog&amp;a_bid=238ac06a\" target=\"_blank\" rel=\"noopener\">《前端工具之Gulp，Brower和Yeoman》</a> 的书时，我决定不仅要展示API和使用案例，还需要关注以下的概念。</p>\n<p>你要知道特别是在JavaScript中，工具和框架的更新换代比你为它们注册域名和创建Github团队的速度还要快。<strong>例如<a href=\"http://gulpjs.com/\" target=\"_blank\" rel=\"noopener\">Gulp.js</a>，最重要的一个概念是流！</strong></p>","more":"<h2 id=\"约50年的流\"><a href=\"#约50年的流\" class=\"headerlink\" title=\"约50年的流\"></a>约50年的流</h2><p>在<code>Gulp</code>里，你想要读取一些文件的数据转换为指定的数据输出，加载一些<code>JavaScript</code>文件并打包成一个文件。这些操作<code>Gulp</code>的API已经提供了一些方法来读取，转换，和写入文件，所有的这些方法都是基于流来实现的。</p>\n<blockquote>\n<p> 在计算机中流是一个很老的概念，,源自1960年代早期Unix。</p>\n</blockquote>\n<p>“流是一个数据随着时间序列从源到目的地的过程。“ @ddprrt</p>\n<p>数据源的类型是多样化的：文件，计算机内存或者像键盘，鼠标之类的输入设备。</p>\n<p>流一旦被打开，数据就会从原点开始分割成一块块的小的数据进行传输然后消费。输入一个文件，每个字符或者字节都会被读取一次；键盘输入，每个按键将传输数据流。</p>\n<blockquote>\n<p> 最大的优势在于一次加载所有数据,理论上,输入可以无限输入的完全没有限制。</p>\n</blockquote>\n<p>来至键盘的任意一个输入都是有意义的 —— 为什么你应该通过键盘输入控制电脑关闭输入流？</p>\n<p>输入流统称为<strong>可读流</strong>，这意味着它们从原点读取数据。另一方面，有输出流和终点；它们可能是文件或者某一段内存，一般输出设备可以是命令行，打印机，或屏幕之类的。</p>\n<p>它们统称为<strong>输出流值</strong>，意味着它们存储来着流的数据。下图说明了流是如何工作的。</p>\n<p><img src=\"/images/2017-05-21-object-streams-in-nodejs/01.jpg\" alt=\"流\"></p>\n<p>数据是由一组可用的元素组成的序列（就像字符或者字节）。</p>\n<p>可读流可以来自不同的来源，例如输入设备（键盘），文件，内存里面的数据。可写流可以任意的终点，例如文件和内存，以及众所周知的命令行。</p>\n<p>可读和可写流可以互换：键盘输入可以保存在文件中,命令行输入可以作为文件的输入流。</p>\n<p>它不仅可以有无尽的输入，而且你可以结合不同的可读和可写流。关键的输入可以直接存储到一个文件中，或者你可以通过命令行和打印机打印文件。接口保持不变，无论来源或目的地是什么。</p>\n<p>在Node.js最简单的涉及到把流的从标准输入转换到标准输出的程序例子，使用控制台：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.stdin.pipe(process.stdout);</span><br></pre></td></tr></table></figure>\n<p>我们把我们的可读流（<code>process.stdin</code>）把它转换到可写流（<code>process.stdout</code>）上。在这之前，我们可以把任意的流内容从任意的原点转换到任意的终点。</p>\n<p>就以<a href=\"https://www.npmjs.com/package/request\" target=\"_blank\" rel=\"noopener\">request</a>包为例，我们可以使用它向指定的<code>URL</code>发送<code>http</code>请求。为什么不从网上来取一些页面并且使用<code>process.stdin</code>把它打印出来？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</span><br><span class=\"line\">request(<span class=\"string\">'https://fettblog.eu'</span>).pipe(process.stdout);</span><br></pre></td></tr></table></figure>\n<p>使用控制台输出一个<code>HTML</code>确实不怎么有用，但是使用它转换到一个文件却是网络利刃。</p>\n<h2 id=\"转换数据\"><a href=\"#转换数据\" class=\"headerlink\" title=\"转换数据\"></a>转换数据</h2><p>流不仅适合用来在不同的原点和终点之间传输数据。</p>\n<p><strong>流一旦打开数据只会暴露一次，开发者可以在数据到达终点之前进行转换数据，最简单的例子就是把一个文件所有小写字符转换为大写字符</strong></p>\n<p>这是流其中的一个最大的优势所在。流一旦打开你就可以一块块的读取数据，你可以在程序的不同位置进行操作。下图说明了这个过程。</p>\n<p><img src=\"/images/2017-05-21-object-streams-in-nodejs/02.jpg\" alt=\"转换数据\"></p>\n<p>对于修改数据，你只需要在输入和输出之间添加对应的程序转换代码块。</p>\n<p>本例子中，你拿到来自不同原点和渠道的输入数据并且使用<code>toUpperCase</code>进行转换。这个会把小写字符转换为它们对于的大写字符。这个函数一旦定义，就可以在不同的输入原点和输出重复使用。</p>\n<p>下面，我定义了一个<code>toUpperCase</code>的函数——用来转换任意字符对应的大写字符。创建这个函数有多种方式，但是我是Node.js流封装库像<code>through2</code>之类的超级粉丝。他们已经定义一个好的包装,可以轻松的创建一个转换体:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> through2 = <span class=\"built_in\">require</span>(<span class=\"string\">'through2'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toUpperCase = through2(<span class=\"function\">(<span class=\"params\">data, enc, cb</span>) =&gt;</span> &#123;      <span class=\"comment\">/* 1 */</span>  </span><br><span class=\"line\">  cb(<span class=\"literal\">null</span>, <span class=\"keyword\">new</span> Buffer(data.toString().toUpperCase())); <span class=\"comment\">/* 2 */</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">process.stdin.pipe(toUpperCase).pipe(process.stdout);  <span class=\"comment\">/* 3 */</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>1.<code>through2</code>库绑定第一个参数为函数。 这个函数用来传递数据（默认为<code>Buffer</code>实例），传入一些字符编码和一旦我们传入回调函数我们就可以在转换完成之后进行调用。</li>\n<li>2.通常，在Node.js流里面，我们传递<code>Buffer</code>类型的数据流。可以来自<code>process.stdin</code>的数据，在我们按下回车键之后。来自一个文件，这实际上可以任何东西。我们转换当前<code>Buffer</code>为字符串，把小写转换为大写，然后转换为<code>Buffer</code>再次输出。回调函数有2个参数，第一个参数是错误信息。如果你没有对<code>end</code>事件进行监听来捕获错误，流将崩溃程序会由于异常而退出。没有异常第一个参数会返回<code>null</code>。第二个参数是转换的数据。</li>\n<li>3.我们可以传递我们可读的输入数据到这个转换函数。转换好的数据传递到我们的可读流。</li>\n</ul>\n<p>这是完全在函数式编程的路子。我们可以重复使用这个函数来转换不同输入或输出，只要它是可读流。我们不需要关心输入源或输出。同时,我们并不局限于一个单一的转换。我们可以同时链式调用多个转换就像这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> through2 = <span class=\"built_in\">require</span>(<span class=\"string\">'through2'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toUpperCase = through2(<span class=\"function\">(<span class=\"params\">data, enc, cb</span>) =&gt;</span> &#123;  </span><br><span class=\"line\">  cb(<span class=\"literal\">null</span>, <span class=\"keyword\">new</span> Buffer(data.toString().toUpperCase()));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dashBetweenWords = through2(<span class=\"function\">(<span class=\"params\">data, enc, cb</span>) =&gt;</span> &#123;  </span><br><span class=\"line\">  cb(<span class=\"literal\">null</span>, <span class=\"keyword\">new</span> Buffer(data.toString().split(<span class=\"string\">' '</span>).join(<span class=\"string\">'-'</span>)));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">process.stdin  </span><br><span class=\"line\">  .pipe(toUpperCase)</span><br><span class=\"line\">  .pipe(dashBetweenWords)</span><br><span class=\"line\">  .pipe(process.stdout);</span><br></pre></td></tr></table></figure>\n<p>如果你熟悉<code>Gulp</code>,对上面的代码应该会有映象。很简洁，不是吗？然而，<code>Gulp</code>流需要特别注意的不同点是：不会传递<code>Buffer</code>类型的数据，我们使用的是简单的，原生的JavaScript对象。</p>\n<h2 id=\"流对象\"><a href=\"#流对象\" class=\"headerlink\" title=\"流对象\"></a>流对象</h2><p>在标准流里,通常看到的文件只是可能作为一个真实数据的输入源,要处理的数据。流一旦打开，文件的所有信息像路径或文件名等这些信息也会被传递。</p>\n<blockquote>\n<p>在<code>Gulp</code>里，你要处理的内容不仅是一个或多个文件，你也需要文件名以及文件系统里面的真实文件。</p>\n</blockquote>\n<p>试想一下现在有20个JavaScript文件需要进行压缩处理。你需要记住每个文件的文件名病情需要保证每个文件的数据都能正确的保存到对应的输出文件中（一些压缩文件）。</p>\n<p><strong>幸运的是,<code>Gulp</code>同时为你创建一个新的输入源和一个对你当前数据流非常有用的数据类型:虚拟文件对象。</strong></p>\n<p><code>Gulp</code>中流一旦打开，文件的所有原始信息，物理信息都会被打包到一个虚拟的文件对象中并且保存到虚拟文件系统中，或者<code>Vinyl</code>中，好让<code>Gulp</code>中相应的组件进行调用。</p>\n<p><code>Vinyl</code>对象，文件对象是你的虚拟文件系统，内容包含两种类型的信息：根据文件名称和路径可以定位文件的位置，以及流里面传输的文件内容。虚拟文件保存在计算机内存中，这样处理数据时更加的快速。</p>\n<p>通常所有的修改可能最终都会保存到硬盘上。把所有的东西都放在内存中进程之间在处理数据的时候就不用再执行昂贵的读写操作了，保证<code>Gulp</code>上下文迅速切换。</p>\n<p>在内部，<code>Gulp</code>使用对象流去一个个的加载文件到处理管道中。对象流和普通的流行为类似，而不是<code>Buffer</code>和<code>String</code>类似。</p>\n<p>我们可以使用<a href=\"https://www.npmjs.com/package/readable-stream\" target=\"_blank\" rel=\"noopener\">readable-stream</a>包来创建我们自己的可读对象流。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> through2 = <span class=\"built_in\">require</span>(<span class=\"string\">'through2'</span>);  </span><br><span class=\"line\"><span class=\"keyword\">const</span> Readable = <span class=\"built_in\">require</span>(<span class=\"string\">'readable-stream'</span>).Readable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> stream = Readable(&#123;<span class=\"attr\">objectMode</span>: <span class=\"literal\">true</span>&#125;);   <span class=\"comment\">/* 1 */</span>  </span><br><span class=\"line\">stream._read = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;                       <span class=\"comment\">/* 2 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;                            <span class=\"comment\">/* 3 */</span>  </span><br><span class=\"line\">  stream.push(&#123;</span><br><span class=\"line\">    x: <span class=\"built_in\">Math</span>.random()</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getX = through2.obj(<span class=\"function\">(<span class=\"params\">data, enc, cb</span>) =&gt;</span> &#123; <span class=\"comment\">/* 4 */</span>  </span><br><span class=\"line\">  cb(<span class=\"literal\">null</span>, <span class=\"string\">`<span class=\"subst\">$&#123;data.x.toString()&#125;</span>\\n`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">stream.pipe(getX).pipe(process.stdout);        <span class=\"comment\">/* 5 */</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>最重要的是在创建可读对象流的时候要将<code>objectMode</code>设置为<code>true</code>。在这样做时，流能够通过管道传递JavaScript对象。不然它会认为是<code>Buffer</code>或者<code>String</code>。</li>\n<li>每个流都需要一个<code>_read</code>函数。这个函数会在数据块到达的时候触发。这是其它机制开始的位置，并将新内容推送到流。由于我们从外部推送数据，所以我们不需要这个功能，可以使它无效。 然而，可读流需要实现这一点，否则我们会报错误。</li>\n<li>在这里，我们正在使用演示数据填充流。 每100毫秒，我们将一个随机数的另一个对象推送到我们的流。</li>\n<li>由于我们想将对象流的结果传递给<code>process.stdout</code>，而<code>process.stdout</code>只接受字符串，所以我们需要做个小的变换，我们从传递的JavaScript对象中提取属性。</li>\n<li>我们创建一个管道。 我们可读的对象流将其所有数据传输到<code>getX</code>，最后传输到<code>process.stdout</code>。</li>\n</ul>\n<h3 id=\"Node-js中流包的注意事项\"><a href=\"#Node-js中流包的注意事项\" class=\"headerlink\" title=\"Node.js中流包的注意事项\"></a>Node.js中流包的注意事项</h3><p>您可能已经注意到，我们使用了通过NPM安装的不同流包。 不是很奇怪吗？</p>\n<p>“Streams对于异步IO来说至关重要，它们不应该成为@nodejs核心的一部分吗？ 是的没错。”</p>\n<p>然而，流的核心在Node的旧的0.x版本的时候是不断变化的，这就是为什么社区在基本软件包的基础上加入并创建了一个坚实稳定的API。 使用语义版本控制，您可以确保流媒体生态系统与您的应用程序一起很好地移动。</p>\n<h2 id=\"足够的Demo演示，然我们正真的做些事\"><a href=\"#足够的Demo演示，然我们正真的做些事\" class=\"headerlink\" title=\"足够的Demo演示，然我们正真的做些事\"></a>足够的Demo演示，然我们正真的做些事</h2><p>好！让我们做一个app去读取<code>CVS</code>数据并且保存到<code>JSON</code>中。我们想要使用对象流，因为在某些时候，我们可能需要根据用例来更改数据。由于流很强大，我们希望能够将结果以不同的格式输出。</p>\n<p>首先我们先安装几个软件包：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> through2 = <span class=\"built_in\">require</span>(<span class=\"string\">'through2'</span>);  </span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);  </span><br><span class=\"line\"><span class=\"keyword\">const</span> split = <span class=\"built_in\">require</span>(<span class=\"string\">'split2'</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>我们已经了解了<code>through2</code>。现在我们使用这个来创建转换。</li>\n<li><code>fs</code>包显然是用来读写文件的。厉害的是：它允许我们创建一个<strong>可读的流</strong>，这正是我们需要的。</li>\n<li>可能你不知道<code>fs.createReadStream</code>的数据如何被拉入到内存中，所以<code>split2</code>包确保您可以逐行处理数据。 注意这个可变形的名称中的“2”。 它告诉你，它是语义版本的包装生态系统的一部分。</li>\n</ul>\n<h3 id=\"解析CVS\"><a href=\"#解析CVS\" class=\"headerlink\" title=\"解析CVS\"></a>解析CVS</h3><p>CSV非常适用于解析，因为它遵循非常容易理解的格式：逗号表示新的单元格。 一行表示新行。</p>\n<p>简单。</p>\n<p>在这个例子中，第一行始终是数据的标题。 所以我们想以一种特殊的方式对待第一行：它将为我们的<code>JSON</code>对象提供字段。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parseCSV = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> templateKeys = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> parseHeadline = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> through2.obj(<span class=\"function\">(<span class=\"params\">data, enc, cb</span>) =&gt;</span> &#123;       <span class=\"comment\">/* 1 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parseHeadline) &#123;</span><br><span class=\"line\">      templateKeys = data.toString().split(<span class=\"string\">','</span>);</span><br><span class=\"line\">      parseHeadline = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cb(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>);                     <span class=\"comment\">/* 2 */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> entries = data.toString().split(<span class=\"string\">','</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    templateKeys.forEach(<span class=\"function\">(<span class=\"params\">el, index</span>) =&gt;</span> &#123;       <span class=\"comment\">/* 3 */</span></span><br><span class=\"line\">      obj[el] = entries[index];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cb(<span class=\"literal\">null</span>, obj);                       <span class=\"comment\">/* 4 */</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>我们创建一个可变对象流。 注意<code>.obj</code>方法。 即使您的输入数据只是字符串，如果要进一步触发对象，则需要对象流进行转换。</li>\n<li>在这个代码块中，我们解析标题（逗号分隔）。 这将是我们的字段模板。 我们从流中删除这一行，这就是为什么我们传递的两个参数都是<code>null</code>。</li>\n<li>对于所有其他行，我们通过我们先前解析的字段来帮助创建一个对象。</li>\n<li>我们将这个对象传递到下一个阶段。</li>\n</ul>\n<h3 id=\"更改和调整数据\"><a href=\"#更改和调整数据\" class=\"headerlink\" title=\"更改和调整数据\"></a>更改和调整数据</h3><p>一旦我们拥有可用的对象，我们可以更容易地转换数据。 删除属性，添加新的属性; 过滤，映射和缩小。 你喜欢的都可以。 对于这个例子，我们想保持简单：选择前10个条目：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pickFirst10 = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> through2.obj(<span class=\"function\">(<span class=\"params\">data, enc, cb</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cnt++ <span class=\"xml\"><span class=\"tag\">&lt; <span class=\"attr\">10</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"xml\">      return cb(null, data);</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;</span></span><br><span class=\"line\"><span class=\"xml\">    return cb(null, null);</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;);</span></span><br><span class=\"line\"><span class=\"xml\">&#125;;</span></span><br></pre></td></tr></table></figure>\n<p>再次像前面的例子一样：传递回调的第二个参数的数据意味着我们将元素保留在流中。 传递<code>null</code>表示我们将数据丢弃。 这对过滤器至关重要！</p>\n<h3 id=\"保存到JSON\"><a href=\"#保存到JSON\" class=\"headerlink\" title=\"保存到JSON\"></a>保存到JSON</h3><p>你知道JSON是什么意思？JavaScript对象。这太好了，因为我们有JavaScript对象，我们可以用字符串表示法来形容它们！</p>\n<p>所以，我们想要处理流中通过的对象保存为一个对象，并将它们存储为一个字符串表示形式。 最先考虑到的是：<code>JSON.stringify</code>。</p>\n<p><strong>使用流时必须知道的一件重要的事情是，一旦对象（或<code>Buffer</code>数据）转换到下一个阶段，那么这个阶段就已经消失了。</strong></p>\n<p>这也意味着您可以将对象传递给一个可写流，不需要太多。 然而，必须有一个方法来做与收集数据不同的事情。 如果流中没有更多数据，每个转换会调用一次<code>flush</code>方法。</p>\n<blockquote>\n<p>想想一个充满流体的水槽。</p>\n</blockquote>\n<p>你不能选择它的每块数据块来进行再次分析。 但是，您可以将整个数据冲刷到下一个阶段。 这是我们正在做的下一个可变换到JSON：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> toJSON = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">let</span> objs = [];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> through2.obj(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, enc, cb</span>) </span>&#123;</span><br><span class=\"line\">    objs.push(data);                              <span class=\"comment\">/* 1 */</span></span><br><span class=\"line\">    cb(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;                               <span class=\"comment\">/* 2 */</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.push(<span class=\"built_in\">JSON</span>.stringify(objs));</span><br><span class=\"line\">    cb();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>我们把传递过来的所有数据存放到数组里。 我们从我们的流中删除对象。</li>\n<li>在第二个回调方法中，<code>flush</code>方法，我们将收集的数据转换为<code>JSON</code>字符串。 使用<code>this.push</code>（注意经典函数符号），我们将这个新对象推送到我们的流进入下一个阶段。 在这个例子中，新的“对象”只是一个字符串。 与标准可写性兼容的东西！</li>\n</ul>\n<p>例如，<code>Gulp</code>在使用链式调用行为时。 读取第一阶段的所有文件，然后将一个文件刷新到下一个阶段。</p>\n<h3 id=\"结合一切\"><a href=\"#结合一切\" class=\"headerlink\" title=\"结合一切\"></a>结合一切</h3><p>到这里我又想到了函数式编程:后面的转换函数都是按行分开写的。它们完全可重用的不同场景,无论输入数据和输出格式。</p>\n<p>唯一约束是CSV格式的(第一行是字段名),<code>pickFirst10</code>和<code>toJSON</code>需要JavaScript对象作为输入。并且把前10项转为JSON格式输出到控制台:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stream = fs.createReadStream(<span class=\"string\">'sample.csv'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">stream  </span><br><span class=\"line\">  .pipe(split())</span><br><span class=\"line\">  .pipe(parseCSV())</span><br><span class=\"line\">  .pipe(pickFirst10())</span><br><span class=\"line\">  .pipe(toJSON())</span><br><span class=\"line\">  .pipe(process.stdout);</span><br></pre></td></tr></table></figure>\n<p>完美！我们可以传输不同的可写流。在Node.js里，IO的核心是依赖流的。下面是一个<code>HTTP</code>服务器并把所有数据传输到互联网的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// All from above</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> stream = fs.createReadStream(<span class=\"string\">'sample.csv'</span>)  </span><br><span class=\"line\">  .pipe(split())</span><br><span class=\"line\">  .pipe(parseCSV())</span><br><span class=\"line\">  .pipe(pickFirst10())</span><br><span class=\"line\">  .pipe(toJSON())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;  </span><br><span class=\"line\">  stream.pipe(res);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">8000</span>);</span><br></pre></td></tr></table></figure>\n<p>这是Node.js流的一大优势所在。你可以异步的处理输入和输出，并且可以根据以依赖的步骤转换处理数据。对于对象流，你可以利用自己知道的部分去转换你的数据。</p>\n<p>这是<code>Gulp</code>作为一个以流为基础的构建系统，但也是一个日常开发的好工具。</p>\n<h2 id=\"进一步阅读\"><a href=\"#进一步阅读\" class=\"headerlink\" title=\"进一步阅读\"></a>进一步阅读</h2><p>如果你想深入了解流,我可以推荐一些资源:</p>\n<ul>\n<li><a href=\"https://www.manning.com/books/front-end-tooling-with-gulp-bower-and-yeoman/?a_aid=fettblog&amp;a_bid=238ac06a\" target=\"_blank\" rel=\"noopener\">《前端工具之Gulo,Bower和Yeoman》</a>书中有一些章节是讲流工具的像合并流以及后面有章节讲转移流。</li>\n<li><a href=\"https://fettblog.eu/\" target=\"_blank\" rel=\"noopener\">Fettblog</a> 我的博客有很多关于<code>Gulp</code>和<code>Gulp</code>插件的文章。因为所有<code>Gulp</code>插件被编写为对象,你可以学习写一个或从中学习到其它东西。</li>\n<li><a href=\"https://github.com/substack/stream-handbook\" target=\"_blank\" rel=\"noopener\">Substack的一本关于流的电子书</a>。了解流的原理。</li>\n<li><a href=\"https://r.va.gg/2014/06/why-i-dont-use-nodes-core-stream-module.html\" target=\"_blank\" rel=\"noopener\">Rod Vagg 对流核心的讲解</a>。有点老，但是依然是很不错的：Rod Vagg 解释为什么使用流类型的NPM包。</li>\n</ul>\n<p>原文：<a href=\"https://community.risingstack.com/the-definitive-guide-to-object-streams-in-node-js/\" target=\"_blank\" rel=\"noopener\">https://community.risingstack.com/the-definitive-guide-to-object-streams-in-node-js/</a></p>\n<p>译者：<a href=\"https://github.com/Yi-love\" target=\"_blank\" rel=\"noopener\">Jin</a></p>\n<p>作者：<a href=\"https://community.risingstack.com/author/stefan/\" target=\"_blank\" rel=\"noopener\">Stefan Baumgartner</a></p>"},{"title":"xhr/jsonp请求之abort详解","date":"2017-06-01T14:30:00.000Z","author":"Jin","_content":"\n当你看到文章标题的时候可能会觉得这是一个老生常谈的话题。\n\n前端开发中向后端发起xhr（`XMLHttpRequest`）请求（代表性的就是熟悉的`ajax`）是再正常不过的事。\n\n但在前端开发过程中，不怎么重视xhr的abort（中止掉xhr请求，及表示取消本次请求）。往往会带来一些不可意料的结果。\n\n<!-- more -->\n\n比如：切换tab，发起xhr请求，渲染同一个列表。就这么简单的拉取数据渲染列表的功能，并且可以根据tab切换。想想应该是很简单。但是假如你只顾着发起xhr请求，而没有abort掉它，想想会发生什么。很有可能就是当前选中的tab数据，并不是你想要的。说白了就是数据错了。这时候你可能就要考虑是不是xhr请求返回数据的顺序问题。\n\n答案是肯定的，xhr请求返回数据顺序是不固定的。所以你要做的就是abort掉你之前的xhr请求，然后再发起一个新的xhr请求。\n\n结合上面所说的例子可以知道xhr使用不当会存在以下问题：\n\n* 容易出现页面最终数据与状态不一致的问题，这可能再列表筛选是出现的概率比较大。\n* xhr请求达到一定数量之后，浏览器就会显得非常的慢。因为有太多的请求在请求服务器资源。\n\n为了解决上面的问题，我们在进行页面的时候就必须考虑abort掉所有的xhr请求。\n\n那么如何实现xhr的abort方法呢，或者通过何种方式abort掉xhr呢？\n\n## 一个简单的xhr\n我们都知道，现在的框架（例如：jQuery的`ajax`模块）对xhr都进行了封装，是为了让我们更好的使用xhr。但是也蒙蔽了我们的眼睛。让我们抛开框架，来看看一个简单的xhr怎么实现。\n\n```js\n//仅供参考 xhr\nfunction ajax(type ,url , data , successCallBack , errorCallBack){\n  let xhr = new XMLHttpRequest();\n  xhr.onload = ()=>{\n    if(xhr.status === 200){\n      return successCallBack(xhr.response||xhr.responseText);\n    }\n    return errorCallBack('请求失败');\n  }\n  xhr.onerror = ()=>{\n    return errorCallBack('出错了');\n  }\n  xhr.open(type,url);\n  xhr.send(data ? data:null);\n}\n```\n\n这就是一个简单的xhr请求的实现，我把它命名为`ajax`,我们现在可以通过以下方式进行调用：\n\n```js\najax('get','/test/getUserList' , undefined , function(result){\n  console.log('成功了。', result);\n} ,function(error){\n  console.log(error);\n});\n```\n\n如果使用这个方法我们是没办法`abort`掉xhr请求的。好吧，现在我们把它改造一下，让它支持abort方法：\n\n```js\n//仅供参考 xhr.abort\nfunction ajax(type ,url , data , successCallBack , errorCallBack){\n  let xhr = new XMLHttpRequest();\n  xhr.onload = ()=>{\n    if(xhr.status === 200){\n      return successCallBack(xhr.response||xhr.responseText);\n    }\n    return errorCallBack('请求失败');\n  }\n  xhr.onerror = ()=>{\n    return errorCallBack('出错了');\n  }\n  xhr.open(type,url);\n  xhr.send(data ? data:null);\n\n  return xhr;//返回XMLHttpRequest实例对象\n}\n```\n\n好像没有什么变化对吧。不错，只要在函数的末尾添加`return xhr;`将`XMLHttpRequest`实例对象返回即可。那我们在就已经可以如愿的abort掉xhr请求。\n\n```js\n  let xhr = ajax('get','/test/getUserList' , undefined , function(result){\n    console.log('成功了。', result);\n  } ,function(error){\n    console.log(error);\n  });\n\n  //abort\n  xhr.abort();\n```\n\n好像我们已经大功告成了。但是问题来了，现在Promise这么好用，为什么不把它加进来呢。像这样没法在我们的Promise链式调用上使用它。\n\n\n## Promise封装xhr\n好了，现在的首要任务是封装出一个Promise版的ajax库。首要要确认的就是，`ajax`方法需要返回的是`Promise`实例对象，而不再是原生的`XMLHttpRequest`实例对象。知道了这一点那就可以进行封装了。\n\n```js\n//仅供参考 promise\nfunction ajax(type ,url , data ){\n  let xhr = new XMLHttpRequest();\n\n  let promise = new Promise(function(resolve , reject){\n    xhr.onload = ()=>{\n      if(xhr.status === 200){\n        return resolve(xhr.response||xhr.responseText);\n      }\n      return reject('请求失败');\n    }\n    xhr.onerror = ()=>{\n      return reject('出错了');\n    }\n    xhr.open(type,url);\n    xhr.send(data ? data:null);\n  });\n  return promise;//返回Promise实例对象\n}\n```\n\n使用了`Promise`之后我们不再需要传入回调函数。所以参数减少了。这样我们就可以愉快的进行链式调用了。\n\n```js\nlet promise = ajax('get','/test/getUserList');\npromise.then((result)=>{\n  console.log('成功了。', result);\n},(error)=>{\n  console.log(error);\n})\n```\n\n可问题有来了，`Promise`实例是没有`abort`方法的。假如我们把ajax方法修改为返回`xhr`，我们是可以如期调用`abort`方法杀死请求，但是我们就不能使用`Promise`带给我们的好处了。\n\n仔细思考，最后一句`return promise;` 这里是不能改。我们只能另外想办法。\n\n最简单的解决方式就是创建一个xhr和promise的映射关系。也就是每一个promise对应一个唯一的xhr请求。有了思路之后，解决方案就来了。\n\n```js\n\nlet map = [];//用于保存promise和xhr之间的映射关系\n\n//仅供参考 promise abort\nfunction ajax(type ,url , data ){\n  let xhr = new XMLHttpRequest();\n\n  let promise = new Promise(function(resolve , reject){\n    xhr.onload = ()=>{\n      if(xhr.status === 200){\n        return resolve(xhr.response||xhr.responseText);\n      }\n      return reject('请求失败');\n    }\n    xhr.onerror = ()=>{\n      return reject('出错了');\n    }\n    xhr.open(type,url);\n    xhr.send(data ? data:null);\n  });\n  map.push({promise:promise,request:xhr});//创建promise和xhr之间的映射关系，保存到全局的一个数组中。\n  return promise;//返回Promise实例对象\n}\n//abort 请求\nfunction abort(promise){\n  for(let i = 0 ; i < map.length ; i++ ){\n    if ( map[i].promise === promise ){\n      map[i].request.abort();\n    }\n  }\n}\n```\n\n通过在全局创建一个map保存所有的promise和xhr之间的映射关系。这样我们就可以在需要abort请求的时候根据映射关系找到xhr并abort请求。\n\n```js\nlet promise = ajax('get','/test/getUserList');\npromise.then((result)=>{\n  console.log('成功了。', result);\n},(error)=>{\n  console.log(error);\n})\n\nabort(promise);\n```\n\n好吧，到这里Promise版的ajax,我们已经实现了。是不是很简单啊。\n\n## 何为jsonp\n假如你还不明白jsonp是何物，那希望下面的篇幅能让你明白。可能你零星的知道跨越请求，但是可能没有在实战中碰到过。那么我们先来看看，一个简单的`jsonp`函数是怎么实现的吧。\n\n```js\nlet index = 0;\n//仅供参考 jsonp\nfunction jsonp(url,jsonp,successCallback , errorCallback){\n  let script = document.createElement('script');\n  let result ;\n  script.onload = function(){\n    successCallback(result);\n  }\n  script.onerror = function(){\n    errorCallback('出错了');\n  }\n  let callBackName = 'jsonpCallback'+index++;\n  script.src=url+(url.indexOf('?') >=0 ? '&':'?')+jsonp+'='+callBackName;\n\n  window[callBackName]=function(){//拿给后端进行输出执行的。\n    result = Array.prototype.slice.call(arguments);\n  }\n  document.head.append(script);\n}\n```\n\njsonp算起来应该就是通过`script`加载实现的跨域请求。其中重要的就是数据返回的接收，我们需要和后端开发同学协商回调函数的变量名。然后后端获取到回调函数名，并且在返回时把回调函数和数据拼接成字符串返回到前端。前端我们添加一个window对象的函数用于接收数据，在函数执行完成后，就会触发`script.onload`事件，这样就可以真正执行用户回调函数了。\n\n可能你会觉得有点绕，其实细细的理一下，应该就明白了。\n\n后端其实很简单，只要获取到`jsonp`函数变量名就可以了。然后把函数和数据拼接成字符串返回即可。\n\n下面我们来看看Node.js中的实现：\n\n```js\n  let query = ctx.request.query;\n  let jsonp = query.jsonp;//与后端协商的回调参数\n  ctx.body = jsonp+'({code:0,msg:\"success\"})';\n```\n\n这个回调函数并不是用户输入的`successCallback`,而是`jsonp`函数内部的`window[callBackName]`,为什么要这样。你细想一下JavaScript的作用域应该就会知道。这就好比你在`script`标签中执行一个函数一样。\n\n有可能我们第一次调用`jsonp`函数服务器会返回如下结果：\n\n```html\n<script >\n  //只有这一行是服务器返回的，\n  //script标签是document.head.append(script)时候加的\n  jsonpCallback0({code:0,msg:\"success\"});\n</script>\n```\n\n所以，得出结论就是：函数必须能通过`window`对象上访问到。不然执行时就会报错。这就是为什么我们不能直接把用户传入的回调直接用来当成回调接收数据的真正原因。\n\n再次强调：JavaScript作用域。\n\n一次成功的jsonp应该是：添加`script`标签到`head`,后端接收到`jsonp`数据，返回拼接好的函数名和数据字符串，执行`window`对象上的函数拿到数据，执行`script.onload`事件，执行成功回调。\n\n## jsonp的`abort`方法何去何从\n\n现在你已经知道了jsonp的原理了。那么如何才能对`script`加载数据进行`abort`呢。\n\n犯难的问题来了，`script`并没有真正的`abort`方法给我们使用。我们所做的就是尽最大的努力提供类似于abort功能的方法。\n\n思路就是使用`Event`事件对象。触发`script`的`error`监听事件。所以我们得对`jsonp`函数添加一个`trigger`辅助函数进行触发`error`事件。\n\n```js\n//[trigger 触发事件]\nfunction trigger(element,event){\n  if( !isString(event) ) {\n    return;\n  }\n  if ( element.dispatchEvent ){\n    let evt = document.createEvent('Events');// initEvent接受3个参数\n    evt.initEvent(event, true, true);\n    element.dispatchEvent(evt);\n  }else if ( element.fireEvent ){ //IE\n    element.fireEvent('on'+event);\n  }else{\n    element['on'+event]();\n  }\n}\nlet index = 0;\n//仅供参考 jsonp.abort\nfunction jsonp(url,jsonp,successCallback , errorCallback){\n  let script = document.createElement('script');\n  let result ;\n  script.onload = function(){\n    successCallback(result);\n  }\n  script.onerror = function(){\n    errorCallback('出错了');\n  }\n  let callBackName = 'jsonpCallback'+index++;\n  script.src=url+(url.indexOf('?') >=0 ? '&':'?')+jsonp+'='+callBackName;\n\n  window[callBackName]=function(){//拿给后端进行输出执行的。\n    result = Array.prototype.slice.call(arguments);\n  }\n  script.abort = ()=>{\n    return trigger(script,'error');\n  };\n  document.head.append(script);\n  return script;\n}\n```\n\n我们把`Promise`也使用进来，那样的话，我们就可以脱离回调地狱了不是吗？\n\n```js\nlet index = 0;\n//仅供参考 jsonp.abort\nfunction jsonp(url,query,jsonp){\n  let script = document.createElement('script');\n  let result ;\n\n  let promise = new Promise(function(resolve,reject){\n    script.onload = function(){\n      return resolve(result);\n    }\n    script.onerror = function(){\n      return reject('出错了');\n    }\n    let callBackName = 'jsonpCallback'+index++;\n    script.src=url+(url.indexOf('?') >=0 ? '&':'?')+jsonp+'='+callBackName;\n\n    window[callBackName]=function(){//拿给后端进行输出执行的。\n      result = Array.prototype.slice.call(arguments);\n    }\n    document.head.append(script);\n  });\n  script.abort = ()=>{\n    return trigger(script,'error');\n  };\n  map.push({promise:promise,request:script});//创建promise和script之间的映射关系，保存到全局的一个数组中。\n  return promise;\n}\n```\n\n同样的我们套用上面的`xhr`的`abort`函数封装。这样我们就大功告成了。基本的功能我们就全部实现了。我们就可以开始进行调用了。\n\n```js\nlet promise = jsonp('/test/getUserList','jsonp');\npromise.then((result)=>{\n  console.log('成功了。', result);\n},(error)=>{\n  console.log(error);\n})\n\nabort(promise);\n```\n\n## 总结\n虽然，我们已经完成了封装，但是还有很多的意外没有考虑，要想再实战中运用还必须进行封装和重构。我们必须重视`abort`方法在xhr/jsonp中的运用，但是也不能滥用，适可而止。存在多层服务器调用时，应该更需要慎重考虑。\n\n要想了解更多，可以参考这是我封装好的一个Promise版本的ajax/jsonp库[https://github.com/Yi-love/xhrp](https://github.com/Yi-love/xhrp)。希望对你有所帮助。\n\n\n","source":"_posts/2017-06-01-xhr-jsonp-abort.md","raw":"---\ntitle: xhr/jsonp请求之abort详解\ndate: 2017-06-01 22:30\ncategory: JavaScript\ntags: [abort,ajax,jsonp,XMLHttpRequest]\nauthor: Jin\n---\n\n当你看到文章标题的时候可能会觉得这是一个老生常谈的话题。\n\n前端开发中向后端发起xhr（`XMLHttpRequest`）请求（代表性的就是熟悉的`ajax`）是再正常不过的事。\n\n但在前端开发过程中，不怎么重视xhr的abort（中止掉xhr请求，及表示取消本次请求）。往往会带来一些不可意料的结果。\n\n<!-- more -->\n\n比如：切换tab，发起xhr请求，渲染同一个列表。就这么简单的拉取数据渲染列表的功能，并且可以根据tab切换。想想应该是很简单。但是假如你只顾着发起xhr请求，而没有abort掉它，想想会发生什么。很有可能就是当前选中的tab数据，并不是你想要的。说白了就是数据错了。这时候你可能就要考虑是不是xhr请求返回数据的顺序问题。\n\n答案是肯定的，xhr请求返回数据顺序是不固定的。所以你要做的就是abort掉你之前的xhr请求，然后再发起一个新的xhr请求。\n\n结合上面所说的例子可以知道xhr使用不当会存在以下问题：\n\n* 容易出现页面最终数据与状态不一致的问题，这可能再列表筛选是出现的概率比较大。\n* xhr请求达到一定数量之后，浏览器就会显得非常的慢。因为有太多的请求在请求服务器资源。\n\n为了解决上面的问题，我们在进行页面的时候就必须考虑abort掉所有的xhr请求。\n\n那么如何实现xhr的abort方法呢，或者通过何种方式abort掉xhr呢？\n\n## 一个简单的xhr\n我们都知道，现在的框架（例如：jQuery的`ajax`模块）对xhr都进行了封装，是为了让我们更好的使用xhr。但是也蒙蔽了我们的眼睛。让我们抛开框架，来看看一个简单的xhr怎么实现。\n\n```js\n//仅供参考 xhr\nfunction ajax(type ,url , data , successCallBack , errorCallBack){\n  let xhr = new XMLHttpRequest();\n  xhr.onload = ()=>{\n    if(xhr.status === 200){\n      return successCallBack(xhr.response||xhr.responseText);\n    }\n    return errorCallBack('请求失败');\n  }\n  xhr.onerror = ()=>{\n    return errorCallBack('出错了');\n  }\n  xhr.open(type,url);\n  xhr.send(data ? data:null);\n}\n```\n\n这就是一个简单的xhr请求的实现，我把它命名为`ajax`,我们现在可以通过以下方式进行调用：\n\n```js\najax('get','/test/getUserList' , undefined , function(result){\n  console.log('成功了。', result);\n} ,function(error){\n  console.log(error);\n});\n```\n\n如果使用这个方法我们是没办法`abort`掉xhr请求的。好吧，现在我们把它改造一下，让它支持abort方法：\n\n```js\n//仅供参考 xhr.abort\nfunction ajax(type ,url , data , successCallBack , errorCallBack){\n  let xhr = new XMLHttpRequest();\n  xhr.onload = ()=>{\n    if(xhr.status === 200){\n      return successCallBack(xhr.response||xhr.responseText);\n    }\n    return errorCallBack('请求失败');\n  }\n  xhr.onerror = ()=>{\n    return errorCallBack('出错了');\n  }\n  xhr.open(type,url);\n  xhr.send(data ? data:null);\n\n  return xhr;//返回XMLHttpRequest实例对象\n}\n```\n\n好像没有什么变化对吧。不错，只要在函数的末尾添加`return xhr;`将`XMLHttpRequest`实例对象返回即可。那我们在就已经可以如愿的abort掉xhr请求。\n\n```js\n  let xhr = ajax('get','/test/getUserList' , undefined , function(result){\n    console.log('成功了。', result);\n  } ,function(error){\n    console.log(error);\n  });\n\n  //abort\n  xhr.abort();\n```\n\n好像我们已经大功告成了。但是问题来了，现在Promise这么好用，为什么不把它加进来呢。像这样没法在我们的Promise链式调用上使用它。\n\n\n## Promise封装xhr\n好了，现在的首要任务是封装出一个Promise版的ajax库。首要要确认的就是，`ajax`方法需要返回的是`Promise`实例对象，而不再是原生的`XMLHttpRequest`实例对象。知道了这一点那就可以进行封装了。\n\n```js\n//仅供参考 promise\nfunction ajax(type ,url , data ){\n  let xhr = new XMLHttpRequest();\n\n  let promise = new Promise(function(resolve , reject){\n    xhr.onload = ()=>{\n      if(xhr.status === 200){\n        return resolve(xhr.response||xhr.responseText);\n      }\n      return reject('请求失败');\n    }\n    xhr.onerror = ()=>{\n      return reject('出错了');\n    }\n    xhr.open(type,url);\n    xhr.send(data ? data:null);\n  });\n  return promise;//返回Promise实例对象\n}\n```\n\n使用了`Promise`之后我们不再需要传入回调函数。所以参数减少了。这样我们就可以愉快的进行链式调用了。\n\n```js\nlet promise = ajax('get','/test/getUserList');\npromise.then((result)=>{\n  console.log('成功了。', result);\n},(error)=>{\n  console.log(error);\n})\n```\n\n可问题有来了，`Promise`实例是没有`abort`方法的。假如我们把ajax方法修改为返回`xhr`，我们是可以如期调用`abort`方法杀死请求，但是我们就不能使用`Promise`带给我们的好处了。\n\n仔细思考，最后一句`return promise;` 这里是不能改。我们只能另外想办法。\n\n最简单的解决方式就是创建一个xhr和promise的映射关系。也就是每一个promise对应一个唯一的xhr请求。有了思路之后，解决方案就来了。\n\n```js\n\nlet map = [];//用于保存promise和xhr之间的映射关系\n\n//仅供参考 promise abort\nfunction ajax(type ,url , data ){\n  let xhr = new XMLHttpRequest();\n\n  let promise = new Promise(function(resolve , reject){\n    xhr.onload = ()=>{\n      if(xhr.status === 200){\n        return resolve(xhr.response||xhr.responseText);\n      }\n      return reject('请求失败');\n    }\n    xhr.onerror = ()=>{\n      return reject('出错了');\n    }\n    xhr.open(type,url);\n    xhr.send(data ? data:null);\n  });\n  map.push({promise:promise,request:xhr});//创建promise和xhr之间的映射关系，保存到全局的一个数组中。\n  return promise;//返回Promise实例对象\n}\n//abort 请求\nfunction abort(promise){\n  for(let i = 0 ; i < map.length ; i++ ){\n    if ( map[i].promise === promise ){\n      map[i].request.abort();\n    }\n  }\n}\n```\n\n通过在全局创建一个map保存所有的promise和xhr之间的映射关系。这样我们就可以在需要abort请求的时候根据映射关系找到xhr并abort请求。\n\n```js\nlet promise = ajax('get','/test/getUserList');\npromise.then((result)=>{\n  console.log('成功了。', result);\n},(error)=>{\n  console.log(error);\n})\n\nabort(promise);\n```\n\n好吧，到这里Promise版的ajax,我们已经实现了。是不是很简单啊。\n\n## 何为jsonp\n假如你还不明白jsonp是何物，那希望下面的篇幅能让你明白。可能你零星的知道跨越请求，但是可能没有在实战中碰到过。那么我们先来看看，一个简单的`jsonp`函数是怎么实现的吧。\n\n```js\nlet index = 0;\n//仅供参考 jsonp\nfunction jsonp(url,jsonp,successCallback , errorCallback){\n  let script = document.createElement('script');\n  let result ;\n  script.onload = function(){\n    successCallback(result);\n  }\n  script.onerror = function(){\n    errorCallback('出错了');\n  }\n  let callBackName = 'jsonpCallback'+index++;\n  script.src=url+(url.indexOf('?') >=0 ? '&':'?')+jsonp+'='+callBackName;\n\n  window[callBackName]=function(){//拿给后端进行输出执行的。\n    result = Array.prototype.slice.call(arguments);\n  }\n  document.head.append(script);\n}\n```\n\njsonp算起来应该就是通过`script`加载实现的跨域请求。其中重要的就是数据返回的接收，我们需要和后端开发同学协商回调函数的变量名。然后后端获取到回调函数名，并且在返回时把回调函数和数据拼接成字符串返回到前端。前端我们添加一个window对象的函数用于接收数据，在函数执行完成后，就会触发`script.onload`事件，这样就可以真正执行用户回调函数了。\n\n可能你会觉得有点绕，其实细细的理一下，应该就明白了。\n\n后端其实很简单，只要获取到`jsonp`函数变量名就可以了。然后把函数和数据拼接成字符串返回即可。\n\n下面我们来看看Node.js中的实现：\n\n```js\n  let query = ctx.request.query;\n  let jsonp = query.jsonp;//与后端协商的回调参数\n  ctx.body = jsonp+'({code:0,msg:\"success\"})';\n```\n\n这个回调函数并不是用户输入的`successCallback`,而是`jsonp`函数内部的`window[callBackName]`,为什么要这样。你细想一下JavaScript的作用域应该就会知道。这就好比你在`script`标签中执行一个函数一样。\n\n有可能我们第一次调用`jsonp`函数服务器会返回如下结果：\n\n```html\n<script >\n  //只有这一行是服务器返回的，\n  //script标签是document.head.append(script)时候加的\n  jsonpCallback0({code:0,msg:\"success\"});\n</script>\n```\n\n所以，得出结论就是：函数必须能通过`window`对象上访问到。不然执行时就会报错。这就是为什么我们不能直接把用户传入的回调直接用来当成回调接收数据的真正原因。\n\n再次强调：JavaScript作用域。\n\n一次成功的jsonp应该是：添加`script`标签到`head`,后端接收到`jsonp`数据，返回拼接好的函数名和数据字符串，执行`window`对象上的函数拿到数据，执行`script.onload`事件，执行成功回调。\n\n## jsonp的`abort`方法何去何从\n\n现在你已经知道了jsonp的原理了。那么如何才能对`script`加载数据进行`abort`呢。\n\n犯难的问题来了，`script`并没有真正的`abort`方法给我们使用。我们所做的就是尽最大的努力提供类似于abort功能的方法。\n\n思路就是使用`Event`事件对象。触发`script`的`error`监听事件。所以我们得对`jsonp`函数添加一个`trigger`辅助函数进行触发`error`事件。\n\n```js\n//[trigger 触发事件]\nfunction trigger(element,event){\n  if( !isString(event) ) {\n    return;\n  }\n  if ( element.dispatchEvent ){\n    let evt = document.createEvent('Events');// initEvent接受3个参数\n    evt.initEvent(event, true, true);\n    element.dispatchEvent(evt);\n  }else if ( element.fireEvent ){ //IE\n    element.fireEvent('on'+event);\n  }else{\n    element['on'+event]();\n  }\n}\nlet index = 0;\n//仅供参考 jsonp.abort\nfunction jsonp(url,jsonp,successCallback , errorCallback){\n  let script = document.createElement('script');\n  let result ;\n  script.onload = function(){\n    successCallback(result);\n  }\n  script.onerror = function(){\n    errorCallback('出错了');\n  }\n  let callBackName = 'jsonpCallback'+index++;\n  script.src=url+(url.indexOf('?') >=0 ? '&':'?')+jsonp+'='+callBackName;\n\n  window[callBackName]=function(){//拿给后端进行输出执行的。\n    result = Array.prototype.slice.call(arguments);\n  }\n  script.abort = ()=>{\n    return trigger(script,'error');\n  };\n  document.head.append(script);\n  return script;\n}\n```\n\n我们把`Promise`也使用进来，那样的话，我们就可以脱离回调地狱了不是吗？\n\n```js\nlet index = 0;\n//仅供参考 jsonp.abort\nfunction jsonp(url,query,jsonp){\n  let script = document.createElement('script');\n  let result ;\n\n  let promise = new Promise(function(resolve,reject){\n    script.onload = function(){\n      return resolve(result);\n    }\n    script.onerror = function(){\n      return reject('出错了');\n    }\n    let callBackName = 'jsonpCallback'+index++;\n    script.src=url+(url.indexOf('?') >=0 ? '&':'?')+jsonp+'='+callBackName;\n\n    window[callBackName]=function(){//拿给后端进行输出执行的。\n      result = Array.prototype.slice.call(arguments);\n    }\n    document.head.append(script);\n  });\n  script.abort = ()=>{\n    return trigger(script,'error');\n  };\n  map.push({promise:promise,request:script});//创建promise和script之间的映射关系，保存到全局的一个数组中。\n  return promise;\n}\n```\n\n同样的我们套用上面的`xhr`的`abort`函数封装。这样我们就大功告成了。基本的功能我们就全部实现了。我们就可以开始进行调用了。\n\n```js\nlet promise = jsonp('/test/getUserList','jsonp');\npromise.then((result)=>{\n  console.log('成功了。', result);\n},(error)=>{\n  console.log(error);\n})\n\nabort(promise);\n```\n\n## 总结\n虽然，我们已经完成了封装，但是还有很多的意外没有考虑，要想再实战中运用还必须进行封装和重构。我们必须重视`abort`方法在xhr/jsonp中的运用，但是也不能滥用，适可而止。存在多层服务器调用时，应该更需要慎重考虑。\n\n要想了解更多，可以参考这是我封装好的一个Promise版本的ajax/jsonp库[https://github.com/Yi-love/xhrp](https://github.com/Yi-love/xhrp)。希望对你有所帮助。\n\n\n","slug":"2017-06-01-xhr-jsonp-abort","published":1,"updated":"2017-12-01T08:50:00.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknhz000njxs119byeoiz","content":"<p>当你看到文章标题的时候可能会觉得这是一个老生常谈的话题。</p>\n<p>前端开发中向后端发起xhr（<code>XMLHttpRequest</code>）请求（代表性的就是熟悉的<code>ajax</code>）是再正常不过的事。</p>\n<p>但在前端开发过程中，不怎么重视xhr的abort（中止掉xhr请求，及表示取消本次请求）。往往会带来一些不可意料的结果。</p>\n<a id=\"more\"></a>\n<p>比如：切换tab，发起xhr请求，渲染同一个列表。就这么简单的拉取数据渲染列表的功能，并且可以根据tab切换。想想应该是很简单。但是假如你只顾着发起xhr请求，而没有abort掉它，想想会发生什么。很有可能就是当前选中的tab数据，并不是你想要的。说白了就是数据错了。这时候你可能就要考虑是不是xhr请求返回数据的顺序问题。</p>\n<p>答案是肯定的，xhr请求返回数据顺序是不固定的。所以你要做的就是abort掉你之前的xhr请求，然后再发起一个新的xhr请求。</p>\n<p>结合上面所说的例子可以知道xhr使用不当会存在以下问题：</p>\n<ul>\n<li>容易出现页面最终数据与状态不一致的问题，这可能再列表筛选是出现的概率比较大。</li>\n<li>xhr请求达到一定数量之后，浏览器就会显得非常的慢。因为有太多的请求在请求服务器资源。</li>\n</ul>\n<p>为了解决上面的问题，我们在进行页面的时候就必须考虑abort掉所有的xhr请求。</p>\n<p>那么如何实现xhr的abort方法呢，或者通过何种方式abort掉xhr呢？</p>\n<h2 id=\"一个简单的xhr\"><a href=\"#一个简单的xhr\" class=\"headerlink\" title=\"一个简单的xhr\"></a>一个简单的xhr</h2><p>我们都知道，现在的框架（例如：jQuery的<code>ajax</code>模块）对xhr都进行了封装，是为了让我们更好的使用xhr。但是也蒙蔽了我们的眼睛。让我们抛开框架，来看看一个简单的xhr怎么实现。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//仅供参考 xhr</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">type ,url , data , successCallBack , errorCallBack</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">  xhr.onload = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> successCallBack(xhr.response||xhr.responseText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errorCallBack(<span class=\"string\">'请求失败'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  xhr.onerror = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errorCallBack(<span class=\"string\">'出错了'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  xhr.open(type,url);</span><br><span class=\"line\">  xhr.send(data ? data:<span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这就是一个简单的xhr请求的实现，我把它命名为<code>ajax</code>,我们现在可以通过以下方式进行调用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ajax(<span class=\"string\">'get'</span>,<span class=\"string\">'/test/getUserList'</span> , <span class=\"literal\">undefined</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'成功了。'</span>, result);</span><br><span class=\"line\">&#125; ,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果使用这个方法我们是没办法<code>abort</code>掉xhr请求的。好吧，现在我们把它改造一下，让它支持abort方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//仅供参考 xhr.abort</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">type ,url , data , successCallBack , errorCallBack</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">  xhr.onload = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> successCallBack(xhr.response||xhr.responseText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errorCallBack(<span class=\"string\">'请求失败'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  xhr.onerror = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errorCallBack(<span class=\"string\">'出错了'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  xhr.open(type,url);</span><br><span class=\"line\">  xhr.send(data ? data:<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> xhr;<span class=\"comment\">//返回XMLHttpRequest实例对象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好像没有什么变化对吧。不错，只要在函数的末尾添加<code>return xhr;</code>将<code>XMLHttpRequest</code>实例对象返回即可。那我们在就已经可以如愿的abort掉xhr请求。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> xhr = ajax(<span class=\"string\">'get'</span>,<span class=\"string\">'/test/getUserList'</span> , <span class=\"literal\">undefined</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'成功了。'</span>, result);</span><br><span class=\"line\">&#125; ,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//abort</span></span><br><span class=\"line\">xhr.abort();</span><br></pre></td></tr></table></figure>\n<p>好像我们已经大功告成了。但是问题来了，现在Promise这么好用，为什么不把它加进来呢。像这样没法在我们的Promise链式调用上使用它。</p>\n<h2 id=\"Promise封装xhr\"><a href=\"#Promise封装xhr\" class=\"headerlink\" title=\"Promise封装xhr\"></a>Promise封装xhr</h2><p>好了，现在的首要任务是封装出一个Promise版的ajax库。首要要确认的就是，<code>ajax</code>方法需要返回的是<code>Promise</code>实例对象，而不再是原生的<code>XMLHttpRequest</code>实例对象。知道了这一点那就可以进行封装了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//仅供参考 promise</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">type ,url , data </span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve , reject</span>)</span>&#123;</span><br><span class=\"line\">    xhr.onload = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resolve(xhr.response||xhr.responseText);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> reject(<span class=\"string\">'请求失败'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xhr.onerror = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> reject(<span class=\"string\">'出错了'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xhr.open(type,url);</span><br><span class=\"line\">    xhr.send(data ? data:<span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;<span class=\"comment\">//返回Promise实例对象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用了<code>Promise</code>之后我们不再需要传入回调函数。所以参数减少了。这样我们就可以愉快的进行链式调用了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = ajax(<span class=\"string\">'get'</span>,<span class=\"string\">'/test/getUserList'</span>);</span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">result</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'成功了。'</span>, result);</span><br><span class=\"line\">&#125;,(error)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>可问题有来了，<code>Promise</code>实例是没有<code>abort</code>方法的。假如我们把ajax方法修改为返回<code>xhr</code>，我们是可以如期调用<code>abort</code>方法杀死请求，但是我们就不能使用<code>Promise</code>带给我们的好处了。</p>\n<p>仔细思考，最后一句<code>return promise;</code> 这里是不能改。我们只能另外想办法。</p>\n<p>最简单的解决方式就是创建一个xhr和promise的映射关系。也就是每一个promise对应一个唯一的xhr请求。有了思路之后，解决方案就来了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> map = [];<span class=\"comment\">//用于保存promise和xhr之间的映射关系</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//仅供参考 promise abort</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">type ,url , data </span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve , reject</span>)</span>&#123;</span><br><span class=\"line\">    xhr.onload = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resolve(xhr.response||xhr.responseText);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> reject(<span class=\"string\">'请求失败'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xhr.onerror = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> reject(<span class=\"string\">'出错了'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xhr.open(type,url);</span><br><span class=\"line\">    xhr.send(data ? data:<span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  map.push(&#123;<span class=\"attr\">promise</span>:promise,<span class=\"attr\">request</span>:xhr&#125;);<span class=\"comment\">//创建promise和xhr之间的映射关系，保存到全局的一个数组中。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;<span class=\"comment\">//返回Promise实例对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//abort 请求</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">abort</span>(<span class=\"params\">promise</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span> ; i &lt; map.length ; i++ )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( map[i].promise === promise )&#123;</span><br><span class=\"line\">      map[i].request.abort();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过在全局创建一个map保存所有的promise和xhr之间的映射关系。这样我们就可以在需要abort请求的时候根据映射关系找到xhr并abort请求。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = ajax(<span class=\"string\">'get'</span>,<span class=\"string\">'/test/getUserList'</span>);</span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">result</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'成功了。'</span>, result);</span><br><span class=\"line\">&#125;,(error)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">abort(promise);</span><br></pre></td></tr></table></figure>\n<p>好吧，到这里Promise版的ajax,我们已经实现了。是不是很简单啊。</p>\n<h2 id=\"何为jsonp\"><a href=\"#何为jsonp\" class=\"headerlink\" title=\"何为jsonp\"></a>何为jsonp</h2><p>假如你还不明白jsonp是何物，那希望下面的篇幅能让你明白。可能你零星的知道跨越请求，但是可能没有在实战中碰到过。那么我们先来看看，一个简单的<code>jsonp</code>函数是怎么实现的吧。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//仅供参考 jsonp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonp</span>(<span class=\"params\">url,jsonp,successCallback , errorCallback</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result ;</span><br><span class=\"line\">  script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    successCallback(result);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  script.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    errorCallback(<span class=\"string\">'出错了'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> callBackName = <span class=\"string\">'jsonpCallback'</span>+index++;</span><br><span class=\"line\">  script.src=url+(url.indexOf(<span class=\"string\">'?'</span>) &gt;=<span class=\"number\">0</span> ? <span class=\"string\">'&amp;'</span>:<span class=\"string\">'?'</span>)+jsonp+<span class=\"string\">'='</span>+callBackName;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">window</span>[callBackName]=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//拿给后端进行输出执行的。</span></span><br><span class=\"line\">    result = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.head.append(script);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>jsonp算起来应该就是通过<code>script</code>加载实现的跨域请求。其中重要的就是数据返回的接收，我们需要和后端开发同学协商回调函数的变量名。然后后端获取到回调函数名，并且在返回时把回调函数和数据拼接成字符串返回到前端。前端我们添加一个window对象的函数用于接收数据，在函数执行完成后，就会触发<code>script.onload</code>事件，这样就可以真正执行用户回调函数了。</p>\n<p>可能你会觉得有点绕，其实细细的理一下，应该就明白了。</p>\n<p>后端其实很简单，只要获取到<code>jsonp</code>函数变量名就可以了。然后把函数和数据拼接成字符串返回即可。</p>\n<p>下面我们来看看Node.js中的实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> query = ctx.request.query;</span><br><span class=\"line\"><span class=\"keyword\">let</span> jsonp = query.jsonp;<span class=\"comment\">//与后端协商的回调参数</span></span><br><span class=\"line\">ctx.body = jsonp+<span class=\"string\">'(&#123;code:0,msg:\"success\"&#125;)'</span>;</span><br></pre></td></tr></table></figure>\n<p>这个回调函数并不是用户输入的<code>successCallback</code>,而是<code>jsonp</code>函数内部的<code>window[callBackName]</code>,为什么要这样。你细想一下JavaScript的作用域应该就会知道。这就好比你在<code>script</code>标签中执行一个函数一样。</p>\n<p>有可能我们第一次调用<code>jsonp</code>函数服务器会返回如下结果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> &gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//只有这一行是服务器返回的，</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//script标签是document.head.append(script)时候加的</span></span></span><br><span class=\"line\"><span class=\"javascript\">  jsonpCallback0(&#123;<span class=\"attr\">code</span>:<span class=\"number\">0</span>,<span class=\"attr\">msg</span>:<span class=\"string\">\"success\"</span>&#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>所以，得出结论就是：函数必须能通过<code>window</code>对象上访问到。不然执行时就会报错。这就是为什么我们不能直接把用户传入的回调直接用来当成回调接收数据的真正原因。</p>\n<p>再次强调：JavaScript作用域。</p>\n<p>一次成功的jsonp应该是：添加<code>script</code>标签到<code>head</code>,后端接收到<code>jsonp</code>数据，返回拼接好的函数名和数据字符串，执行<code>window</code>对象上的函数拿到数据，执行<code>script.onload</code>事件，执行成功回调。</p>\n<h2 id=\"jsonp的abort方法何去何从\"><a href=\"#jsonp的abort方法何去何从\" class=\"headerlink\" title=\"jsonp的abort方法何去何从\"></a>jsonp的<code>abort</code>方法何去何从</h2><p>现在你已经知道了jsonp的原理了。那么如何才能对<code>script</code>加载数据进行<code>abort</code>呢。</p>\n<p>犯难的问题来了，<code>script</code>并没有真正的<code>abort</code>方法给我们使用。我们所做的就是尽最大的努力提供类似于abort功能的方法。</p>\n<p>思路就是使用<code>Event</code>事件对象。触发<code>script</code>的<code>error</code>监听事件。所以我们得对<code>jsonp</code>函数添加一个<code>trigger</code>辅助函数进行触发<code>error</code>事件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//[trigger 触发事件]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trigger</span>(<span class=\"params\">element,event</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>( !isString(event) ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( element.dispatchEvent )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> evt = <span class=\"built_in\">document</span>.createEvent(<span class=\"string\">'Events'</span>);<span class=\"comment\">// initEvent接受3个参数</span></span><br><span class=\"line\">    evt.initEvent(event, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    element.dispatchEvent(evt);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( element.fireEvent )&#123; <span class=\"comment\">//IE</span></span><br><span class=\"line\">    element.fireEvent(<span class=\"string\">'on'</span>+event);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    element[<span class=\"string\">'on'</span>+event]();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//仅供参考 jsonp.abort</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonp</span>(<span class=\"params\">url,jsonp,successCallback , errorCallback</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result ;</span><br><span class=\"line\">  script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    successCallback(result);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  script.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    errorCallback(<span class=\"string\">'出错了'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> callBackName = <span class=\"string\">'jsonpCallback'</span>+index++;</span><br><span class=\"line\">  script.src=url+(url.indexOf(<span class=\"string\">'?'</span>) &gt;=<span class=\"number\">0</span> ? <span class=\"string\">'&amp;'</span>:<span class=\"string\">'?'</span>)+jsonp+<span class=\"string\">'='</span>+callBackName;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">window</span>[callBackName]=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//拿给后端进行输出执行的。</span></span><br><span class=\"line\">    result = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  script.abort = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> trigger(script,<span class=\"string\">'error'</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.head.append(script);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> script;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们把<code>Promise</code>也使用进来，那样的话，我们就可以脱离回调地狱了不是吗？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//仅供参考 jsonp.abort</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonp</span>(<span class=\"params\">url,query,jsonp</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result ;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">    script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> resolve(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    script.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> reject(<span class=\"string\">'出错了'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> callBackName = <span class=\"string\">'jsonpCallback'</span>+index++;</span><br><span class=\"line\">    script.src=url+(url.indexOf(<span class=\"string\">'?'</span>) &gt;=<span class=\"number\">0</span> ? <span class=\"string\">'&amp;'</span>:<span class=\"string\">'?'</span>)+jsonp+<span class=\"string\">'='</span>+callBackName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">window</span>[callBackName]=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//拿给后端进行输出执行的。</span></span><br><span class=\"line\">      result = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.head.append(script);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  script.abort = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> trigger(script,<span class=\"string\">'error'</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  map.push(&#123;<span class=\"attr\">promise</span>:promise,<span class=\"attr\">request</span>:script&#125;);<span class=\"comment\">//创建promise和script之间的映射关系，保存到全局的一个数组中。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样的我们套用上面的<code>xhr</code>的<code>abort</code>函数封装。这样我们就大功告成了。基本的功能我们就全部实现了。我们就可以开始进行调用了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = jsonp(<span class=\"string\">'/test/getUserList'</span>,<span class=\"string\">'jsonp'</span>);</span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">result</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'成功了。'</span>, result);</span><br><span class=\"line\">&#125;,(error)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">abort(promise);</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>虽然，我们已经完成了封装，但是还有很多的意外没有考虑，要想再实战中运用还必须进行封装和重构。我们必须重视<code>abort</code>方法在xhr/jsonp中的运用，但是也不能滥用，适可而止。存在多层服务器调用时，应该更需要慎重考虑。</p>\n<p>要想了解更多，可以参考这是我封装好的一个Promise版本的ajax/jsonp库<a href=\"https://github.com/Yi-love/xhrp\" target=\"_blank\" rel=\"noopener\">https://github.com/Yi-love/xhrp</a>。希望对你有所帮助。</p>\n","site":{"data":{}},"excerpt":"<p>当你看到文章标题的时候可能会觉得这是一个老生常谈的话题。</p>\n<p>前端开发中向后端发起xhr（<code>XMLHttpRequest</code>）请求（代表性的就是熟悉的<code>ajax</code>）是再正常不过的事。</p>\n<p>但在前端开发过程中，不怎么重视xhr的abort（中止掉xhr请求，及表示取消本次请求）。往往会带来一些不可意料的结果。</p>","more":"<p>比如：切换tab，发起xhr请求，渲染同一个列表。就这么简单的拉取数据渲染列表的功能，并且可以根据tab切换。想想应该是很简单。但是假如你只顾着发起xhr请求，而没有abort掉它，想想会发生什么。很有可能就是当前选中的tab数据，并不是你想要的。说白了就是数据错了。这时候你可能就要考虑是不是xhr请求返回数据的顺序问题。</p>\n<p>答案是肯定的，xhr请求返回数据顺序是不固定的。所以你要做的就是abort掉你之前的xhr请求，然后再发起一个新的xhr请求。</p>\n<p>结合上面所说的例子可以知道xhr使用不当会存在以下问题：</p>\n<ul>\n<li>容易出现页面最终数据与状态不一致的问题，这可能再列表筛选是出现的概率比较大。</li>\n<li>xhr请求达到一定数量之后，浏览器就会显得非常的慢。因为有太多的请求在请求服务器资源。</li>\n</ul>\n<p>为了解决上面的问题，我们在进行页面的时候就必须考虑abort掉所有的xhr请求。</p>\n<p>那么如何实现xhr的abort方法呢，或者通过何种方式abort掉xhr呢？</p>\n<h2 id=\"一个简单的xhr\"><a href=\"#一个简单的xhr\" class=\"headerlink\" title=\"一个简单的xhr\"></a>一个简单的xhr</h2><p>我们都知道，现在的框架（例如：jQuery的<code>ajax</code>模块）对xhr都进行了封装，是为了让我们更好的使用xhr。但是也蒙蔽了我们的眼睛。让我们抛开框架，来看看一个简单的xhr怎么实现。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//仅供参考 xhr</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">type ,url , data , successCallBack , errorCallBack</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">  xhr.onload = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> successCallBack(xhr.response||xhr.responseText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errorCallBack(<span class=\"string\">'请求失败'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  xhr.onerror = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errorCallBack(<span class=\"string\">'出错了'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  xhr.open(type,url);</span><br><span class=\"line\">  xhr.send(data ? data:<span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这就是一个简单的xhr请求的实现，我把它命名为<code>ajax</code>,我们现在可以通过以下方式进行调用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ajax(<span class=\"string\">'get'</span>,<span class=\"string\">'/test/getUserList'</span> , <span class=\"literal\">undefined</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'成功了。'</span>, result);</span><br><span class=\"line\">&#125; ,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果使用这个方法我们是没办法<code>abort</code>掉xhr请求的。好吧，现在我们把它改造一下，让它支持abort方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//仅供参考 xhr.abort</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">type ,url , data , successCallBack , errorCallBack</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">  xhr.onload = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> successCallBack(xhr.response||xhr.responseText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errorCallBack(<span class=\"string\">'请求失败'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  xhr.onerror = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errorCallBack(<span class=\"string\">'出错了'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  xhr.open(type,url);</span><br><span class=\"line\">  xhr.send(data ? data:<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> xhr;<span class=\"comment\">//返回XMLHttpRequest实例对象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好像没有什么变化对吧。不错，只要在函数的末尾添加<code>return xhr;</code>将<code>XMLHttpRequest</code>实例对象返回即可。那我们在就已经可以如愿的abort掉xhr请求。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> xhr = ajax(<span class=\"string\">'get'</span>,<span class=\"string\">'/test/getUserList'</span> , <span class=\"literal\">undefined</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'成功了。'</span>, result);</span><br><span class=\"line\">&#125; ,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//abort</span></span><br><span class=\"line\">xhr.abort();</span><br></pre></td></tr></table></figure>\n<p>好像我们已经大功告成了。但是问题来了，现在Promise这么好用，为什么不把它加进来呢。像这样没法在我们的Promise链式调用上使用它。</p>\n<h2 id=\"Promise封装xhr\"><a href=\"#Promise封装xhr\" class=\"headerlink\" title=\"Promise封装xhr\"></a>Promise封装xhr</h2><p>好了，现在的首要任务是封装出一个Promise版的ajax库。首要要确认的就是，<code>ajax</code>方法需要返回的是<code>Promise</code>实例对象，而不再是原生的<code>XMLHttpRequest</code>实例对象。知道了这一点那就可以进行封装了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//仅供参考 promise</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">type ,url , data </span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve , reject</span>)</span>&#123;</span><br><span class=\"line\">    xhr.onload = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resolve(xhr.response||xhr.responseText);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> reject(<span class=\"string\">'请求失败'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xhr.onerror = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> reject(<span class=\"string\">'出错了'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xhr.open(type,url);</span><br><span class=\"line\">    xhr.send(data ? data:<span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;<span class=\"comment\">//返回Promise实例对象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用了<code>Promise</code>之后我们不再需要传入回调函数。所以参数减少了。这样我们就可以愉快的进行链式调用了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = ajax(<span class=\"string\">'get'</span>,<span class=\"string\">'/test/getUserList'</span>);</span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">result</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'成功了。'</span>, result);</span><br><span class=\"line\">&#125;,(error)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>可问题有来了，<code>Promise</code>实例是没有<code>abort</code>方法的。假如我们把ajax方法修改为返回<code>xhr</code>，我们是可以如期调用<code>abort</code>方法杀死请求，但是我们就不能使用<code>Promise</code>带给我们的好处了。</p>\n<p>仔细思考，最后一句<code>return promise;</code> 这里是不能改。我们只能另外想办法。</p>\n<p>最简单的解决方式就是创建一个xhr和promise的映射关系。也就是每一个promise对应一个唯一的xhr请求。有了思路之后，解决方案就来了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> map = [];<span class=\"comment\">//用于保存promise和xhr之间的映射关系</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//仅供参考 promise abort</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">type ,url , data </span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve , reject</span>)</span>&#123;</span><br><span class=\"line\">    xhr.onload = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(xhr.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resolve(xhr.response||xhr.responseText);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> reject(<span class=\"string\">'请求失败'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xhr.onerror = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> reject(<span class=\"string\">'出错了'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xhr.open(type,url);</span><br><span class=\"line\">    xhr.send(data ? data:<span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  map.push(&#123;<span class=\"attr\">promise</span>:promise,<span class=\"attr\">request</span>:xhr&#125;);<span class=\"comment\">//创建promise和xhr之间的映射关系，保存到全局的一个数组中。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;<span class=\"comment\">//返回Promise实例对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//abort 请求</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">abort</span>(<span class=\"params\">promise</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span> ; i &lt; map.length ; i++ )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( map[i].promise === promise )&#123;</span><br><span class=\"line\">      map[i].request.abort();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过在全局创建一个map保存所有的promise和xhr之间的映射关系。这样我们就可以在需要abort请求的时候根据映射关系找到xhr并abort请求。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = ajax(<span class=\"string\">'get'</span>,<span class=\"string\">'/test/getUserList'</span>);</span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">result</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'成功了。'</span>, result);</span><br><span class=\"line\">&#125;,(error)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">abort(promise);</span><br></pre></td></tr></table></figure>\n<p>好吧，到这里Promise版的ajax,我们已经实现了。是不是很简单啊。</p>\n<h2 id=\"何为jsonp\"><a href=\"#何为jsonp\" class=\"headerlink\" title=\"何为jsonp\"></a>何为jsonp</h2><p>假如你还不明白jsonp是何物，那希望下面的篇幅能让你明白。可能你零星的知道跨越请求，但是可能没有在实战中碰到过。那么我们先来看看，一个简单的<code>jsonp</code>函数是怎么实现的吧。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//仅供参考 jsonp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonp</span>(<span class=\"params\">url,jsonp,successCallback , errorCallback</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result ;</span><br><span class=\"line\">  script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    successCallback(result);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  script.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    errorCallback(<span class=\"string\">'出错了'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> callBackName = <span class=\"string\">'jsonpCallback'</span>+index++;</span><br><span class=\"line\">  script.src=url+(url.indexOf(<span class=\"string\">'?'</span>) &gt;=<span class=\"number\">0</span> ? <span class=\"string\">'&amp;'</span>:<span class=\"string\">'?'</span>)+jsonp+<span class=\"string\">'='</span>+callBackName;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">window</span>[callBackName]=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//拿给后端进行输出执行的。</span></span><br><span class=\"line\">    result = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.head.append(script);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>jsonp算起来应该就是通过<code>script</code>加载实现的跨域请求。其中重要的就是数据返回的接收，我们需要和后端开发同学协商回调函数的变量名。然后后端获取到回调函数名，并且在返回时把回调函数和数据拼接成字符串返回到前端。前端我们添加一个window对象的函数用于接收数据，在函数执行完成后，就会触发<code>script.onload</code>事件，这样就可以真正执行用户回调函数了。</p>\n<p>可能你会觉得有点绕，其实细细的理一下，应该就明白了。</p>\n<p>后端其实很简单，只要获取到<code>jsonp</code>函数变量名就可以了。然后把函数和数据拼接成字符串返回即可。</p>\n<p>下面我们来看看Node.js中的实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> query = ctx.request.query;</span><br><span class=\"line\"><span class=\"keyword\">let</span> jsonp = query.jsonp;<span class=\"comment\">//与后端协商的回调参数</span></span><br><span class=\"line\">ctx.body = jsonp+<span class=\"string\">'(&#123;code:0,msg:\"success\"&#125;)'</span>;</span><br></pre></td></tr></table></figure>\n<p>这个回调函数并不是用户输入的<code>successCallback</code>,而是<code>jsonp</code>函数内部的<code>window[callBackName]</code>,为什么要这样。你细想一下JavaScript的作用域应该就会知道。这就好比你在<code>script</code>标签中执行一个函数一样。</p>\n<p>有可能我们第一次调用<code>jsonp</code>函数服务器会返回如下结果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> &gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//只有这一行是服务器返回的，</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//script标签是document.head.append(script)时候加的</span></span></span><br><span class=\"line\"><span class=\"javascript\">  jsonpCallback0(&#123;<span class=\"attr\">code</span>:<span class=\"number\">0</span>,<span class=\"attr\">msg</span>:<span class=\"string\">\"success\"</span>&#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>所以，得出结论就是：函数必须能通过<code>window</code>对象上访问到。不然执行时就会报错。这就是为什么我们不能直接把用户传入的回调直接用来当成回调接收数据的真正原因。</p>\n<p>再次强调：JavaScript作用域。</p>\n<p>一次成功的jsonp应该是：添加<code>script</code>标签到<code>head</code>,后端接收到<code>jsonp</code>数据，返回拼接好的函数名和数据字符串，执行<code>window</code>对象上的函数拿到数据，执行<code>script.onload</code>事件，执行成功回调。</p>\n<h2 id=\"jsonp的abort方法何去何从\"><a href=\"#jsonp的abort方法何去何从\" class=\"headerlink\" title=\"jsonp的abort方法何去何从\"></a>jsonp的<code>abort</code>方法何去何从</h2><p>现在你已经知道了jsonp的原理了。那么如何才能对<code>script</code>加载数据进行<code>abort</code>呢。</p>\n<p>犯难的问题来了，<code>script</code>并没有真正的<code>abort</code>方法给我们使用。我们所做的就是尽最大的努力提供类似于abort功能的方法。</p>\n<p>思路就是使用<code>Event</code>事件对象。触发<code>script</code>的<code>error</code>监听事件。所以我们得对<code>jsonp</code>函数添加一个<code>trigger</code>辅助函数进行触发<code>error</code>事件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//[trigger 触发事件]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trigger</span>(<span class=\"params\">element,event</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>( !isString(event) ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( element.dispatchEvent )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> evt = <span class=\"built_in\">document</span>.createEvent(<span class=\"string\">'Events'</span>);<span class=\"comment\">// initEvent接受3个参数</span></span><br><span class=\"line\">    evt.initEvent(event, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    element.dispatchEvent(evt);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( element.fireEvent )&#123; <span class=\"comment\">//IE</span></span><br><span class=\"line\">    element.fireEvent(<span class=\"string\">'on'</span>+event);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    element[<span class=\"string\">'on'</span>+event]();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//仅供参考 jsonp.abort</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonp</span>(<span class=\"params\">url,jsonp,successCallback , errorCallback</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result ;</span><br><span class=\"line\">  script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    successCallback(result);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  script.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    errorCallback(<span class=\"string\">'出错了'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> callBackName = <span class=\"string\">'jsonpCallback'</span>+index++;</span><br><span class=\"line\">  script.src=url+(url.indexOf(<span class=\"string\">'?'</span>) &gt;=<span class=\"number\">0</span> ? <span class=\"string\">'&amp;'</span>:<span class=\"string\">'?'</span>)+jsonp+<span class=\"string\">'='</span>+callBackName;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">window</span>[callBackName]=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//拿给后端进行输出执行的。</span></span><br><span class=\"line\">    result = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  script.abort = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> trigger(script,<span class=\"string\">'error'</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.head.append(script);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> script;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们把<code>Promise</code>也使用进来，那样的话，我们就可以脱离回调地狱了不是吗？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//仅供参考 jsonp.abort</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonp</span>(<span class=\"params\">url,query,jsonp</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result ;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">    script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> resolve(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    script.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> reject(<span class=\"string\">'出错了'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> callBackName = <span class=\"string\">'jsonpCallback'</span>+index++;</span><br><span class=\"line\">    script.src=url+(url.indexOf(<span class=\"string\">'?'</span>) &gt;=<span class=\"number\">0</span> ? <span class=\"string\">'&amp;'</span>:<span class=\"string\">'?'</span>)+jsonp+<span class=\"string\">'='</span>+callBackName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">window</span>[callBackName]=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//拿给后端进行输出执行的。</span></span><br><span class=\"line\">      result = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.head.append(script);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  script.abort = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> trigger(script,<span class=\"string\">'error'</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  map.push(&#123;<span class=\"attr\">promise</span>:promise,<span class=\"attr\">request</span>:script&#125;);<span class=\"comment\">//创建promise和script之间的映射关系，保存到全局的一个数组中。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样的我们套用上面的<code>xhr</code>的<code>abort</code>函数封装。这样我们就大功告成了。基本的功能我们就全部实现了。我们就可以开始进行调用了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = jsonp(<span class=\"string\">'/test/getUserList'</span>,<span class=\"string\">'jsonp'</span>);</span><br><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">result</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'成功了。'</span>, result);</span><br><span class=\"line\">&#125;,(error)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">abort(promise);</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>虽然，我们已经完成了封装，但是还有很多的意外没有考虑，要想再实战中运用还必须进行封装和重构。我们必须重视<code>abort</code>方法在xhr/jsonp中的运用，但是也不能滥用，适可而止。存在多层服务器调用时，应该更需要慎重考虑。</p>\n<p>要想了解更多，可以参考这是我封装好的一个Promise版本的ajax/jsonp库<a href=\"https://github.com/Yi-love/xhrp\" target=\"_blank\" rel=\"noopener\">https://github.com/Yi-love/xhrp</a>。希望对你有所帮助。</p>"},{"title":"passive 事件监听","date":"2017-06-06T02:30:00.000Z","author":"Linda","_content":"\n# passive事件监听\n\npassive事件监听，是[DOM规范](https://dom.spec.whatwg.org/#dom-eventlisteneroptions-passive)的新特性，它可以让开发者选择不阻止touch和wheel事件监听，从而获得更好的滚动性能。开发者可以在监听touch和wheel事件时指定`{passive:true}`来表明他们不会调用`preventDefault`。这个特性出现在[Chrome51](https://www.chromestatus.com/features/5745543795965952)，[FireFox49](https://bugzilla.mozilla.org/show_bug.cgi?id=1266066)，[以及Webkit](https://bugs.webkit.org/show_bug.cgi?id=158601)。看看下面的passive事件监听的效果对比视频：\n\n[demo video](https://www.youtube.com/watch?v=NPM6172J22g)\n\n<!-- more -->\n\n## 问题所在\n\n对于web，尤其是移动设备上的web来说，流畅的滚动性能会直接决定用户体验。所有现代浏览器都有一个单独的线程处理页面滚动，即使是在JavaScript运行的时候也能流畅地滚动，但是这个优化有局限性，因为在需要等待`touchstart`和 `touchmove`操作的结果时就无法进行优化。这是因为`touchstart`等事件处理函数中可能会调用[preventDefault()](https://www.w3.org/TR/touch-events/#the-touchstart-event)完全阻止滚动。在实际开发中，确实有需要阻止滚动的场景，但是分析结果表明，web上的多数的touch事件处理函数实际上从来不调用`preventDefault()`，所以浏览器通常不需要阻止滚动。例如，在安卓Chrome中，对滚动性能造成影响的情况中，有80%的事件都没有被阻止 。有10%的情况导致滚动延迟多于100毫秒。1%的情况导致延迟至少500毫秒，简直是毁灭性的影响。\n\n许多开发者注意到[在document中简单添加一个空的touch处理函数](http://rbyers.github.io/janky-touch-scroll.html)会对滚动性能有非常明显的负面影响。他们觉得很惊讶，监听一个事件的操作[不应该有任何负面影响](https://dom.spec.whatwg.org/#observing-event-listeners)。\n\n同样的问题并不只出现在touch事件上。[wheel事件](https://w3c.github.io/uievents/#events-wheelevents)也遭遇同样的问题。与它们不同，[指针事件处理函数](https://w3c.github.io/pointerevents/)被设计为不影响滚动（尽管开发者仍然可以通过`touch-action`这个CSS属性阻止滚动），所以不用面临这个问题。大体上讲，passive事件监听就是将指针事件的性能带给了touch和wheel事件。\n\n这个提案允许开发者在注册事件处理函数时，指明是否会在处理函数中调用`preventDefault()`的方法(是否需要一个[可以取消](https://dom.spec.whatwg.org/#dom-event-cancelable)的事件)。当touch或wheel事件处理函数并没有需要包含可取消事件时，浏览器就可以在不等待JavaScript执行的情况下，立即开始滚动。也就是，passive监听的事件处理函数对性能没有负面影响。\n\n## EventListenerOptions（事件监听选项）\n\n首先，我们需要对事件监听附加额外信息的机制。`addEventListener`中的`capture`参数是最类似的例子，但是它的用法并不是十分明了：\n\n```javascript\ndocument.addEventListener('touchstart', handler, true);\n```\n\n[EventListenerOptions](https://dom.spec.whatwg.org/#dictdef-eventlisteneroptions)让大家可以以一种更明了的方式指定参数：\n\n```javascript\ndocument.addEventListener('touchstart', handler, {capture: true});\n```\n\n这是指定你希望[在捕获阶段还是冒泡阶段](http://javascript.info/bubbling-and-capturing#capturing)监听事件的新语法，它是一种扩展的语法。\n\n## 解决方案：passive 选项\n\n在有了扩展语法之后，我们在注册事件处理时，就可以添加一个新`passive`选项，用于提前声明监听函数在事件中从不调用`preventDefault()`。如果它调用，浏览器会忽略请求（并很机智地在控制台警告），就像它已经调用过`Event.cancelable=false`一样。开发者可以通过在调用`preventDefault()`之前和之后查看`Event.defaultPrevented`来进行确认。例如：\n\n```js\naddEventListener(document, \"touchstart\", function(e) {\n\t\tconsole.log(e.defaultPrevented);  // will be false\n\t\te.preventDefault();   // does nothing since the listener is passive\n\t\tconsole.log(e.defaultPrevented);  // still false\n}, Modernizr.passiveeventlisteners ? {passive: true} : false);\n```\n\n现在，相比只要有touch或wheel监听就不得不阻止滚动来说，浏览器只需要在有non-passive监听时（参见[TouchEvents spec](https://w3c.github.io/touch-events/#cancelability)）才阻止滚动。也就是说passive监听可以解决性能问题。\n\n通过指定touch或wheel监听为passive的，开发者就是在承诺处理函数不调用`preventDefault()`来取消滚动。这使得浏览器能够立刻响应滚动，不用等待JavaScript，以此为用户保证流畅滚动体验。\n\n## 特性检测\n\n由于老旧浏览器会把第三个参数`capture`传的任何对象看作`true`值，开发者用这个API时，需要使用特性检测或[polyfill](https://github.com/WebReflection/dom4)，以避免预期之外的结果。对于指定选项的特性检测可以像下面这样：\n\n```js\n// Test via a getter in the options object to see if the passive property is accessed\nvar supportsPassive = false;\ntry {\n\tvar opts = Object.defineProperty({}, 'passive', {\n\t\tget: function() {\n\t\t\tsupportsPassive = true;\n\t\t}\n\t});\n\twindow.addEventListener(\"test\", null, opts);\n} catch (e) {}\n\n// Use our detect's results. passive applied if supported, capture will be false either way.\nelem.addEventListener('touchstart', fn, supportsPassive ? { passive: true } : false); \n```\n\n为了更简洁，可以使用[Detect It](https://github.com/rafrex/detect-it)的特性检测，例如:\n\n```js\n\telem.addEventListener('touchstart', fn,\n\t\tdetectIt.passiveEvents ? {passive:true} : false);\n```\n\n[Modernizr](https://modernizr.com/)正在处理[这个](https://github.com/Modernizr/Modernizr/issues/1894)特性检测，但还没发布。此外有一个关于字典成员特性检测是否提供更简洁API的[开放标准讨论](https://github.com/heycam/webidl/issues/107)。\n\n## 消除取消事件的需求\n\n有一些场景是开发者想要取消所有touch或wheel事件让滚动不可用的情况。这些包含：\n\n1.平移或缩放地图\n2.全屏游戏\n\n在这些情况下，由于滚动自身是被一直阻止的，现有行为完全能够满足（没有滚动优化）。在这些情况下没有必要使用passive监听，虽然一般还是会添加`touch-action: none`CSS属性来显式表达你的意图（例如可以更好地支持那些有pointer事件，但没有touch事件的浏览器）。\n\n然而，在一系列场景中，事件处理函数根本不需要阻塞滚动。例如：\n\n1. 只想知道用户最后活跃是在什么时间的用户动态监控\n2. 隐藏一些活动UI（像工具栏）的`touchstart`处理函数。\n3. 改变UI元素样式的`touchstart`和`touchend`处理函数（不阻止onclick事件）。\n\n在这些场景下，可以不修改其他代码，直接添加`passive`选项上去（要有适当的特性检测），滑动体验会明显变得更流畅。\n\n还有一些更复杂的场景，只想在一些确定的条件下阻止滑动，例如：\n\n1. 在横向滑动的时候去切换轮播图、移动一个条目，或者切换某个元素展示隐藏，但是仍然允许纵向滚动。\n\t1. 这种情况下，可以使用`touch-action: pan-y`来声明不需要横向滚动，不需要调用`preventDefault()`。\n\t2. 为了在所有浏览器中可以正常运行，`preventDefault()`的调用应当在缺少特定的`touch-action`属性支持的条件下使用（Safari9现在只支持 `touch-action:manipulation`）。\n2. 一个需要使用横向滚动事件来滑动的UI元素（就像YouTube的声音调节滑动条），但不会改变滚垂直滚轮的行为。由于对于`wheel`来说没有`touch-action`的等价事件，这个情况只能用non-passive滚轮监听来实现。\n3. 事件代理模式下添加的监听代码，不会知道用户是否会取消事件。\n\t1. 一个可用的方法是单独代理passive和non-passive监听（就好像他们是完全不同种类的事件一样）。\n\t2. 像上面那样发挥`touch-action`的影响力也是可以的。\n\n## 调试及权衡利益\n\n通过`chrome://flags/#passive-listener-default`(chrome 52)强制设置touch/wheel为`passive`监听，可以快速了解它的优势（以及可能造成的问题）。这使得你能够自己做更直观的对比，像[这个视频中的](https://twitter.com/RickByers/status/719736672523407360)那样。\n\n如何使用Chrome开发者工具识别阻塞滚动的监听，可以看[这个视频](https://www.youtube.com/watch?v=6-D_3yx_KVI)。你可以[监测事件时间戳](https://www.youtube.com/watch?v=6-D_3yx_KVI)来衡量滚动的性能，也可以使用[Chromium的跟踪系统](https://www.chromium.org/developers/how-tos/trace-event-profiling-tool)来查看调试时滚动的输入延迟（InputLatency）记录。\n\nChrome工作组正在准备关于[Performance Timeline API](https://code.google.com/p/chromium/issues/detail?id=543598)及[更多开发工具](https://code.google.com/p/chromium/issues/detail?id=520659)特性的提案，以帮助web开发者更好的看清这个问题。\n\n## 减少和打断长时间运行的JS仍然很重要\n\n当一个页面展现出大量的滚动卡顿，就表示某些地方有潜在的性能问题。`passive`事件监听没有对潜在问题做事情，所以我们仍然强烈建议开发者确保他们的应用在低性能设备上能满足[性能指导范围](https://developers.google.com/web/fundamentals/performance/rail?hl=en)。如果你的网站有的逻辑每次运行都大于100ms，那么仍然会在tap和click响应上感觉很缓慢。`passive`事件监听只是允许开发者解耦了映射到滚动性能的JS响应问题和监控输入事件的请求。特别值得一提的是，第三方库的开发者现在可以更有自信一点说，他们对轻量级事件监听的使用，不会对使用了他们代码的页面的性能造成明显的改变。\n\n## 深入阅读及讨论\n\n更多细节看[这里](https://github.com/WICG/EventListenerOptions)的链接。有问题的话，看[这里](https://github.com/WICG/EventListenerOptions/issues)的讨论，或者联系[@RickByers](https://twitter.com/RickByers/)。\n\n原文：[https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md](https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md)\n\n译者：[Linda](https://github.com/LindaWhite)\n\n作者：[RByers](https://github.com/RByers)\n\n","source":"_posts/2017-06-06-passive-event-listeners.md","raw":"---\ntitle: passive 事件监听\ndate: 2017-06-06 10:30\ncategory: 翻译\ntags: [JavaScript,事件,性能]\nauthor: Linda\n---\n\n# passive事件监听\n\npassive事件监听，是[DOM规范](https://dom.spec.whatwg.org/#dom-eventlisteneroptions-passive)的新特性，它可以让开发者选择不阻止touch和wheel事件监听，从而获得更好的滚动性能。开发者可以在监听touch和wheel事件时指定`{passive:true}`来表明他们不会调用`preventDefault`。这个特性出现在[Chrome51](https://www.chromestatus.com/features/5745543795965952)，[FireFox49](https://bugzilla.mozilla.org/show_bug.cgi?id=1266066)，[以及Webkit](https://bugs.webkit.org/show_bug.cgi?id=158601)。看看下面的passive事件监听的效果对比视频：\n\n[demo video](https://www.youtube.com/watch?v=NPM6172J22g)\n\n<!-- more -->\n\n## 问题所在\n\n对于web，尤其是移动设备上的web来说，流畅的滚动性能会直接决定用户体验。所有现代浏览器都有一个单独的线程处理页面滚动，即使是在JavaScript运行的时候也能流畅地滚动，但是这个优化有局限性，因为在需要等待`touchstart`和 `touchmove`操作的结果时就无法进行优化。这是因为`touchstart`等事件处理函数中可能会调用[preventDefault()](https://www.w3.org/TR/touch-events/#the-touchstart-event)完全阻止滚动。在实际开发中，确实有需要阻止滚动的场景，但是分析结果表明，web上的多数的touch事件处理函数实际上从来不调用`preventDefault()`，所以浏览器通常不需要阻止滚动。例如，在安卓Chrome中，对滚动性能造成影响的情况中，有80%的事件都没有被阻止 。有10%的情况导致滚动延迟多于100毫秒。1%的情况导致延迟至少500毫秒，简直是毁灭性的影响。\n\n许多开发者注意到[在document中简单添加一个空的touch处理函数](http://rbyers.github.io/janky-touch-scroll.html)会对滚动性能有非常明显的负面影响。他们觉得很惊讶，监听一个事件的操作[不应该有任何负面影响](https://dom.spec.whatwg.org/#observing-event-listeners)。\n\n同样的问题并不只出现在touch事件上。[wheel事件](https://w3c.github.io/uievents/#events-wheelevents)也遭遇同样的问题。与它们不同，[指针事件处理函数](https://w3c.github.io/pointerevents/)被设计为不影响滚动（尽管开发者仍然可以通过`touch-action`这个CSS属性阻止滚动），所以不用面临这个问题。大体上讲，passive事件监听就是将指针事件的性能带给了touch和wheel事件。\n\n这个提案允许开发者在注册事件处理函数时，指明是否会在处理函数中调用`preventDefault()`的方法(是否需要一个[可以取消](https://dom.spec.whatwg.org/#dom-event-cancelable)的事件)。当touch或wheel事件处理函数并没有需要包含可取消事件时，浏览器就可以在不等待JavaScript执行的情况下，立即开始滚动。也就是，passive监听的事件处理函数对性能没有负面影响。\n\n## EventListenerOptions（事件监听选项）\n\n首先，我们需要对事件监听附加额外信息的机制。`addEventListener`中的`capture`参数是最类似的例子，但是它的用法并不是十分明了：\n\n```javascript\ndocument.addEventListener('touchstart', handler, true);\n```\n\n[EventListenerOptions](https://dom.spec.whatwg.org/#dictdef-eventlisteneroptions)让大家可以以一种更明了的方式指定参数：\n\n```javascript\ndocument.addEventListener('touchstart', handler, {capture: true});\n```\n\n这是指定你希望[在捕获阶段还是冒泡阶段](http://javascript.info/bubbling-and-capturing#capturing)监听事件的新语法，它是一种扩展的语法。\n\n## 解决方案：passive 选项\n\n在有了扩展语法之后，我们在注册事件处理时，就可以添加一个新`passive`选项，用于提前声明监听函数在事件中从不调用`preventDefault()`。如果它调用，浏览器会忽略请求（并很机智地在控制台警告），就像它已经调用过`Event.cancelable=false`一样。开发者可以通过在调用`preventDefault()`之前和之后查看`Event.defaultPrevented`来进行确认。例如：\n\n```js\naddEventListener(document, \"touchstart\", function(e) {\n\t\tconsole.log(e.defaultPrevented);  // will be false\n\t\te.preventDefault();   // does nothing since the listener is passive\n\t\tconsole.log(e.defaultPrevented);  // still false\n}, Modernizr.passiveeventlisteners ? {passive: true} : false);\n```\n\n现在，相比只要有touch或wheel监听就不得不阻止滚动来说，浏览器只需要在有non-passive监听时（参见[TouchEvents spec](https://w3c.github.io/touch-events/#cancelability)）才阻止滚动。也就是说passive监听可以解决性能问题。\n\n通过指定touch或wheel监听为passive的，开发者就是在承诺处理函数不调用`preventDefault()`来取消滚动。这使得浏览器能够立刻响应滚动，不用等待JavaScript，以此为用户保证流畅滚动体验。\n\n## 特性检测\n\n由于老旧浏览器会把第三个参数`capture`传的任何对象看作`true`值，开发者用这个API时，需要使用特性检测或[polyfill](https://github.com/WebReflection/dom4)，以避免预期之外的结果。对于指定选项的特性检测可以像下面这样：\n\n```js\n// Test via a getter in the options object to see if the passive property is accessed\nvar supportsPassive = false;\ntry {\n\tvar opts = Object.defineProperty({}, 'passive', {\n\t\tget: function() {\n\t\t\tsupportsPassive = true;\n\t\t}\n\t});\n\twindow.addEventListener(\"test\", null, opts);\n} catch (e) {}\n\n// Use our detect's results. passive applied if supported, capture will be false either way.\nelem.addEventListener('touchstart', fn, supportsPassive ? { passive: true } : false); \n```\n\n为了更简洁，可以使用[Detect It](https://github.com/rafrex/detect-it)的特性检测，例如:\n\n```js\n\telem.addEventListener('touchstart', fn,\n\t\tdetectIt.passiveEvents ? {passive:true} : false);\n```\n\n[Modernizr](https://modernizr.com/)正在处理[这个](https://github.com/Modernizr/Modernizr/issues/1894)特性检测，但还没发布。此外有一个关于字典成员特性检测是否提供更简洁API的[开放标准讨论](https://github.com/heycam/webidl/issues/107)。\n\n## 消除取消事件的需求\n\n有一些场景是开发者想要取消所有touch或wheel事件让滚动不可用的情况。这些包含：\n\n1.平移或缩放地图\n2.全屏游戏\n\n在这些情况下，由于滚动自身是被一直阻止的，现有行为完全能够满足（没有滚动优化）。在这些情况下没有必要使用passive监听，虽然一般还是会添加`touch-action: none`CSS属性来显式表达你的意图（例如可以更好地支持那些有pointer事件，但没有touch事件的浏览器）。\n\n然而，在一系列场景中，事件处理函数根本不需要阻塞滚动。例如：\n\n1. 只想知道用户最后活跃是在什么时间的用户动态监控\n2. 隐藏一些活动UI（像工具栏）的`touchstart`处理函数。\n3. 改变UI元素样式的`touchstart`和`touchend`处理函数（不阻止onclick事件）。\n\n在这些场景下，可以不修改其他代码，直接添加`passive`选项上去（要有适当的特性检测），滑动体验会明显变得更流畅。\n\n还有一些更复杂的场景，只想在一些确定的条件下阻止滑动，例如：\n\n1. 在横向滑动的时候去切换轮播图、移动一个条目，或者切换某个元素展示隐藏，但是仍然允许纵向滚动。\n\t1. 这种情况下，可以使用`touch-action: pan-y`来声明不需要横向滚动，不需要调用`preventDefault()`。\n\t2. 为了在所有浏览器中可以正常运行，`preventDefault()`的调用应当在缺少特定的`touch-action`属性支持的条件下使用（Safari9现在只支持 `touch-action:manipulation`）。\n2. 一个需要使用横向滚动事件来滑动的UI元素（就像YouTube的声音调节滑动条），但不会改变滚垂直滚轮的行为。由于对于`wheel`来说没有`touch-action`的等价事件，这个情况只能用non-passive滚轮监听来实现。\n3. 事件代理模式下添加的监听代码，不会知道用户是否会取消事件。\n\t1. 一个可用的方法是单独代理passive和non-passive监听（就好像他们是完全不同种类的事件一样）。\n\t2. 像上面那样发挥`touch-action`的影响力也是可以的。\n\n## 调试及权衡利益\n\n通过`chrome://flags/#passive-listener-default`(chrome 52)强制设置touch/wheel为`passive`监听，可以快速了解它的优势（以及可能造成的问题）。这使得你能够自己做更直观的对比，像[这个视频中的](https://twitter.com/RickByers/status/719736672523407360)那样。\n\n如何使用Chrome开发者工具识别阻塞滚动的监听，可以看[这个视频](https://www.youtube.com/watch?v=6-D_3yx_KVI)。你可以[监测事件时间戳](https://www.youtube.com/watch?v=6-D_3yx_KVI)来衡量滚动的性能，也可以使用[Chromium的跟踪系统](https://www.chromium.org/developers/how-tos/trace-event-profiling-tool)来查看调试时滚动的输入延迟（InputLatency）记录。\n\nChrome工作组正在准备关于[Performance Timeline API](https://code.google.com/p/chromium/issues/detail?id=543598)及[更多开发工具](https://code.google.com/p/chromium/issues/detail?id=520659)特性的提案，以帮助web开发者更好的看清这个问题。\n\n## 减少和打断长时间运行的JS仍然很重要\n\n当一个页面展现出大量的滚动卡顿，就表示某些地方有潜在的性能问题。`passive`事件监听没有对潜在问题做事情，所以我们仍然强烈建议开发者确保他们的应用在低性能设备上能满足[性能指导范围](https://developers.google.com/web/fundamentals/performance/rail?hl=en)。如果你的网站有的逻辑每次运行都大于100ms，那么仍然会在tap和click响应上感觉很缓慢。`passive`事件监听只是允许开发者解耦了映射到滚动性能的JS响应问题和监控输入事件的请求。特别值得一提的是，第三方库的开发者现在可以更有自信一点说，他们对轻量级事件监听的使用，不会对使用了他们代码的页面的性能造成明显的改变。\n\n## 深入阅读及讨论\n\n更多细节看[这里](https://github.com/WICG/EventListenerOptions)的链接。有问题的话，看[这里](https://github.com/WICG/EventListenerOptions/issues)的讨论，或者联系[@RickByers](https://twitter.com/RickByers/)。\n\n原文：[https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md](https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md)\n\n译者：[Linda](https://github.com/LindaWhite)\n\n作者：[RByers](https://github.com/RByers)\n\n","slug":"2017-06-06-passive-event-listeners","published":1,"updated":"2017-12-01T08:50:00.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanokni1000pjxs17iwbki57","content":"<h1 id=\"passive事件监听\"><a href=\"#passive事件监听\" class=\"headerlink\" title=\"passive事件监听\"></a>passive事件监听</h1><p>passive事件监听，是<a href=\"https://dom.spec.whatwg.org/#dom-eventlisteneroptions-passive\" target=\"_blank\" rel=\"noopener\">DOM规范</a>的新特性，它可以让开发者选择不阻止touch和wheel事件监听，从而获得更好的滚动性能。开发者可以在监听touch和wheel事件时指定<code>{passive:true}</code>来表明他们不会调用<code>preventDefault</code>。这个特性出现在<a href=\"https://www.chromestatus.com/features/5745543795965952\" target=\"_blank\" rel=\"noopener\">Chrome51</a>，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1266066\" target=\"_blank\" rel=\"noopener\">FireFox49</a>，<a href=\"https://bugs.webkit.org/show_bug.cgi?id=158601\" target=\"_blank\" rel=\"noopener\">以及Webkit</a>。看看下面的passive事件监听的效果对比视频：</p>\n<p><a href=\"https://www.youtube.com/watch?v=NPM6172J22g\" target=\"_blank\" rel=\"noopener\">demo video</a></p>\n<a id=\"more\"></a>\n<h2 id=\"问题所在\"><a href=\"#问题所在\" class=\"headerlink\" title=\"问题所在\"></a>问题所在</h2><p>对于web，尤其是移动设备上的web来说，流畅的滚动性能会直接决定用户体验。所有现代浏览器都有一个单独的线程处理页面滚动，即使是在JavaScript运行的时候也能流畅地滚动，但是这个优化有局限性，因为在需要等待<code>touchstart</code>和 <code>touchmove</code>操作的结果时就无法进行优化。这是因为<code>touchstart</code>等事件处理函数中可能会调用<a href=\"https://www.w3.org/TR/touch-events/#the-touchstart-event\" target=\"_blank\" rel=\"noopener\">preventDefault()</a>完全阻止滚动。在实际开发中，确实有需要阻止滚动的场景，但是分析结果表明，web上的多数的touch事件处理函数实际上从来不调用<code>preventDefault()</code>，所以浏览器通常不需要阻止滚动。例如，在安卓Chrome中，对滚动性能造成影响的情况中，有80%的事件都没有被阻止 。有10%的情况导致滚动延迟多于100毫秒。1%的情况导致延迟至少500毫秒，简直是毁灭性的影响。</p>\n<p>许多开发者注意到<a href=\"http://rbyers.github.io/janky-touch-scroll.html\" target=\"_blank\" rel=\"noopener\">在document中简单添加一个空的touch处理函数</a>会对滚动性能有非常明显的负面影响。他们觉得很惊讶，监听一个事件的操作<a href=\"https://dom.spec.whatwg.org/#observing-event-listeners\" target=\"_blank\" rel=\"noopener\">不应该有任何负面影响</a>。</p>\n<p>同样的问题并不只出现在touch事件上。<a href=\"https://w3c.github.io/uievents/#events-wheelevents\" target=\"_blank\" rel=\"noopener\">wheel事件</a>也遭遇同样的问题。与它们不同，<a href=\"https://w3c.github.io/pointerevents/\" target=\"_blank\" rel=\"noopener\">指针事件处理函数</a>被设计为不影响滚动（尽管开发者仍然可以通过<code>touch-action</code>这个CSS属性阻止滚动），所以不用面临这个问题。大体上讲，passive事件监听就是将指针事件的性能带给了touch和wheel事件。</p>\n<p>这个提案允许开发者在注册事件处理函数时，指明是否会在处理函数中调用<code>preventDefault()</code>的方法(是否需要一个<a href=\"https://dom.spec.whatwg.org/#dom-event-cancelable\" target=\"_blank\" rel=\"noopener\">可以取消</a>的事件)。当touch或wheel事件处理函数并没有需要包含可取消事件时，浏览器就可以在不等待JavaScript执行的情况下，立即开始滚动。也就是，passive监听的事件处理函数对性能没有负面影响。</p>\n<h2 id=\"EventListenerOptions（事件监听选项）\"><a href=\"#EventListenerOptions（事件监听选项）\" class=\"headerlink\" title=\"EventListenerOptions（事件监听选项）\"></a>EventListenerOptions（事件监听选项）</h2><p>首先，我们需要对事件监听附加额外信息的机制。<code>addEventListener</code>中的<code>capture</code>参数是最类似的例子，但是它的用法并不是十分明了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'touchstart'</span>, handler, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://dom.spec.whatwg.org/#dictdef-eventlisteneroptions\" target=\"_blank\" rel=\"noopener\">EventListenerOptions</a>让大家可以以一种更明了的方式指定参数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'touchstart'</span>, handler, &#123;<span class=\"attr\">capture</span>: <span class=\"literal\">true</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p>这是指定你希望<a href=\"http://javascript.info/bubbling-and-capturing#capturing\" target=\"_blank\" rel=\"noopener\">在捕获阶段还是冒泡阶段</a>监听事件的新语法，它是一种扩展的语法。</p>\n<h2 id=\"解决方案：passive-选项\"><a href=\"#解决方案：passive-选项\" class=\"headerlink\" title=\"解决方案：passive 选项\"></a>解决方案：passive 选项</h2><p>在有了扩展语法之后，我们在注册事件处理时，就可以添加一个新<code>passive</code>选项，用于提前声明监听函数在事件中从不调用<code>preventDefault()</code>。如果它调用，浏览器会忽略请求（并很机智地在控制台警告），就像它已经调用过<code>Event.cancelable=false</code>一样。开发者可以通过在调用<code>preventDefault()</code>之前和之后查看<code>Event.defaultPrevented</code>来进行确认。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addEventListener(<span class=\"built_in\">document</span>, <span class=\"string\">\"touchstart\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(e.defaultPrevented);  <span class=\"comment\">// will be false</span></span><br><span class=\"line\">\t\te.preventDefault();   <span class=\"comment\">// does nothing since the listener is passive</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(e.defaultPrevented);  <span class=\"comment\">// still false</span></span><br><span class=\"line\">&#125;, Modernizr.passiveeventlisteners ? &#123;<span class=\"attr\">passive</span>: <span class=\"literal\">true</span>&#125; : <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>现在，相比只要有touch或wheel监听就不得不阻止滚动来说，浏览器只需要在有non-passive监听时（参见<a href=\"https://w3c.github.io/touch-events/#cancelability\" target=\"_blank\" rel=\"noopener\">TouchEvents spec</a>）才阻止滚动。也就是说passive监听可以解决性能问题。</p>\n<p>通过指定touch或wheel监听为passive的，开发者就是在承诺处理函数不调用<code>preventDefault()</code>来取消滚动。这使得浏览器能够立刻响应滚动，不用等待JavaScript，以此为用户保证流畅滚动体验。</p>\n<h2 id=\"特性检测\"><a href=\"#特性检测\" class=\"headerlink\" title=\"特性检测\"></a>特性检测</h2><p>由于老旧浏览器会把第三个参数<code>capture</code>传的任何对象看作<code>true</code>值，开发者用这个API时，需要使用特性检测或<a href=\"https://github.com/WebReflection/dom4\" target=\"_blank\" rel=\"noopener\">polyfill</a>，以避免预期之外的结果。对于指定选项的特性检测可以像下面这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test via a getter in the options object to see if the passive property is accessed</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> supportsPassive = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> opts = <span class=\"built_in\">Object</span>.defineProperty(&#123;&#125;, <span class=\"string\">'passive'</span>, &#123;</span><br><span class=\"line\">\t\tget: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\tsupportsPassive = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"test\"</span>, <span class=\"literal\">null</span>, opts);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Use our detect's results. passive applied if supported, capture will be false either way.</span></span><br><span class=\"line\">elem.addEventListener(<span class=\"string\">'touchstart'</span>, fn, supportsPassive ? &#123; <span class=\"attr\">passive</span>: <span class=\"literal\">true</span> &#125; : <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>为了更简洁，可以使用<a href=\"https://github.com/rafrex/detect-it\" target=\"_blank\" rel=\"noopener\">Detect It</a>的特性检测，例如:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elem.addEventListener(<span class=\"string\">'touchstart'</span>, fn,</span><br><span class=\"line\">\tdetectIt.passiveEvents ? &#123;<span class=\"attr\">passive</span>:<span class=\"literal\">true</span>&#125; : <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://modernizr.com/\" target=\"_blank\" rel=\"noopener\">Modernizr</a>正在处理<a href=\"https://github.com/Modernizr/Modernizr/issues/1894\" target=\"_blank\" rel=\"noopener\">这个</a>特性检测，但还没发布。此外有一个关于字典成员特性检测是否提供更简洁API的<a href=\"https://github.com/heycam/webidl/issues/107\" target=\"_blank\" rel=\"noopener\">开放标准讨论</a>。</p>\n<h2 id=\"消除取消事件的需求\"><a href=\"#消除取消事件的需求\" class=\"headerlink\" title=\"消除取消事件的需求\"></a>消除取消事件的需求</h2><p>有一些场景是开发者想要取消所有touch或wheel事件让滚动不可用的情况。这些包含：</p>\n<p>1.平移或缩放地图<br>2.全屏游戏</p>\n<p>在这些情况下，由于滚动自身是被一直阻止的，现有行为完全能够满足（没有滚动优化）。在这些情况下没有必要使用passive监听，虽然一般还是会添加<code>touch-action: none</code>CSS属性来显式表达你的意图（例如可以更好地支持那些有pointer事件，但没有touch事件的浏览器）。</p>\n<p>然而，在一系列场景中，事件处理函数根本不需要阻塞滚动。例如：</p>\n<ol>\n<li>只想知道用户最后活跃是在什么时间的用户动态监控</li>\n<li>隐藏一些活动UI（像工具栏）的<code>touchstart</code>处理函数。</li>\n<li>改变UI元素样式的<code>touchstart</code>和<code>touchend</code>处理函数（不阻止onclick事件）。</li>\n</ol>\n<p>在这些场景下，可以不修改其他代码，直接添加<code>passive</code>选项上去（要有适当的特性检测），滑动体验会明显变得更流畅。</p>\n<p>还有一些更复杂的场景，只想在一些确定的条件下阻止滑动，例如：</p>\n<ol>\n<li>在横向滑动的时候去切换轮播图、移动一个条目，或者切换某个元素展示隐藏，但是仍然允许纵向滚动。<ol>\n<li>这种情况下，可以使用<code>touch-action: pan-y</code>来声明不需要横向滚动，不需要调用<code>preventDefault()</code>。</li>\n<li>为了在所有浏览器中可以正常运行，<code>preventDefault()</code>的调用应当在缺少特定的<code>touch-action</code>属性支持的条件下使用（Safari9现在只支持 <code>touch-action:manipulation</code>）。</li>\n</ol>\n</li>\n<li>一个需要使用横向滚动事件来滑动的UI元素（就像YouTube的声音调节滑动条），但不会改变滚垂直滚轮的行为。由于对于<code>wheel</code>来说没有<code>touch-action</code>的等价事件，这个情况只能用non-passive滚轮监听来实现。</li>\n<li>事件代理模式下添加的监听代码，不会知道用户是否会取消事件。<ol>\n<li>一个可用的方法是单独代理passive和non-passive监听（就好像他们是完全不同种类的事件一样）。</li>\n<li>像上面那样发挥<code>touch-action</code>的影响力也是可以的。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"调试及权衡利益\"><a href=\"#调试及权衡利益\" class=\"headerlink\" title=\"调试及权衡利益\"></a>调试及权衡利益</h2><p>通过<code>chrome://flags/#passive-listener-default</code>(chrome 52)强制设置touch/wheel为<code>passive</code>监听，可以快速了解它的优势（以及可能造成的问题）。这使得你能够自己做更直观的对比，像<a href=\"https://twitter.com/RickByers/status/719736672523407360\" target=\"_blank\" rel=\"noopener\">这个视频中的</a>那样。</p>\n<p>如何使用Chrome开发者工具识别阻塞滚动的监听，可以看<a href=\"https://www.youtube.com/watch?v=6-D_3yx_KVI\" target=\"_blank\" rel=\"noopener\">这个视频</a>。你可以<a href=\"https://www.youtube.com/watch?v=6-D_3yx_KVI\" target=\"_blank\" rel=\"noopener\">监测事件时间戳</a>来衡量滚动的性能，也可以使用<a href=\"https://www.chromium.org/developers/how-tos/trace-event-profiling-tool\" target=\"_blank\" rel=\"noopener\">Chromium的跟踪系统</a>来查看调试时滚动的输入延迟（InputLatency）记录。</p>\n<p>Chrome工作组正在准备关于<a href=\"https://code.google.com/p/chromium/issues/detail?id=543598\" target=\"_blank\" rel=\"noopener\">Performance Timeline API</a>及<a href=\"https://code.google.com/p/chromium/issues/detail?id=520659\" target=\"_blank\" rel=\"noopener\">更多开发工具</a>特性的提案，以帮助web开发者更好的看清这个问题。</p>\n<h2 id=\"减少和打断长时间运行的JS仍然很重要\"><a href=\"#减少和打断长时间运行的JS仍然很重要\" class=\"headerlink\" title=\"减少和打断长时间运行的JS仍然很重要\"></a>减少和打断长时间运行的JS仍然很重要</h2><p>当一个页面展现出大量的滚动卡顿，就表示某些地方有潜在的性能问题。<code>passive</code>事件监听没有对潜在问题做事情，所以我们仍然强烈建议开发者确保他们的应用在低性能设备上能满足<a href=\"https://developers.google.com/web/fundamentals/performance/rail?hl=en\" target=\"_blank\" rel=\"noopener\">性能指导范围</a>。如果你的网站有的逻辑每次运行都大于100ms，那么仍然会在tap和click响应上感觉很缓慢。<code>passive</code>事件监听只是允许开发者解耦了映射到滚动性能的JS响应问题和监控输入事件的请求。特别值得一提的是，第三方库的开发者现在可以更有自信一点说，他们对轻量级事件监听的使用，不会对使用了他们代码的页面的性能造成明显的改变。</p>\n<h2 id=\"深入阅读及讨论\"><a href=\"#深入阅读及讨论\" class=\"headerlink\" title=\"深入阅读及讨论\"></a>深入阅读及讨论</h2><p>更多细节看<a href=\"https://github.com/WICG/EventListenerOptions\" target=\"_blank\" rel=\"noopener\">这里</a>的链接。有问题的话，看<a href=\"https://github.com/WICG/EventListenerOptions/issues\" target=\"_blank\" rel=\"noopener\">这里</a>的讨论，或者联系<a href=\"https://twitter.com/RickByers/\" target=\"_blank\" rel=\"noopener\">@RickByers</a>。</p>\n<p>原文：<a href=\"https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\" target=\"_blank\" rel=\"noopener\">https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md</a></p>\n<p>译者：<a href=\"https://github.com/LindaWhite\" target=\"_blank\" rel=\"noopener\">Linda</a></p>\n<p>作者：<a href=\"https://github.com/RByers\" target=\"_blank\" rel=\"noopener\">RByers</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"passive事件监听\"><a href=\"#passive事件监听\" class=\"headerlink\" title=\"passive事件监听\"></a>passive事件监听</h1><p>passive事件监听，是<a href=\"https://dom.spec.whatwg.org/#dom-eventlisteneroptions-passive\" target=\"_blank\" rel=\"noopener\">DOM规范</a>的新特性，它可以让开发者选择不阻止touch和wheel事件监听，从而获得更好的滚动性能。开发者可以在监听touch和wheel事件时指定<code>{passive:true}</code>来表明他们不会调用<code>preventDefault</code>。这个特性出现在<a href=\"https://www.chromestatus.com/features/5745543795965952\" target=\"_blank\" rel=\"noopener\">Chrome51</a>，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1266066\" target=\"_blank\" rel=\"noopener\">FireFox49</a>，<a href=\"https://bugs.webkit.org/show_bug.cgi?id=158601\" target=\"_blank\" rel=\"noopener\">以及Webkit</a>。看看下面的passive事件监听的效果对比视频：</p>\n<p><a href=\"https://www.youtube.com/watch?v=NPM6172J22g\" target=\"_blank\" rel=\"noopener\">demo video</a></p>","more":"<h2 id=\"问题所在\"><a href=\"#问题所在\" class=\"headerlink\" title=\"问题所在\"></a>问题所在</h2><p>对于web，尤其是移动设备上的web来说，流畅的滚动性能会直接决定用户体验。所有现代浏览器都有一个单独的线程处理页面滚动，即使是在JavaScript运行的时候也能流畅地滚动，但是这个优化有局限性，因为在需要等待<code>touchstart</code>和 <code>touchmove</code>操作的结果时就无法进行优化。这是因为<code>touchstart</code>等事件处理函数中可能会调用<a href=\"https://www.w3.org/TR/touch-events/#the-touchstart-event\" target=\"_blank\" rel=\"noopener\">preventDefault()</a>完全阻止滚动。在实际开发中，确实有需要阻止滚动的场景，但是分析结果表明，web上的多数的touch事件处理函数实际上从来不调用<code>preventDefault()</code>，所以浏览器通常不需要阻止滚动。例如，在安卓Chrome中，对滚动性能造成影响的情况中，有80%的事件都没有被阻止 。有10%的情况导致滚动延迟多于100毫秒。1%的情况导致延迟至少500毫秒，简直是毁灭性的影响。</p>\n<p>许多开发者注意到<a href=\"http://rbyers.github.io/janky-touch-scroll.html\" target=\"_blank\" rel=\"noopener\">在document中简单添加一个空的touch处理函数</a>会对滚动性能有非常明显的负面影响。他们觉得很惊讶，监听一个事件的操作<a href=\"https://dom.spec.whatwg.org/#observing-event-listeners\" target=\"_blank\" rel=\"noopener\">不应该有任何负面影响</a>。</p>\n<p>同样的问题并不只出现在touch事件上。<a href=\"https://w3c.github.io/uievents/#events-wheelevents\" target=\"_blank\" rel=\"noopener\">wheel事件</a>也遭遇同样的问题。与它们不同，<a href=\"https://w3c.github.io/pointerevents/\" target=\"_blank\" rel=\"noopener\">指针事件处理函数</a>被设计为不影响滚动（尽管开发者仍然可以通过<code>touch-action</code>这个CSS属性阻止滚动），所以不用面临这个问题。大体上讲，passive事件监听就是将指针事件的性能带给了touch和wheel事件。</p>\n<p>这个提案允许开发者在注册事件处理函数时，指明是否会在处理函数中调用<code>preventDefault()</code>的方法(是否需要一个<a href=\"https://dom.spec.whatwg.org/#dom-event-cancelable\" target=\"_blank\" rel=\"noopener\">可以取消</a>的事件)。当touch或wheel事件处理函数并没有需要包含可取消事件时，浏览器就可以在不等待JavaScript执行的情况下，立即开始滚动。也就是，passive监听的事件处理函数对性能没有负面影响。</p>\n<h2 id=\"EventListenerOptions（事件监听选项）\"><a href=\"#EventListenerOptions（事件监听选项）\" class=\"headerlink\" title=\"EventListenerOptions（事件监听选项）\"></a>EventListenerOptions（事件监听选项）</h2><p>首先，我们需要对事件监听附加额外信息的机制。<code>addEventListener</code>中的<code>capture</code>参数是最类似的例子，但是它的用法并不是十分明了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'touchstart'</span>, handler, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://dom.spec.whatwg.org/#dictdef-eventlisteneroptions\" target=\"_blank\" rel=\"noopener\">EventListenerOptions</a>让大家可以以一种更明了的方式指定参数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'touchstart'</span>, handler, &#123;<span class=\"attr\">capture</span>: <span class=\"literal\">true</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p>这是指定你希望<a href=\"http://javascript.info/bubbling-and-capturing#capturing\" target=\"_blank\" rel=\"noopener\">在捕获阶段还是冒泡阶段</a>监听事件的新语法，它是一种扩展的语法。</p>\n<h2 id=\"解决方案：passive-选项\"><a href=\"#解决方案：passive-选项\" class=\"headerlink\" title=\"解决方案：passive 选项\"></a>解决方案：passive 选项</h2><p>在有了扩展语法之后，我们在注册事件处理时，就可以添加一个新<code>passive</code>选项，用于提前声明监听函数在事件中从不调用<code>preventDefault()</code>。如果它调用，浏览器会忽略请求（并很机智地在控制台警告），就像它已经调用过<code>Event.cancelable=false</code>一样。开发者可以通过在调用<code>preventDefault()</code>之前和之后查看<code>Event.defaultPrevented</code>来进行确认。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addEventListener(<span class=\"built_in\">document</span>, <span class=\"string\">\"touchstart\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(e.defaultPrevented);  <span class=\"comment\">// will be false</span></span><br><span class=\"line\">\t\te.preventDefault();   <span class=\"comment\">// does nothing since the listener is passive</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(e.defaultPrevented);  <span class=\"comment\">// still false</span></span><br><span class=\"line\">&#125;, Modernizr.passiveeventlisteners ? &#123;<span class=\"attr\">passive</span>: <span class=\"literal\">true</span>&#125; : <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>现在，相比只要有touch或wheel监听就不得不阻止滚动来说，浏览器只需要在有non-passive监听时（参见<a href=\"https://w3c.github.io/touch-events/#cancelability\" target=\"_blank\" rel=\"noopener\">TouchEvents spec</a>）才阻止滚动。也就是说passive监听可以解决性能问题。</p>\n<p>通过指定touch或wheel监听为passive的，开发者就是在承诺处理函数不调用<code>preventDefault()</code>来取消滚动。这使得浏览器能够立刻响应滚动，不用等待JavaScript，以此为用户保证流畅滚动体验。</p>\n<h2 id=\"特性检测\"><a href=\"#特性检测\" class=\"headerlink\" title=\"特性检测\"></a>特性检测</h2><p>由于老旧浏览器会把第三个参数<code>capture</code>传的任何对象看作<code>true</code>值，开发者用这个API时，需要使用特性检测或<a href=\"https://github.com/WebReflection/dom4\" target=\"_blank\" rel=\"noopener\">polyfill</a>，以避免预期之外的结果。对于指定选项的特性检测可以像下面这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test via a getter in the options object to see if the passive property is accessed</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> supportsPassive = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> opts = <span class=\"built_in\">Object</span>.defineProperty(&#123;&#125;, <span class=\"string\">'passive'</span>, &#123;</span><br><span class=\"line\">\t\tget: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\tsupportsPassive = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"test\"</span>, <span class=\"literal\">null</span>, opts);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Use our detect's results. passive applied if supported, capture will be false either way.</span></span><br><span class=\"line\">elem.addEventListener(<span class=\"string\">'touchstart'</span>, fn, supportsPassive ? &#123; <span class=\"attr\">passive</span>: <span class=\"literal\">true</span> &#125; : <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>为了更简洁，可以使用<a href=\"https://github.com/rafrex/detect-it\" target=\"_blank\" rel=\"noopener\">Detect It</a>的特性检测，例如:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elem.addEventListener(<span class=\"string\">'touchstart'</span>, fn,</span><br><span class=\"line\">\tdetectIt.passiveEvents ? &#123;<span class=\"attr\">passive</span>:<span class=\"literal\">true</span>&#125; : <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://modernizr.com/\" target=\"_blank\" rel=\"noopener\">Modernizr</a>正在处理<a href=\"https://github.com/Modernizr/Modernizr/issues/1894\" target=\"_blank\" rel=\"noopener\">这个</a>特性检测，但还没发布。此外有一个关于字典成员特性检测是否提供更简洁API的<a href=\"https://github.com/heycam/webidl/issues/107\" target=\"_blank\" rel=\"noopener\">开放标准讨论</a>。</p>\n<h2 id=\"消除取消事件的需求\"><a href=\"#消除取消事件的需求\" class=\"headerlink\" title=\"消除取消事件的需求\"></a>消除取消事件的需求</h2><p>有一些场景是开发者想要取消所有touch或wheel事件让滚动不可用的情况。这些包含：</p>\n<p>1.平移或缩放地图<br>2.全屏游戏</p>\n<p>在这些情况下，由于滚动自身是被一直阻止的，现有行为完全能够满足（没有滚动优化）。在这些情况下没有必要使用passive监听，虽然一般还是会添加<code>touch-action: none</code>CSS属性来显式表达你的意图（例如可以更好地支持那些有pointer事件，但没有touch事件的浏览器）。</p>\n<p>然而，在一系列场景中，事件处理函数根本不需要阻塞滚动。例如：</p>\n<ol>\n<li>只想知道用户最后活跃是在什么时间的用户动态监控</li>\n<li>隐藏一些活动UI（像工具栏）的<code>touchstart</code>处理函数。</li>\n<li>改变UI元素样式的<code>touchstart</code>和<code>touchend</code>处理函数（不阻止onclick事件）。</li>\n</ol>\n<p>在这些场景下，可以不修改其他代码，直接添加<code>passive</code>选项上去（要有适当的特性检测），滑动体验会明显变得更流畅。</p>\n<p>还有一些更复杂的场景，只想在一些确定的条件下阻止滑动，例如：</p>\n<ol>\n<li>在横向滑动的时候去切换轮播图、移动一个条目，或者切换某个元素展示隐藏，但是仍然允许纵向滚动。<ol>\n<li>这种情况下，可以使用<code>touch-action: pan-y</code>来声明不需要横向滚动，不需要调用<code>preventDefault()</code>。</li>\n<li>为了在所有浏览器中可以正常运行，<code>preventDefault()</code>的调用应当在缺少特定的<code>touch-action</code>属性支持的条件下使用（Safari9现在只支持 <code>touch-action:manipulation</code>）。</li>\n</ol>\n</li>\n<li>一个需要使用横向滚动事件来滑动的UI元素（就像YouTube的声音调节滑动条），但不会改变滚垂直滚轮的行为。由于对于<code>wheel</code>来说没有<code>touch-action</code>的等价事件，这个情况只能用non-passive滚轮监听来实现。</li>\n<li>事件代理模式下添加的监听代码，不会知道用户是否会取消事件。<ol>\n<li>一个可用的方法是单独代理passive和non-passive监听（就好像他们是完全不同种类的事件一样）。</li>\n<li>像上面那样发挥<code>touch-action</code>的影响力也是可以的。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"调试及权衡利益\"><a href=\"#调试及权衡利益\" class=\"headerlink\" title=\"调试及权衡利益\"></a>调试及权衡利益</h2><p>通过<code>chrome://flags/#passive-listener-default</code>(chrome 52)强制设置touch/wheel为<code>passive</code>监听，可以快速了解它的优势（以及可能造成的问题）。这使得你能够自己做更直观的对比，像<a href=\"https://twitter.com/RickByers/status/719736672523407360\" target=\"_blank\" rel=\"noopener\">这个视频中的</a>那样。</p>\n<p>如何使用Chrome开发者工具识别阻塞滚动的监听，可以看<a href=\"https://www.youtube.com/watch?v=6-D_3yx_KVI\" target=\"_blank\" rel=\"noopener\">这个视频</a>。你可以<a href=\"https://www.youtube.com/watch?v=6-D_3yx_KVI\" target=\"_blank\" rel=\"noopener\">监测事件时间戳</a>来衡量滚动的性能，也可以使用<a href=\"https://www.chromium.org/developers/how-tos/trace-event-profiling-tool\" target=\"_blank\" rel=\"noopener\">Chromium的跟踪系统</a>来查看调试时滚动的输入延迟（InputLatency）记录。</p>\n<p>Chrome工作组正在准备关于<a href=\"https://code.google.com/p/chromium/issues/detail?id=543598\" target=\"_blank\" rel=\"noopener\">Performance Timeline API</a>及<a href=\"https://code.google.com/p/chromium/issues/detail?id=520659\" target=\"_blank\" rel=\"noopener\">更多开发工具</a>特性的提案，以帮助web开发者更好的看清这个问题。</p>\n<h2 id=\"减少和打断长时间运行的JS仍然很重要\"><a href=\"#减少和打断长时间运行的JS仍然很重要\" class=\"headerlink\" title=\"减少和打断长时间运行的JS仍然很重要\"></a>减少和打断长时间运行的JS仍然很重要</h2><p>当一个页面展现出大量的滚动卡顿，就表示某些地方有潜在的性能问题。<code>passive</code>事件监听没有对潜在问题做事情，所以我们仍然强烈建议开发者确保他们的应用在低性能设备上能满足<a href=\"https://developers.google.com/web/fundamentals/performance/rail?hl=en\" target=\"_blank\" rel=\"noopener\">性能指导范围</a>。如果你的网站有的逻辑每次运行都大于100ms，那么仍然会在tap和click响应上感觉很缓慢。<code>passive</code>事件监听只是允许开发者解耦了映射到滚动性能的JS响应问题和监控输入事件的请求。特别值得一提的是，第三方库的开发者现在可以更有自信一点说，他们对轻量级事件监听的使用，不会对使用了他们代码的页面的性能造成明显的改变。</p>\n<h2 id=\"深入阅读及讨论\"><a href=\"#深入阅读及讨论\" class=\"headerlink\" title=\"深入阅读及讨论\"></a>深入阅读及讨论</h2><p>更多细节看<a href=\"https://github.com/WICG/EventListenerOptions\" target=\"_blank\" rel=\"noopener\">这里</a>的链接。有问题的话，看<a href=\"https://github.com/WICG/EventListenerOptions/issues\" target=\"_blank\" rel=\"noopener\">这里</a>的讨论，或者联系<a href=\"https://twitter.com/RickByers/\" target=\"_blank\" rel=\"noopener\">@RickByers</a>。</p>\n<p>原文：<a href=\"https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\" target=\"_blank\" rel=\"noopener\">https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md</a></p>\n<p>译者：<a href=\"https://github.com/LindaWhite\" target=\"_blank\" rel=\"noopener\">Linda</a></p>\n<p>作者：<a href=\"https://github.com/RByers\" target=\"_blank\" rel=\"noopener\">RByers</a></p>"},{"title":"【译】4种javascript的内存泄露及避免方法","date":"2017-05-25T02:30:00.000Z","author":"Linda","_content":"这篇文章里面我们会讨论客户侧javascript代码中的常见种类的内存泄漏。也会学习如何用Chrome Development Tools来定位这些问题。继续阅读吧！\n\n# 介绍\n\n内存泄漏是每个开发者最终必须面对的问题。即使使用有内存管理的语言，也有内存可能会泄漏的情况。泄漏是很多问题的起因：变慢，崩溃，高延迟，甚至是一些和其他应用一起用所出现的问题。\n\t\n## 内存泄漏是什么？\n\n本质上，内存泄漏可以定义为一个应用，由于某些原因不再需要的内存没有被操作系统或者空闲内存池回收。编程语言支持多种管理内存的方式。这些方式可能会减少内存泄漏的几率。然而，某一块内存是否没有用到实际上是一个[不可判定的问题](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management#Release_when_the_memory_is_not_needed_anymore)。换句话说，只有开发者可以弄清一块内存是否可以被操作系统回收。某些编程语言提供了帮助开发者做这个的特性。其他一些语言期望开发者可以完全明确什么时候一块内存是没被使用的。Wikipedia有关于[手动](https://en.wikipedia.org/wiki/Manual_memory_management)和[自动](https://en.wikipedia.org/wiki/Manual_memory_management)内存管理的两篇不错的文章。\n<!-- more -->\n\n## Javascript中的内存管理\n\nJavaScript是所谓的垃圾回收语言之一。垃圾回收语言，通过定期检查哪些事先被分配的内存块仍然可以被应用的其他部分“访问”到，来帮助开发者管理内存。换句话说，垃圾回收语言从“哪些内存是仍然被需要的？”到“哪些内存是仍然可以被应用的其他部分访问到的”减少了管理内存的问题。差异很微妙，但是很重要：当只有开发者知道一块分配了的内存将来会被需要，访问不到的内存可以在算法上被决策并标记为系统回收内存。\n\n> 非垃圾回收语言通常通过其他技术来管理内存：明确的内存管理，当一块内存不需要时，开发者明确的告诉编译器；还有引用计数，用计数与每个内存块关联（当计数到0时，被系统收回）。这些技术有他们自己的协定（和潜在的泄漏原因）。\n\n## JavaScript中的泄漏\n在垃圾回收语言中，泄漏的主要原因是不必要的引用。为了理解什么是不必要的引用，首先需要理解垃圾回收器是如何决策一块内存是否可以被访问到的。\n\n> “垃圾回收语言中的泄漏的主要原因是不必要的引用”。\n\n## Mark-and-sweep\n\n大多数垃圾回收器使用一种被称为mark-and-sweep的算法。这个算法包括下面的几步：\n\n1.垃圾回收器建立一个根节点的列表。根节点通常是代码中一个一直在的引用对应的全局变量。在JavaScript中，window对象是一个可以作为根节点的全局变量的例子。window对象总是在线，所以垃圾回收器可以看重它并且它所有的子节点总是在线（即非垃圾）。\n\n\n2.所有的根节点被检查并且标记为活跃（即非垃圾）。所有子节点也同样被递归检查。每个从根节点可以到达的节点不会被认为垃圾。\n\n\n3.所有没被标记为活跃的内存块现在可以被认为是垃圾。回收器现在可以释放掉那块内存并且还给操作系统。\n\n现代垃圾回收器通过不同方法提升了这个算法，但是本质是一样的：可访问到的内存块被标记出来，剩下的被认为是垃圾。\n不必要的引用，是开发者知道他/她不会再需要的，但由于某些原因存在于活跃根节点的树上的内存块，所对应的引用。在JavaScript的上下文中，不必要的引用是代码中存在的不会再用到，指向一块本来可以被释放的内存的变量。一些人会证明这是开发者的错误。\n\n所以想要理解哪些是JavaScript中最常见的泄漏，我们需要知道引用通常被忘记是通过哪些方式。\n\n# 3种常见的JavaScript泄漏\n\n## 1.意外的全局变量\n\nJavaScript的目标是开发一种看起来像Java但足够自由的被初学者使用的语言。JavaScript自由的其中一种方式是它可以处理没有声明的变量：一个未声明的变量的引用在全局对象中创建了一个新变量。在浏览器的环境中，全局对象是window。也就是说：\n\n```js\nfunction foo(arg) {\n    bar = \"this is a hidden global variable\";\n}\n```\n\n实际上是：\n\n```js\nfunction foo(arg) {\n    window.bar = \"this is an explicit global variable\";\n}\n```\n\n\n如果`bar`是仅在`foo`函数作用域内承载引用，并且你忘记用`var`来声明的变量，一个意外的全局变量就被创建了。在这个例子中，泄漏一个单一字符串不会有太大害处，但这的确是不好的。\n另一种意外全局变量被创建的方式是通过`this`：\n\n\n\n```js\nfunction foo() {\n    this.variable = \"potential accidental global\";\n}\n\n// Foo called on its own, this points to the global object (window)\n// rather than being undefined.\nfoo();\n```\n\n\n> 为了阻止这种错误发生，在你的Javascript文件最前面添加`'use strict;'`。这开启了解析JavaScript的阻止意外全局的更严格的模式。\n\n\n全局变量的一个注意事项：\n\n即使我们谈了不明的全局变量，仍然存在很多代码被显式的全局变量填充的情况。这是通过定义不可收集的情况（除非清零或重新赋值）。特别的，用来临时存储和处理大量信息的全局变量会引起关注。如果必须用全局变量来存储很多数据，在处理完之后，确保对其清零或重新赋值。 一个在与全局连接上增加内存消耗常见的原因是[缓存](https://en.wikipedia.org/wiki/Cache_(computing))。 缓存存储重复被使用的数据。为此，为了有效，缓存必须有其大小的上限。飙出限制的缓存可能会因为内容不可被回收，导致高内存消耗。\n\n\n## 2.被遗忘的计时器或回调\n\n在JavaScript中`setInterval`的使用相当常见。其他库提供观察者和其他工具以回调。这些库中大多数，在引用的实例变成不可访问之后，负责让回调的任何引用也不可访问。在`setInterval`的情况下，这样的代码很常见：\n\n\n```js\nvar someResource = getData();\nsetInterval(function() {\n    var node = document.getElementById('Node');\n    if(node) {\n        // Do stuff with node and someResource.\n        node.innerHTML = JSON.stringify(someResource));\n    }\n}, 1000);\n```\n\n这个例子表明了跳动的计时器可能发生什么：计时器使得节点或数据的引用不再被需要了。代表`node`的对象将来可能被移除，使得整个块在间隔中的处理不必要。然而，处理函数，由于间隔仍然是活跃的，不能被回收（间隔需要被停掉才能回收）。如果间隔处理不能被回收，它的依赖也不能被回收。那意味着可能存储着大量数据的`someResource`，也不能被回收。\n观察者情况下，一旦不被需要（或相关的对象快要访问不到）就创建明确移除他们的函数很重要。在过去，这由于特定浏览器（IE6）不能很好的管理循环引用（下面有更多相关信息），曾经尤为重要。现如今，一旦观察对象变成不可访问的，即使收听者没有明确的被移除，多数浏览器可以并会回收观察者处理函数。然而，它保持了在对象被处理前明确的移除这些观察者的好实践。例如：\n\n\n```js\nvar element = document.getElementById('button');\n\nfunction onClick(event) {\n    element.innerHtml = 'text';\n}\n\nelement.addEventListener('click', onClick);\n// Do stuff\nelement.removeEventListener('click', onClick);\nelement.parentNode.removeChild(element);\n// Now when element goes out of scope,\n// both element and onClick will be collected even in old browsers that don't\n// handle cycles well.\n```\n\n\n\n一条关于对象观察者及循环引用的笔记\n\n观察者和循环引用曾经是JavaScript开发者的祸患。这是由于IE垃圾回收的一个bug(或者设计决议)出现的情况。IE的老版本不能检测到DOM节点和JavaScript代码间的循环引用。 这是一个通常为观察到的保留引用（如同上面的例子）的观察者的典型。  也就是说，每次在IE中对一个节点添加观察者的时候，会导致泄漏。这是开发者在节点或空引用之前开始明确的移除处理函数的原因。 现在，现代浏览器（包括IE和MS Edge）使用可以剪裁这些循环和正确处理的现代垃圾回收算法。换言之，在使一个节点不可访问前，调用`removeEventLister`不是严格意义上必须的。\n\n像Jquery一样的框架和库做了在处置一个节点前（当为其使用特定的API的时候）移除监听者的工作。这被在库内部处理，即使在像老版本IE一样有问题的浏览器里面跑，也会确保没有泄漏产生。\n\n## 3. 超出DOM引用\n有时存储DOM节点到数据结构中可能有用。假设你想要迅速的更新一个表格几行内容。存储每个DOM行节点的引用到一个字典或数组会起作用。当这发生是，两个对于同个DOM元素的引用被留存：一个在DOM树中，另外一个在字典中。如果在将来的某些点你决定要移除这些行，需要让两个引用都不可用。\n\n\n```js\nvar elements = {\n    button: document.getElementById('button'),\n    image: document.getElementById('image'),\n    text: document.getElementById('text')\n};\n\nfunction doStuff() {\n    image.src = 'http://some.url/image';\n    button.click();\n    console.log(text.innerHTML);\n    // Much more logic\n}\n\nfunction removeButton() {\n    // The button is a direct child of body.\n    document.body.removeChild(document.getElementById('button'));\n\n    // At this point, we still have a reference to #button in the global\n    // elements dictionary. In other words, the button element is still in\n    // memory and cannot be collected by the GC.\n}\n```\n\n\n对此的额外考虑，必须处理DOM树内的内部节点或叶子节点。假设你在JavaScript代码中保留了一个对于特定的表格内节点（一个td标签）的引用。在将来的某个点决定从DOM中移除这个表格，但是保留对于那个节点的引用。直观的，会假设GC会回收除那个节点之外的每个节点。在实践中，这不会发生的：这个单节点是那个表格的子节点，子节点保留对父节点引用。换句话说，来自JavaScript代码的表格元素的引用会引起在内存里存整个表格。当保留DOM元素的引用的时候，仔细考虑下。\n\n\n## 4.闭包\n\n一个JavaScript开发的关键点是闭包：从父级作用域捕获变量的匿名函数。很多开发者发现，由于JavaScript runtime的实现细节，有以一种微妙的方式泄漏的可能，[这种特殊的情况](https://blog.meteor.com/an-interesting-kind-of-javascript-memory-leak-8b47d2e7f156)：\n\n\n```js\nvar theThing = null;\nvar replaceThing = function () {\n  var originalThing = theThing;\n  var unused = function () {\n    if (originalThing)\n      console.log(\"hi\");\n  };\n  theThing = {\n    longStr: new Array(1000000).join('*'),\n    someMethod: function () {\n      console.log(someMessage);\n    }\n  };\n};\nsetInterval(replaceThing, 1000);\n```\n\n\n这个代码片段做了一件事：每次`replaceThing`被调用的时候，`theThing`获取到一个包括一个大数组和新闭包(`somMethod`)的新对象。同时，变量`unused`保留了一个有`originalThing`（`theThing`从之前的对`replaceThing`的调用）引用的闭包。已经有点疑惑了，哈？重要的是一旦一个作用域被在同个父作用域下的闭包创建，那个作用域是共享的。这种情况下，为闭包`somMethod`创建的作用域被`unused`共享了。`unused`有一个对`originalThing`的引用。即使`unused`从来没被用过，`someMethod`可以通过`theTing`被使用。由于`someMethod`和`unused`共享了闭包作用域，即使`unused`从来没被用过，它对`originalThing`的引用迫使它停留在活跃状态（不能回收）。当这个代码片段重复运行的时候，可以看到内存使用稳步的增长。GC运行的时候，这并不会减轻。本质上，一组关联的闭包被创建（同`unused`变量在表单中的根节点一起），这些闭包作用域中每个带了大数组一个非直接的引用，导致了大型的泄漏。\n\n> 这是一个实现构件。一个可以处理这关系的闭包的不同实现是可以想象的，就如在[这篇博客](https://blog.meteor.com/an-interesting-kind-of-javascript-memory-leak-8b47d2e7f156)中解释的一样。\n\n# 垃圾回收的直观行为\n\n即使垃圾回收很方便，他们有自己的一套权衡方法。其中一个权衡是nondeterminism。也就是说，GC是不可预期的。通常不能确定什么时候回收器被执行。这意味着在一些情况下，需要比程序正在使用的更多的内存。其他情况下，短的暂停在特别敏感的应用中很明显。即使不确定性意味着不能确定回收什么时候执行，大多数GC实现共享在分配期间，普通的回收通行证模式。如果没有执行分配，大多数CG停留在休息状态。考虑下面的方案：\n\n1.执行一组大型的分配。\n\n2.多数元素（或所有）被标记为不可访问（假设我们置空了一个指向不再需要的缓存的引用）。\n\n3.没有进一步的分配执行了。\n\n\n在这个方案中，大多GC不会运行任何进一步的回收通行了。换言之，即使有可用于回收的，不可访问的引用，回收器不会要求他了。这不是严格的泄漏，但是也会导致比平常更高的内存使用率。\nGoogle在 [JavaScript Memory Profiling docs, example #2](https://developer.chrome.com/devtools/docs/demos/memory/example2).文章中，提供了一个优秀的例子。\n\n# Chrome内存分析工具概览\n\nChrome提供了一系列优秀的工具来分析JavaScript代码的内存使用。这两幅图域内存相关：timeline图及profile图。\n\nTimeline视图\n\n![css_layouts](/images/2017-memory-leaks/timeline.png)\n\ntimeline视图在发现代码中异常内存模式是必须的。假使在找大型泄漏，在回收之后，不与增长一样多收缩的，周期性跳跃，是一个红色标记。在这个截图中可以看到泄漏的对象的稳定增长是什么样的。即使在最后的大型回收之后，使用的内存的总量比在开始时高。节点数量也高。这都是代码中某处DOM节点泄漏的标志。\n\nProfile视图\n\n![css_layouts](/images/2017-memory-leaks/profiles.png)\n\n这是你会花大部分时间看的视图。分析视图允许你获得一个快照，比较JavaScript代码中内存使用的快照。也允许记录一段时间的分配情况。在每个结果图中可以看不同种类的列表，但是我们任务中，关系最大的是总结列表和比较列表。\n总结列表给我们不同对象的分配及汇总大小的概览：表面大小（一个具体类别的所有对象的总和）和保存大小（表面大小加上其他对象为这个对象留存的大小）。也给我们一个对象与其GC根节点有多远的概念。\n对比列表给我们同样的信息，但是允许我们比较不同的快照。这个对于找泄漏十分有用。\n\n## 示例：使用Chrome找内存泄漏\n\n基本上有两种泄漏：引起内存使用周期性的增长的泄漏，以及只发生一次并不会引进一步内存增长的泄漏。很明显，当内存是周期性的，发现泄漏更容易。这些也是最棘手的问题：如果内存经过一段时间后增长，这类型的泄漏会最终引起浏览器变慢或停止执行脚本。当非周期性的泄漏在其他分配中大到足够明显，可以很容易的发现它们。通常情况并非如此，所以他们通常被忽视。在某种程度上，发生了一次的小泄漏可以被看作一个优化议题。然而，周期性的泄漏是bug，必须修复。\n\n例如，我们会用[Chrome文档中的一个例子](https://developer.chrome.com/devtools/docs/demos/memory/example1)。下面贴出了全部代码：\n\n\n```js\nvar x = [];\n\nfunction createSomeNodes() {\n    var div,\n        i = 100,\n        frag = document.createDocumentFragment();\n    for (;i > 0; i--) {\n        div = document.createElement(\"div\");\n        div.appendChild(document.createTextNode(i + \" - \"+ new Date().toTimeString()));\n        frag.appendChild(div);\n    }\n    document.getElementById(\"nodes\").appendChild(frag);\n}\nfunction grow() {\n    x.push(new Array(1000000).join('x'));\n    createSomeNodes();\n    setTimeout(grow,1000);\n}\n```\n\n\n当`grow`被调用的时候，会看上创建div节点，并添加到DOM。也会分配一个大数组，并添加到一个被全局变量引用的数组。这会引起可以用上面提到的内存工具发现的，稳定内存增长。\n\n> 垃圾回收语言通常显示为震荡的内存使用模式。通常情况，如果代码在带分配内存的循环中的时候，是期望有这个的。我们会寻找，回收后不恢复到之前情况的，周期增长的内存。\n\n## 找出内存是否在周期性的增长\n\n时间轴视图对此很有用。在Chrome中打开[这个示例](https://developer.chrome.com/devtools/docs/demos/memory/example1)，打开开发者工具，到时间轴选项卡，选内存，点击记录按钮。然后到需要测的页面，点击“按钮”开始泄漏内存。等一小会停止记录，看下结果：\n\n![css_layouts](/images/2017-memory-leaks/example-timeline.png)\n\n> 这个例子每一秒会持续泄漏内存。在停止记录之后，在`grow`函数内打个断点，以阻止脚本迫使Chrome关闭页面。\n\n这图中有两个明显的标志，可以看出我们在泄漏内存。节点（绿色线）和JS堆（蓝色线）的图表。节点在稳健增长，从未减少过。这是个重要的警告标志。\n\nJS堆同样也展示了内存使用的稳健增长。由于垃圾收集器的影响，这更难看到了。可以看到最初的内存增长，跟随很厉害的减少，再然后是增长，之后是一个突刺，后续是内存的掉落。换言之，即使内存收集器成功收集了很多内存，其中一些还是被周期性的泄漏了。现在我们确定了有泄漏。让我们找到泄漏。\n\n## 取得两张快照\n\n为了发现泄漏，我们会来的Chrome开发者工具的profile部分。为将内存使用保持在可控的水平，在做这步之前重新加载下页面。我们会用到Take Heap Snapshot函数。\n重新加载页面，在加载完成之后，就照一张堆的快照。我们会把这张快照作为基准图来使用。之后，再次点“按钮”。等几秒钟，然后拍第二张快照。在拍完快照之后，建议在脚本中打个断点，来阻止更多内存被使用。\n\n![css_layouts](/images/2017-memory-leaks/example-snapshots-1.png)\n\n有两种方法可以在两张快照中看到内存分配。可以选择Summary然后从右面选快照1和快照2分配的对象，或者选Comparison而不是Summary。在两种情况下我们可以看到在两张快照间被分配对象的列表。\n\n在这种情况下很容易找到泄漏：他们很大。看下`(String)`构造函数的`Size Delta`。58个对象，8MB。这看上去有点可疑：新对象被分配了但是没有释放，8MB被消耗掉了。\n\n如果我们打开`(String)`构造函数，我们会注意到在小块内存分配之间，有一些大块的分配。这些大块立刻引起了我们的注意。如果你选择他们其中单独一个，可以在retainer部分下面看到一些有趣的东西。\n\n![css_layouts](/images/2017-memory-leaks/example-snapshots-2.png)\n\n我们看到选中的分配是一个数组的一部分。按顺序，这数组被在全局`window`对象中的变量`x`引用。这给出了一个从大对象到它不能回收的根节点（`window`）的完整的路径。我们发现了潜在泄漏及在哪里引用的。\n\n到目前为止还不错。但是我们的例子很简单：像这个例子中的大块分配\n内存不是规范。幸运的是我们的例子也泄漏DOM节点，是更小些的泄漏。用上面的快照很容易发现这些节点，但是在更大的站点内，事情会更复杂。Chrome的最近几个版本提供了一个最适合我们任务的额外的工具：记录堆分配功能。\n\n## 记录堆分配来发现泄漏\n废除你之前打的断点，让脚本继续跑，回到Chrome开发者工具的Profile部分。现在点“记录堆分配”。当工具在跑时，你将注意到顶上图表中的蓝色尖刺。这代表分配。每一秒钟我们的代码会进行一次大型分配。让他跑几秒钟，然后停下来（别忘了打断点来阻止Chrome吃掉更多内存）。\n\n![css_layouts](/images/2017-memory-leaks/example-recordedallocs-overview.png)\n\n这幅图中可以看到这个工具的特性：选择时间轴的一段，看看在那个时间区间分配了什么。我们设置选中的块尽可能的离其中一个尖刺近。在列表中只显示了3个构造函数：其中一个是和大型泄漏`(String)`有关联的，下一个是和DOM分配有关系的，最后一个是`Text`构造函数（DOM包含文字的叶子节点的构造函数）。从列表里面选择`HTMLDivElement`构造函数其中一个，然后切到`Allocation stack`。\n\n![css_layouts](/images/2017-memory-leaks/example-recordedallocs-selected.png)\n\n呀！我们现在知道那个元素在哪里被分配的了（`grow`->`createSomeNodes`）。如果我们注意下图表中的每个尖刺，会注意到`HTMLDivElement`构造器被调用了很多次。如果我们回到我们的快照对比图，我们会注意到这个构造函数显示了很多分配，但是没有删除。换言之，它在没有GC允许回收其中的一些的情况下，稳定的分配内存。这样，会有个我们清楚的了解的对象在哪里分配的（`createSomeNodes`函数），泄漏叠加的信号。现在是回到代码的时候了，学习下，然后堵掉泄漏。\n\n## 另一个有用的特性\n\n在堆分配结果图里面，我们可以选“分配”视图而不是“总览”视图。\n\n![css_layouts](/images/2017-memory-leaks/example-recordedallocs-list.png)\n\n这个视图提供了我们一个函数和与之相关的内存分配列表。我们可以立即看到`grow`和`createSomeNodes`脱颖而出。选中`grow`的时候，我们可以看到相关对象的构造函数被其调用。我们注意到，我们到目前为止已经知道的对象的构造函数有泄漏的`(String)`，`HTMLDivElement`和`Text`。\n这些工具的结合对查找泄漏很有帮助。用起来。在生产环境的网站跑跑不同的分析（比较理想的是非压缩或混淆的代码）。看看是否可以找到泄漏或留存时间长过其应有时间的对象（提示：这个更难找）。\n> 用这个特性到Dev Tools ->Settings and Enable里面记录堆分配栈踪迹。在记录之前做这个很有必要。\n\n# 结论\n\n内存泄漏可以并确实发生在像JavaScript这样的垃圾回收语言中。这可以被忽视一段时间，最终会肆虐开来。由于这个原因，内存分析工具对查找内存泄漏有必要。跑分析工具应该是开发流程中的一环，尤其针对中型或大型应用。开始做这个来给予你的用户可能最好的体验。跑起来！\n\n原文：[https://auth0.com/blog/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/](https://auth0.com/blog/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/)\n\n译者：[Linda](https://github.com/LindaWhite)\n\n作者：[Sebastián Peyrott](https://twitter.com/speyrott?lang=en)\n\n","source":"_posts/2017-05-25-4-types-of-js-memory-leaks.md","raw":"---\ntitle: 【译】4种javascript的内存泄露及避免方法\ndate: 2017-05-25 10:30\ncategory: 翻译\ntags: [JS,技术]\nauthor: Linda\n---\n这篇文章里面我们会讨论客户侧javascript代码中的常见种类的内存泄漏。也会学习如何用Chrome Development Tools来定位这些问题。继续阅读吧！\n\n# 介绍\n\n内存泄漏是每个开发者最终必须面对的问题。即使使用有内存管理的语言，也有内存可能会泄漏的情况。泄漏是很多问题的起因：变慢，崩溃，高延迟，甚至是一些和其他应用一起用所出现的问题。\n\t\n## 内存泄漏是什么？\n\n本质上，内存泄漏可以定义为一个应用，由于某些原因不再需要的内存没有被操作系统或者空闲内存池回收。编程语言支持多种管理内存的方式。这些方式可能会减少内存泄漏的几率。然而，某一块内存是否没有用到实际上是一个[不可判定的问题](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management#Release_when_the_memory_is_not_needed_anymore)。换句话说，只有开发者可以弄清一块内存是否可以被操作系统回收。某些编程语言提供了帮助开发者做这个的特性。其他一些语言期望开发者可以完全明确什么时候一块内存是没被使用的。Wikipedia有关于[手动](https://en.wikipedia.org/wiki/Manual_memory_management)和[自动](https://en.wikipedia.org/wiki/Manual_memory_management)内存管理的两篇不错的文章。\n<!-- more -->\n\n## Javascript中的内存管理\n\nJavaScript是所谓的垃圾回收语言之一。垃圾回收语言，通过定期检查哪些事先被分配的内存块仍然可以被应用的其他部分“访问”到，来帮助开发者管理内存。换句话说，垃圾回收语言从“哪些内存是仍然被需要的？”到“哪些内存是仍然可以被应用的其他部分访问到的”减少了管理内存的问题。差异很微妙，但是很重要：当只有开发者知道一块分配了的内存将来会被需要，访问不到的内存可以在算法上被决策并标记为系统回收内存。\n\n> 非垃圾回收语言通常通过其他技术来管理内存：明确的内存管理，当一块内存不需要时，开发者明确的告诉编译器；还有引用计数，用计数与每个内存块关联（当计数到0时，被系统收回）。这些技术有他们自己的协定（和潜在的泄漏原因）。\n\n## JavaScript中的泄漏\n在垃圾回收语言中，泄漏的主要原因是不必要的引用。为了理解什么是不必要的引用，首先需要理解垃圾回收器是如何决策一块内存是否可以被访问到的。\n\n> “垃圾回收语言中的泄漏的主要原因是不必要的引用”。\n\n## Mark-and-sweep\n\n大多数垃圾回收器使用一种被称为mark-and-sweep的算法。这个算法包括下面的几步：\n\n1.垃圾回收器建立一个根节点的列表。根节点通常是代码中一个一直在的引用对应的全局变量。在JavaScript中，window对象是一个可以作为根节点的全局变量的例子。window对象总是在线，所以垃圾回收器可以看重它并且它所有的子节点总是在线（即非垃圾）。\n\n\n2.所有的根节点被检查并且标记为活跃（即非垃圾）。所有子节点也同样被递归检查。每个从根节点可以到达的节点不会被认为垃圾。\n\n\n3.所有没被标记为活跃的内存块现在可以被认为是垃圾。回收器现在可以释放掉那块内存并且还给操作系统。\n\n现代垃圾回收器通过不同方法提升了这个算法，但是本质是一样的：可访问到的内存块被标记出来，剩下的被认为是垃圾。\n不必要的引用，是开发者知道他/她不会再需要的，但由于某些原因存在于活跃根节点的树上的内存块，所对应的引用。在JavaScript的上下文中，不必要的引用是代码中存在的不会再用到，指向一块本来可以被释放的内存的变量。一些人会证明这是开发者的错误。\n\n所以想要理解哪些是JavaScript中最常见的泄漏，我们需要知道引用通常被忘记是通过哪些方式。\n\n# 3种常见的JavaScript泄漏\n\n## 1.意外的全局变量\n\nJavaScript的目标是开发一种看起来像Java但足够自由的被初学者使用的语言。JavaScript自由的其中一种方式是它可以处理没有声明的变量：一个未声明的变量的引用在全局对象中创建了一个新变量。在浏览器的环境中，全局对象是window。也就是说：\n\n```js\nfunction foo(arg) {\n    bar = \"this is a hidden global variable\";\n}\n```\n\n实际上是：\n\n```js\nfunction foo(arg) {\n    window.bar = \"this is an explicit global variable\";\n}\n```\n\n\n如果`bar`是仅在`foo`函数作用域内承载引用，并且你忘记用`var`来声明的变量，一个意外的全局变量就被创建了。在这个例子中，泄漏一个单一字符串不会有太大害处，但这的确是不好的。\n另一种意外全局变量被创建的方式是通过`this`：\n\n\n\n```js\nfunction foo() {\n    this.variable = \"potential accidental global\";\n}\n\n// Foo called on its own, this points to the global object (window)\n// rather than being undefined.\nfoo();\n```\n\n\n> 为了阻止这种错误发生，在你的Javascript文件最前面添加`'use strict;'`。这开启了解析JavaScript的阻止意外全局的更严格的模式。\n\n\n全局变量的一个注意事项：\n\n即使我们谈了不明的全局变量，仍然存在很多代码被显式的全局变量填充的情况。这是通过定义不可收集的情况（除非清零或重新赋值）。特别的，用来临时存储和处理大量信息的全局变量会引起关注。如果必须用全局变量来存储很多数据，在处理完之后，确保对其清零或重新赋值。 一个在与全局连接上增加内存消耗常见的原因是[缓存](https://en.wikipedia.org/wiki/Cache_(computing))。 缓存存储重复被使用的数据。为此，为了有效，缓存必须有其大小的上限。飙出限制的缓存可能会因为内容不可被回收，导致高内存消耗。\n\n\n## 2.被遗忘的计时器或回调\n\n在JavaScript中`setInterval`的使用相当常见。其他库提供观察者和其他工具以回调。这些库中大多数，在引用的实例变成不可访问之后，负责让回调的任何引用也不可访问。在`setInterval`的情况下，这样的代码很常见：\n\n\n```js\nvar someResource = getData();\nsetInterval(function() {\n    var node = document.getElementById('Node');\n    if(node) {\n        // Do stuff with node and someResource.\n        node.innerHTML = JSON.stringify(someResource));\n    }\n}, 1000);\n```\n\n这个例子表明了跳动的计时器可能发生什么：计时器使得节点或数据的引用不再被需要了。代表`node`的对象将来可能被移除，使得整个块在间隔中的处理不必要。然而，处理函数，由于间隔仍然是活跃的，不能被回收（间隔需要被停掉才能回收）。如果间隔处理不能被回收，它的依赖也不能被回收。那意味着可能存储着大量数据的`someResource`，也不能被回收。\n观察者情况下，一旦不被需要（或相关的对象快要访问不到）就创建明确移除他们的函数很重要。在过去，这由于特定浏览器（IE6）不能很好的管理循环引用（下面有更多相关信息），曾经尤为重要。现如今，一旦观察对象变成不可访问的，即使收听者没有明确的被移除，多数浏览器可以并会回收观察者处理函数。然而，它保持了在对象被处理前明确的移除这些观察者的好实践。例如：\n\n\n```js\nvar element = document.getElementById('button');\n\nfunction onClick(event) {\n    element.innerHtml = 'text';\n}\n\nelement.addEventListener('click', onClick);\n// Do stuff\nelement.removeEventListener('click', onClick);\nelement.parentNode.removeChild(element);\n// Now when element goes out of scope,\n// both element and onClick will be collected even in old browsers that don't\n// handle cycles well.\n```\n\n\n\n一条关于对象观察者及循环引用的笔记\n\n观察者和循环引用曾经是JavaScript开发者的祸患。这是由于IE垃圾回收的一个bug(或者设计决议)出现的情况。IE的老版本不能检测到DOM节点和JavaScript代码间的循环引用。 这是一个通常为观察到的保留引用（如同上面的例子）的观察者的典型。  也就是说，每次在IE中对一个节点添加观察者的时候，会导致泄漏。这是开发者在节点或空引用之前开始明确的移除处理函数的原因。 现在，现代浏览器（包括IE和MS Edge）使用可以剪裁这些循环和正确处理的现代垃圾回收算法。换言之，在使一个节点不可访问前，调用`removeEventLister`不是严格意义上必须的。\n\n像Jquery一样的框架和库做了在处置一个节点前（当为其使用特定的API的时候）移除监听者的工作。这被在库内部处理，即使在像老版本IE一样有问题的浏览器里面跑，也会确保没有泄漏产生。\n\n## 3. 超出DOM引用\n有时存储DOM节点到数据结构中可能有用。假设你想要迅速的更新一个表格几行内容。存储每个DOM行节点的引用到一个字典或数组会起作用。当这发生是，两个对于同个DOM元素的引用被留存：一个在DOM树中，另外一个在字典中。如果在将来的某些点你决定要移除这些行，需要让两个引用都不可用。\n\n\n```js\nvar elements = {\n    button: document.getElementById('button'),\n    image: document.getElementById('image'),\n    text: document.getElementById('text')\n};\n\nfunction doStuff() {\n    image.src = 'http://some.url/image';\n    button.click();\n    console.log(text.innerHTML);\n    // Much more logic\n}\n\nfunction removeButton() {\n    // The button is a direct child of body.\n    document.body.removeChild(document.getElementById('button'));\n\n    // At this point, we still have a reference to #button in the global\n    // elements dictionary. In other words, the button element is still in\n    // memory and cannot be collected by the GC.\n}\n```\n\n\n对此的额外考虑，必须处理DOM树内的内部节点或叶子节点。假设你在JavaScript代码中保留了一个对于特定的表格内节点（一个td标签）的引用。在将来的某个点决定从DOM中移除这个表格，但是保留对于那个节点的引用。直观的，会假设GC会回收除那个节点之外的每个节点。在实践中，这不会发生的：这个单节点是那个表格的子节点，子节点保留对父节点引用。换句话说，来自JavaScript代码的表格元素的引用会引起在内存里存整个表格。当保留DOM元素的引用的时候，仔细考虑下。\n\n\n## 4.闭包\n\n一个JavaScript开发的关键点是闭包：从父级作用域捕获变量的匿名函数。很多开发者发现，由于JavaScript runtime的实现细节，有以一种微妙的方式泄漏的可能，[这种特殊的情况](https://blog.meteor.com/an-interesting-kind-of-javascript-memory-leak-8b47d2e7f156)：\n\n\n```js\nvar theThing = null;\nvar replaceThing = function () {\n  var originalThing = theThing;\n  var unused = function () {\n    if (originalThing)\n      console.log(\"hi\");\n  };\n  theThing = {\n    longStr: new Array(1000000).join('*'),\n    someMethod: function () {\n      console.log(someMessage);\n    }\n  };\n};\nsetInterval(replaceThing, 1000);\n```\n\n\n这个代码片段做了一件事：每次`replaceThing`被调用的时候，`theThing`获取到一个包括一个大数组和新闭包(`somMethod`)的新对象。同时，变量`unused`保留了一个有`originalThing`（`theThing`从之前的对`replaceThing`的调用）引用的闭包。已经有点疑惑了，哈？重要的是一旦一个作用域被在同个父作用域下的闭包创建，那个作用域是共享的。这种情况下，为闭包`somMethod`创建的作用域被`unused`共享了。`unused`有一个对`originalThing`的引用。即使`unused`从来没被用过，`someMethod`可以通过`theTing`被使用。由于`someMethod`和`unused`共享了闭包作用域，即使`unused`从来没被用过，它对`originalThing`的引用迫使它停留在活跃状态（不能回收）。当这个代码片段重复运行的时候，可以看到内存使用稳步的增长。GC运行的时候，这并不会减轻。本质上，一组关联的闭包被创建（同`unused`变量在表单中的根节点一起），这些闭包作用域中每个带了大数组一个非直接的引用，导致了大型的泄漏。\n\n> 这是一个实现构件。一个可以处理这关系的闭包的不同实现是可以想象的，就如在[这篇博客](https://blog.meteor.com/an-interesting-kind-of-javascript-memory-leak-8b47d2e7f156)中解释的一样。\n\n# 垃圾回收的直观行为\n\n即使垃圾回收很方便，他们有自己的一套权衡方法。其中一个权衡是nondeterminism。也就是说，GC是不可预期的。通常不能确定什么时候回收器被执行。这意味着在一些情况下，需要比程序正在使用的更多的内存。其他情况下，短的暂停在特别敏感的应用中很明显。即使不确定性意味着不能确定回收什么时候执行，大多数GC实现共享在分配期间，普通的回收通行证模式。如果没有执行分配，大多数CG停留在休息状态。考虑下面的方案：\n\n1.执行一组大型的分配。\n\n2.多数元素（或所有）被标记为不可访问（假设我们置空了一个指向不再需要的缓存的引用）。\n\n3.没有进一步的分配执行了。\n\n\n在这个方案中，大多GC不会运行任何进一步的回收通行了。换言之，即使有可用于回收的，不可访问的引用，回收器不会要求他了。这不是严格的泄漏，但是也会导致比平常更高的内存使用率。\nGoogle在 [JavaScript Memory Profiling docs, example #2](https://developer.chrome.com/devtools/docs/demos/memory/example2).文章中，提供了一个优秀的例子。\n\n# Chrome内存分析工具概览\n\nChrome提供了一系列优秀的工具来分析JavaScript代码的内存使用。这两幅图域内存相关：timeline图及profile图。\n\nTimeline视图\n\n![css_layouts](/images/2017-memory-leaks/timeline.png)\n\ntimeline视图在发现代码中异常内存模式是必须的。假使在找大型泄漏，在回收之后，不与增长一样多收缩的，周期性跳跃，是一个红色标记。在这个截图中可以看到泄漏的对象的稳定增长是什么样的。即使在最后的大型回收之后，使用的内存的总量比在开始时高。节点数量也高。这都是代码中某处DOM节点泄漏的标志。\n\nProfile视图\n\n![css_layouts](/images/2017-memory-leaks/profiles.png)\n\n这是你会花大部分时间看的视图。分析视图允许你获得一个快照，比较JavaScript代码中内存使用的快照。也允许记录一段时间的分配情况。在每个结果图中可以看不同种类的列表，但是我们任务中，关系最大的是总结列表和比较列表。\n总结列表给我们不同对象的分配及汇总大小的概览：表面大小（一个具体类别的所有对象的总和）和保存大小（表面大小加上其他对象为这个对象留存的大小）。也给我们一个对象与其GC根节点有多远的概念。\n对比列表给我们同样的信息，但是允许我们比较不同的快照。这个对于找泄漏十分有用。\n\n## 示例：使用Chrome找内存泄漏\n\n基本上有两种泄漏：引起内存使用周期性的增长的泄漏，以及只发生一次并不会引进一步内存增长的泄漏。很明显，当内存是周期性的，发现泄漏更容易。这些也是最棘手的问题：如果内存经过一段时间后增长，这类型的泄漏会最终引起浏览器变慢或停止执行脚本。当非周期性的泄漏在其他分配中大到足够明显，可以很容易的发现它们。通常情况并非如此，所以他们通常被忽视。在某种程度上，发生了一次的小泄漏可以被看作一个优化议题。然而，周期性的泄漏是bug，必须修复。\n\n例如，我们会用[Chrome文档中的一个例子](https://developer.chrome.com/devtools/docs/demos/memory/example1)。下面贴出了全部代码：\n\n\n```js\nvar x = [];\n\nfunction createSomeNodes() {\n    var div,\n        i = 100,\n        frag = document.createDocumentFragment();\n    for (;i > 0; i--) {\n        div = document.createElement(\"div\");\n        div.appendChild(document.createTextNode(i + \" - \"+ new Date().toTimeString()));\n        frag.appendChild(div);\n    }\n    document.getElementById(\"nodes\").appendChild(frag);\n}\nfunction grow() {\n    x.push(new Array(1000000).join('x'));\n    createSomeNodes();\n    setTimeout(grow,1000);\n}\n```\n\n\n当`grow`被调用的时候，会看上创建div节点，并添加到DOM。也会分配一个大数组，并添加到一个被全局变量引用的数组。这会引起可以用上面提到的内存工具发现的，稳定内存增长。\n\n> 垃圾回收语言通常显示为震荡的内存使用模式。通常情况，如果代码在带分配内存的循环中的时候，是期望有这个的。我们会寻找，回收后不恢复到之前情况的，周期增长的内存。\n\n## 找出内存是否在周期性的增长\n\n时间轴视图对此很有用。在Chrome中打开[这个示例](https://developer.chrome.com/devtools/docs/demos/memory/example1)，打开开发者工具，到时间轴选项卡，选内存，点击记录按钮。然后到需要测的页面，点击“按钮”开始泄漏内存。等一小会停止记录，看下结果：\n\n![css_layouts](/images/2017-memory-leaks/example-timeline.png)\n\n> 这个例子每一秒会持续泄漏内存。在停止记录之后，在`grow`函数内打个断点，以阻止脚本迫使Chrome关闭页面。\n\n这图中有两个明显的标志，可以看出我们在泄漏内存。节点（绿色线）和JS堆（蓝色线）的图表。节点在稳健增长，从未减少过。这是个重要的警告标志。\n\nJS堆同样也展示了内存使用的稳健增长。由于垃圾收集器的影响，这更难看到了。可以看到最初的内存增长，跟随很厉害的减少，再然后是增长，之后是一个突刺，后续是内存的掉落。换言之，即使内存收集器成功收集了很多内存，其中一些还是被周期性的泄漏了。现在我们确定了有泄漏。让我们找到泄漏。\n\n## 取得两张快照\n\n为了发现泄漏，我们会来的Chrome开发者工具的profile部分。为将内存使用保持在可控的水平，在做这步之前重新加载下页面。我们会用到Take Heap Snapshot函数。\n重新加载页面，在加载完成之后，就照一张堆的快照。我们会把这张快照作为基准图来使用。之后，再次点“按钮”。等几秒钟，然后拍第二张快照。在拍完快照之后，建议在脚本中打个断点，来阻止更多内存被使用。\n\n![css_layouts](/images/2017-memory-leaks/example-snapshots-1.png)\n\n有两种方法可以在两张快照中看到内存分配。可以选择Summary然后从右面选快照1和快照2分配的对象，或者选Comparison而不是Summary。在两种情况下我们可以看到在两张快照间被分配对象的列表。\n\n在这种情况下很容易找到泄漏：他们很大。看下`(String)`构造函数的`Size Delta`。58个对象，8MB。这看上去有点可疑：新对象被分配了但是没有释放，8MB被消耗掉了。\n\n如果我们打开`(String)`构造函数，我们会注意到在小块内存分配之间，有一些大块的分配。这些大块立刻引起了我们的注意。如果你选择他们其中单独一个，可以在retainer部分下面看到一些有趣的东西。\n\n![css_layouts](/images/2017-memory-leaks/example-snapshots-2.png)\n\n我们看到选中的分配是一个数组的一部分。按顺序，这数组被在全局`window`对象中的变量`x`引用。这给出了一个从大对象到它不能回收的根节点（`window`）的完整的路径。我们发现了潜在泄漏及在哪里引用的。\n\n到目前为止还不错。但是我们的例子很简单：像这个例子中的大块分配\n内存不是规范。幸运的是我们的例子也泄漏DOM节点，是更小些的泄漏。用上面的快照很容易发现这些节点，但是在更大的站点内，事情会更复杂。Chrome的最近几个版本提供了一个最适合我们任务的额外的工具：记录堆分配功能。\n\n## 记录堆分配来发现泄漏\n废除你之前打的断点，让脚本继续跑，回到Chrome开发者工具的Profile部分。现在点“记录堆分配”。当工具在跑时，你将注意到顶上图表中的蓝色尖刺。这代表分配。每一秒钟我们的代码会进行一次大型分配。让他跑几秒钟，然后停下来（别忘了打断点来阻止Chrome吃掉更多内存）。\n\n![css_layouts](/images/2017-memory-leaks/example-recordedallocs-overview.png)\n\n这幅图中可以看到这个工具的特性：选择时间轴的一段，看看在那个时间区间分配了什么。我们设置选中的块尽可能的离其中一个尖刺近。在列表中只显示了3个构造函数：其中一个是和大型泄漏`(String)`有关联的，下一个是和DOM分配有关系的，最后一个是`Text`构造函数（DOM包含文字的叶子节点的构造函数）。从列表里面选择`HTMLDivElement`构造函数其中一个，然后切到`Allocation stack`。\n\n![css_layouts](/images/2017-memory-leaks/example-recordedallocs-selected.png)\n\n呀！我们现在知道那个元素在哪里被分配的了（`grow`->`createSomeNodes`）。如果我们注意下图表中的每个尖刺，会注意到`HTMLDivElement`构造器被调用了很多次。如果我们回到我们的快照对比图，我们会注意到这个构造函数显示了很多分配，但是没有删除。换言之，它在没有GC允许回收其中的一些的情况下，稳定的分配内存。这样，会有个我们清楚的了解的对象在哪里分配的（`createSomeNodes`函数），泄漏叠加的信号。现在是回到代码的时候了，学习下，然后堵掉泄漏。\n\n## 另一个有用的特性\n\n在堆分配结果图里面，我们可以选“分配”视图而不是“总览”视图。\n\n![css_layouts](/images/2017-memory-leaks/example-recordedallocs-list.png)\n\n这个视图提供了我们一个函数和与之相关的内存分配列表。我们可以立即看到`grow`和`createSomeNodes`脱颖而出。选中`grow`的时候，我们可以看到相关对象的构造函数被其调用。我们注意到，我们到目前为止已经知道的对象的构造函数有泄漏的`(String)`，`HTMLDivElement`和`Text`。\n这些工具的结合对查找泄漏很有帮助。用起来。在生产环境的网站跑跑不同的分析（比较理想的是非压缩或混淆的代码）。看看是否可以找到泄漏或留存时间长过其应有时间的对象（提示：这个更难找）。\n> 用这个特性到Dev Tools ->Settings and Enable里面记录堆分配栈踪迹。在记录之前做这个很有必要。\n\n# 结论\n\n内存泄漏可以并确实发生在像JavaScript这样的垃圾回收语言中。这可以被忽视一段时间，最终会肆虐开来。由于这个原因，内存分析工具对查找内存泄漏有必要。跑分析工具应该是开发流程中的一环，尤其针对中型或大型应用。开始做这个来给予你的用户可能最好的体验。跑起来！\n\n原文：[https://auth0.com/blog/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/](https://auth0.com/blog/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/)\n\n译者：[Linda](https://github.com/LindaWhite)\n\n作者：[Sebastián Peyrott](https://twitter.com/speyrott?lang=en)\n\n","slug":"2017-05-25-4-types-of-js-memory-leaks","published":1,"updated":"2017-12-01T08:50:00.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanokni6000tjxs1r7ylwdis","content":"<p>这篇文章里面我们会讨论客户侧javascript代码中的常见种类的内存泄漏。也会学习如何用Chrome Development Tools来定位这些问题。继续阅读吧！</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>内存泄漏是每个开发者最终必须面对的问题。即使使用有内存管理的语言，也有内存可能会泄漏的情况。泄漏是很多问题的起因：变慢，崩溃，高延迟，甚至是一些和其他应用一起用所出现的问题。</p>\n<h2 id=\"内存泄漏是什么？\"><a href=\"#内存泄漏是什么？\" class=\"headerlink\" title=\"内存泄漏是什么？\"></a>内存泄漏是什么？</h2><p>本质上，内存泄漏可以定义为一个应用，由于某些原因不再需要的内存没有被操作系统或者空闲内存池回收。编程语言支持多种管理内存的方式。这些方式可能会减少内存泄漏的几率。然而，某一块内存是否没有用到实际上是一个<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management#Release_when_the_memory_is_not_needed_anymore\" target=\"_blank\" rel=\"noopener\">不可判定的问题</a>。换句话说，只有开发者可以弄清一块内存是否可以被操作系统回收。某些编程语言提供了帮助开发者做这个的特性。其他一些语言期望开发者可以完全明确什么时候一块内存是没被使用的。Wikipedia有关于<a href=\"https://en.wikipedia.org/wiki/Manual_memory_management\" target=\"_blank\" rel=\"noopener\">手动</a>和<a href=\"https://en.wikipedia.org/wiki/Manual_memory_management\" target=\"_blank\" rel=\"noopener\">自动</a>内存管理的两篇不错的文章。<br><a id=\"more\"></a></p>\n<h2 id=\"Javascript中的内存管理\"><a href=\"#Javascript中的内存管理\" class=\"headerlink\" title=\"Javascript中的内存管理\"></a>Javascript中的内存管理</h2><p>JavaScript是所谓的垃圾回收语言之一。垃圾回收语言，通过定期检查哪些事先被分配的内存块仍然可以被应用的其他部分“访问”到，来帮助开发者管理内存。换句话说，垃圾回收语言从“哪些内存是仍然被需要的？”到“哪些内存是仍然可以被应用的其他部分访问到的”减少了管理内存的问题。差异很微妙，但是很重要：当只有开发者知道一块分配了的内存将来会被需要，访问不到的内存可以在算法上被决策并标记为系统回收内存。</p>\n<blockquote>\n<p>非垃圾回收语言通常通过其他技术来管理内存：明确的内存管理，当一块内存不需要时，开发者明确的告诉编译器；还有引用计数，用计数与每个内存块关联（当计数到0时，被系统收回）。这些技术有他们自己的协定（和潜在的泄漏原因）。</p>\n</blockquote>\n<h2 id=\"JavaScript中的泄漏\"><a href=\"#JavaScript中的泄漏\" class=\"headerlink\" title=\"JavaScript中的泄漏\"></a>JavaScript中的泄漏</h2><p>在垃圾回收语言中，泄漏的主要原因是不必要的引用。为了理解什么是不必要的引用，首先需要理解垃圾回收器是如何决策一块内存是否可以被访问到的。</p>\n<blockquote>\n<p>“垃圾回收语言中的泄漏的主要原因是不必要的引用”。</p>\n</blockquote>\n<h2 id=\"Mark-and-sweep\"><a href=\"#Mark-and-sweep\" class=\"headerlink\" title=\"Mark-and-sweep\"></a>Mark-and-sweep</h2><p>大多数垃圾回收器使用一种被称为mark-and-sweep的算法。这个算法包括下面的几步：</p>\n<p>1.垃圾回收器建立一个根节点的列表。根节点通常是代码中一个一直在的引用对应的全局变量。在JavaScript中，window对象是一个可以作为根节点的全局变量的例子。window对象总是在线，所以垃圾回收器可以看重它并且它所有的子节点总是在线（即非垃圾）。</p>\n<p>2.所有的根节点被检查并且标记为活跃（即非垃圾）。所有子节点也同样被递归检查。每个从根节点可以到达的节点不会被认为垃圾。</p>\n<p>3.所有没被标记为活跃的内存块现在可以被认为是垃圾。回收器现在可以释放掉那块内存并且还给操作系统。</p>\n<p>现代垃圾回收器通过不同方法提升了这个算法，但是本质是一样的：可访问到的内存块被标记出来，剩下的被认为是垃圾。<br>不必要的引用，是开发者知道他/她不会再需要的，但由于某些原因存在于活跃根节点的树上的内存块，所对应的引用。在JavaScript的上下文中，不必要的引用是代码中存在的不会再用到，指向一块本来可以被释放的内存的变量。一些人会证明这是开发者的错误。</p>\n<p>所以想要理解哪些是JavaScript中最常见的泄漏，我们需要知道引用通常被忘记是通过哪些方式。</p>\n<h1 id=\"3种常见的JavaScript泄漏\"><a href=\"#3种常见的JavaScript泄漏\" class=\"headerlink\" title=\"3种常见的JavaScript泄漏\"></a>3种常见的JavaScript泄漏</h1><h2 id=\"1-意外的全局变量\"><a href=\"#1-意外的全局变量\" class=\"headerlink\" title=\"1.意外的全局变量\"></a>1.意外的全局变量</h2><p>JavaScript的目标是开发一种看起来像Java但足够自由的被初学者使用的语言。JavaScript自由的其中一种方式是它可以处理没有声明的变量：一个未声明的变量的引用在全局对象中创建了一个新变量。在浏览器的环境中，全局对象是window。也就是说：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">arg</span>) </span>&#123;</span><br><span class=\"line\">    bar = <span class=\"string\">\"this is a hidden global variable\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实际上是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">arg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.bar = <span class=\"string\">\"this is an explicit global variable\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果<code>bar</code>是仅在<code>foo</code>函数作用域内承载引用，并且你忘记用<code>var</code>来声明的变量，一个意外的全局变量就被创建了。在这个例子中，泄漏一个单一字符串不会有太大害处，但这的确是不好的。<br>另一种意外全局变量被创建的方式是通过<code>this</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.variable = <span class=\"string\">\"potential accidental global\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Foo called on its own, this points to the global object (window)</span></span><br><span class=\"line\"><span class=\"comment\">// rather than being undefined.</span></span><br><span class=\"line\">foo();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为了阻止这种错误发生，在你的Javascript文件最前面添加<code>&#39;use strict;&#39;</code>。这开启了解析JavaScript的阻止意外全局的更严格的模式。</p>\n</blockquote>\n<p>全局变量的一个注意事项：</p>\n<p>即使我们谈了不明的全局变量，仍然存在很多代码被显式的全局变量填充的情况。这是通过定义不可收集的情况（除非清零或重新赋值）。特别的，用来临时存储和处理大量信息的全局变量会引起关注。如果必须用全局变量来存储很多数据，在处理完之后，确保对其清零或重新赋值。 一个在与全局连接上增加内存消耗常见的原因是<a href=\"https://en.wikipedia.org/wiki/Cache_(computing\" target=\"_blank\" rel=\"noopener\">缓存</a>)。 缓存存储重复被使用的数据。为此，为了有效，缓存必须有其大小的上限。飙出限制的缓存可能会因为内容不可被回收，导致高内存消耗。</p>\n<h2 id=\"2-被遗忘的计时器或回调\"><a href=\"#2-被遗忘的计时器或回调\" class=\"headerlink\" title=\"2.被遗忘的计时器或回调\"></a>2.被遗忘的计时器或回调</h2><p>在JavaScript中<code>setInterval</code>的使用相当常见。其他库提供观察者和其他工具以回调。这些库中大多数，在引用的实例变成不可访问之后，负责让回调的任何引用也不可访问。在<code>setInterval</code>的情况下，这样的代码很常见：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someResource = getData();</span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> node = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'Node'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Do stuff with node and someResource.</span></span><br><span class=\"line\">        node.innerHTML = <span class=\"built_in\">JSON</span>.stringify(someResource));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>这个例子表明了跳动的计时器可能发生什么：计时器使得节点或数据的引用不再被需要了。代表<code>node</code>的对象将来可能被移除，使得整个块在间隔中的处理不必要。然而，处理函数，由于间隔仍然是活跃的，不能被回收（间隔需要被停掉才能回收）。如果间隔处理不能被回收，它的依赖也不能被回收。那意味着可能存储着大量数据的<code>someResource</code>，也不能被回收。<br>观察者情况下，一旦不被需要（或相关的对象快要访问不到）就创建明确移除他们的函数很重要。在过去，这由于特定浏览器（IE6）不能很好的管理循环引用（下面有更多相关信息），曾经尤为重要。现如今，一旦观察对象变成不可访问的，即使收听者没有明确的被移除，多数浏览器可以并会回收观察者处理函数。然而，它保持了在对象被处理前明确的移除这些观察者的好实践。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'button'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onClick</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    element.innerHtml = <span class=\"string\">'text'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">element.addEventListener(<span class=\"string\">'click'</span>, onClick);</span><br><span class=\"line\"><span class=\"comment\">// Do stuff</span></span><br><span class=\"line\">element.removeEventListener(<span class=\"string\">'click'</span>, onClick);</span><br><span class=\"line\">element.parentNode.removeChild(element);</span><br><span class=\"line\"><span class=\"comment\">// Now when element goes out of scope,</span></span><br><span class=\"line\"><span class=\"comment\">// both element and onClick will be collected even in old browsers that don't</span></span><br><span class=\"line\"><span class=\"comment\">// handle cycles well.</span></span><br></pre></td></tr></table></figure>\n<p>一条关于对象观察者及循环引用的笔记</p>\n<p>观察者和循环引用曾经是JavaScript开发者的祸患。这是由于IE垃圾回收的一个bug(或者设计决议)出现的情况。IE的老版本不能检测到DOM节点和JavaScript代码间的循环引用。 这是一个通常为观察到的保留引用（如同上面的例子）的观察者的典型。  也就是说，每次在IE中对一个节点添加观察者的时候，会导致泄漏。这是开发者在节点或空引用之前开始明确的移除处理函数的原因。 现在，现代浏览器（包括IE和MS Edge）使用可以剪裁这些循环和正确处理的现代垃圾回收算法。换言之，在使一个节点不可访问前，调用<code>removeEventLister</code>不是严格意义上必须的。</p>\n<p>像Jquery一样的框架和库做了在处置一个节点前（当为其使用特定的API的时候）移除监听者的工作。这被在库内部处理，即使在像老版本IE一样有问题的浏览器里面跑，也会确保没有泄漏产生。</p>\n<h2 id=\"3-超出DOM引用\"><a href=\"#3-超出DOM引用\" class=\"headerlink\" title=\"3. 超出DOM引用\"></a>3. 超出DOM引用</h2><p>有时存储DOM节点到数据结构中可能有用。假设你想要迅速的更新一个表格几行内容。存储每个DOM行节点的引用到一个字典或数组会起作用。当这发生是，两个对于同个DOM元素的引用被留存：一个在DOM树中，另外一个在字典中。如果在将来的某些点你决定要移除这些行，需要让两个引用都不可用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> elements = &#123;</span><br><span class=\"line\">    button: <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'button'</span>),</span><br><span class=\"line\">    image: <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'image'</span>),</span><br><span class=\"line\">    text: <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'text'</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doStuff</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    image.src = <span class=\"string\">'http://some.url/image'</span>;</span><br><span class=\"line\">    button.click();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(text.innerHTML);</span><br><span class=\"line\">    <span class=\"comment\">// Much more logic</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeButton</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// The button is a direct child of body.</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.removeChild(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'button'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// At this point, we still have a reference to #button in the global</span></span><br><span class=\"line\">    <span class=\"comment\">// elements dictionary. In other words, the button element is still in</span></span><br><span class=\"line\">    <span class=\"comment\">// memory and cannot be collected by the GC.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对此的额外考虑，必须处理DOM树内的内部节点或叶子节点。假设你在JavaScript代码中保留了一个对于特定的表格内节点（一个td标签）的引用。在将来的某个点决定从DOM中移除这个表格，但是保留对于那个节点的引用。直观的，会假设GC会回收除那个节点之外的每个节点。在实践中，这不会发生的：这个单节点是那个表格的子节点，子节点保留对父节点引用。换句话说，来自JavaScript代码的表格元素的引用会引起在内存里存整个表格。当保留DOM元素的引用的时候，仔细考虑下。</p>\n<h2 id=\"4-闭包\"><a href=\"#4-闭包\" class=\"headerlink\" title=\"4.闭包\"></a>4.闭包</h2><p>一个JavaScript开发的关键点是闭包：从父级作用域捕获变量的匿名函数。很多开发者发现，由于JavaScript runtime的实现细节，有以一种微妙的方式泄漏的可能，<a href=\"https://blog.meteor.com/an-interesting-kind-of-javascript-memory-leak-8b47d2e7f156\" target=\"_blank\" rel=\"noopener\">这种特殊的情况</a>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> theThing = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> replaceThing = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> originalThing = theThing;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> unused = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (originalThing)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hi\"</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  theThing = &#123;</span><br><span class=\"line\">    longStr: <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1000000</span>).join(<span class=\"string\">'*'</span>),</span><br><span class=\"line\">    someMethod: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(someMessage);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">setInterval(replaceThing, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>这个代码片段做了一件事：每次<code>replaceThing</code>被调用的时候，<code>theThing</code>获取到一个包括一个大数组和新闭包(<code>somMethod</code>)的新对象。同时，变量<code>unused</code>保留了一个有<code>originalThing</code>（<code>theThing</code>从之前的对<code>replaceThing</code>的调用）引用的闭包。已经有点疑惑了，哈？重要的是一旦一个作用域被在同个父作用域下的闭包创建，那个作用域是共享的。这种情况下，为闭包<code>somMethod</code>创建的作用域被<code>unused</code>共享了。<code>unused</code>有一个对<code>originalThing</code>的引用。即使<code>unused</code>从来没被用过，<code>someMethod</code>可以通过<code>theTing</code>被使用。由于<code>someMethod</code>和<code>unused</code>共享了闭包作用域，即使<code>unused</code>从来没被用过，它对<code>originalThing</code>的引用迫使它停留在活跃状态（不能回收）。当这个代码片段重复运行的时候，可以看到内存使用稳步的增长。GC运行的时候，这并不会减轻。本质上，一组关联的闭包被创建（同<code>unused</code>变量在表单中的根节点一起），这些闭包作用域中每个带了大数组一个非直接的引用，导致了大型的泄漏。</p>\n<blockquote>\n<p>这是一个实现构件。一个可以处理这关系的闭包的不同实现是可以想象的，就如在<a href=\"https://blog.meteor.com/an-interesting-kind-of-javascript-memory-leak-8b47d2e7f156\" target=\"_blank\" rel=\"noopener\">这篇博客</a>中解释的一样。</p>\n</blockquote>\n<h1 id=\"垃圾回收的直观行为\"><a href=\"#垃圾回收的直观行为\" class=\"headerlink\" title=\"垃圾回收的直观行为\"></a>垃圾回收的直观行为</h1><p>即使垃圾回收很方便，他们有自己的一套权衡方法。其中一个权衡是nondeterminism。也就是说，GC是不可预期的。通常不能确定什么时候回收器被执行。这意味着在一些情况下，需要比程序正在使用的更多的内存。其他情况下，短的暂停在特别敏感的应用中很明显。即使不确定性意味着不能确定回收什么时候执行，大多数GC实现共享在分配期间，普通的回收通行证模式。如果没有执行分配，大多数CG停留在休息状态。考虑下面的方案：</p>\n<p>1.执行一组大型的分配。</p>\n<p>2.多数元素（或所有）被标记为不可访问（假设我们置空了一个指向不再需要的缓存的引用）。</p>\n<p>3.没有进一步的分配执行了。</p>\n<p>在这个方案中，大多GC不会运行任何进一步的回收通行了。换言之，即使有可用于回收的，不可访问的引用，回收器不会要求他了。这不是严格的泄漏，但是也会导致比平常更高的内存使用率。<br>Google在 <a href=\"https://developer.chrome.com/devtools/docs/demos/memory/example2\" target=\"_blank\" rel=\"noopener\">JavaScript Memory Profiling docs, example #2</a>.文章中，提供了一个优秀的例子。</p>\n<h1 id=\"Chrome内存分析工具概览\"><a href=\"#Chrome内存分析工具概览\" class=\"headerlink\" title=\"Chrome内存分析工具概览\"></a>Chrome内存分析工具概览</h1><p>Chrome提供了一系列优秀的工具来分析JavaScript代码的内存使用。这两幅图域内存相关：timeline图及profile图。</p>\n<p>Timeline视图</p>\n<p><img src=\"/images/2017-memory-leaks/timeline.png\" alt=\"css_layouts\"></p>\n<p>timeline视图在发现代码中异常内存模式是必须的。假使在找大型泄漏，在回收之后，不与增长一样多收缩的，周期性跳跃，是一个红色标记。在这个截图中可以看到泄漏的对象的稳定增长是什么样的。即使在最后的大型回收之后，使用的内存的总量比在开始时高。节点数量也高。这都是代码中某处DOM节点泄漏的标志。</p>\n<p>Profile视图</p>\n<p><img src=\"/images/2017-memory-leaks/profiles.png\" alt=\"css_layouts\"></p>\n<p>这是你会花大部分时间看的视图。分析视图允许你获得一个快照，比较JavaScript代码中内存使用的快照。也允许记录一段时间的分配情况。在每个结果图中可以看不同种类的列表，但是我们任务中，关系最大的是总结列表和比较列表。<br>总结列表给我们不同对象的分配及汇总大小的概览：表面大小（一个具体类别的所有对象的总和）和保存大小（表面大小加上其他对象为这个对象留存的大小）。也给我们一个对象与其GC根节点有多远的概念。<br>对比列表给我们同样的信息，但是允许我们比较不同的快照。这个对于找泄漏十分有用。</p>\n<h2 id=\"示例：使用Chrome找内存泄漏\"><a href=\"#示例：使用Chrome找内存泄漏\" class=\"headerlink\" title=\"示例：使用Chrome找内存泄漏\"></a>示例：使用Chrome找内存泄漏</h2><p>基本上有两种泄漏：引起内存使用周期性的增长的泄漏，以及只发生一次并不会引进一步内存增长的泄漏。很明显，当内存是周期性的，发现泄漏更容易。这些也是最棘手的问题：如果内存经过一段时间后增长，这类型的泄漏会最终引起浏览器变慢或停止执行脚本。当非周期性的泄漏在其他分配中大到足够明显，可以很容易的发现它们。通常情况并非如此，所以他们通常被忽视。在某种程度上，发生了一次的小泄漏可以被看作一个优化议题。然而，周期性的泄漏是bug，必须修复。</p>\n<p>例如，我们会用<a href=\"https://developer.chrome.com/devtools/docs/demos/memory/example1\" target=\"_blank\" rel=\"noopener\">Chrome文档中的一个例子</a>。下面贴出了全部代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createSomeNodes</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> div,</span><br><span class=\"line\">        i = <span class=\"number\">100</span>,</span><br><span class=\"line\">        frag = <span class=\"built_in\">document</span>.createDocumentFragment();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\">        div.appendChild(<span class=\"built_in\">document</span>.createTextNode(i + <span class=\"string\">\" - \"</span>+ <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toTimeString()));</span><br><span class=\"line\">        frag.appendChild(div);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"nodes\"</span>).appendChild(frag);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">grow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    x.push(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1000000</span>).join(<span class=\"string\">'x'</span>));</span><br><span class=\"line\">    createSomeNodes();</span><br><span class=\"line\">    setTimeout(grow,<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当<code>grow</code>被调用的时候，会看上创建div节点，并添加到DOM。也会分配一个大数组，并添加到一个被全局变量引用的数组。这会引起可以用上面提到的内存工具发现的，稳定内存增长。</p>\n<blockquote>\n<p>垃圾回收语言通常显示为震荡的内存使用模式。通常情况，如果代码在带分配内存的循环中的时候，是期望有这个的。我们会寻找，回收后不恢复到之前情况的，周期增长的内存。</p>\n</blockquote>\n<h2 id=\"找出内存是否在周期性的增长\"><a href=\"#找出内存是否在周期性的增长\" class=\"headerlink\" title=\"找出内存是否在周期性的增长\"></a>找出内存是否在周期性的增长</h2><p>时间轴视图对此很有用。在Chrome中打开<a href=\"https://developer.chrome.com/devtools/docs/demos/memory/example1\" target=\"_blank\" rel=\"noopener\">这个示例</a>，打开开发者工具，到时间轴选项卡，选内存，点击记录按钮。然后到需要测的页面，点击“按钮”开始泄漏内存。等一小会停止记录，看下结果：</p>\n<p><img src=\"/images/2017-memory-leaks/example-timeline.png\" alt=\"css_layouts\"></p>\n<blockquote>\n<p>这个例子每一秒会持续泄漏内存。在停止记录之后，在<code>grow</code>函数内打个断点，以阻止脚本迫使Chrome关闭页面。</p>\n</blockquote>\n<p>这图中有两个明显的标志，可以看出我们在泄漏内存。节点（绿色线）和JS堆（蓝色线）的图表。节点在稳健增长，从未减少过。这是个重要的警告标志。</p>\n<p>JS堆同样也展示了内存使用的稳健增长。由于垃圾收集器的影响，这更难看到了。可以看到最初的内存增长，跟随很厉害的减少，再然后是增长，之后是一个突刺，后续是内存的掉落。换言之，即使内存收集器成功收集了很多内存，其中一些还是被周期性的泄漏了。现在我们确定了有泄漏。让我们找到泄漏。</p>\n<h2 id=\"取得两张快照\"><a href=\"#取得两张快照\" class=\"headerlink\" title=\"取得两张快照\"></a>取得两张快照</h2><p>为了发现泄漏，我们会来的Chrome开发者工具的profile部分。为将内存使用保持在可控的水平，在做这步之前重新加载下页面。我们会用到Take Heap Snapshot函数。<br>重新加载页面，在加载完成之后，就照一张堆的快照。我们会把这张快照作为基准图来使用。之后，再次点“按钮”。等几秒钟，然后拍第二张快照。在拍完快照之后，建议在脚本中打个断点，来阻止更多内存被使用。</p>\n<p><img src=\"/images/2017-memory-leaks/example-snapshots-1.png\" alt=\"css_layouts\"></p>\n<p>有两种方法可以在两张快照中看到内存分配。可以选择Summary然后从右面选快照1和快照2分配的对象，或者选Comparison而不是Summary。在两种情况下我们可以看到在两张快照间被分配对象的列表。</p>\n<p>在这种情况下很容易找到泄漏：他们很大。看下<code>(String)</code>构造函数的<code>Size Delta</code>。58个对象，8MB。这看上去有点可疑：新对象被分配了但是没有释放，8MB被消耗掉了。</p>\n<p>如果我们打开<code>(String)</code>构造函数，我们会注意到在小块内存分配之间，有一些大块的分配。这些大块立刻引起了我们的注意。如果你选择他们其中单独一个，可以在retainer部分下面看到一些有趣的东西。</p>\n<p><img src=\"/images/2017-memory-leaks/example-snapshots-2.png\" alt=\"css_layouts\"></p>\n<p>我们看到选中的分配是一个数组的一部分。按顺序，这数组被在全局<code>window</code>对象中的变量<code>x</code>引用。这给出了一个从大对象到它不能回收的根节点（<code>window</code>）的完整的路径。我们发现了潜在泄漏及在哪里引用的。</p>\n<p>到目前为止还不错。但是我们的例子很简单：像这个例子中的大块分配<br>内存不是规范。幸运的是我们的例子也泄漏DOM节点，是更小些的泄漏。用上面的快照很容易发现这些节点，但是在更大的站点内，事情会更复杂。Chrome的最近几个版本提供了一个最适合我们任务的额外的工具：记录堆分配功能。</p>\n<h2 id=\"记录堆分配来发现泄漏\"><a href=\"#记录堆分配来发现泄漏\" class=\"headerlink\" title=\"记录堆分配来发现泄漏\"></a>记录堆分配来发现泄漏</h2><p>废除你之前打的断点，让脚本继续跑，回到Chrome开发者工具的Profile部分。现在点“记录堆分配”。当工具在跑时，你将注意到顶上图表中的蓝色尖刺。这代表分配。每一秒钟我们的代码会进行一次大型分配。让他跑几秒钟，然后停下来（别忘了打断点来阻止Chrome吃掉更多内存）。</p>\n<p><img src=\"/images/2017-memory-leaks/example-recordedallocs-overview.png\" alt=\"css_layouts\"></p>\n<p>这幅图中可以看到这个工具的特性：选择时间轴的一段，看看在那个时间区间分配了什么。我们设置选中的块尽可能的离其中一个尖刺近。在列表中只显示了3个构造函数：其中一个是和大型泄漏<code>(String)</code>有关联的，下一个是和DOM分配有关系的，最后一个是<code>Text</code>构造函数（DOM包含文字的叶子节点的构造函数）。从列表里面选择<code>HTMLDivElement</code>构造函数其中一个，然后切到<code>Allocation stack</code>。</p>\n<p><img src=\"/images/2017-memory-leaks/example-recordedallocs-selected.png\" alt=\"css_layouts\"></p>\n<p>呀！我们现在知道那个元素在哪里被分配的了（<code>grow</code>-&gt;<code>createSomeNodes</code>）。如果我们注意下图表中的每个尖刺，会注意到<code>HTMLDivElement</code>构造器被调用了很多次。如果我们回到我们的快照对比图，我们会注意到这个构造函数显示了很多分配，但是没有删除。换言之，它在没有GC允许回收其中的一些的情况下，稳定的分配内存。这样，会有个我们清楚的了解的对象在哪里分配的（<code>createSomeNodes</code>函数），泄漏叠加的信号。现在是回到代码的时候了，学习下，然后堵掉泄漏。</p>\n<h2 id=\"另一个有用的特性\"><a href=\"#另一个有用的特性\" class=\"headerlink\" title=\"另一个有用的特性\"></a>另一个有用的特性</h2><p>在堆分配结果图里面，我们可以选“分配”视图而不是“总览”视图。</p>\n<p><img src=\"/images/2017-memory-leaks/example-recordedallocs-list.png\" alt=\"css_layouts\"></p>\n<p>这个视图提供了我们一个函数和与之相关的内存分配列表。我们可以立即看到<code>grow</code>和<code>createSomeNodes</code>脱颖而出。选中<code>grow</code>的时候，我们可以看到相关对象的构造函数被其调用。我们注意到，我们到目前为止已经知道的对象的构造函数有泄漏的<code>(String)</code>，<code>HTMLDivElement</code>和<code>Text</code>。<br>这些工具的结合对查找泄漏很有帮助。用起来。在生产环境的网站跑跑不同的分析（比较理想的是非压缩或混淆的代码）。看看是否可以找到泄漏或留存时间长过其应有时间的对象（提示：这个更难找）。</p>\n<blockquote>\n<p>用这个特性到Dev Tools -&gt;Settings and Enable里面记录堆分配栈踪迹。在记录之前做这个很有必要。</p>\n</blockquote>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>内存泄漏可以并确实发生在像JavaScript这样的垃圾回收语言中。这可以被忽视一段时间，最终会肆虐开来。由于这个原因，内存分析工具对查找内存泄漏有必要。跑分析工具应该是开发流程中的一环，尤其针对中型或大型应用。开始做这个来给予你的用户可能最好的体验。跑起来！</p>\n<p>原文：<a href=\"https://auth0.com/blog/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/\" target=\"_blank\" rel=\"noopener\">https://auth0.com/blog/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/</a></p>\n<p>译者：<a href=\"https://github.com/LindaWhite\" target=\"_blank\" rel=\"noopener\">Linda</a></p>\n<p>作者：<a href=\"https://twitter.com/speyrott?lang=en\" target=\"_blank\" rel=\"noopener\">Sebastián Peyrott</a></p>\n","site":{"data":{}},"excerpt":"<p>这篇文章里面我们会讨论客户侧javascript代码中的常见种类的内存泄漏。也会学习如何用Chrome Development Tools来定位这些问题。继续阅读吧！</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>内存泄漏是每个开发者最终必须面对的问题。即使使用有内存管理的语言，也有内存可能会泄漏的情况。泄漏是很多问题的起因：变慢，崩溃，高延迟，甚至是一些和其他应用一起用所出现的问题。</p>\n<h2 id=\"内存泄漏是什么？\"><a href=\"#内存泄漏是什么？\" class=\"headerlink\" title=\"内存泄漏是什么？\"></a>内存泄漏是什么？</h2><p>本质上，内存泄漏可以定义为一个应用，由于某些原因不再需要的内存没有被操作系统或者空闲内存池回收。编程语言支持多种管理内存的方式。这些方式可能会减少内存泄漏的几率。然而，某一块内存是否没有用到实际上是一个<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management#Release_when_the_memory_is_not_needed_anymore\" target=\"_blank\" rel=\"noopener\">不可判定的问题</a>。换句话说，只有开发者可以弄清一块内存是否可以被操作系统回收。某些编程语言提供了帮助开发者做这个的特性。其他一些语言期望开发者可以完全明确什么时候一块内存是没被使用的。Wikipedia有关于<a href=\"https://en.wikipedia.org/wiki/Manual_memory_management\" target=\"_blank\" rel=\"noopener\">手动</a>和<a href=\"https://en.wikipedia.org/wiki/Manual_memory_management\" target=\"_blank\" rel=\"noopener\">自动</a>内存管理的两篇不错的文章。<br>","more":"</p>\n<h2 id=\"Javascript中的内存管理\"><a href=\"#Javascript中的内存管理\" class=\"headerlink\" title=\"Javascript中的内存管理\"></a>Javascript中的内存管理</h2><p>JavaScript是所谓的垃圾回收语言之一。垃圾回收语言，通过定期检查哪些事先被分配的内存块仍然可以被应用的其他部分“访问”到，来帮助开发者管理内存。换句话说，垃圾回收语言从“哪些内存是仍然被需要的？”到“哪些内存是仍然可以被应用的其他部分访问到的”减少了管理内存的问题。差异很微妙，但是很重要：当只有开发者知道一块分配了的内存将来会被需要，访问不到的内存可以在算法上被决策并标记为系统回收内存。</p>\n<blockquote>\n<p>非垃圾回收语言通常通过其他技术来管理内存：明确的内存管理，当一块内存不需要时，开发者明确的告诉编译器；还有引用计数，用计数与每个内存块关联（当计数到0时，被系统收回）。这些技术有他们自己的协定（和潜在的泄漏原因）。</p>\n</blockquote>\n<h2 id=\"JavaScript中的泄漏\"><a href=\"#JavaScript中的泄漏\" class=\"headerlink\" title=\"JavaScript中的泄漏\"></a>JavaScript中的泄漏</h2><p>在垃圾回收语言中，泄漏的主要原因是不必要的引用。为了理解什么是不必要的引用，首先需要理解垃圾回收器是如何决策一块内存是否可以被访问到的。</p>\n<blockquote>\n<p>“垃圾回收语言中的泄漏的主要原因是不必要的引用”。</p>\n</blockquote>\n<h2 id=\"Mark-and-sweep\"><a href=\"#Mark-and-sweep\" class=\"headerlink\" title=\"Mark-and-sweep\"></a>Mark-and-sweep</h2><p>大多数垃圾回收器使用一种被称为mark-and-sweep的算法。这个算法包括下面的几步：</p>\n<p>1.垃圾回收器建立一个根节点的列表。根节点通常是代码中一个一直在的引用对应的全局变量。在JavaScript中，window对象是一个可以作为根节点的全局变量的例子。window对象总是在线，所以垃圾回收器可以看重它并且它所有的子节点总是在线（即非垃圾）。</p>\n<p>2.所有的根节点被检查并且标记为活跃（即非垃圾）。所有子节点也同样被递归检查。每个从根节点可以到达的节点不会被认为垃圾。</p>\n<p>3.所有没被标记为活跃的内存块现在可以被认为是垃圾。回收器现在可以释放掉那块内存并且还给操作系统。</p>\n<p>现代垃圾回收器通过不同方法提升了这个算法，但是本质是一样的：可访问到的内存块被标记出来，剩下的被认为是垃圾。<br>不必要的引用，是开发者知道他/她不会再需要的，但由于某些原因存在于活跃根节点的树上的内存块，所对应的引用。在JavaScript的上下文中，不必要的引用是代码中存在的不会再用到，指向一块本来可以被释放的内存的变量。一些人会证明这是开发者的错误。</p>\n<p>所以想要理解哪些是JavaScript中最常见的泄漏，我们需要知道引用通常被忘记是通过哪些方式。</p>\n<h1 id=\"3种常见的JavaScript泄漏\"><a href=\"#3种常见的JavaScript泄漏\" class=\"headerlink\" title=\"3种常见的JavaScript泄漏\"></a>3种常见的JavaScript泄漏</h1><h2 id=\"1-意外的全局变量\"><a href=\"#1-意外的全局变量\" class=\"headerlink\" title=\"1.意外的全局变量\"></a>1.意外的全局变量</h2><p>JavaScript的目标是开发一种看起来像Java但足够自由的被初学者使用的语言。JavaScript自由的其中一种方式是它可以处理没有声明的变量：一个未声明的变量的引用在全局对象中创建了一个新变量。在浏览器的环境中，全局对象是window。也就是说：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">arg</span>) </span>&#123;</span><br><span class=\"line\">    bar = <span class=\"string\">\"this is a hidden global variable\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实际上是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">arg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.bar = <span class=\"string\">\"this is an explicit global variable\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果<code>bar</code>是仅在<code>foo</code>函数作用域内承载引用，并且你忘记用<code>var</code>来声明的变量，一个意外的全局变量就被创建了。在这个例子中，泄漏一个单一字符串不会有太大害处，但这的确是不好的。<br>另一种意外全局变量被创建的方式是通过<code>this</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.variable = <span class=\"string\">\"potential accidental global\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Foo called on its own, this points to the global object (window)</span></span><br><span class=\"line\"><span class=\"comment\">// rather than being undefined.</span></span><br><span class=\"line\">foo();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为了阻止这种错误发生，在你的Javascript文件最前面添加<code>&#39;use strict;&#39;</code>。这开启了解析JavaScript的阻止意外全局的更严格的模式。</p>\n</blockquote>\n<p>全局变量的一个注意事项：</p>\n<p>即使我们谈了不明的全局变量，仍然存在很多代码被显式的全局变量填充的情况。这是通过定义不可收集的情况（除非清零或重新赋值）。特别的，用来临时存储和处理大量信息的全局变量会引起关注。如果必须用全局变量来存储很多数据，在处理完之后，确保对其清零或重新赋值。 一个在与全局连接上增加内存消耗常见的原因是<a href=\"https://en.wikipedia.org/wiki/Cache_(computing\" target=\"_blank\" rel=\"noopener\">缓存</a>)。 缓存存储重复被使用的数据。为此，为了有效，缓存必须有其大小的上限。飙出限制的缓存可能会因为内容不可被回收，导致高内存消耗。</p>\n<h2 id=\"2-被遗忘的计时器或回调\"><a href=\"#2-被遗忘的计时器或回调\" class=\"headerlink\" title=\"2.被遗忘的计时器或回调\"></a>2.被遗忘的计时器或回调</h2><p>在JavaScript中<code>setInterval</code>的使用相当常见。其他库提供观察者和其他工具以回调。这些库中大多数，在引用的实例变成不可访问之后，负责让回调的任何引用也不可访问。在<code>setInterval</code>的情况下，这样的代码很常见：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someResource = getData();</span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> node = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'Node'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Do stuff with node and someResource.</span></span><br><span class=\"line\">        node.innerHTML = <span class=\"built_in\">JSON</span>.stringify(someResource));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>这个例子表明了跳动的计时器可能发生什么：计时器使得节点或数据的引用不再被需要了。代表<code>node</code>的对象将来可能被移除，使得整个块在间隔中的处理不必要。然而，处理函数，由于间隔仍然是活跃的，不能被回收（间隔需要被停掉才能回收）。如果间隔处理不能被回收，它的依赖也不能被回收。那意味着可能存储着大量数据的<code>someResource</code>，也不能被回收。<br>观察者情况下，一旦不被需要（或相关的对象快要访问不到）就创建明确移除他们的函数很重要。在过去，这由于特定浏览器（IE6）不能很好的管理循环引用（下面有更多相关信息），曾经尤为重要。现如今，一旦观察对象变成不可访问的，即使收听者没有明确的被移除，多数浏览器可以并会回收观察者处理函数。然而，它保持了在对象被处理前明确的移除这些观察者的好实践。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'button'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onClick</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    element.innerHtml = <span class=\"string\">'text'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">element.addEventListener(<span class=\"string\">'click'</span>, onClick);</span><br><span class=\"line\"><span class=\"comment\">// Do stuff</span></span><br><span class=\"line\">element.removeEventListener(<span class=\"string\">'click'</span>, onClick);</span><br><span class=\"line\">element.parentNode.removeChild(element);</span><br><span class=\"line\"><span class=\"comment\">// Now when element goes out of scope,</span></span><br><span class=\"line\"><span class=\"comment\">// both element and onClick will be collected even in old browsers that don't</span></span><br><span class=\"line\"><span class=\"comment\">// handle cycles well.</span></span><br></pre></td></tr></table></figure>\n<p>一条关于对象观察者及循环引用的笔记</p>\n<p>观察者和循环引用曾经是JavaScript开发者的祸患。这是由于IE垃圾回收的一个bug(或者设计决议)出现的情况。IE的老版本不能检测到DOM节点和JavaScript代码间的循环引用。 这是一个通常为观察到的保留引用（如同上面的例子）的观察者的典型。  也就是说，每次在IE中对一个节点添加观察者的时候，会导致泄漏。这是开发者在节点或空引用之前开始明确的移除处理函数的原因。 现在，现代浏览器（包括IE和MS Edge）使用可以剪裁这些循环和正确处理的现代垃圾回收算法。换言之，在使一个节点不可访问前，调用<code>removeEventLister</code>不是严格意义上必须的。</p>\n<p>像Jquery一样的框架和库做了在处置一个节点前（当为其使用特定的API的时候）移除监听者的工作。这被在库内部处理，即使在像老版本IE一样有问题的浏览器里面跑，也会确保没有泄漏产生。</p>\n<h2 id=\"3-超出DOM引用\"><a href=\"#3-超出DOM引用\" class=\"headerlink\" title=\"3. 超出DOM引用\"></a>3. 超出DOM引用</h2><p>有时存储DOM节点到数据结构中可能有用。假设你想要迅速的更新一个表格几行内容。存储每个DOM行节点的引用到一个字典或数组会起作用。当这发生是，两个对于同个DOM元素的引用被留存：一个在DOM树中，另外一个在字典中。如果在将来的某些点你决定要移除这些行，需要让两个引用都不可用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> elements = &#123;</span><br><span class=\"line\">    button: <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'button'</span>),</span><br><span class=\"line\">    image: <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'image'</span>),</span><br><span class=\"line\">    text: <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'text'</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doStuff</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    image.src = <span class=\"string\">'http://some.url/image'</span>;</span><br><span class=\"line\">    button.click();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(text.innerHTML);</span><br><span class=\"line\">    <span class=\"comment\">// Much more logic</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeButton</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// The button is a direct child of body.</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.removeChild(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'button'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// At this point, we still have a reference to #button in the global</span></span><br><span class=\"line\">    <span class=\"comment\">// elements dictionary. In other words, the button element is still in</span></span><br><span class=\"line\">    <span class=\"comment\">// memory and cannot be collected by the GC.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对此的额外考虑，必须处理DOM树内的内部节点或叶子节点。假设你在JavaScript代码中保留了一个对于特定的表格内节点（一个td标签）的引用。在将来的某个点决定从DOM中移除这个表格，但是保留对于那个节点的引用。直观的，会假设GC会回收除那个节点之外的每个节点。在实践中，这不会发生的：这个单节点是那个表格的子节点，子节点保留对父节点引用。换句话说，来自JavaScript代码的表格元素的引用会引起在内存里存整个表格。当保留DOM元素的引用的时候，仔细考虑下。</p>\n<h2 id=\"4-闭包\"><a href=\"#4-闭包\" class=\"headerlink\" title=\"4.闭包\"></a>4.闭包</h2><p>一个JavaScript开发的关键点是闭包：从父级作用域捕获变量的匿名函数。很多开发者发现，由于JavaScript runtime的实现细节，有以一种微妙的方式泄漏的可能，<a href=\"https://blog.meteor.com/an-interesting-kind-of-javascript-memory-leak-8b47d2e7f156\" target=\"_blank\" rel=\"noopener\">这种特殊的情况</a>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> theThing = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> replaceThing = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> originalThing = theThing;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> unused = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (originalThing)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hi\"</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  theThing = &#123;</span><br><span class=\"line\">    longStr: <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1000000</span>).join(<span class=\"string\">'*'</span>),</span><br><span class=\"line\">    someMethod: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(someMessage);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">setInterval(replaceThing, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>这个代码片段做了一件事：每次<code>replaceThing</code>被调用的时候，<code>theThing</code>获取到一个包括一个大数组和新闭包(<code>somMethod</code>)的新对象。同时，变量<code>unused</code>保留了一个有<code>originalThing</code>（<code>theThing</code>从之前的对<code>replaceThing</code>的调用）引用的闭包。已经有点疑惑了，哈？重要的是一旦一个作用域被在同个父作用域下的闭包创建，那个作用域是共享的。这种情况下，为闭包<code>somMethod</code>创建的作用域被<code>unused</code>共享了。<code>unused</code>有一个对<code>originalThing</code>的引用。即使<code>unused</code>从来没被用过，<code>someMethod</code>可以通过<code>theTing</code>被使用。由于<code>someMethod</code>和<code>unused</code>共享了闭包作用域，即使<code>unused</code>从来没被用过，它对<code>originalThing</code>的引用迫使它停留在活跃状态（不能回收）。当这个代码片段重复运行的时候，可以看到内存使用稳步的增长。GC运行的时候，这并不会减轻。本质上，一组关联的闭包被创建（同<code>unused</code>变量在表单中的根节点一起），这些闭包作用域中每个带了大数组一个非直接的引用，导致了大型的泄漏。</p>\n<blockquote>\n<p>这是一个实现构件。一个可以处理这关系的闭包的不同实现是可以想象的，就如在<a href=\"https://blog.meteor.com/an-interesting-kind-of-javascript-memory-leak-8b47d2e7f156\" target=\"_blank\" rel=\"noopener\">这篇博客</a>中解释的一样。</p>\n</blockquote>\n<h1 id=\"垃圾回收的直观行为\"><a href=\"#垃圾回收的直观行为\" class=\"headerlink\" title=\"垃圾回收的直观行为\"></a>垃圾回收的直观行为</h1><p>即使垃圾回收很方便，他们有自己的一套权衡方法。其中一个权衡是nondeterminism。也就是说，GC是不可预期的。通常不能确定什么时候回收器被执行。这意味着在一些情况下，需要比程序正在使用的更多的内存。其他情况下，短的暂停在特别敏感的应用中很明显。即使不确定性意味着不能确定回收什么时候执行，大多数GC实现共享在分配期间，普通的回收通行证模式。如果没有执行分配，大多数CG停留在休息状态。考虑下面的方案：</p>\n<p>1.执行一组大型的分配。</p>\n<p>2.多数元素（或所有）被标记为不可访问（假设我们置空了一个指向不再需要的缓存的引用）。</p>\n<p>3.没有进一步的分配执行了。</p>\n<p>在这个方案中，大多GC不会运行任何进一步的回收通行了。换言之，即使有可用于回收的，不可访问的引用，回收器不会要求他了。这不是严格的泄漏，但是也会导致比平常更高的内存使用率。<br>Google在 <a href=\"https://developer.chrome.com/devtools/docs/demos/memory/example2\" target=\"_blank\" rel=\"noopener\">JavaScript Memory Profiling docs, example #2</a>.文章中，提供了一个优秀的例子。</p>\n<h1 id=\"Chrome内存分析工具概览\"><a href=\"#Chrome内存分析工具概览\" class=\"headerlink\" title=\"Chrome内存分析工具概览\"></a>Chrome内存分析工具概览</h1><p>Chrome提供了一系列优秀的工具来分析JavaScript代码的内存使用。这两幅图域内存相关：timeline图及profile图。</p>\n<p>Timeline视图</p>\n<p><img src=\"/images/2017-memory-leaks/timeline.png\" alt=\"css_layouts\"></p>\n<p>timeline视图在发现代码中异常内存模式是必须的。假使在找大型泄漏，在回收之后，不与增长一样多收缩的，周期性跳跃，是一个红色标记。在这个截图中可以看到泄漏的对象的稳定增长是什么样的。即使在最后的大型回收之后，使用的内存的总量比在开始时高。节点数量也高。这都是代码中某处DOM节点泄漏的标志。</p>\n<p>Profile视图</p>\n<p><img src=\"/images/2017-memory-leaks/profiles.png\" alt=\"css_layouts\"></p>\n<p>这是你会花大部分时间看的视图。分析视图允许你获得一个快照，比较JavaScript代码中内存使用的快照。也允许记录一段时间的分配情况。在每个结果图中可以看不同种类的列表，但是我们任务中，关系最大的是总结列表和比较列表。<br>总结列表给我们不同对象的分配及汇总大小的概览：表面大小（一个具体类别的所有对象的总和）和保存大小（表面大小加上其他对象为这个对象留存的大小）。也给我们一个对象与其GC根节点有多远的概念。<br>对比列表给我们同样的信息，但是允许我们比较不同的快照。这个对于找泄漏十分有用。</p>\n<h2 id=\"示例：使用Chrome找内存泄漏\"><a href=\"#示例：使用Chrome找内存泄漏\" class=\"headerlink\" title=\"示例：使用Chrome找内存泄漏\"></a>示例：使用Chrome找内存泄漏</h2><p>基本上有两种泄漏：引起内存使用周期性的增长的泄漏，以及只发生一次并不会引进一步内存增长的泄漏。很明显，当内存是周期性的，发现泄漏更容易。这些也是最棘手的问题：如果内存经过一段时间后增长，这类型的泄漏会最终引起浏览器变慢或停止执行脚本。当非周期性的泄漏在其他分配中大到足够明显，可以很容易的发现它们。通常情况并非如此，所以他们通常被忽视。在某种程度上，发生了一次的小泄漏可以被看作一个优化议题。然而，周期性的泄漏是bug，必须修复。</p>\n<p>例如，我们会用<a href=\"https://developer.chrome.com/devtools/docs/demos/memory/example1\" target=\"_blank\" rel=\"noopener\">Chrome文档中的一个例子</a>。下面贴出了全部代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createSomeNodes</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> div,</span><br><span class=\"line\">        i = <span class=\"number\">100</span>,</span><br><span class=\"line\">        frag = <span class=\"built_in\">document</span>.createDocumentFragment();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\">        div.appendChild(<span class=\"built_in\">document</span>.createTextNode(i + <span class=\"string\">\" - \"</span>+ <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toTimeString()));</span><br><span class=\"line\">        frag.appendChild(div);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"nodes\"</span>).appendChild(frag);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">grow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    x.push(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1000000</span>).join(<span class=\"string\">'x'</span>));</span><br><span class=\"line\">    createSomeNodes();</span><br><span class=\"line\">    setTimeout(grow,<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当<code>grow</code>被调用的时候，会看上创建div节点，并添加到DOM。也会分配一个大数组，并添加到一个被全局变量引用的数组。这会引起可以用上面提到的内存工具发现的，稳定内存增长。</p>\n<blockquote>\n<p>垃圾回收语言通常显示为震荡的内存使用模式。通常情况，如果代码在带分配内存的循环中的时候，是期望有这个的。我们会寻找，回收后不恢复到之前情况的，周期增长的内存。</p>\n</blockquote>\n<h2 id=\"找出内存是否在周期性的增长\"><a href=\"#找出内存是否在周期性的增长\" class=\"headerlink\" title=\"找出内存是否在周期性的增长\"></a>找出内存是否在周期性的增长</h2><p>时间轴视图对此很有用。在Chrome中打开<a href=\"https://developer.chrome.com/devtools/docs/demos/memory/example1\" target=\"_blank\" rel=\"noopener\">这个示例</a>，打开开发者工具，到时间轴选项卡，选内存，点击记录按钮。然后到需要测的页面，点击“按钮”开始泄漏内存。等一小会停止记录，看下结果：</p>\n<p><img src=\"/images/2017-memory-leaks/example-timeline.png\" alt=\"css_layouts\"></p>\n<blockquote>\n<p>这个例子每一秒会持续泄漏内存。在停止记录之后，在<code>grow</code>函数内打个断点，以阻止脚本迫使Chrome关闭页面。</p>\n</blockquote>\n<p>这图中有两个明显的标志，可以看出我们在泄漏内存。节点（绿色线）和JS堆（蓝色线）的图表。节点在稳健增长，从未减少过。这是个重要的警告标志。</p>\n<p>JS堆同样也展示了内存使用的稳健增长。由于垃圾收集器的影响，这更难看到了。可以看到最初的内存增长，跟随很厉害的减少，再然后是增长，之后是一个突刺，后续是内存的掉落。换言之，即使内存收集器成功收集了很多内存，其中一些还是被周期性的泄漏了。现在我们确定了有泄漏。让我们找到泄漏。</p>\n<h2 id=\"取得两张快照\"><a href=\"#取得两张快照\" class=\"headerlink\" title=\"取得两张快照\"></a>取得两张快照</h2><p>为了发现泄漏，我们会来的Chrome开发者工具的profile部分。为将内存使用保持在可控的水平，在做这步之前重新加载下页面。我们会用到Take Heap Snapshot函数。<br>重新加载页面，在加载完成之后，就照一张堆的快照。我们会把这张快照作为基准图来使用。之后，再次点“按钮”。等几秒钟，然后拍第二张快照。在拍完快照之后，建议在脚本中打个断点，来阻止更多内存被使用。</p>\n<p><img src=\"/images/2017-memory-leaks/example-snapshots-1.png\" alt=\"css_layouts\"></p>\n<p>有两种方法可以在两张快照中看到内存分配。可以选择Summary然后从右面选快照1和快照2分配的对象，或者选Comparison而不是Summary。在两种情况下我们可以看到在两张快照间被分配对象的列表。</p>\n<p>在这种情况下很容易找到泄漏：他们很大。看下<code>(String)</code>构造函数的<code>Size Delta</code>。58个对象，8MB。这看上去有点可疑：新对象被分配了但是没有释放，8MB被消耗掉了。</p>\n<p>如果我们打开<code>(String)</code>构造函数，我们会注意到在小块内存分配之间，有一些大块的分配。这些大块立刻引起了我们的注意。如果你选择他们其中单独一个，可以在retainer部分下面看到一些有趣的东西。</p>\n<p><img src=\"/images/2017-memory-leaks/example-snapshots-2.png\" alt=\"css_layouts\"></p>\n<p>我们看到选中的分配是一个数组的一部分。按顺序，这数组被在全局<code>window</code>对象中的变量<code>x</code>引用。这给出了一个从大对象到它不能回收的根节点（<code>window</code>）的完整的路径。我们发现了潜在泄漏及在哪里引用的。</p>\n<p>到目前为止还不错。但是我们的例子很简单：像这个例子中的大块分配<br>内存不是规范。幸运的是我们的例子也泄漏DOM节点，是更小些的泄漏。用上面的快照很容易发现这些节点，但是在更大的站点内，事情会更复杂。Chrome的最近几个版本提供了一个最适合我们任务的额外的工具：记录堆分配功能。</p>\n<h2 id=\"记录堆分配来发现泄漏\"><a href=\"#记录堆分配来发现泄漏\" class=\"headerlink\" title=\"记录堆分配来发现泄漏\"></a>记录堆分配来发现泄漏</h2><p>废除你之前打的断点，让脚本继续跑，回到Chrome开发者工具的Profile部分。现在点“记录堆分配”。当工具在跑时，你将注意到顶上图表中的蓝色尖刺。这代表分配。每一秒钟我们的代码会进行一次大型分配。让他跑几秒钟，然后停下来（别忘了打断点来阻止Chrome吃掉更多内存）。</p>\n<p><img src=\"/images/2017-memory-leaks/example-recordedallocs-overview.png\" alt=\"css_layouts\"></p>\n<p>这幅图中可以看到这个工具的特性：选择时间轴的一段，看看在那个时间区间分配了什么。我们设置选中的块尽可能的离其中一个尖刺近。在列表中只显示了3个构造函数：其中一个是和大型泄漏<code>(String)</code>有关联的，下一个是和DOM分配有关系的，最后一个是<code>Text</code>构造函数（DOM包含文字的叶子节点的构造函数）。从列表里面选择<code>HTMLDivElement</code>构造函数其中一个，然后切到<code>Allocation stack</code>。</p>\n<p><img src=\"/images/2017-memory-leaks/example-recordedallocs-selected.png\" alt=\"css_layouts\"></p>\n<p>呀！我们现在知道那个元素在哪里被分配的了（<code>grow</code>-&gt;<code>createSomeNodes</code>）。如果我们注意下图表中的每个尖刺，会注意到<code>HTMLDivElement</code>构造器被调用了很多次。如果我们回到我们的快照对比图，我们会注意到这个构造函数显示了很多分配，但是没有删除。换言之，它在没有GC允许回收其中的一些的情况下，稳定的分配内存。这样，会有个我们清楚的了解的对象在哪里分配的（<code>createSomeNodes</code>函数），泄漏叠加的信号。现在是回到代码的时候了，学习下，然后堵掉泄漏。</p>\n<h2 id=\"另一个有用的特性\"><a href=\"#另一个有用的特性\" class=\"headerlink\" title=\"另一个有用的特性\"></a>另一个有用的特性</h2><p>在堆分配结果图里面，我们可以选“分配”视图而不是“总览”视图。</p>\n<p><img src=\"/images/2017-memory-leaks/example-recordedallocs-list.png\" alt=\"css_layouts\"></p>\n<p>这个视图提供了我们一个函数和与之相关的内存分配列表。我们可以立即看到<code>grow</code>和<code>createSomeNodes</code>脱颖而出。选中<code>grow</code>的时候，我们可以看到相关对象的构造函数被其调用。我们注意到，我们到目前为止已经知道的对象的构造函数有泄漏的<code>(String)</code>，<code>HTMLDivElement</code>和<code>Text</code>。<br>这些工具的结合对查找泄漏很有帮助。用起来。在生产环境的网站跑跑不同的分析（比较理想的是非压缩或混淆的代码）。看看是否可以找到泄漏或留存时间长过其应有时间的对象（提示：这个更难找）。</p>\n<blockquote>\n<p>用这个特性到Dev Tools -&gt;Settings and Enable里面记录堆分配栈踪迹。在记录之前做这个很有必要。</p>\n</blockquote>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>内存泄漏可以并确实发生在像JavaScript这样的垃圾回收语言中。这可以被忽视一段时间，最终会肆虐开来。由于这个原因，内存分析工具对查找内存泄漏有必要。跑分析工具应该是开发流程中的一环，尤其针对中型或大型应用。开始做这个来给予你的用户可能最好的体验。跑起来！</p>\n<p>原文：<a href=\"https://auth0.com/blog/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/\" target=\"_blank\" rel=\"noopener\">https://auth0.com/blog/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/</a></p>\n<p>译者：<a href=\"https://github.com/LindaWhite\" target=\"_blank\" rel=\"noopener\">Linda</a></p>\n<p>作者：<a href=\"https://twitter.com/speyrott?lang=en\" target=\"_blank\" rel=\"noopener\">Sebastián Peyrott</a></p>"},{"title":"HTTPS自建CA及自签名证书不完全指南（理论篇）","date":"2017-07-17T10:00:00.000Z","author":"Jin","_content":"\nHTTPS 全称 HTTP over SSL，即工作于SSL层之上的HTTP协议。它对开发者和使用者是透明的，只是数据传输部分是加密的。\n\nSSL分为 1.0 / 2.0 / 3.0 等很多版本，随着时间的推移，它也变得越来越不安全，因此现在我们通常使用更安全的 TLS 协议。TLS 协议也有不同版本，目前最新最安全的是 TLS 1.2 。一般情况下，我们不会具体区别 SSL 和 TLS，现在很多场合提到的 SSL 其实也是 TLS 协议。\n\n## HTTPS安全浏览\n\n![HTTPS安全浏览](/images/2017-07-17-https-certificate/01-demo.png)\n\n如果我们正在浏览的网页是安全的 HTTPS 网页，则大部分浏览器会显示一把绿色的锁，表示这是加密的连接，且通信过程是安全的。\n\n而要让浏览器认为这个网页是安全的，则需要满足以下几个条件：\n\n1. HTTPS 协议访问\n2. 服务端出具的证书内容正确（域名、签名方式等正确）\n3. 服务端出具的证书由 CA（数字证书中心） 签发\n4. 签发证书的 CA 在浏览器（或操作系统）的受信任列表中\n\n所谓的 CA（数字证书中心）一般是一个机构，它们被内置在浏览器或操作系统的受信任列表中。一个证书只有被 CA 签名过（也叫由 CA 签发的证书），浏览器才可能在受信任列表中找到它对应的 CA ，然后判断是否应该信任这个证书。\n\n> 事实上第3点和第4点并不完全准确，如果一个证书不是由 CA 签发的，但是存在于浏览器（或操作系统）的受信任列表中，那么它事实上相当于一个CA的根证书，也会被认为是安全的。\n> \n> 但是，在实际操作中，几乎没有这样的案例，因为几乎没有 CA 会直接拿自己的根证书来让某个网站使用。\n\n<!-- more -->\n\n## HTTPS服务器的搭建\n\n在 Node.js 中配置一个 HTTPS 服务器非常简单。Node.js底层引入了OpenSSL开源库，并直接提供了`https`模块：\n\n```javascript\n// 引入https模块\nconst https = require('https');\nconst fs = require('fs');\n\n// 创建HTTPS服务需要私钥和证书文件\nlet options = {\n  key: fs.readFileSync('./server.key'), //私钥\n  cert: fs.readFileSync('./server.crt') //数字证书\n};\n\n// 创建HTTPS服务器\nhttps.createServer(options , (req , res)=>{\n  res.writeHead(200);\n  res.end('https is working');\n}).listen(443);\n```\n\n可以发现创建https服务器比我们熟悉的创建http服务器要多一个`options`参数。`options`里面包含的是https服务器的私钥和数字证书。\n\n如果使用`nginx`来创建https服务器，则可能是这样：\n\n```\nserver\n{\n    listen 443 ssl;\n    server_name  ssltest.com;\n    index index.html index.htm;\n    root /data/ssltest;\n\n    ssl_certificate /data/ssltest.crt;\n    ssl_certificate_key     /data/ssltest.key;\n\n}\n```\n\n同样，在上方的配置文件中，需要使用`ssl_certificate_key`和`ssl_certificate`来指定私钥和数字证书。\n\n问题来了：私钥和数字证书分别是什么？\n\n## 科普：HTTPS相关知识\n\n本文将介绍一些与我们接下来生成证书相关的知识。为了简单起见，有一些和实际操作关系不大的、理论性比较强的内容忽略不计。\n\n### HTTPS是如何通信的？\n\n我们都知道HTTPS是加密通信的，但是对于具体的过程，却并不是人人都知道。事实上，HTTPS的通信过程，大致上可以分为握手（非对称加密）和通信（对称加密）两个过程。\n\n握手的部分是使用非对称加密的。既然是非对称加密，就会涉及到公钥、私钥的问题。在经典的非对称加密体系中，公钥用来加密，私钥用来签名，也即如果A同学要向B同学发一个加密信息，那么A同学必须拥有B同学的公钥。同理，如果B同学也要向A同学发加密信息，他也必须拥有A同学的公钥。\n\n在HTTPS中，也是同样的情况，如果双向通信都需要加密的话，那么服务端和客户端各需要一套密钥（私钥+公钥）。而事实上，在握手的部分，客户端的密钥是可选的，常见的HTTPS通信中都没有客户端密钥的参与。那这个过程具体是怎样的呢？\n\n1. 客户端向服务端打个招呼，并告诉服务端，自己要访问哪个域名（SNI），这一步是不加密的\n2. 服务端向客户端打招呼，出示自己的证书，同时证书中包含了服务端的公钥，这一步也是不加密的\n3. 客户端验证服务端的证书是否合法，如果不合法就中止请求并报错\n4. 客户端生成一个后续使用密钥（用于对称加密），使用服务端的公钥对这个密钥进行加密，发送到服务端\n5. 服务端对上一步客户端发来的加密消息进行解密并验证\n\n接下来，就使用对称加密来通信了。\n\n![HTTPS握手步骤](/images/2017-07-17-https-certificate/02-steps.png)\n\n### 如何确定通信是安全的\n\n在这个过程中涉及到很多我们接下来会接触到的知识点。\n\n首先，服务端用于加密通信的私钥和公钥都是由自己生成的，稍后我们将看到具体的生成方式。但是，我们从一开始到现在出现过很多次的所谓“证书”是什么呢？以及客户端又是如何验证这个证书是否合法的呢？\n\n我们可以想象一下，如果在客户端和服务端中间，存在一个中间人，就像代理一样。对于客户端来说，它是服务端，对于服务端来说，它又是客户端。这样它就可以两边同时通信，直接窃听整个通信过程，这样我们的加密就毫无意义了。因此必须要有一种机制，来防止中间人攻击。而证书正是这样一种身份验证的机制。\n\n![中间人攻击示意图](/images/2017-07-17-https-certificate/03-mith.jpg)\n\n具体而言，证书大约等于“公钥+身份+签名”三部分。身份主要就是服务器的相关信息，其中一个非常重要的信息就是域名。而签名的过程则是数字证书中心（CA）对身份表示认可，然后使用自己的私钥对这个身份进行签署，表示“我（CA）证明，这个身份是真的”。\n\n使用OpenSSL可以非常方便地查看证书：\n\n```sh\nopenssl x509 -in futu.im.crt -noout -text\n```\n\n如果证书格式是没有BASE64编码过的，则可能是`DER`二进制格式，需要加一个参数：\n\n```sh\nopenssl x509 -inform der -in futu.im.crt -noout -text\n```\n\n下面是<https://futu.im>的证书：\n\n```\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            03:8b:7b:f9:68:43:6c:c9:0f:8b:c9:24:42:ea:78:b6:05:51\n    Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C=US, O=Let's Encrypt, CN=Let's Encrypt Authority X3\n        Validity\n            Not Before: Jul 20 09:21:00 2017 GMT\n            Not After : Oct 18 09:21:00 2017 GMT\n        Subject: CN=futu.im\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (2048 bit)\n                Modulus:\n                    00:db:b4:f5:9d:31:d0:7b:1b:76:c0:3a:06:30:a1:\n                    da:a9:33:e9:1d:3e:d3:bf:8a:15:d3:b0:17:21:77:\n                    2f:e3:f4:59:f9:96:79:a2:b0:80:0c:01:a1:04:4e:\n                    b7:c1:fc:da:e6:d0:79:8f:5c:25:64:48:31:58:07:\n                    48:fb:19:3e:ae:33:5b:22:73:e3:de:6f:f6:b4:d0:\n                    a2:27:26:73:ce:20:4c:d1:05:fc:c8:5e:8a:f4:aa:\n                    d0:88:ae:35:db:3e:c5:8d:f7:4c:6d:64:ad:98:fc:\n                    63:70:90:a9:68:78:2a:72:df:56:93:ac:65:df:1e:\n                    2c:61:ae:bf:a9:d7:32:ff:70:ea:1c:ff:76:60:81:\n                    da:55:69:c7:d9:8c:b4:04:ea:85:84:4e:3e:22:dc:\n                    e9:c4:56:7d:12:4b:8f:f0:93:9b:5d:0f:e1:ee:e7:\n                    37:82:0d:32:41:9e:87:b5:e6:91:2b:b4:28:79:f7:\n                    0e:99:d1:86:13:87:1d:fc:6f:c5:38:fd:38:0e:b0:\n                    5e:b8:ca:b7:e1:fe:7a:86:86:88:8d:1d:e7:0d:cc:\n                    79:82:b2:dd:e2:3d:b7:cc:3b:31:bd:fd:55:12:d8:\n                    ab:35:e1:8d:2b:3e:a8:2a:1c:9c:69:5b:15:0f:14:\n                    7b:6a:55:03:61:aa:a1:30:c8:a6:5d:c4:92:f9:e5:\n                    32:01\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Key Usage: critical\n                Digital Signature, Key Encipherment\n            X509v3 Extended Key Usage:\n                TLS Web Server Authentication, TLS Web Client Authentication\n            X509v3 Basic Constraints: critical\n                CA:FALSE\n            X509v3 Subject Key Identifier:\n                F2:E3:A5:CF:82:0A:72:A0:B3:67:28:DC:33:67:F9:6F:EA:8E:89:29\n            X509v3 Authority Key Identifier:\n                keyid:A8:4A:6A:63:04:7D:DD:BA:E6:D1:39:B7:A6:45:65:EF:F3:A8:EC:A1\n\n            Authority Information Access:\n                OCSP - URI:http://ocsp.int-x3.letsencrypt.org\n                CA Issuers - URI:http://cert.int-x3.letsencrypt.org/\n\n            X509v3 Subject Alternative Name:\n                DNS:futu.im\n            X509v3 Certificate Policies:\n                Policy: 2.23.140.1.2.1\n                Policy: 1.3.6.1.4.1.44947.1.1.1\n                  CPS: http://cps.letsencrypt.org\n                  User Notice:\n                    Explicit Text: This Certificate may only be relied upon by Relying Parties and only in accordance with the Certificate Policy found at https://letsencrypt.org/repository/\n\n    Signature Algorithm: sha256WithRSAEncryption\n         90:9f:34:67:bc:3c:fb:fa:68:2e:97:38:04:bc:89:0a:bc:d0:\n         a3:6d:e4:da:5a:ef:56:74:fd:ee:ff:ac:4a:e5:14:c9:b5:f6:\n         8a:91:00:a8:42:be:8a:f6:e6:ba:0c:62:bf:f1:9f:a3:e6:e7:\n         f0:b4:ab:9c:36:38:6f:81:b6:fd:eb:5f:8a:90:48:db:69:3b:\n         03:61:b6:0f:84:e6:11:d3:b8:61:6f:9f:b6:da:16:3d:97:ae:\n         a1:ed:21:1f:79:07:fb:95:06:d3:0c:89:d1:a7:fa:58:d0:b8:\n         20:a8:2f:5e:51:77:91:e7:b2:b5:9d:f0:e8:d8:53:2b:c3:af:\n         6c:de:c4:0a:24:dc:7d:25:31:31:af:a6:fd:9f:ea:44:82:ed:\n         97:c5:74:d4:5c:11:3b:be:76:8d:3d:e8:9b:87:d7:d8:ad:21:\n         95:82:16:cd:02:bd:12:3c:75:2b:43:c1:41:87:f9:b4:17:9e:\n         df:0e:d9:ce:d9:e9:64:c8:23:a1:88:85:a8:25:82:4a:69:a4:\n         51:6a:ad:6a:23:bf:7f:ba:98:5f:72:de:a4:25:29:10:e3:27:\n         b5:00:16:60:08:0c:cc:f5:5b:88:df:5c:be:6b:10:3a:05:6a:\n         61:01:c2:83:d5:88:b4:18:ca:cf:58:d7:14:58:1b:92:f4:69:\n         b9:22:a2:3b\n```\n\n可以非常清楚地看到几个部分：\n\n1. `Subject Public Key Info`表示服务器的公钥\n2. `Subject`是服务器的身份，可以看到`CN=futu.im`字样，视不同的证书，`Subject`中还有可能包含更多信息\n3. `Issuer`表示证书的签名机构（CA），最下方则是签名算法和签名出来的结果\n\n那CA又是什么东西呢？它其实就是一些内置在操作系统（浏览器）信任列表中的一些机构，每个机构都拥有自己的根证书，这些证书被操作系统（浏览器）无条件信任。当一个证书被CA签署后，操作系统（浏览器）就会信任这个证书所代表的身份。\n\nCA在签署证书的时候，都会做一些真实性验证，保证只有真实的网站拥有者才可以被签署。因此，当浏览器拿到一个被CA签署过的证书的时候，只要看一下这个CA是不是在信任列表中，就可以决定是否信任这个证书了。\n\n所以这就有了防中间人攻击的关键点：合法的证书是无法伪造的。如果中间人替换了这个证书，浏览器就不会信任这次握手，将中止通信。\n\n那么，在不替换证书的前提下，为什么中间人就无法拦截通信了呢？这是因为证书中包含了服务器的公钥，客户端会使用这个公钥加密信息，而这个信息只有拥有私钥的人才可以解密。很显然，只有真实的服务器才有这个私钥，因此中间人是无法解密了。\n\n## 证书签发过程\n\n证书的签发过程大致分为几个步骤：\n\n1. 生成私钥\n2. 生成一个证书签名请求文件（CSR）\n3. 对CSR进行签名，颁发证书\n\n第1步非常好理解，就是要生成一个后续通信中用于解密的私钥。私钥中不包含任何主体相关的信息，也就是说生成私钥时并不需要提供任何信息。\n\n第2步则需要提示主体相关信息，可能包括公司、城市、名称（CommonName，简称CN）等信息。这些信息是非常重要的，在HTTPS中，CommonName一般填写网站的域名，这是一个尤其重要的字段，因为它会作为通信过程中判断服务器证书是否合法的一个重要依据，即域名是否相符。在上方我们看到的证书信息中，主体`Subject`甚至只有这唯一的一个字段。\n\n具体而言，一个CSR文件包含三部分信息，一是主体信息和公钥，二是签名方法，三是签名。后两部分其实是为了保证CSR在传输过程中不被修改，以免导致CA被利用，产生滥发证书等问题。\n\n通过OpenSSL也可以查看一个CSR文件的具体信息：\n\n```sh\nopenssl req -in ssltest.csr -noout -text\n```\n\n```\nCertificate Request:\n    Data:\n        Version: 0 (0x0)\n        Subject: C=CN, ST=Guangdong, L=Shenzhen, O=futu, OU=futu, CN=ssltest.com/emailAddress=test@example.com\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (1024 bit)\n                Modulus:\n                    00:b9:74:77:16:5a:8e:fd:94:22:70:bb:ee:56:46:\n                    06:80:26:03:8d:03:4f:36:df:41:7d:28:aa:b6:2c:\n                    d7:42:51:d6:28:e1:aa:c4:06:cd:32:22:bd:79:d0:\n                    c0:3a:a2:d8:03:8e:38:45:b0:8c:2d:81:f0:b1:5c:\n                    6a:97:ec:dc:bb:58:88:62:c3:bf:86:1c:e8:1a:45:\n                    ca:50:ac:e6:5e:e2:d3:d5:dd:43:2d:35:05:e0:b8:\n                    77:7f:e6:f2:82:37:32:15:1b:52:7f:64:d1:62:d6:\n                    9f:ac:bb:ce:86:45:63:52:c5:4e:71:da:82:5b:94:\n                    2e:62:fe:37:c6:47:e0:fe:af\n                Exponent: 65537 (0x10001)\n        Attributes:\n            a0:00\n    Signature Algorithm: sha256WithRSAEncryption\n         01:a2:21:62:6a:5c:03:c2:f8:1a:42:23:a9:d4:12:20:3c:9f:\n         af:3c:f1:2c:f5:4d:f8:b6:c5:aa:f5:42:b7:b6:39:5c:a9:2c:\n         cb:67:2c:99:1a:85:94:73:05:ce:9a:11:4e:fd:d1:29:f4:ae:\n         b9:19:22:bb:ad:53:9c:02:db:04:c0:6f:79:44:37:b0:bd:34:\n         8f:96:37:6d:a2:2d:49:aa:62:d1:75:2f:eb:b7:08:6b:d8:f5:\n         d1:db:16:7b:2f:9c:fd:c9:85:36:3c:2f:15:67:08:45:9d:1d:\n         a2:50:6e:f5:f4:3b:4a:d6:5c:50:5f:6c:ef:d1:f7:79:33:42:\n         81:8a\n```\n\n我们可以非常清楚地看到，一个CSR文件中包含了主体信息和公钥。\n\nCA在拿到CSR文件之后就会去做一些合法性判断，例如判断域名（CommonName）所有者是不是你之类的，如果确定合法之后，就会使用CA自己的私钥对提交上来的这个公钥和主体进行签名，从而产生一张证书。\n\n我们看到CSR文件的信息和证书的信息非常像，主要就是缺少了最后的签名部分。（当然还有extensions部分，稍后说明。）\n\n## 无CA时自签名（根）证书\n\n事实上，CA也没有什么很神秘的地方，它最重要的东西也是一个私钥和一个自己签名的证书。拥有这一对私钥和证书，我们就完全可以充当一个CA了。（是否被信任是另一回事。）\n\n因此，我们完全可以自己生成这样一对私钥和证书。只要将这个证书加入到系统（浏览器）的信任列表中，就可以被信任了。\n\n下面是windows机器设置信任根证书的方法，注意第二步中，一定要选择“受信任的根证书颁发机构”这一项才能生效。\n\n![windows安装CA证书](/images/2017-07-17-https-certificate/04-win_ca_install.png)\n\n![windows安装CA证书](/images/2017-07-17-https-certificate/05-win_ca_save.png)\n\nMac下设置信任的方法：\n\n![Mac信任根证书](/images/2017-07-17-https-certificate/06-mac_ca_trust.png)\n\n如果我们将证书的CommonName和网站的域名设置成一致的，我们就可以直接拿这个根证书去配置HTTPS服务了。\n\n![根证书直接配置HTTPS](/images/2017-07-17-https-certificate/07-ca_root_trust.png)\n\n可以看到，此时证书只有一级，即根证书，但是因为根证书的CommonName就用的ssltest.com，因此被信任了。\n\n直接将CA证书用于网站HTTPS配置的话，优点是操作非常简单，不用考虑CA什么的。缺点也很明显：\n\n1. 每一个不同的域名都需要一个不同的根证书\n2. 每个根证书都需要在系统（浏览器）设置一次信任\n\n## 使用CA自签名证书\n\n如果我们把上一步的证书当成根证书来用，而不是直接用来配置服务器，我们就有了一个CA。\n\n接下来我们需要配置网站的时候，就需要再生成一个私钥和CSR，然后由CA对CSR中的主体和公钥进行签名，得到一个证书。这样就有了一个CA签名的证书，可以用于服务器的配置。\n\n![根证书签名后受信任](/images/2017-07-17-https-certificate/08-ca_signed_cert.png)\n\n## 小结\n\n至此，我们比较详细地了解了HTTPS的通信过程以及安全机制。中间涉及到了私钥、公钥、CA、签名等比较重要的概念。[下一篇](/posts/2017-08-03-https-certificate/)中，我们将看到如何使用OpenSSL进行自签名证书。\n","source":"_posts/2017-07-17-https-certificate.md","raw":"---\ntitle: HTTPS自建CA及自签名证书不完全指南（理论篇）\ndate: 2017-07-17 18:00\ncategory: 网络安全\ntags: [OpenSSL,HTTPS,Node.js,nginx]\nauthor: Jin\n---\n\nHTTPS 全称 HTTP over SSL，即工作于SSL层之上的HTTP协议。它对开发者和使用者是透明的，只是数据传输部分是加密的。\n\nSSL分为 1.0 / 2.0 / 3.0 等很多版本，随着时间的推移，它也变得越来越不安全，因此现在我们通常使用更安全的 TLS 协议。TLS 协议也有不同版本，目前最新最安全的是 TLS 1.2 。一般情况下，我们不会具体区别 SSL 和 TLS，现在很多场合提到的 SSL 其实也是 TLS 协议。\n\n## HTTPS安全浏览\n\n![HTTPS安全浏览](/images/2017-07-17-https-certificate/01-demo.png)\n\n如果我们正在浏览的网页是安全的 HTTPS 网页，则大部分浏览器会显示一把绿色的锁，表示这是加密的连接，且通信过程是安全的。\n\n而要让浏览器认为这个网页是安全的，则需要满足以下几个条件：\n\n1. HTTPS 协议访问\n2. 服务端出具的证书内容正确（域名、签名方式等正确）\n3. 服务端出具的证书由 CA（数字证书中心） 签发\n4. 签发证书的 CA 在浏览器（或操作系统）的受信任列表中\n\n所谓的 CA（数字证书中心）一般是一个机构，它们被内置在浏览器或操作系统的受信任列表中。一个证书只有被 CA 签名过（也叫由 CA 签发的证书），浏览器才可能在受信任列表中找到它对应的 CA ，然后判断是否应该信任这个证书。\n\n> 事实上第3点和第4点并不完全准确，如果一个证书不是由 CA 签发的，但是存在于浏览器（或操作系统）的受信任列表中，那么它事实上相当于一个CA的根证书，也会被认为是安全的。\n> \n> 但是，在实际操作中，几乎没有这样的案例，因为几乎没有 CA 会直接拿自己的根证书来让某个网站使用。\n\n<!-- more -->\n\n## HTTPS服务器的搭建\n\n在 Node.js 中配置一个 HTTPS 服务器非常简单。Node.js底层引入了OpenSSL开源库，并直接提供了`https`模块：\n\n```javascript\n// 引入https模块\nconst https = require('https');\nconst fs = require('fs');\n\n// 创建HTTPS服务需要私钥和证书文件\nlet options = {\n  key: fs.readFileSync('./server.key'), //私钥\n  cert: fs.readFileSync('./server.crt') //数字证书\n};\n\n// 创建HTTPS服务器\nhttps.createServer(options , (req , res)=>{\n  res.writeHead(200);\n  res.end('https is working');\n}).listen(443);\n```\n\n可以发现创建https服务器比我们熟悉的创建http服务器要多一个`options`参数。`options`里面包含的是https服务器的私钥和数字证书。\n\n如果使用`nginx`来创建https服务器，则可能是这样：\n\n```\nserver\n{\n    listen 443 ssl;\n    server_name  ssltest.com;\n    index index.html index.htm;\n    root /data/ssltest;\n\n    ssl_certificate /data/ssltest.crt;\n    ssl_certificate_key     /data/ssltest.key;\n\n}\n```\n\n同样，在上方的配置文件中，需要使用`ssl_certificate_key`和`ssl_certificate`来指定私钥和数字证书。\n\n问题来了：私钥和数字证书分别是什么？\n\n## 科普：HTTPS相关知识\n\n本文将介绍一些与我们接下来生成证书相关的知识。为了简单起见，有一些和实际操作关系不大的、理论性比较强的内容忽略不计。\n\n### HTTPS是如何通信的？\n\n我们都知道HTTPS是加密通信的，但是对于具体的过程，却并不是人人都知道。事实上，HTTPS的通信过程，大致上可以分为握手（非对称加密）和通信（对称加密）两个过程。\n\n握手的部分是使用非对称加密的。既然是非对称加密，就会涉及到公钥、私钥的问题。在经典的非对称加密体系中，公钥用来加密，私钥用来签名，也即如果A同学要向B同学发一个加密信息，那么A同学必须拥有B同学的公钥。同理，如果B同学也要向A同学发加密信息，他也必须拥有A同学的公钥。\n\n在HTTPS中，也是同样的情况，如果双向通信都需要加密的话，那么服务端和客户端各需要一套密钥（私钥+公钥）。而事实上，在握手的部分，客户端的密钥是可选的，常见的HTTPS通信中都没有客户端密钥的参与。那这个过程具体是怎样的呢？\n\n1. 客户端向服务端打个招呼，并告诉服务端，自己要访问哪个域名（SNI），这一步是不加密的\n2. 服务端向客户端打招呼，出示自己的证书，同时证书中包含了服务端的公钥，这一步也是不加密的\n3. 客户端验证服务端的证书是否合法，如果不合法就中止请求并报错\n4. 客户端生成一个后续使用密钥（用于对称加密），使用服务端的公钥对这个密钥进行加密，发送到服务端\n5. 服务端对上一步客户端发来的加密消息进行解密并验证\n\n接下来，就使用对称加密来通信了。\n\n![HTTPS握手步骤](/images/2017-07-17-https-certificate/02-steps.png)\n\n### 如何确定通信是安全的\n\n在这个过程中涉及到很多我们接下来会接触到的知识点。\n\n首先，服务端用于加密通信的私钥和公钥都是由自己生成的，稍后我们将看到具体的生成方式。但是，我们从一开始到现在出现过很多次的所谓“证书”是什么呢？以及客户端又是如何验证这个证书是否合法的呢？\n\n我们可以想象一下，如果在客户端和服务端中间，存在一个中间人，就像代理一样。对于客户端来说，它是服务端，对于服务端来说，它又是客户端。这样它就可以两边同时通信，直接窃听整个通信过程，这样我们的加密就毫无意义了。因此必须要有一种机制，来防止中间人攻击。而证书正是这样一种身份验证的机制。\n\n![中间人攻击示意图](/images/2017-07-17-https-certificate/03-mith.jpg)\n\n具体而言，证书大约等于“公钥+身份+签名”三部分。身份主要就是服务器的相关信息，其中一个非常重要的信息就是域名。而签名的过程则是数字证书中心（CA）对身份表示认可，然后使用自己的私钥对这个身份进行签署，表示“我（CA）证明，这个身份是真的”。\n\n使用OpenSSL可以非常方便地查看证书：\n\n```sh\nopenssl x509 -in futu.im.crt -noout -text\n```\n\n如果证书格式是没有BASE64编码过的，则可能是`DER`二进制格式，需要加一个参数：\n\n```sh\nopenssl x509 -inform der -in futu.im.crt -noout -text\n```\n\n下面是<https://futu.im>的证书：\n\n```\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            03:8b:7b:f9:68:43:6c:c9:0f:8b:c9:24:42:ea:78:b6:05:51\n    Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C=US, O=Let's Encrypt, CN=Let's Encrypt Authority X3\n        Validity\n            Not Before: Jul 20 09:21:00 2017 GMT\n            Not After : Oct 18 09:21:00 2017 GMT\n        Subject: CN=futu.im\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (2048 bit)\n                Modulus:\n                    00:db:b4:f5:9d:31:d0:7b:1b:76:c0:3a:06:30:a1:\n                    da:a9:33:e9:1d:3e:d3:bf:8a:15:d3:b0:17:21:77:\n                    2f:e3:f4:59:f9:96:79:a2:b0:80:0c:01:a1:04:4e:\n                    b7:c1:fc:da:e6:d0:79:8f:5c:25:64:48:31:58:07:\n                    48:fb:19:3e:ae:33:5b:22:73:e3:de:6f:f6:b4:d0:\n                    a2:27:26:73:ce:20:4c:d1:05:fc:c8:5e:8a:f4:aa:\n                    d0:88:ae:35:db:3e:c5:8d:f7:4c:6d:64:ad:98:fc:\n                    63:70:90:a9:68:78:2a:72:df:56:93:ac:65:df:1e:\n                    2c:61:ae:bf:a9:d7:32:ff:70:ea:1c:ff:76:60:81:\n                    da:55:69:c7:d9:8c:b4:04:ea:85:84:4e:3e:22:dc:\n                    e9:c4:56:7d:12:4b:8f:f0:93:9b:5d:0f:e1:ee:e7:\n                    37:82:0d:32:41:9e:87:b5:e6:91:2b:b4:28:79:f7:\n                    0e:99:d1:86:13:87:1d:fc:6f:c5:38:fd:38:0e:b0:\n                    5e:b8:ca:b7:e1:fe:7a:86:86:88:8d:1d:e7:0d:cc:\n                    79:82:b2:dd:e2:3d:b7:cc:3b:31:bd:fd:55:12:d8:\n                    ab:35:e1:8d:2b:3e:a8:2a:1c:9c:69:5b:15:0f:14:\n                    7b:6a:55:03:61:aa:a1:30:c8:a6:5d:c4:92:f9:e5:\n                    32:01\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Key Usage: critical\n                Digital Signature, Key Encipherment\n            X509v3 Extended Key Usage:\n                TLS Web Server Authentication, TLS Web Client Authentication\n            X509v3 Basic Constraints: critical\n                CA:FALSE\n            X509v3 Subject Key Identifier:\n                F2:E3:A5:CF:82:0A:72:A0:B3:67:28:DC:33:67:F9:6F:EA:8E:89:29\n            X509v3 Authority Key Identifier:\n                keyid:A8:4A:6A:63:04:7D:DD:BA:E6:D1:39:B7:A6:45:65:EF:F3:A8:EC:A1\n\n            Authority Information Access:\n                OCSP - URI:http://ocsp.int-x3.letsencrypt.org\n                CA Issuers - URI:http://cert.int-x3.letsencrypt.org/\n\n            X509v3 Subject Alternative Name:\n                DNS:futu.im\n            X509v3 Certificate Policies:\n                Policy: 2.23.140.1.2.1\n                Policy: 1.3.6.1.4.1.44947.1.1.1\n                  CPS: http://cps.letsencrypt.org\n                  User Notice:\n                    Explicit Text: This Certificate may only be relied upon by Relying Parties and only in accordance with the Certificate Policy found at https://letsencrypt.org/repository/\n\n    Signature Algorithm: sha256WithRSAEncryption\n         90:9f:34:67:bc:3c:fb:fa:68:2e:97:38:04:bc:89:0a:bc:d0:\n         a3:6d:e4:da:5a:ef:56:74:fd:ee:ff:ac:4a:e5:14:c9:b5:f6:\n         8a:91:00:a8:42:be:8a:f6:e6:ba:0c:62:bf:f1:9f:a3:e6:e7:\n         f0:b4:ab:9c:36:38:6f:81:b6:fd:eb:5f:8a:90:48:db:69:3b:\n         03:61:b6:0f:84:e6:11:d3:b8:61:6f:9f:b6:da:16:3d:97:ae:\n         a1:ed:21:1f:79:07:fb:95:06:d3:0c:89:d1:a7:fa:58:d0:b8:\n         20:a8:2f:5e:51:77:91:e7:b2:b5:9d:f0:e8:d8:53:2b:c3:af:\n         6c:de:c4:0a:24:dc:7d:25:31:31:af:a6:fd:9f:ea:44:82:ed:\n         97:c5:74:d4:5c:11:3b:be:76:8d:3d:e8:9b:87:d7:d8:ad:21:\n         95:82:16:cd:02:bd:12:3c:75:2b:43:c1:41:87:f9:b4:17:9e:\n         df:0e:d9:ce:d9:e9:64:c8:23:a1:88:85:a8:25:82:4a:69:a4:\n         51:6a:ad:6a:23:bf:7f:ba:98:5f:72:de:a4:25:29:10:e3:27:\n         b5:00:16:60:08:0c:cc:f5:5b:88:df:5c:be:6b:10:3a:05:6a:\n         61:01:c2:83:d5:88:b4:18:ca:cf:58:d7:14:58:1b:92:f4:69:\n         b9:22:a2:3b\n```\n\n可以非常清楚地看到几个部分：\n\n1. `Subject Public Key Info`表示服务器的公钥\n2. `Subject`是服务器的身份，可以看到`CN=futu.im`字样，视不同的证书，`Subject`中还有可能包含更多信息\n3. `Issuer`表示证书的签名机构（CA），最下方则是签名算法和签名出来的结果\n\n那CA又是什么东西呢？它其实就是一些内置在操作系统（浏览器）信任列表中的一些机构，每个机构都拥有自己的根证书，这些证书被操作系统（浏览器）无条件信任。当一个证书被CA签署后，操作系统（浏览器）就会信任这个证书所代表的身份。\n\nCA在签署证书的时候，都会做一些真实性验证，保证只有真实的网站拥有者才可以被签署。因此，当浏览器拿到一个被CA签署过的证书的时候，只要看一下这个CA是不是在信任列表中，就可以决定是否信任这个证书了。\n\n所以这就有了防中间人攻击的关键点：合法的证书是无法伪造的。如果中间人替换了这个证书，浏览器就不会信任这次握手，将中止通信。\n\n那么，在不替换证书的前提下，为什么中间人就无法拦截通信了呢？这是因为证书中包含了服务器的公钥，客户端会使用这个公钥加密信息，而这个信息只有拥有私钥的人才可以解密。很显然，只有真实的服务器才有这个私钥，因此中间人是无法解密了。\n\n## 证书签发过程\n\n证书的签发过程大致分为几个步骤：\n\n1. 生成私钥\n2. 生成一个证书签名请求文件（CSR）\n3. 对CSR进行签名，颁发证书\n\n第1步非常好理解，就是要生成一个后续通信中用于解密的私钥。私钥中不包含任何主体相关的信息，也就是说生成私钥时并不需要提供任何信息。\n\n第2步则需要提示主体相关信息，可能包括公司、城市、名称（CommonName，简称CN）等信息。这些信息是非常重要的，在HTTPS中，CommonName一般填写网站的域名，这是一个尤其重要的字段，因为它会作为通信过程中判断服务器证书是否合法的一个重要依据，即域名是否相符。在上方我们看到的证书信息中，主体`Subject`甚至只有这唯一的一个字段。\n\n具体而言，一个CSR文件包含三部分信息，一是主体信息和公钥，二是签名方法，三是签名。后两部分其实是为了保证CSR在传输过程中不被修改，以免导致CA被利用，产生滥发证书等问题。\n\n通过OpenSSL也可以查看一个CSR文件的具体信息：\n\n```sh\nopenssl req -in ssltest.csr -noout -text\n```\n\n```\nCertificate Request:\n    Data:\n        Version: 0 (0x0)\n        Subject: C=CN, ST=Guangdong, L=Shenzhen, O=futu, OU=futu, CN=ssltest.com/emailAddress=test@example.com\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (1024 bit)\n                Modulus:\n                    00:b9:74:77:16:5a:8e:fd:94:22:70:bb:ee:56:46:\n                    06:80:26:03:8d:03:4f:36:df:41:7d:28:aa:b6:2c:\n                    d7:42:51:d6:28:e1:aa:c4:06:cd:32:22:bd:79:d0:\n                    c0:3a:a2:d8:03:8e:38:45:b0:8c:2d:81:f0:b1:5c:\n                    6a:97:ec:dc:bb:58:88:62:c3:bf:86:1c:e8:1a:45:\n                    ca:50:ac:e6:5e:e2:d3:d5:dd:43:2d:35:05:e0:b8:\n                    77:7f:e6:f2:82:37:32:15:1b:52:7f:64:d1:62:d6:\n                    9f:ac:bb:ce:86:45:63:52:c5:4e:71:da:82:5b:94:\n                    2e:62:fe:37:c6:47:e0:fe:af\n                Exponent: 65537 (0x10001)\n        Attributes:\n            a0:00\n    Signature Algorithm: sha256WithRSAEncryption\n         01:a2:21:62:6a:5c:03:c2:f8:1a:42:23:a9:d4:12:20:3c:9f:\n         af:3c:f1:2c:f5:4d:f8:b6:c5:aa:f5:42:b7:b6:39:5c:a9:2c:\n         cb:67:2c:99:1a:85:94:73:05:ce:9a:11:4e:fd:d1:29:f4:ae:\n         b9:19:22:bb:ad:53:9c:02:db:04:c0:6f:79:44:37:b0:bd:34:\n         8f:96:37:6d:a2:2d:49:aa:62:d1:75:2f:eb:b7:08:6b:d8:f5:\n         d1:db:16:7b:2f:9c:fd:c9:85:36:3c:2f:15:67:08:45:9d:1d:\n         a2:50:6e:f5:f4:3b:4a:d6:5c:50:5f:6c:ef:d1:f7:79:33:42:\n         81:8a\n```\n\n我们可以非常清楚地看到，一个CSR文件中包含了主体信息和公钥。\n\nCA在拿到CSR文件之后就会去做一些合法性判断，例如判断域名（CommonName）所有者是不是你之类的，如果确定合法之后，就会使用CA自己的私钥对提交上来的这个公钥和主体进行签名，从而产生一张证书。\n\n我们看到CSR文件的信息和证书的信息非常像，主要就是缺少了最后的签名部分。（当然还有extensions部分，稍后说明。）\n\n## 无CA时自签名（根）证书\n\n事实上，CA也没有什么很神秘的地方，它最重要的东西也是一个私钥和一个自己签名的证书。拥有这一对私钥和证书，我们就完全可以充当一个CA了。（是否被信任是另一回事。）\n\n因此，我们完全可以自己生成这样一对私钥和证书。只要将这个证书加入到系统（浏览器）的信任列表中，就可以被信任了。\n\n下面是windows机器设置信任根证书的方法，注意第二步中，一定要选择“受信任的根证书颁发机构”这一项才能生效。\n\n![windows安装CA证书](/images/2017-07-17-https-certificate/04-win_ca_install.png)\n\n![windows安装CA证书](/images/2017-07-17-https-certificate/05-win_ca_save.png)\n\nMac下设置信任的方法：\n\n![Mac信任根证书](/images/2017-07-17-https-certificate/06-mac_ca_trust.png)\n\n如果我们将证书的CommonName和网站的域名设置成一致的，我们就可以直接拿这个根证书去配置HTTPS服务了。\n\n![根证书直接配置HTTPS](/images/2017-07-17-https-certificate/07-ca_root_trust.png)\n\n可以看到，此时证书只有一级，即根证书，但是因为根证书的CommonName就用的ssltest.com，因此被信任了。\n\n直接将CA证书用于网站HTTPS配置的话，优点是操作非常简单，不用考虑CA什么的。缺点也很明显：\n\n1. 每一个不同的域名都需要一个不同的根证书\n2. 每个根证书都需要在系统（浏览器）设置一次信任\n\n## 使用CA自签名证书\n\n如果我们把上一步的证书当成根证书来用，而不是直接用来配置服务器，我们就有了一个CA。\n\n接下来我们需要配置网站的时候，就需要再生成一个私钥和CSR，然后由CA对CSR中的主体和公钥进行签名，得到一个证书。这样就有了一个CA签名的证书，可以用于服务器的配置。\n\n![根证书签名后受信任](/images/2017-07-17-https-certificate/08-ca_signed_cert.png)\n\n## 小结\n\n至此，我们比较详细地了解了HTTPS的通信过程以及安全机制。中间涉及到了私钥、公钥、CA、签名等比较重要的概念。[下一篇](/posts/2017-08-03-https-certificate/)中，我们将看到如何使用OpenSSL进行自签名证书。\n","slug":"2017-07-17-https-certificate","published":1,"updated":"2017-12-01T08:50:00.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanokni8000wjxs1h2n4t8p4","content":"<p>HTTPS 全称 HTTP over SSL，即工作于SSL层之上的HTTP协议。它对开发者和使用者是透明的，只是数据传输部分是加密的。</p>\n<p>SSL分为 1.0 / 2.0 / 3.0 等很多版本，随着时间的推移，它也变得越来越不安全，因此现在我们通常使用更安全的 TLS 协议。TLS 协议也有不同版本，目前最新最安全的是 TLS 1.2 。一般情况下，我们不会具体区别 SSL 和 TLS，现在很多场合提到的 SSL 其实也是 TLS 协议。</p>\n<h2 id=\"HTTPS安全浏览\"><a href=\"#HTTPS安全浏览\" class=\"headerlink\" title=\"HTTPS安全浏览\"></a>HTTPS安全浏览</h2><p><img src=\"/images/2017-07-17-https-certificate/01-demo.png\" alt=\"HTTPS安全浏览\"></p>\n<p>如果我们正在浏览的网页是安全的 HTTPS 网页，则大部分浏览器会显示一把绿色的锁，表示这是加密的连接，且通信过程是安全的。</p>\n<p>而要让浏览器认为这个网页是安全的，则需要满足以下几个条件：</p>\n<ol>\n<li>HTTPS 协议访问</li>\n<li>服务端出具的证书内容正确（域名、签名方式等正确）</li>\n<li>服务端出具的证书由 CA（数字证书中心） 签发</li>\n<li>签发证书的 CA 在浏览器（或操作系统）的受信任列表中</li>\n</ol>\n<p>所谓的 CA（数字证书中心）一般是一个机构，它们被内置在浏览器或操作系统的受信任列表中。一个证书只有被 CA 签名过（也叫由 CA 签发的证书），浏览器才可能在受信任列表中找到它对应的 CA ，然后判断是否应该信任这个证书。</p>\n<blockquote>\n<p>事实上第3点和第4点并不完全准确，如果一个证书不是由 CA 签发的，但是存在于浏览器（或操作系统）的受信任列表中，那么它事实上相当于一个CA的根证书，也会被认为是安全的。</p>\n<p>但是，在实际操作中，几乎没有这样的案例，因为几乎没有 CA 会直接拿自己的根证书来让某个网站使用。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"HTTPS服务器的搭建\"><a href=\"#HTTPS服务器的搭建\" class=\"headerlink\" title=\"HTTPS服务器的搭建\"></a>HTTPS服务器的搭建</h2><p>在 Node.js 中配置一个 HTTPS 服务器非常简单。Node.js底层引入了OpenSSL开源库，并直接提供了<code>https</code>模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入https模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建HTTPS服务需要私钥和证书文件</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> options = &#123;</span><br><span class=\"line\">  key: fs.readFileSync(<span class=\"string\">'./server.key'</span>), <span class=\"comment\">//私钥</span></span><br><span class=\"line\">  cert: fs.readFileSync(<span class=\"string\">'./server.crt'</span>) <span class=\"comment\">//数字证书</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建HTTPS服务器</span></span><br><span class=\"line\">https.createServer(options , (req , res)=&gt;&#123;</span><br><span class=\"line\">  res.writeHead(<span class=\"number\">200</span>);</span><br><span class=\"line\">  res.end(<span class=\"string\">'https is working'</span>);</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">443</span>);</span><br></pre></td></tr></table></figure>\n<p>可以发现创建https服务器比我们熟悉的创建http服务器要多一个<code>options</code>参数。<code>options</code>里面包含的是https服务器的私钥和数字证书。</p>\n<p>如果使用<code>nginx</code>来创建https服务器，则可能是这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name  ssltest.com;</span><br><span class=\"line\">    index index.html index.htm;</span><br><span class=\"line\">    root /data/ssltest;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate /data/ssltest.crt;</span><br><span class=\"line\">    ssl_certificate_key     /data/ssltest.key;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样，在上方的配置文件中，需要使用<code>ssl_certificate_key</code>和<code>ssl_certificate</code>来指定私钥和数字证书。</p>\n<p>问题来了：私钥和数字证书分别是什么？</p>\n<h2 id=\"科普：HTTPS相关知识\"><a href=\"#科普：HTTPS相关知识\" class=\"headerlink\" title=\"科普：HTTPS相关知识\"></a>科普：HTTPS相关知识</h2><p>本文将介绍一些与我们接下来生成证书相关的知识。为了简单起见，有一些和实际操作关系不大的、理论性比较强的内容忽略不计。</p>\n<h3 id=\"HTTPS是如何通信的？\"><a href=\"#HTTPS是如何通信的？\" class=\"headerlink\" title=\"HTTPS是如何通信的？\"></a>HTTPS是如何通信的？</h3><p>我们都知道HTTPS是加密通信的，但是对于具体的过程，却并不是人人都知道。事实上，HTTPS的通信过程，大致上可以分为握手（非对称加密）和通信（对称加密）两个过程。</p>\n<p>握手的部分是使用非对称加密的。既然是非对称加密，就会涉及到公钥、私钥的问题。在经典的非对称加密体系中，公钥用来加密，私钥用来签名，也即如果A同学要向B同学发一个加密信息，那么A同学必须拥有B同学的公钥。同理，如果B同学也要向A同学发加密信息，他也必须拥有A同学的公钥。</p>\n<p>在HTTPS中，也是同样的情况，如果双向通信都需要加密的话，那么服务端和客户端各需要一套密钥（私钥+公钥）。而事实上，在握手的部分，客户端的密钥是可选的，常见的HTTPS通信中都没有客户端密钥的参与。那这个过程具体是怎样的呢？</p>\n<ol>\n<li>客户端向服务端打个招呼，并告诉服务端，自己要访问哪个域名（SNI），这一步是不加密的</li>\n<li>服务端向客户端打招呼，出示自己的证书，同时证书中包含了服务端的公钥，这一步也是不加密的</li>\n<li>客户端验证服务端的证书是否合法，如果不合法就中止请求并报错</li>\n<li>客户端生成一个后续使用密钥（用于对称加密），使用服务端的公钥对这个密钥进行加密，发送到服务端</li>\n<li>服务端对上一步客户端发来的加密消息进行解密并验证</li>\n</ol>\n<p>接下来，就使用对称加密来通信了。</p>\n<p><img src=\"/images/2017-07-17-https-certificate/02-steps.png\" alt=\"HTTPS握手步骤\"></p>\n<h3 id=\"如何确定通信是安全的\"><a href=\"#如何确定通信是安全的\" class=\"headerlink\" title=\"如何确定通信是安全的\"></a>如何确定通信是安全的</h3><p>在这个过程中涉及到很多我们接下来会接触到的知识点。</p>\n<p>首先，服务端用于加密通信的私钥和公钥都是由自己生成的，稍后我们将看到具体的生成方式。但是，我们从一开始到现在出现过很多次的所谓“证书”是什么呢？以及客户端又是如何验证这个证书是否合法的呢？</p>\n<p>我们可以想象一下，如果在客户端和服务端中间，存在一个中间人，就像代理一样。对于客户端来说，它是服务端，对于服务端来说，它又是客户端。这样它就可以两边同时通信，直接窃听整个通信过程，这样我们的加密就毫无意义了。因此必须要有一种机制，来防止中间人攻击。而证书正是这样一种身份验证的机制。</p>\n<p><img src=\"/images/2017-07-17-https-certificate/03-mith.jpg\" alt=\"中间人攻击示意图\"></p>\n<p>具体而言，证书大约等于“公钥+身份+签名”三部分。身份主要就是服务器的相关信息，其中一个非常重要的信息就是域名。而签名的过程则是数字证书中心（CA）对身份表示认可，然后使用自己的私钥对这个身份进行签署，表示“我（CA）证明，这个身份是真的”。</p>\n<p>使用OpenSSL可以非常方便地查看证书：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -<span class=\"keyword\">in</span> futu.im.crt -noout -text</span><br></pre></td></tr></table></figure>\n<p>如果证书格式是没有BASE64编码过的，则可能是<code>DER</code>二进制格式，需要加一个参数：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -inform der -<span class=\"keyword\">in</span> futu.im.crt -noout -text</span><br></pre></td></tr></table></figure>\n<p>下面是<a href=\"https://futu.im\">https://futu.im</a>的证书：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Certificate:</span><br><span class=\"line\">    Data:</span><br><span class=\"line\">        Version: 3 (0x2)</span><br><span class=\"line\">        Serial Number:</span><br><span class=\"line\">            03:8b:7b:f9:68:43:6c:c9:0f:8b:c9:24:42:ea:78:b6:05:51</span><br><span class=\"line\">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class=\"line\">        Issuer: C=US, O=Let&apos;s Encrypt, CN=Let&apos;s Encrypt Authority X3</span><br><span class=\"line\">        Validity</span><br><span class=\"line\">            Not Before: Jul 20 09:21:00 2017 GMT</span><br><span class=\"line\">            Not After : Oct 18 09:21:00 2017 GMT</span><br><span class=\"line\">        Subject: CN=futu.im</span><br><span class=\"line\">        Subject Public Key Info:</span><br><span class=\"line\">            Public Key Algorithm: rsaEncryption</span><br><span class=\"line\">                Public-Key: (2048 bit)</span><br><span class=\"line\">                Modulus:</span><br><span class=\"line\">                    00:db:b4:f5:9d:31:d0:7b:1b:76:c0:3a:06:30:a1:</span><br><span class=\"line\">                    da:a9:33:e9:1d:3e:d3:bf:8a:15:d3:b0:17:21:77:</span><br><span class=\"line\">                    2f:e3:f4:59:f9:96:79:a2:b0:80:0c:01:a1:04:4e:</span><br><span class=\"line\">                    b7:c1:fc:da:e6:d0:79:8f:5c:25:64:48:31:58:07:</span><br><span class=\"line\">                    48:fb:19:3e:ae:33:5b:22:73:e3:de:6f:f6:b4:d0:</span><br><span class=\"line\">                    a2:27:26:73:ce:20:4c:d1:05:fc:c8:5e:8a:f4:aa:</span><br><span class=\"line\">                    d0:88:ae:35:db:3e:c5:8d:f7:4c:6d:64:ad:98:fc:</span><br><span class=\"line\">                    63:70:90:a9:68:78:2a:72:df:56:93:ac:65:df:1e:</span><br><span class=\"line\">                    2c:61:ae:bf:a9:d7:32:ff:70:ea:1c:ff:76:60:81:</span><br><span class=\"line\">                    da:55:69:c7:d9:8c:b4:04:ea:85:84:4e:3e:22:dc:</span><br><span class=\"line\">                    e9:c4:56:7d:12:4b:8f:f0:93:9b:5d:0f:e1:ee:e7:</span><br><span class=\"line\">                    37:82:0d:32:41:9e:87:b5:e6:91:2b:b4:28:79:f7:</span><br><span class=\"line\">                    0e:99:d1:86:13:87:1d:fc:6f:c5:38:fd:38:0e:b0:</span><br><span class=\"line\">                    5e:b8:ca:b7:e1:fe:7a:86:86:88:8d:1d:e7:0d:cc:</span><br><span class=\"line\">                    79:82:b2:dd:e2:3d:b7:cc:3b:31:bd:fd:55:12:d8:</span><br><span class=\"line\">                    ab:35:e1:8d:2b:3e:a8:2a:1c:9c:69:5b:15:0f:14:</span><br><span class=\"line\">                    7b:6a:55:03:61:aa:a1:30:c8:a6:5d:c4:92:f9:e5:</span><br><span class=\"line\">                    32:01</span><br><span class=\"line\">                Exponent: 65537 (0x10001)</span><br><span class=\"line\">        X509v3 extensions:</span><br><span class=\"line\">            X509v3 Key Usage: critical</span><br><span class=\"line\">                Digital Signature, Key Encipherment</span><br><span class=\"line\">            X509v3 Extended Key Usage:</span><br><span class=\"line\">                TLS Web Server Authentication, TLS Web Client Authentication</span><br><span class=\"line\">            X509v3 Basic Constraints: critical</span><br><span class=\"line\">                CA:FALSE</span><br><span class=\"line\">            X509v3 Subject Key Identifier:</span><br><span class=\"line\">                F2:E3:A5:CF:82:0A:72:A0:B3:67:28:DC:33:67:F9:6F:EA:8E:89:29</span><br><span class=\"line\">            X509v3 Authority Key Identifier:</span><br><span class=\"line\">                keyid:A8:4A:6A:63:04:7D:DD:BA:E6:D1:39:B7:A6:45:65:EF:F3:A8:EC:A1</span><br><span class=\"line\"></span><br><span class=\"line\">            Authority Information Access:</span><br><span class=\"line\">                OCSP - URI:http://ocsp.int-x3.letsencrypt.org</span><br><span class=\"line\">                CA Issuers - URI:http://cert.int-x3.letsencrypt.org/</span><br><span class=\"line\"></span><br><span class=\"line\">            X509v3 Subject Alternative Name:</span><br><span class=\"line\">                DNS:futu.im</span><br><span class=\"line\">            X509v3 Certificate Policies:</span><br><span class=\"line\">                Policy: 2.23.140.1.2.1</span><br><span class=\"line\">                Policy: 1.3.6.1.4.1.44947.1.1.1</span><br><span class=\"line\">                  CPS: http://cps.letsencrypt.org</span><br><span class=\"line\">                  User Notice:</span><br><span class=\"line\">                    Explicit Text: This Certificate may only be relied upon by Relying Parties and only in accordance with the Certificate Policy found at https://letsencrypt.org/repository/</span><br><span class=\"line\"></span><br><span class=\"line\">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class=\"line\">         90:9f:34:67:bc:3c:fb:fa:68:2e:97:38:04:bc:89:0a:bc:d0:</span><br><span class=\"line\">         a3:6d:e4:da:5a:ef:56:74:fd:ee:ff:ac:4a:e5:14:c9:b5:f6:</span><br><span class=\"line\">         8a:91:00:a8:42:be:8a:f6:e6:ba:0c:62:bf:f1:9f:a3:e6:e7:</span><br><span class=\"line\">         f0:b4:ab:9c:36:38:6f:81:b6:fd:eb:5f:8a:90:48:db:69:3b:</span><br><span class=\"line\">         03:61:b6:0f:84:e6:11:d3:b8:61:6f:9f:b6:da:16:3d:97:ae:</span><br><span class=\"line\">         a1:ed:21:1f:79:07:fb:95:06:d3:0c:89:d1:a7:fa:58:d0:b8:</span><br><span class=\"line\">         20:a8:2f:5e:51:77:91:e7:b2:b5:9d:f0:e8:d8:53:2b:c3:af:</span><br><span class=\"line\">         6c:de:c4:0a:24:dc:7d:25:31:31:af:a6:fd:9f:ea:44:82:ed:</span><br><span class=\"line\">         97:c5:74:d4:5c:11:3b:be:76:8d:3d:e8:9b:87:d7:d8:ad:21:</span><br><span class=\"line\">         95:82:16:cd:02:bd:12:3c:75:2b:43:c1:41:87:f9:b4:17:9e:</span><br><span class=\"line\">         df:0e:d9:ce:d9:e9:64:c8:23:a1:88:85:a8:25:82:4a:69:a4:</span><br><span class=\"line\">         51:6a:ad:6a:23:bf:7f:ba:98:5f:72:de:a4:25:29:10:e3:27:</span><br><span class=\"line\">         b5:00:16:60:08:0c:cc:f5:5b:88:df:5c:be:6b:10:3a:05:6a:</span><br><span class=\"line\">         61:01:c2:83:d5:88:b4:18:ca:cf:58:d7:14:58:1b:92:f4:69:</span><br><span class=\"line\">         b9:22:a2:3b</span><br></pre></td></tr></table></figure>\n<p>可以非常清楚地看到几个部分：</p>\n<ol>\n<li><code>Subject Public Key Info</code>表示服务器的公钥</li>\n<li><code>Subject</code>是服务器的身份，可以看到<code>CN=futu.im</code>字样，视不同的证书，<code>Subject</code>中还有可能包含更多信息</li>\n<li><code>Issuer</code>表示证书的签名机构（CA），最下方则是签名算法和签名出来的结果</li>\n</ol>\n<p>那CA又是什么东西呢？它其实就是一些内置在操作系统（浏览器）信任列表中的一些机构，每个机构都拥有自己的根证书，这些证书被操作系统（浏览器）无条件信任。当一个证书被CA签署后，操作系统（浏览器）就会信任这个证书所代表的身份。</p>\n<p>CA在签署证书的时候，都会做一些真实性验证，保证只有真实的网站拥有者才可以被签署。因此，当浏览器拿到一个被CA签署过的证书的时候，只要看一下这个CA是不是在信任列表中，就可以决定是否信任这个证书了。</p>\n<p>所以这就有了防中间人攻击的关键点：合法的证书是无法伪造的。如果中间人替换了这个证书，浏览器就不会信任这次握手，将中止通信。</p>\n<p>那么，在不替换证书的前提下，为什么中间人就无法拦截通信了呢？这是因为证书中包含了服务器的公钥，客户端会使用这个公钥加密信息，而这个信息只有拥有私钥的人才可以解密。很显然，只有真实的服务器才有这个私钥，因此中间人是无法解密了。</p>\n<h2 id=\"证书签发过程\"><a href=\"#证书签发过程\" class=\"headerlink\" title=\"证书签发过程\"></a>证书签发过程</h2><p>证书的签发过程大致分为几个步骤：</p>\n<ol>\n<li>生成私钥</li>\n<li>生成一个证书签名请求文件（CSR）</li>\n<li>对CSR进行签名，颁发证书</li>\n</ol>\n<p>第1步非常好理解，就是要生成一个后续通信中用于解密的私钥。私钥中不包含任何主体相关的信息，也就是说生成私钥时并不需要提供任何信息。</p>\n<p>第2步则需要提示主体相关信息，可能包括公司、城市、名称（CommonName，简称CN）等信息。这些信息是非常重要的，在HTTPS中，CommonName一般填写网站的域名，这是一个尤其重要的字段，因为它会作为通信过程中判断服务器证书是否合法的一个重要依据，即域名是否相符。在上方我们看到的证书信息中，主体<code>Subject</code>甚至只有这唯一的一个字段。</p>\n<p>具体而言，一个CSR文件包含三部分信息，一是主体信息和公钥，二是签名方法，三是签名。后两部分其实是为了保证CSR在传输过程中不被修改，以免导致CA被利用，产生滥发证书等问题。</p>\n<p>通过OpenSSL也可以查看一个CSR文件的具体信息：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -<span class=\"keyword\">in</span> ssltest.csr -noout -text</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Certificate Request:</span><br><span class=\"line\">    Data:</span><br><span class=\"line\">        Version: 0 (0x0)</span><br><span class=\"line\">        Subject: C=CN, ST=Guangdong, L=Shenzhen, O=futu, OU=futu, CN=ssltest.com/emailAddress=test@example.com</span><br><span class=\"line\">        Subject Public Key Info:</span><br><span class=\"line\">            Public Key Algorithm: rsaEncryption</span><br><span class=\"line\">                Public-Key: (1024 bit)</span><br><span class=\"line\">                Modulus:</span><br><span class=\"line\">                    00:b9:74:77:16:5a:8e:fd:94:22:70:bb:ee:56:46:</span><br><span class=\"line\">                    06:80:26:03:8d:03:4f:36:df:41:7d:28:aa:b6:2c:</span><br><span class=\"line\">                    d7:42:51:d6:28:e1:aa:c4:06:cd:32:22:bd:79:d0:</span><br><span class=\"line\">                    c0:3a:a2:d8:03:8e:38:45:b0:8c:2d:81:f0:b1:5c:</span><br><span class=\"line\">                    6a:97:ec:dc:bb:58:88:62:c3:bf:86:1c:e8:1a:45:</span><br><span class=\"line\">                    ca:50:ac:e6:5e:e2:d3:d5:dd:43:2d:35:05:e0:b8:</span><br><span class=\"line\">                    77:7f:e6:f2:82:37:32:15:1b:52:7f:64:d1:62:d6:</span><br><span class=\"line\">                    9f:ac:bb:ce:86:45:63:52:c5:4e:71:da:82:5b:94:</span><br><span class=\"line\">                    2e:62:fe:37:c6:47:e0:fe:af</span><br><span class=\"line\">                Exponent: 65537 (0x10001)</span><br><span class=\"line\">        Attributes:</span><br><span class=\"line\">            a0:00</span><br><span class=\"line\">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class=\"line\">         01:a2:21:62:6a:5c:03:c2:f8:1a:42:23:a9:d4:12:20:3c:9f:</span><br><span class=\"line\">         af:3c:f1:2c:f5:4d:f8:b6:c5:aa:f5:42:b7:b6:39:5c:a9:2c:</span><br><span class=\"line\">         cb:67:2c:99:1a:85:94:73:05:ce:9a:11:4e:fd:d1:29:f4:ae:</span><br><span class=\"line\">         b9:19:22:bb:ad:53:9c:02:db:04:c0:6f:79:44:37:b0:bd:34:</span><br><span class=\"line\">         8f:96:37:6d:a2:2d:49:aa:62:d1:75:2f:eb:b7:08:6b:d8:f5:</span><br><span class=\"line\">         d1:db:16:7b:2f:9c:fd:c9:85:36:3c:2f:15:67:08:45:9d:1d:</span><br><span class=\"line\">         a2:50:6e:f5:f4:3b:4a:d6:5c:50:5f:6c:ef:d1:f7:79:33:42:</span><br><span class=\"line\">         81:8a</span><br></pre></td></tr></table></figure>\n<p>我们可以非常清楚地看到，一个CSR文件中包含了主体信息和公钥。</p>\n<p>CA在拿到CSR文件之后就会去做一些合法性判断，例如判断域名（CommonName）所有者是不是你之类的，如果确定合法之后，就会使用CA自己的私钥对提交上来的这个公钥和主体进行签名，从而产生一张证书。</p>\n<p>我们看到CSR文件的信息和证书的信息非常像，主要就是缺少了最后的签名部分。（当然还有extensions部分，稍后说明。）</p>\n<h2 id=\"无CA时自签名（根）证书\"><a href=\"#无CA时自签名（根）证书\" class=\"headerlink\" title=\"无CA时自签名（根）证书\"></a>无CA时自签名（根）证书</h2><p>事实上，CA也没有什么很神秘的地方，它最重要的东西也是一个私钥和一个自己签名的证书。拥有这一对私钥和证书，我们就完全可以充当一个CA了。（是否被信任是另一回事。）</p>\n<p>因此，我们完全可以自己生成这样一对私钥和证书。只要将这个证书加入到系统（浏览器）的信任列表中，就可以被信任了。</p>\n<p>下面是windows机器设置信任根证书的方法，注意第二步中，一定要选择“受信任的根证书颁发机构”这一项才能生效。</p>\n<p><img src=\"/images/2017-07-17-https-certificate/04-win_ca_install.png\" alt=\"windows安装CA证书\"></p>\n<p><img src=\"/images/2017-07-17-https-certificate/05-win_ca_save.png\" alt=\"windows安装CA证书\"></p>\n<p>Mac下设置信任的方法：</p>\n<p><img src=\"/images/2017-07-17-https-certificate/06-mac_ca_trust.png\" alt=\"Mac信任根证书\"></p>\n<p>如果我们将证书的CommonName和网站的域名设置成一致的，我们就可以直接拿这个根证书去配置HTTPS服务了。</p>\n<p><img src=\"/images/2017-07-17-https-certificate/07-ca_root_trust.png\" alt=\"根证书直接配置HTTPS\"></p>\n<p>可以看到，此时证书只有一级，即根证书，但是因为根证书的CommonName就用的ssltest.com，因此被信任了。</p>\n<p>直接将CA证书用于网站HTTPS配置的话，优点是操作非常简单，不用考虑CA什么的。缺点也很明显：</p>\n<ol>\n<li>每一个不同的域名都需要一个不同的根证书</li>\n<li>每个根证书都需要在系统（浏览器）设置一次信任</li>\n</ol>\n<h2 id=\"使用CA自签名证书\"><a href=\"#使用CA自签名证书\" class=\"headerlink\" title=\"使用CA自签名证书\"></a>使用CA自签名证书</h2><p>如果我们把上一步的证书当成根证书来用，而不是直接用来配置服务器，我们就有了一个CA。</p>\n<p>接下来我们需要配置网站的时候，就需要再生成一个私钥和CSR，然后由CA对CSR中的主体和公钥进行签名，得到一个证书。这样就有了一个CA签名的证书，可以用于服务器的配置。</p>\n<p><img src=\"/images/2017-07-17-https-certificate/08-ca_signed_cert.png\" alt=\"根证书签名后受信任\"></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>至此，我们比较详细地了解了HTTPS的通信过程以及安全机制。中间涉及到了私钥、公钥、CA、签名等比较重要的概念。<a href=\"/posts/2017-08-03-https-certificate/\">下一篇</a>中，我们将看到如何使用OpenSSL进行自签名证书。</p>\n","site":{"data":{}},"excerpt":"<p>HTTPS 全称 HTTP over SSL，即工作于SSL层之上的HTTP协议。它对开发者和使用者是透明的，只是数据传输部分是加密的。</p>\n<p>SSL分为 1.0 / 2.0 / 3.0 等很多版本，随着时间的推移，它也变得越来越不安全，因此现在我们通常使用更安全的 TLS 协议。TLS 协议也有不同版本，目前最新最安全的是 TLS 1.2 。一般情况下，我们不会具体区别 SSL 和 TLS，现在很多场合提到的 SSL 其实也是 TLS 协议。</p>\n<h2 id=\"HTTPS安全浏览\"><a href=\"#HTTPS安全浏览\" class=\"headerlink\" title=\"HTTPS安全浏览\"></a>HTTPS安全浏览</h2><p><img src=\"/images/2017-07-17-https-certificate/01-demo.png\" alt=\"HTTPS安全浏览\"></p>\n<p>如果我们正在浏览的网页是安全的 HTTPS 网页，则大部分浏览器会显示一把绿色的锁，表示这是加密的连接，且通信过程是安全的。</p>\n<p>而要让浏览器认为这个网页是安全的，则需要满足以下几个条件：</p>\n<ol>\n<li>HTTPS 协议访问</li>\n<li>服务端出具的证书内容正确（域名、签名方式等正确）</li>\n<li>服务端出具的证书由 CA（数字证书中心） 签发</li>\n<li>签发证书的 CA 在浏览器（或操作系统）的受信任列表中</li>\n</ol>\n<p>所谓的 CA（数字证书中心）一般是一个机构，它们被内置在浏览器或操作系统的受信任列表中。一个证书只有被 CA 签名过（也叫由 CA 签发的证书），浏览器才可能在受信任列表中找到它对应的 CA ，然后判断是否应该信任这个证书。</p>\n<blockquote>\n<p>事实上第3点和第4点并不完全准确，如果一个证书不是由 CA 签发的，但是存在于浏览器（或操作系统）的受信任列表中，那么它事实上相当于一个CA的根证书，也会被认为是安全的。</p>\n<p>但是，在实际操作中，几乎没有这样的案例，因为几乎没有 CA 会直接拿自己的根证书来让某个网站使用。</p>\n</blockquote>","more":"<h2 id=\"HTTPS服务器的搭建\"><a href=\"#HTTPS服务器的搭建\" class=\"headerlink\" title=\"HTTPS服务器的搭建\"></a>HTTPS服务器的搭建</h2><p>在 Node.js 中配置一个 HTTPS 服务器非常简单。Node.js底层引入了OpenSSL开源库，并直接提供了<code>https</code>模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入https模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建HTTPS服务需要私钥和证书文件</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> options = &#123;</span><br><span class=\"line\">  key: fs.readFileSync(<span class=\"string\">'./server.key'</span>), <span class=\"comment\">//私钥</span></span><br><span class=\"line\">  cert: fs.readFileSync(<span class=\"string\">'./server.crt'</span>) <span class=\"comment\">//数字证书</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建HTTPS服务器</span></span><br><span class=\"line\">https.createServer(options , (req , res)=&gt;&#123;</span><br><span class=\"line\">  res.writeHead(<span class=\"number\">200</span>);</span><br><span class=\"line\">  res.end(<span class=\"string\">'https is working'</span>);</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">443</span>);</span><br></pre></td></tr></table></figure>\n<p>可以发现创建https服务器比我们熟悉的创建http服务器要多一个<code>options</code>参数。<code>options</code>里面包含的是https服务器的私钥和数字证书。</p>\n<p>如果使用<code>nginx</code>来创建https服务器，则可能是这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name  ssltest.com;</span><br><span class=\"line\">    index index.html index.htm;</span><br><span class=\"line\">    root /data/ssltest;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate /data/ssltest.crt;</span><br><span class=\"line\">    ssl_certificate_key     /data/ssltest.key;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样，在上方的配置文件中，需要使用<code>ssl_certificate_key</code>和<code>ssl_certificate</code>来指定私钥和数字证书。</p>\n<p>问题来了：私钥和数字证书分别是什么？</p>\n<h2 id=\"科普：HTTPS相关知识\"><a href=\"#科普：HTTPS相关知识\" class=\"headerlink\" title=\"科普：HTTPS相关知识\"></a>科普：HTTPS相关知识</h2><p>本文将介绍一些与我们接下来生成证书相关的知识。为了简单起见，有一些和实际操作关系不大的、理论性比较强的内容忽略不计。</p>\n<h3 id=\"HTTPS是如何通信的？\"><a href=\"#HTTPS是如何通信的？\" class=\"headerlink\" title=\"HTTPS是如何通信的？\"></a>HTTPS是如何通信的？</h3><p>我们都知道HTTPS是加密通信的，但是对于具体的过程，却并不是人人都知道。事实上，HTTPS的通信过程，大致上可以分为握手（非对称加密）和通信（对称加密）两个过程。</p>\n<p>握手的部分是使用非对称加密的。既然是非对称加密，就会涉及到公钥、私钥的问题。在经典的非对称加密体系中，公钥用来加密，私钥用来签名，也即如果A同学要向B同学发一个加密信息，那么A同学必须拥有B同学的公钥。同理，如果B同学也要向A同学发加密信息，他也必须拥有A同学的公钥。</p>\n<p>在HTTPS中，也是同样的情况，如果双向通信都需要加密的话，那么服务端和客户端各需要一套密钥（私钥+公钥）。而事实上，在握手的部分，客户端的密钥是可选的，常见的HTTPS通信中都没有客户端密钥的参与。那这个过程具体是怎样的呢？</p>\n<ol>\n<li>客户端向服务端打个招呼，并告诉服务端，自己要访问哪个域名（SNI），这一步是不加密的</li>\n<li>服务端向客户端打招呼，出示自己的证书，同时证书中包含了服务端的公钥，这一步也是不加密的</li>\n<li>客户端验证服务端的证书是否合法，如果不合法就中止请求并报错</li>\n<li>客户端生成一个后续使用密钥（用于对称加密），使用服务端的公钥对这个密钥进行加密，发送到服务端</li>\n<li>服务端对上一步客户端发来的加密消息进行解密并验证</li>\n</ol>\n<p>接下来，就使用对称加密来通信了。</p>\n<p><img src=\"/images/2017-07-17-https-certificate/02-steps.png\" alt=\"HTTPS握手步骤\"></p>\n<h3 id=\"如何确定通信是安全的\"><a href=\"#如何确定通信是安全的\" class=\"headerlink\" title=\"如何确定通信是安全的\"></a>如何确定通信是安全的</h3><p>在这个过程中涉及到很多我们接下来会接触到的知识点。</p>\n<p>首先，服务端用于加密通信的私钥和公钥都是由自己生成的，稍后我们将看到具体的生成方式。但是，我们从一开始到现在出现过很多次的所谓“证书”是什么呢？以及客户端又是如何验证这个证书是否合法的呢？</p>\n<p>我们可以想象一下，如果在客户端和服务端中间，存在一个中间人，就像代理一样。对于客户端来说，它是服务端，对于服务端来说，它又是客户端。这样它就可以两边同时通信，直接窃听整个通信过程，这样我们的加密就毫无意义了。因此必须要有一种机制，来防止中间人攻击。而证书正是这样一种身份验证的机制。</p>\n<p><img src=\"/images/2017-07-17-https-certificate/03-mith.jpg\" alt=\"中间人攻击示意图\"></p>\n<p>具体而言，证书大约等于“公钥+身份+签名”三部分。身份主要就是服务器的相关信息，其中一个非常重要的信息就是域名。而签名的过程则是数字证书中心（CA）对身份表示认可，然后使用自己的私钥对这个身份进行签署，表示“我（CA）证明，这个身份是真的”。</p>\n<p>使用OpenSSL可以非常方便地查看证书：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -<span class=\"keyword\">in</span> futu.im.crt -noout -text</span><br></pre></td></tr></table></figure>\n<p>如果证书格式是没有BASE64编码过的，则可能是<code>DER</code>二进制格式，需要加一个参数：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -inform der -<span class=\"keyword\">in</span> futu.im.crt -noout -text</span><br></pre></td></tr></table></figure>\n<p>下面是<a href=\"https://futu.im\">https://futu.im</a>的证书：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Certificate:</span><br><span class=\"line\">    Data:</span><br><span class=\"line\">        Version: 3 (0x2)</span><br><span class=\"line\">        Serial Number:</span><br><span class=\"line\">            03:8b:7b:f9:68:43:6c:c9:0f:8b:c9:24:42:ea:78:b6:05:51</span><br><span class=\"line\">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class=\"line\">        Issuer: C=US, O=Let&apos;s Encrypt, CN=Let&apos;s Encrypt Authority X3</span><br><span class=\"line\">        Validity</span><br><span class=\"line\">            Not Before: Jul 20 09:21:00 2017 GMT</span><br><span class=\"line\">            Not After : Oct 18 09:21:00 2017 GMT</span><br><span class=\"line\">        Subject: CN=futu.im</span><br><span class=\"line\">        Subject Public Key Info:</span><br><span class=\"line\">            Public Key Algorithm: rsaEncryption</span><br><span class=\"line\">                Public-Key: (2048 bit)</span><br><span class=\"line\">                Modulus:</span><br><span class=\"line\">                    00:db:b4:f5:9d:31:d0:7b:1b:76:c0:3a:06:30:a1:</span><br><span class=\"line\">                    da:a9:33:e9:1d:3e:d3:bf:8a:15:d3:b0:17:21:77:</span><br><span class=\"line\">                    2f:e3:f4:59:f9:96:79:a2:b0:80:0c:01:a1:04:4e:</span><br><span class=\"line\">                    b7:c1:fc:da:e6:d0:79:8f:5c:25:64:48:31:58:07:</span><br><span class=\"line\">                    48:fb:19:3e:ae:33:5b:22:73:e3:de:6f:f6:b4:d0:</span><br><span class=\"line\">                    a2:27:26:73:ce:20:4c:d1:05:fc:c8:5e:8a:f4:aa:</span><br><span class=\"line\">                    d0:88:ae:35:db:3e:c5:8d:f7:4c:6d:64:ad:98:fc:</span><br><span class=\"line\">                    63:70:90:a9:68:78:2a:72:df:56:93:ac:65:df:1e:</span><br><span class=\"line\">                    2c:61:ae:bf:a9:d7:32:ff:70:ea:1c:ff:76:60:81:</span><br><span class=\"line\">                    da:55:69:c7:d9:8c:b4:04:ea:85:84:4e:3e:22:dc:</span><br><span class=\"line\">                    e9:c4:56:7d:12:4b:8f:f0:93:9b:5d:0f:e1:ee:e7:</span><br><span class=\"line\">                    37:82:0d:32:41:9e:87:b5:e6:91:2b:b4:28:79:f7:</span><br><span class=\"line\">                    0e:99:d1:86:13:87:1d:fc:6f:c5:38:fd:38:0e:b0:</span><br><span class=\"line\">                    5e:b8:ca:b7:e1:fe:7a:86:86:88:8d:1d:e7:0d:cc:</span><br><span class=\"line\">                    79:82:b2:dd:e2:3d:b7:cc:3b:31:bd:fd:55:12:d8:</span><br><span class=\"line\">                    ab:35:e1:8d:2b:3e:a8:2a:1c:9c:69:5b:15:0f:14:</span><br><span class=\"line\">                    7b:6a:55:03:61:aa:a1:30:c8:a6:5d:c4:92:f9:e5:</span><br><span class=\"line\">                    32:01</span><br><span class=\"line\">                Exponent: 65537 (0x10001)</span><br><span class=\"line\">        X509v3 extensions:</span><br><span class=\"line\">            X509v3 Key Usage: critical</span><br><span class=\"line\">                Digital Signature, Key Encipherment</span><br><span class=\"line\">            X509v3 Extended Key Usage:</span><br><span class=\"line\">                TLS Web Server Authentication, TLS Web Client Authentication</span><br><span class=\"line\">            X509v3 Basic Constraints: critical</span><br><span class=\"line\">                CA:FALSE</span><br><span class=\"line\">            X509v3 Subject Key Identifier:</span><br><span class=\"line\">                F2:E3:A5:CF:82:0A:72:A0:B3:67:28:DC:33:67:F9:6F:EA:8E:89:29</span><br><span class=\"line\">            X509v3 Authority Key Identifier:</span><br><span class=\"line\">                keyid:A8:4A:6A:63:04:7D:DD:BA:E6:D1:39:B7:A6:45:65:EF:F3:A8:EC:A1</span><br><span class=\"line\"></span><br><span class=\"line\">            Authority Information Access:</span><br><span class=\"line\">                OCSP - URI:http://ocsp.int-x3.letsencrypt.org</span><br><span class=\"line\">                CA Issuers - URI:http://cert.int-x3.letsencrypt.org/</span><br><span class=\"line\"></span><br><span class=\"line\">            X509v3 Subject Alternative Name:</span><br><span class=\"line\">                DNS:futu.im</span><br><span class=\"line\">            X509v3 Certificate Policies:</span><br><span class=\"line\">                Policy: 2.23.140.1.2.1</span><br><span class=\"line\">                Policy: 1.3.6.1.4.1.44947.1.1.1</span><br><span class=\"line\">                  CPS: http://cps.letsencrypt.org</span><br><span class=\"line\">                  User Notice:</span><br><span class=\"line\">                    Explicit Text: This Certificate may only be relied upon by Relying Parties and only in accordance with the Certificate Policy found at https://letsencrypt.org/repository/</span><br><span class=\"line\"></span><br><span class=\"line\">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class=\"line\">         90:9f:34:67:bc:3c:fb:fa:68:2e:97:38:04:bc:89:0a:bc:d0:</span><br><span class=\"line\">         a3:6d:e4:da:5a:ef:56:74:fd:ee:ff:ac:4a:e5:14:c9:b5:f6:</span><br><span class=\"line\">         8a:91:00:a8:42:be:8a:f6:e6:ba:0c:62:bf:f1:9f:a3:e6:e7:</span><br><span class=\"line\">         f0:b4:ab:9c:36:38:6f:81:b6:fd:eb:5f:8a:90:48:db:69:3b:</span><br><span class=\"line\">         03:61:b6:0f:84:e6:11:d3:b8:61:6f:9f:b6:da:16:3d:97:ae:</span><br><span class=\"line\">         a1:ed:21:1f:79:07:fb:95:06:d3:0c:89:d1:a7:fa:58:d0:b8:</span><br><span class=\"line\">         20:a8:2f:5e:51:77:91:e7:b2:b5:9d:f0:e8:d8:53:2b:c3:af:</span><br><span class=\"line\">         6c:de:c4:0a:24:dc:7d:25:31:31:af:a6:fd:9f:ea:44:82:ed:</span><br><span class=\"line\">         97:c5:74:d4:5c:11:3b:be:76:8d:3d:e8:9b:87:d7:d8:ad:21:</span><br><span class=\"line\">         95:82:16:cd:02:bd:12:3c:75:2b:43:c1:41:87:f9:b4:17:9e:</span><br><span class=\"line\">         df:0e:d9:ce:d9:e9:64:c8:23:a1:88:85:a8:25:82:4a:69:a4:</span><br><span class=\"line\">         51:6a:ad:6a:23:bf:7f:ba:98:5f:72:de:a4:25:29:10:e3:27:</span><br><span class=\"line\">         b5:00:16:60:08:0c:cc:f5:5b:88:df:5c:be:6b:10:3a:05:6a:</span><br><span class=\"line\">         61:01:c2:83:d5:88:b4:18:ca:cf:58:d7:14:58:1b:92:f4:69:</span><br><span class=\"line\">         b9:22:a2:3b</span><br></pre></td></tr></table></figure>\n<p>可以非常清楚地看到几个部分：</p>\n<ol>\n<li><code>Subject Public Key Info</code>表示服务器的公钥</li>\n<li><code>Subject</code>是服务器的身份，可以看到<code>CN=futu.im</code>字样，视不同的证书，<code>Subject</code>中还有可能包含更多信息</li>\n<li><code>Issuer</code>表示证书的签名机构（CA），最下方则是签名算法和签名出来的结果</li>\n</ol>\n<p>那CA又是什么东西呢？它其实就是一些内置在操作系统（浏览器）信任列表中的一些机构，每个机构都拥有自己的根证书，这些证书被操作系统（浏览器）无条件信任。当一个证书被CA签署后，操作系统（浏览器）就会信任这个证书所代表的身份。</p>\n<p>CA在签署证书的时候，都会做一些真实性验证，保证只有真实的网站拥有者才可以被签署。因此，当浏览器拿到一个被CA签署过的证书的时候，只要看一下这个CA是不是在信任列表中，就可以决定是否信任这个证书了。</p>\n<p>所以这就有了防中间人攻击的关键点：合法的证书是无法伪造的。如果中间人替换了这个证书，浏览器就不会信任这次握手，将中止通信。</p>\n<p>那么，在不替换证书的前提下，为什么中间人就无法拦截通信了呢？这是因为证书中包含了服务器的公钥，客户端会使用这个公钥加密信息，而这个信息只有拥有私钥的人才可以解密。很显然，只有真实的服务器才有这个私钥，因此中间人是无法解密了。</p>\n<h2 id=\"证书签发过程\"><a href=\"#证书签发过程\" class=\"headerlink\" title=\"证书签发过程\"></a>证书签发过程</h2><p>证书的签发过程大致分为几个步骤：</p>\n<ol>\n<li>生成私钥</li>\n<li>生成一个证书签名请求文件（CSR）</li>\n<li>对CSR进行签名，颁发证书</li>\n</ol>\n<p>第1步非常好理解，就是要生成一个后续通信中用于解密的私钥。私钥中不包含任何主体相关的信息，也就是说生成私钥时并不需要提供任何信息。</p>\n<p>第2步则需要提示主体相关信息，可能包括公司、城市、名称（CommonName，简称CN）等信息。这些信息是非常重要的，在HTTPS中，CommonName一般填写网站的域名，这是一个尤其重要的字段，因为它会作为通信过程中判断服务器证书是否合法的一个重要依据，即域名是否相符。在上方我们看到的证书信息中，主体<code>Subject</code>甚至只有这唯一的一个字段。</p>\n<p>具体而言，一个CSR文件包含三部分信息，一是主体信息和公钥，二是签名方法，三是签名。后两部分其实是为了保证CSR在传输过程中不被修改，以免导致CA被利用，产生滥发证书等问题。</p>\n<p>通过OpenSSL也可以查看一个CSR文件的具体信息：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -<span class=\"keyword\">in</span> ssltest.csr -noout -text</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Certificate Request:</span><br><span class=\"line\">    Data:</span><br><span class=\"line\">        Version: 0 (0x0)</span><br><span class=\"line\">        Subject: C=CN, ST=Guangdong, L=Shenzhen, O=futu, OU=futu, CN=ssltest.com/emailAddress=test@example.com</span><br><span class=\"line\">        Subject Public Key Info:</span><br><span class=\"line\">            Public Key Algorithm: rsaEncryption</span><br><span class=\"line\">                Public-Key: (1024 bit)</span><br><span class=\"line\">                Modulus:</span><br><span class=\"line\">                    00:b9:74:77:16:5a:8e:fd:94:22:70:bb:ee:56:46:</span><br><span class=\"line\">                    06:80:26:03:8d:03:4f:36:df:41:7d:28:aa:b6:2c:</span><br><span class=\"line\">                    d7:42:51:d6:28:e1:aa:c4:06:cd:32:22:bd:79:d0:</span><br><span class=\"line\">                    c0:3a:a2:d8:03:8e:38:45:b0:8c:2d:81:f0:b1:5c:</span><br><span class=\"line\">                    6a:97:ec:dc:bb:58:88:62:c3:bf:86:1c:e8:1a:45:</span><br><span class=\"line\">                    ca:50:ac:e6:5e:e2:d3:d5:dd:43:2d:35:05:e0:b8:</span><br><span class=\"line\">                    77:7f:e6:f2:82:37:32:15:1b:52:7f:64:d1:62:d6:</span><br><span class=\"line\">                    9f:ac:bb:ce:86:45:63:52:c5:4e:71:da:82:5b:94:</span><br><span class=\"line\">                    2e:62:fe:37:c6:47:e0:fe:af</span><br><span class=\"line\">                Exponent: 65537 (0x10001)</span><br><span class=\"line\">        Attributes:</span><br><span class=\"line\">            a0:00</span><br><span class=\"line\">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class=\"line\">         01:a2:21:62:6a:5c:03:c2:f8:1a:42:23:a9:d4:12:20:3c:9f:</span><br><span class=\"line\">         af:3c:f1:2c:f5:4d:f8:b6:c5:aa:f5:42:b7:b6:39:5c:a9:2c:</span><br><span class=\"line\">         cb:67:2c:99:1a:85:94:73:05:ce:9a:11:4e:fd:d1:29:f4:ae:</span><br><span class=\"line\">         b9:19:22:bb:ad:53:9c:02:db:04:c0:6f:79:44:37:b0:bd:34:</span><br><span class=\"line\">         8f:96:37:6d:a2:2d:49:aa:62:d1:75:2f:eb:b7:08:6b:d8:f5:</span><br><span class=\"line\">         d1:db:16:7b:2f:9c:fd:c9:85:36:3c:2f:15:67:08:45:9d:1d:</span><br><span class=\"line\">         a2:50:6e:f5:f4:3b:4a:d6:5c:50:5f:6c:ef:d1:f7:79:33:42:</span><br><span class=\"line\">         81:8a</span><br></pre></td></tr></table></figure>\n<p>我们可以非常清楚地看到，一个CSR文件中包含了主体信息和公钥。</p>\n<p>CA在拿到CSR文件之后就会去做一些合法性判断，例如判断域名（CommonName）所有者是不是你之类的，如果确定合法之后，就会使用CA自己的私钥对提交上来的这个公钥和主体进行签名，从而产生一张证书。</p>\n<p>我们看到CSR文件的信息和证书的信息非常像，主要就是缺少了最后的签名部分。（当然还有extensions部分，稍后说明。）</p>\n<h2 id=\"无CA时自签名（根）证书\"><a href=\"#无CA时自签名（根）证书\" class=\"headerlink\" title=\"无CA时自签名（根）证书\"></a>无CA时自签名（根）证书</h2><p>事实上，CA也没有什么很神秘的地方，它最重要的东西也是一个私钥和一个自己签名的证书。拥有这一对私钥和证书，我们就完全可以充当一个CA了。（是否被信任是另一回事。）</p>\n<p>因此，我们完全可以自己生成这样一对私钥和证书。只要将这个证书加入到系统（浏览器）的信任列表中，就可以被信任了。</p>\n<p>下面是windows机器设置信任根证书的方法，注意第二步中，一定要选择“受信任的根证书颁发机构”这一项才能生效。</p>\n<p><img src=\"/images/2017-07-17-https-certificate/04-win_ca_install.png\" alt=\"windows安装CA证书\"></p>\n<p><img src=\"/images/2017-07-17-https-certificate/05-win_ca_save.png\" alt=\"windows安装CA证书\"></p>\n<p>Mac下设置信任的方法：</p>\n<p><img src=\"/images/2017-07-17-https-certificate/06-mac_ca_trust.png\" alt=\"Mac信任根证书\"></p>\n<p>如果我们将证书的CommonName和网站的域名设置成一致的，我们就可以直接拿这个根证书去配置HTTPS服务了。</p>\n<p><img src=\"/images/2017-07-17-https-certificate/07-ca_root_trust.png\" alt=\"根证书直接配置HTTPS\"></p>\n<p>可以看到，此时证书只有一级，即根证书，但是因为根证书的CommonName就用的ssltest.com，因此被信任了。</p>\n<p>直接将CA证书用于网站HTTPS配置的话，优点是操作非常简单，不用考虑CA什么的。缺点也很明显：</p>\n<ol>\n<li>每一个不同的域名都需要一个不同的根证书</li>\n<li>每个根证书都需要在系统（浏览器）设置一次信任</li>\n</ol>\n<h2 id=\"使用CA自签名证书\"><a href=\"#使用CA自签名证书\" class=\"headerlink\" title=\"使用CA自签名证书\"></a>使用CA自签名证书</h2><p>如果我们把上一步的证书当成根证书来用，而不是直接用来配置服务器，我们就有了一个CA。</p>\n<p>接下来我们需要配置网站的时候，就需要再生成一个私钥和CSR，然后由CA对CSR中的主体和公钥进行签名，得到一个证书。这样就有了一个CA签名的证书，可以用于服务器的配置。</p>\n<p><img src=\"/images/2017-07-17-https-certificate/08-ca_signed_cert.png\" alt=\"根证书签名后受信任\"></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>至此，我们比较详细地了解了HTTPS的通信过程以及安全机制。中间涉及到了私钥、公钥、CA、签名等比较重要的概念。<a href=\"/posts/2017-08-03-https-certificate/\">下一篇</a>中，我们将看到如何使用OpenSSL进行自签名证书。</p>"},{"title":"HTTPS自建CA及自签名证书不完全指南（实战篇）","date":"2017-08-03T10:00:00.000Z","author":"Jin","_content":"\n在[上一篇](/posts/2017-07-17-https-certificate/)文章中，我们讲解了HTTPS自建CA及自签名证书相关的一些理论知识。本文将使用OpenSSL进行实战。\n\n首先，需要安装好OpenSSL。Mac / Linux都有内置OpenSSL，但是版本并不是很新，建议自己再安装一个新版。\n\nMac可以使用homebrew进行安装，Linux可以通过包管理工具安装。Windows安装略麻烦一些，可以参考其它教程。也可以查看[这里](https://wiki.openssl.org/index.php/Binaries)试一下第三方提供的二进制包。\n\n<!-- more -->\n\n## CA和根证书\n\n之前我们说过，CA也就是需要一个私钥和一个证书。而证书的生成需要首先有CSR，然后有私钥签名。因此大致过程如下：\n\n### 第一步 生成CA私钥\n\n```sh\nopenssl genrsa -out ca.key 1024\n```\n\n这样就得到了一个名为`ca.key`的私钥。\n\n### 第二步 生成CSR\n\n```sh\nopenssl req -new -key ca.key -out ca.csr -sha256\n```\n\n这一步会要求输入一些信息，按提示输入即可。需要注意的是，如果你想直接用根证书来配置服务器，那么Common Name一项必须填写域名，否则可以随意填写。最后，在空一行之后出现的`extra`可以直接回车，不用填。\n\n![生成CSR](/images/2017-08-03-https-certificate/01-ca_key.png)\n\n### 第三步 生成证书\n\n生成证书的过程即是CA使用私钥对CSR进行签名的过程。在这里我们使用CA自己的证书对自己的CSR进行签名，即可得到根证书：\n\n```sh\nopenssl x509 -req -in ca.csr -signkey ca.key -out ca.crt -sha256\n```\n\n默认情况下，证书的有效期是一个月。一般我们会通过`-days`参数（单位为天）将CA证书的有效期设得比较长，以免需要不时去更换：\n\n```sh\nopenssl x509 -req -in ca.csr -signkey ca.key -out ca.crt -sha256 -days 3650\n```\n\n至此我们就有了作为CA使用的私钥和根证书。\n\n> 2017-11-09更新：在实际使用过程中，发现这样生成的证书无法被正确安装到Android设备上，需要补充一下ext信息。\n\n准备一个ca.ext文件\n\n```\nbasicConstraints=CA:FALSE\n```\n\n然后在生成证书的时候带上`-ext`选项：\n\n```sh\nopenssl x509 -req -in ca.csr -signkey ca.key -out ca.crt -sha256 -days 3650 -ext ca.ext\n```\n\n## 使用CA签发证书\n\n前文说过，直接使用CA配置服务器并不是很方便，因为要为每个证书配置信任关系。更好的方式是生成一次根证书，然后使用根证书的私钥为不同的域名签署不同的证书。具体的步骤和生成CA证书基本一致，只有最后签名的一步略有不同。\n\n### 生成私钥\n\n```sh\nopenssl genrsa -out server.key 1024\n```\n\n### 生成CSR\n\n```sh\nopenssl req -new -key server.key -out server.csr -sha256\n```\n\n同样的需要填写一些信息，最重要的是`CommonName`需要填对。如果你的证书要在多个域名上使用的话，`CommonName`可以只填写一个，其余的到`.ext`中去指定。\n\n### 准备server.ext文件\n\n```\nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage=digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName=@alt_names\n\n[alt_names]\nDNS.1=ssltest.com\n```\n\n如果有多个域名的话，分别在`[alt_names]`中指定，一行一个。\n\n### 签署证书\n\n```sh\nopenssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -extfile server.ext -sha256 -days 365\n```\n\n这一步和生成根证书的命令略有不同。\n\n首先我们看到多了`-CA`和`-CAkey`两个参数，分别对应前面生成的CA私钥和CA根证书。表示需要使用CA的私钥来进行签名。\n\n然后，因为我们指定了CA，所以不再需要`-signkey`参数。\n\n最后，多了一个`CAcreateserial`参数。这个参数的作用是用来生成一个`ca.srl`文件。而这个文件的作用是记录当前CA生成的证书的序列号。而如果再次在同样的位置进行命令，OpenSSL会去读取这个文件中的序列号，并自动`+1`作为下一个证书的序列号。\n\n这样，我们就有了服务器的私钥和证书，可以用于配置服务器了。\n\n![根证书签名后的证书受信任](/images/2017-08-03-https-certificate/03-ca_signed_cert.png)\n\nok ， 大功告成！！！！！\n\n## 附：根证书直接使用\n\n> 注：大部分情况下我们不会拿CA根证书直接用于服务器配置，因此可以不用看本节内容。如果你一定要拿CA证书配置服务器的话，往下看。\n\n前面说过，如果我们在CSR中指定了`CommonName`，是可以直接拿根证书去配置服务器的。但是如果我们将这个证书加入操作系统信任列表，并配置服务器之后，浏览器仍然会报不信任：\n\n![根证书不受信任](/images/2017-08-03-https-certificate/02-ca_cert_invalid.png)\n\n我们可以看到浏览器给出了“Subject Alternative Name Missing”的错误。查看证书的话，内容如下：\n\n```\nCertificate:\n    Data:\n        Version: 1 (0x0)\n        Serial Number:\n            ec:97:d7:aa:0e:33:89:f8\n    Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C=CN, ST=Guangdong, L=Shenzhen, O=TooBug, OU=TooBug, CN=toobug.net/emailAddress=i@toobug.net\n        Validity\n            Not Before: Aug  3 08:12:18 2017 GMT\n            Not After : Sep  2 08:12:18 2017 GMT\n        Subject: C=CN, ST=Guangdong, L=Shenzhen, O=TooBug, OU=TooBug, CN=toobug.net/emailAddress=i@toobug.net\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (1024 bit)\n                Modulus:\n                    00:cb:cf:c8:80:d4:39:6e:0c:17:9c:87:1a:4b:c7:\n                    8b:0c:9b:9e:fc:fb:f7:b2:ef:80:e3:90:40:74:a9:\n                    47:f3:e0:9b:d0:d2:f5:e3:e4:31:b7:40:9e:47:6e:\n                    f6:07:68:39:d0:c7:0b:0f:8e:1e:54:ef:0b:c6:4e:\n                    65:17:69:d8:64:7f:8c:80:4d:be:55:10:4f:df:47:\n                    5e:6b:c8:f0:d4:3e:94:32:1a:45:80:c9:73:b2:87:\n                    09:d1:b0:59:b7:e5:38:50:5b:26:dc:fc:d2:6c:d9:\n                    d5:5e:10:2b:1a:a7:b1:61:c1:87:02:5d:f7:70:d5:\n                    95:d7:0d:04:02:8c:37:fd:89\n                Exponent: 65537 (0x10001)\n    Signature Algorithm: sha256WithRSAEncryption\n         22:8e:5a:49:4b:8b:59:f9:ca:ae:92:cc:d7:7a:e8:50:21:41:\n         35:18:11:d3:82:89:df:8f:8f:3d:39:c8:b2:bc:9b:53:17:89:\n         e0:47:85:22:bf:31:c1:47:3a:80:cb:a7:12:00:a9:2c:78:2c:\n         02:27:15:19:2a:85:41:f0:78:4b:78:20:fd:51:69:b8:ff:5d:\n         af:fc:6c:26:ab:04:33:50:43:a6:91:51:17:a6:47:e4:51:70:\n         09:9f:e6:80:88:2d:82:60:22:ec:a1:df:55:2c:c0:43:47:07:\n         e7:6c:0c:b5:ac:ba:23:a1:75:50:8a:90:e1:c6:53:7d:49:d2:\n         3b:a5\n```\n\n和我们前面看过的证书相比，根证书缺少了`X509v3 extensions:`这一节，其中非常重要的一个字段就是`X509v3 Subject Alternative Name:`。这正是导致浏览器报错的原因。\n\n事实上公钥证书体系的应用十分广泛，并不只是在HTTPS中使用。在某些特定的场景下，可能需要一些特定的信息，例如HTTPS下，就需要服务器端的主体信息（域名等）。为了应对这些特殊的场景，X509证书体系引入了扩展字段的概念，也就是`X509v3 extensions`的含义。\n\n我们之前生成的证书并没有包含这个扩展字段，所以才导致浏览器不信任这个证书。所以如果根证书直接用于配置服务器的话，需要再加一个扩展字段。\n\n首先需要准备一个`ca.ext`文件：\n\n```\nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage=digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName=@alt_names\n\n[alt_names]\nDNS.1=ssltest.com\n```\n\n注意`[alt_names]`部分，里面的`DNS.1`就是要使用这个证书的域名。如果有多个域名的话，每行写一个，依次使用`DNS.1` `DNS.2`等列出来即可。\n\n然后，带上这个`.ext`文件再次生成证书：\n\n```sh\nopenssl x509 -req -in ca.csr -signkey ca.key -out ca.crt -days 3650 -extfile ca.ext  \n```\n\n这样，根证书直接配置服务器的话就可以被浏览器信任了。\n","source":"_posts/2017-08-03-https-certificate.md","raw":"---\ntitle: HTTPS自建CA及自签名证书不完全指南（实战篇）\ndate: 2017-08-03 18:00\ncategory: 网络安全\ntags: [OpenSSL,HTTPS,Node.js,nginx]\nauthor: Jin\n---\n\n在[上一篇](/posts/2017-07-17-https-certificate/)文章中，我们讲解了HTTPS自建CA及自签名证书相关的一些理论知识。本文将使用OpenSSL进行实战。\n\n首先，需要安装好OpenSSL。Mac / Linux都有内置OpenSSL，但是版本并不是很新，建议自己再安装一个新版。\n\nMac可以使用homebrew进行安装，Linux可以通过包管理工具安装。Windows安装略麻烦一些，可以参考其它教程。也可以查看[这里](https://wiki.openssl.org/index.php/Binaries)试一下第三方提供的二进制包。\n\n<!-- more -->\n\n## CA和根证书\n\n之前我们说过，CA也就是需要一个私钥和一个证书。而证书的生成需要首先有CSR，然后有私钥签名。因此大致过程如下：\n\n### 第一步 生成CA私钥\n\n```sh\nopenssl genrsa -out ca.key 1024\n```\n\n这样就得到了一个名为`ca.key`的私钥。\n\n### 第二步 生成CSR\n\n```sh\nopenssl req -new -key ca.key -out ca.csr -sha256\n```\n\n这一步会要求输入一些信息，按提示输入即可。需要注意的是，如果你想直接用根证书来配置服务器，那么Common Name一项必须填写域名，否则可以随意填写。最后，在空一行之后出现的`extra`可以直接回车，不用填。\n\n![生成CSR](/images/2017-08-03-https-certificate/01-ca_key.png)\n\n### 第三步 生成证书\n\n生成证书的过程即是CA使用私钥对CSR进行签名的过程。在这里我们使用CA自己的证书对自己的CSR进行签名，即可得到根证书：\n\n```sh\nopenssl x509 -req -in ca.csr -signkey ca.key -out ca.crt -sha256\n```\n\n默认情况下，证书的有效期是一个月。一般我们会通过`-days`参数（单位为天）将CA证书的有效期设得比较长，以免需要不时去更换：\n\n```sh\nopenssl x509 -req -in ca.csr -signkey ca.key -out ca.crt -sha256 -days 3650\n```\n\n至此我们就有了作为CA使用的私钥和根证书。\n\n> 2017-11-09更新：在实际使用过程中，发现这样生成的证书无法被正确安装到Android设备上，需要补充一下ext信息。\n\n准备一个ca.ext文件\n\n```\nbasicConstraints=CA:FALSE\n```\n\n然后在生成证书的时候带上`-ext`选项：\n\n```sh\nopenssl x509 -req -in ca.csr -signkey ca.key -out ca.crt -sha256 -days 3650 -ext ca.ext\n```\n\n## 使用CA签发证书\n\n前文说过，直接使用CA配置服务器并不是很方便，因为要为每个证书配置信任关系。更好的方式是生成一次根证书，然后使用根证书的私钥为不同的域名签署不同的证书。具体的步骤和生成CA证书基本一致，只有最后签名的一步略有不同。\n\n### 生成私钥\n\n```sh\nopenssl genrsa -out server.key 1024\n```\n\n### 生成CSR\n\n```sh\nopenssl req -new -key server.key -out server.csr -sha256\n```\n\n同样的需要填写一些信息，最重要的是`CommonName`需要填对。如果你的证书要在多个域名上使用的话，`CommonName`可以只填写一个，其余的到`.ext`中去指定。\n\n### 准备server.ext文件\n\n```\nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage=digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName=@alt_names\n\n[alt_names]\nDNS.1=ssltest.com\n```\n\n如果有多个域名的话，分别在`[alt_names]`中指定，一行一个。\n\n### 签署证书\n\n```sh\nopenssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -extfile server.ext -sha256 -days 365\n```\n\n这一步和生成根证书的命令略有不同。\n\n首先我们看到多了`-CA`和`-CAkey`两个参数，分别对应前面生成的CA私钥和CA根证书。表示需要使用CA的私钥来进行签名。\n\n然后，因为我们指定了CA，所以不再需要`-signkey`参数。\n\n最后，多了一个`CAcreateserial`参数。这个参数的作用是用来生成一个`ca.srl`文件。而这个文件的作用是记录当前CA生成的证书的序列号。而如果再次在同样的位置进行命令，OpenSSL会去读取这个文件中的序列号，并自动`+1`作为下一个证书的序列号。\n\n这样，我们就有了服务器的私钥和证书，可以用于配置服务器了。\n\n![根证书签名后的证书受信任](/images/2017-08-03-https-certificate/03-ca_signed_cert.png)\n\nok ， 大功告成！！！！！\n\n## 附：根证书直接使用\n\n> 注：大部分情况下我们不会拿CA根证书直接用于服务器配置，因此可以不用看本节内容。如果你一定要拿CA证书配置服务器的话，往下看。\n\n前面说过，如果我们在CSR中指定了`CommonName`，是可以直接拿根证书去配置服务器的。但是如果我们将这个证书加入操作系统信任列表，并配置服务器之后，浏览器仍然会报不信任：\n\n![根证书不受信任](/images/2017-08-03-https-certificate/02-ca_cert_invalid.png)\n\n我们可以看到浏览器给出了“Subject Alternative Name Missing”的错误。查看证书的话，内容如下：\n\n```\nCertificate:\n    Data:\n        Version: 1 (0x0)\n        Serial Number:\n            ec:97:d7:aa:0e:33:89:f8\n    Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C=CN, ST=Guangdong, L=Shenzhen, O=TooBug, OU=TooBug, CN=toobug.net/emailAddress=i@toobug.net\n        Validity\n            Not Before: Aug  3 08:12:18 2017 GMT\n            Not After : Sep  2 08:12:18 2017 GMT\n        Subject: C=CN, ST=Guangdong, L=Shenzhen, O=TooBug, OU=TooBug, CN=toobug.net/emailAddress=i@toobug.net\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (1024 bit)\n                Modulus:\n                    00:cb:cf:c8:80:d4:39:6e:0c:17:9c:87:1a:4b:c7:\n                    8b:0c:9b:9e:fc:fb:f7:b2:ef:80:e3:90:40:74:a9:\n                    47:f3:e0:9b:d0:d2:f5:e3:e4:31:b7:40:9e:47:6e:\n                    f6:07:68:39:d0:c7:0b:0f:8e:1e:54:ef:0b:c6:4e:\n                    65:17:69:d8:64:7f:8c:80:4d:be:55:10:4f:df:47:\n                    5e:6b:c8:f0:d4:3e:94:32:1a:45:80:c9:73:b2:87:\n                    09:d1:b0:59:b7:e5:38:50:5b:26:dc:fc:d2:6c:d9:\n                    d5:5e:10:2b:1a:a7:b1:61:c1:87:02:5d:f7:70:d5:\n                    95:d7:0d:04:02:8c:37:fd:89\n                Exponent: 65537 (0x10001)\n    Signature Algorithm: sha256WithRSAEncryption\n         22:8e:5a:49:4b:8b:59:f9:ca:ae:92:cc:d7:7a:e8:50:21:41:\n         35:18:11:d3:82:89:df:8f:8f:3d:39:c8:b2:bc:9b:53:17:89:\n         e0:47:85:22:bf:31:c1:47:3a:80:cb:a7:12:00:a9:2c:78:2c:\n         02:27:15:19:2a:85:41:f0:78:4b:78:20:fd:51:69:b8:ff:5d:\n         af:fc:6c:26:ab:04:33:50:43:a6:91:51:17:a6:47:e4:51:70:\n         09:9f:e6:80:88:2d:82:60:22:ec:a1:df:55:2c:c0:43:47:07:\n         e7:6c:0c:b5:ac:ba:23:a1:75:50:8a:90:e1:c6:53:7d:49:d2:\n         3b:a5\n```\n\n和我们前面看过的证书相比，根证书缺少了`X509v3 extensions:`这一节，其中非常重要的一个字段就是`X509v3 Subject Alternative Name:`。这正是导致浏览器报错的原因。\n\n事实上公钥证书体系的应用十分广泛，并不只是在HTTPS中使用。在某些特定的场景下，可能需要一些特定的信息，例如HTTPS下，就需要服务器端的主体信息（域名等）。为了应对这些特殊的场景，X509证书体系引入了扩展字段的概念，也就是`X509v3 extensions`的含义。\n\n我们之前生成的证书并没有包含这个扩展字段，所以才导致浏览器不信任这个证书。所以如果根证书直接用于配置服务器的话，需要再加一个扩展字段。\n\n首先需要准备一个`ca.ext`文件：\n\n```\nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage=digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName=@alt_names\n\n[alt_names]\nDNS.1=ssltest.com\n```\n\n注意`[alt_names]`部分，里面的`DNS.1`就是要使用这个证书的域名。如果有多个域名的话，每行写一个，依次使用`DNS.1` `DNS.2`等列出来即可。\n\n然后，带上这个`.ext`文件再次生成证书：\n\n```sh\nopenssl x509 -req -in ca.csr -signkey ca.key -out ca.crt -days 3650 -extfile ca.ext  \n```\n\n这样，根证书直接配置服务器的话就可以被浏览器信任了。\n","slug":"2017-08-03-https-certificate","published":1,"updated":"2017-12-01T08:50:00.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknib0010jxs1x5pdl38e","content":"<p>在<a href=\"/posts/2017-07-17-https-certificate/\">上一篇</a>文章中，我们讲解了HTTPS自建CA及自签名证书相关的一些理论知识。本文将使用OpenSSL进行实战。</p>\n<p>首先，需要安装好OpenSSL。Mac / Linux都有内置OpenSSL，但是版本并不是很新，建议自己再安装一个新版。</p>\n<p>Mac可以使用homebrew进行安装，Linux可以通过包管理工具安装。Windows安装略麻烦一些，可以参考其它教程。也可以查看<a href=\"https://wiki.openssl.org/index.php/Binaries\" target=\"_blank\" rel=\"noopener\">这里</a>试一下第三方提供的二进制包。</p>\n<a id=\"more\"></a>\n<h2 id=\"CA和根证书\"><a href=\"#CA和根证书\" class=\"headerlink\" title=\"CA和根证书\"></a>CA和根证书</h2><p>之前我们说过，CA也就是需要一个私钥和一个证书。而证书的生成需要首先有CSR，然后有私钥签名。因此大致过程如下：</p>\n<h3 id=\"第一步-生成CA私钥\"><a href=\"#第一步-生成CA私钥\" class=\"headerlink\" title=\"第一步 生成CA私钥\"></a>第一步 生成CA私钥</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out ca.key 1024</span><br></pre></td></tr></table></figure>\n<p>这样就得到了一个名为<code>ca.key</code>的私钥。</p>\n<h3 id=\"第二步-生成CSR\"><a href=\"#第二步-生成CSR\" class=\"headerlink\" title=\"第二步 生成CSR\"></a>第二步 生成CSR</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -key ca.key -out ca.csr -sha256</span><br></pre></td></tr></table></figure>\n<p>这一步会要求输入一些信息，按提示输入即可。需要注意的是，如果你想直接用根证书来配置服务器，那么Common Name一项必须填写域名，否则可以随意填写。最后，在空一行之后出现的<code>extra</code>可以直接回车，不用填。</p>\n<p><img src=\"/images/2017-08-03-https-certificate/01-ca_key.png\" alt=\"生成CSR\"></p>\n<h3 id=\"第三步-生成证书\"><a href=\"#第三步-生成证书\" class=\"headerlink\" title=\"第三步 生成证书\"></a>第三步 生成证书</h3><p>生成证书的过程即是CA使用私钥对CSR进行签名的过程。在这里我们使用CA自己的证书对自己的CSR进行签名，即可得到根证书：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -<span class=\"keyword\">in</span> ca.csr -signkey ca.key -out ca.crt -sha256</span><br></pre></td></tr></table></figure>\n<p>默认情况下，证书的有效期是一个月。一般我们会通过<code>-days</code>参数（单位为天）将CA证书的有效期设得比较长，以免需要不时去更换：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -<span class=\"keyword\">in</span> ca.csr -signkey ca.key -out ca.crt -sha256 -days 3650</span><br></pre></td></tr></table></figure>\n<p>至此我们就有了作为CA使用的私钥和根证书。</p>\n<blockquote>\n<p>2017-11-09更新：在实际使用过程中，发现这样生成的证书无法被正确安装到Android设备上，需要补充一下ext信息。</p>\n</blockquote>\n<p>准备一个ca.ext文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">basicConstraints=CA:FALSE</span><br></pre></td></tr></table></figure>\n<p>然后在生成证书的时候带上<code>-ext</code>选项：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -<span class=\"keyword\">in</span> ca.csr -signkey ca.key -out ca.crt -sha256 -days 3650 -ext ca.ext</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用CA签发证书\"><a href=\"#使用CA签发证书\" class=\"headerlink\" title=\"使用CA签发证书\"></a>使用CA签发证书</h2><p>前文说过，直接使用CA配置服务器并不是很方便，因为要为每个证书配置信任关系。更好的方式是生成一次根证书，然后使用根证书的私钥为不同的域名签署不同的证书。具体的步骤和生成CA证书基本一致，只有最后签名的一步略有不同。</p>\n<h3 id=\"生成私钥\"><a href=\"#生成私钥\" class=\"headerlink\" title=\"生成私钥\"></a>生成私钥</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out server.key 1024</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成CSR\"><a href=\"#生成CSR\" class=\"headerlink\" title=\"生成CSR\"></a>生成CSR</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -key server.key -out server.csr -sha256</span><br></pre></td></tr></table></figure>\n<p>同样的需要填写一些信息，最重要的是<code>CommonName</code>需要填对。如果你的证书要在多个域名上使用的话，<code>CommonName</code>可以只填写一个，其余的到<code>.ext</code>中去指定。</p>\n<h3 id=\"准备server-ext文件\"><a href=\"#准备server-ext文件\" class=\"headerlink\" title=\"准备server.ext文件\"></a>准备server.ext文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">authorityKeyIdentifier=keyid,issuer</span><br><span class=\"line\">basicConstraints=CA:FALSE</span><br><span class=\"line\">keyUsage=digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span><br><span class=\"line\">subjectAltName=@alt_names</span><br><span class=\"line\"></span><br><span class=\"line\">[alt_names]</span><br><span class=\"line\">DNS.1=ssltest.com</span><br></pre></td></tr></table></figure>\n<p>如果有多个域名的话，分别在<code>[alt_names]</code>中指定，一行一个。</p>\n<h3 id=\"签署证书\"><a href=\"#签署证书\" class=\"headerlink\" title=\"签署证书\"></a>签署证书</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -<span class=\"keyword\">in</span> server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -extfile server.ext -sha256 -days 365</span><br></pre></td></tr></table></figure>\n<p>这一步和生成根证书的命令略有不同。</p>\n<p>首先我们看到多了<code>-CA</code>和<code>-CAkey</code>两个参数，分别对应前面生成的CA私钥和CA根证书。表示需要使用CA的私钥来进行签名。</p>\n<p>然后，因为我们指定了CA，所以不再需要<code>-signkey</code>参数。</p>\n<p>最后，多了一个<code>CAcreateserial</code>参数。这个参数的作用是用来生成一个<code>ca.srl</code>文件。而这个文件的作用是记录当前CA生成的证书的序列号。而如果再次在同样的位置进行命令，OpenSSL会去读取这个文件中的序列号，并自动<code>+1</code>作为下一个证书的序列号。</p>\n<p>这样，我们就有了服务器的私钥和证书，可以用于配置服务器了。</p>\n<p><img src=\"/images/2017-08-03-https-certificate/03-ca_signed_cert.png\" alt=\"根证书签名后的证书受信任\"></p>\n<p>ok ， 大功告成！！！！！</p>\n<h2 id=\"附：根证书直接使用\"><a href=\"#附：根证书直接使用\" class=\"headerlink\" title=\"附：根证书直接使用\"></a>附：根证书直接使用</h2><blockquote>\n<p>注：大部分情况下我们不会拿CA根证书直接用于服务器配置，因此可以不用看本节内容。如果你一定要拿CA证书配置服务器的话，往下看。</p>\n</blockquote>\n<p>前面说过，如果我们在CSR中指定了<code>CommonName</code>，是可以直接拿根证书去配置服务器的。但是如果我们将这个证书加入操作系统信任列表，并配置服务器之后，浏览器仍然会报不信任：</p>\n<p><img src=\"/images/2017-08-03-https-certificate/02-ca_cert_invalid.png\" alt=\"根证书不受信任\"></p>\n<p>我们可以看到浏览器给出了“Subject Alternative Name Missing”的错误。查看证书的话，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Certificate:</span><br><span class=\"line\">    Data:</span><br><span class=\"line\">        Version: 1 (0x0)</span><br><span class=\"line\">        Serial Number:</span><br><span class=\"line\">            ec:97:d7:aa:0e:33:89:f8</span><br><span class=\"line\">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class=\"line\">        Issuer: C=CN, ST=Guangdong, L=Shenzhen, O=TooBug, OU=TooBug, CN=toobug.net/emailAddress=i@toobug.net</span><br><span class=\"line\">        Validity</span><br><span class=\"line\">            Not Before: Aug  3 08:12:18 2017 GMT</span><br><span class=\"line\">            Not After : Sep  2 08:12:18 2017 GMT</span><br><span class=\"line\">        Subject: C=CN, ST=Guangdong, L=Shenzhen, O=TooBug, OU=TooBug, CN=toobug.net/emailAddress=i@toobug.net</span><br><span class=\"line\">        Subject Public Key Info:</span><br><span class=\"line\">            Public Key Algorithm: rsaEncryption</span><br><span class=\"line\">                Public-Key: (1024 bit)</span><br><span class=\"line\">                Modulus:</span><br><span class=\"line\">                    00:cb:cf:c8:80:d4:39:6e:0c:17:9c:87:1a:4b:c7:</span><br><span class=\"line\">                    8b:0c:9b:9e:fc:fb:f7:b2:ef:80:e3:90:40:74:a9:</span><br><span class=\"line\">                    47:f3:e0:9b:d0:d2:f5:e3:e4:31:b7:40:9e:47:6e:</span><br><span class=\"line\">                    f6:07:68:39:d0:c7:0b:0f:8e:1e:54:ef:0b:c6:4e:</span><br><span class=\"line\">                    65:17:69:d8:64:7f:8c:80:4d:be:55:10:4f:df:47:</span><br><span class=\"line\">                    5e:6b:c8:f0:d4:3e:94:32:1a:45:80:c9:73:b2:87:</span><br><span class=\"line\">                    09:d1:b0:59:b7:e5:38:50:5b:26:dc:fc:d2:6c:d9:</span><br><span class=\"line\">                    d5:5e:10:2b:1a:a7:b1:61:c1:87:02:5d:f7:70:d5:</span><br><span class=\"line\">                    95:d7:0d:04:02:8c:37:fd:89</span><br><span class=\"line\">                Exponent: 65537 (0x10001)</span><br><span class=\"line\">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class=\"line\">         22:8e:5a:49:4b:8b:59:f9:ca:ae:92:cc:d7:7a:e8:50:21:41:</span><br><span class=\"line\">         35:18:11:d3:82:89:df:8f:8f:3d:39:c8:b2:bc:9b:53:17:89:</span><br><span class=\"line\">         e0:47:85:22:bf:31:c1:47:3a:80:cb:a7:12:00:a9:2c:78:2c:</span><br><span class=\"line\">         02:27:15:19:2a:85:41:f0:78:4b:78:20:fd:51:69:b8:ff:5d:</span><br><span class=\"line\">         af:fc:6c:26:ab:04:33:50:43:a6:91:51:17:a6:47:e4:51:70:</span><br><span class=\"line\">         09:9f:e6:80:88:2d:82:60:22:ec:a1:df:55:2c:c0:43:47:07:</span><br><span class=\"line\">         e7:6c:0c:b5:ac:ba:23:a1:75:50:8a:90:e1:c6:53:7d:49:d2:</span><br><span class=\"line\">         3b:a5</span><br></pre></td></tr></table></figure>\n<p>和我们前面看过的证书相比，根证书缺少了<code>X509v3 extensions:</code>这一节，其中非常重要的一个字段就是<code>X509v3 Subject Alternative Name:</code>。这正是导致浏览器报错的原因。</p>\n<p>事实上公钥证书体系的应用十分广泛，并不只是在HTTPS中使用。在某些特定的场景下，可能需要一些特定的信息，例如HTTPS下，就需要服务器端的主体信息（域名等）。为了应对这些特殊的场景，X509证书体系引入了扩展字段的概念，也就是<code>X509v3 extensions</code>的含义。</p>\n<p>我们之前生成的证书并没有包含这个扩展字段，所以才导致浏览器不信任这个证书。所以如果根证书直接用于配置服务器的话，需要再加一个扩展字段。</p>\n<p>首先需要准备一个<code>ca.ext</code>文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">authorityKeyIdentifier=keyid,issuer</span><br><span class=\"line\">basicConstraints=CA:FALSE</span><br><span class=\"line\">keyUsage=digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span><br><span class=\"line\">subjectAltName=@alt_names</span><br><span class=\"line\"></span><br><span class=\"line\">[alt_names]</span><br><span class=\"line\">DNS.1=ssltest.com</span><br></pre></td></tr></table></figure>\n<p>注意<code>[alt_names]</code>部分，里面的<code>DNS.1</code>就是要使用这个证书的域名。如果有多个域名的话，每行写一个，依次使用<code>DNS.1</code> <code>DNS.2</code>等列出来即可。</p>\n<p>然后，带上这个<code>.ext</code>文件再次生成证书：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -<span class=\"keyword\">in</span> ca.csr -signkey ca.key -out ca.crt -days 3650 -extfile ca.ext</span><br></pre></td></tr></table></figure>\n<p>这样，根证书直接配置服务器的话就可以被浏览器信任了。</p>\n","site":{"data":{}},"excerpt":"<p>在<a href=\"/posts/2017-07-17-https-certificate/\">上一篇</a>文章中，我们讲解了HTTPS自建CA及自签名证书相关的一些理论知识。本文将使用OpenSSL进行实战。</p>\n<p>首先，需要安装好OpenSSL。Mac / Linux都有内置OpenSSL，但是版本并不是很新，建议自己再安装一个新版。</p>\n<p>Mac可以使用homebrew进行安装，Linux可以通过包管理工具安装。Windows安装略麻烦一些，可以参考其它教程。也可以查看<a href=\"https://wiki.openssl.org/index.php/Binaries\" target=\"_blank\" rel=\"noopener\">这里</a>试一下第三方提供的二进制包。</p>","more":"<h2 id=\"CA和根证书\"><a href=\"#CA和根证书\" class=\"headerlink\" title=\"CA和根证书\"></a>CA和根证书</h2><p>之前我们说过，CA也就是需要一个私钥和一个证书。而证书的生成需要首先有CSR，然后有私钥签名。因此大致过程如下：</p>\n<h3 id=\"第一步-生成CA私钥\"><a href=\"#第一步-生成CA私钥\" class=\"headerlink\" title=\"第一步 生成CA私钥\"></a>第一步 生成CA私钥</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out ca.key 1024</span><br></pre></td></tr></table></figure>\n<p>这样就得到了一个名为<code>ca.key</code>的私钥。</p>\n<h3 id=\"第二步-生成CSR\"><a href=\"#第二步-生成CSR\" class=\"headerlink\" title=\"第二步 生成CSR\"></a>第二步 生成CSR</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -key ca.key -out ca.csr -sha256</span><br></pre></td></tr></table></figure>\n<p>这一步会要求输入一些信息，按提示输入即可。需要注意的是，如果你想直接用根证书来配置服务器，那么Common Name一项必须填写域名，否则可以随意填写。最后，在空一行之后出现的<code>extra</code>可以直接回车，不用填。</p>\n<p><img src=\"/images/2017-08-03-https-certificate/01-ca_key.png\" alt=\"生成CSR\"></p>\n<h3 id=\"第三步-生成证书\"><a href=\"#第三步-生成证书\" class=\"headerlink\" title=\"第三步 生成证书\"></a>第三步 生成证书</h3><p>生成证书的过程即是CA使用私钥对CSR进行签名的过程。在这里我们使用CA自己的证书对自己的CSR进行签名，即可得到根证书：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -<span class=\"keyword\">in</span> ca.csr -signkey ca.key -out ca.crt -sha256</span><br></pre></td></tr></table></figure>\n<p>默认情况下，证书的有效期是一个月。一般我们会通过<code>-days</code>参数（单位为天）将CA证书的有效期设得比较长，以免需要不时去更换：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -<span class=\"keyword\">in</span> ca.csr -signkey ca.key -out ca.crt -sha256 -days 3650</span><br></pre></td></tr></table></figure>\n<p>至此我们就有了作为CA使用的私钥和根证书。</p>\n<blockquote>\n<p>2017-11-09更新：在实际使用过程中，发现这样生成的证书无法被正确安装到Android设备上，需要补充一下ext信息。</p>\n</blockquote>\n<p>准备一个ca.ext文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">basicConstraints=CA:FALSE</span><br></pre></td></tr></table></figure>\n<p>然后在生成证书的时候带上<code>-ext</code>选项：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -<span class=\"keyword\">in</span> ca.csr -signkey ca.key -out ca.crt -sha256 -days 3650 -ext ca.ext</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用CA签发证书\"><a href=\"#使用CA签发证书\" class=\"headerlink\" title=\"使用CA签发证书\"></a>使用CA签发证书</h2><p>前文说过，直接使用CA配置服务器并不是很方便，因为要为每个证书配置信任关系。更好的方式是生成一次根证书，然后使用根证书的私钥为不同的域名签署不同的证书。具体的步骤和生成CA证书基本一致，只有最后签名的一步略有不同。</p>\n<h3 id=\"生成私钥\"><a href=\"#生成私钥\" class=\"headerlink\" title=\"生成私钥\"></a>生成私钥</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out server.key 1024</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成CSR\"><a href=\"#生成CSR\" class=\"headerlink\" title=\"生成CSR\"></a>生成CSR</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -key server.key -out server.csr -sha256</span><br></pre></td></tr></table></figure>\n<p>同样的需要填写一些信息，最重要的是<code>CommonName</code>需要填对。如果你的证书要在多个域名上使用的话，<code>CommonName</code>可以只填写一个，其余的到<code>.ext</code>中去指定。</p>\n<h3 id=\"准备server-ext文件\"><a href=\"#准备server-ext文件\" class=\"headerlink\" title=\"准备server.ext文件\"></a>准备server.ext文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">authorityKeyIdentifier=keyid,issuer</span><br><span class=\"line\">basicConstraints=CA:FALSE</span><br><span class=\"line\">keyUsage=digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span><br><span class=\"line\">subjectAltName=@alt_names</span><br><span class=\"line\"></span><br><span class=\"line\">[alt_names]</span><br><span class=\"line\">DNS.1=ssltest.com</span><br></pre></td></tr></table></figure>\n<p>如果有多个域名的话，分别在<code>[alt_names]</code>中指定，一行一个。</p>\n<h3 id=\"签署证书\"><a href=\"#签署证书\" class=\"headerlink\" title=\"签署证书\"></a>签署证书</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -<span class=\"keyword\">in</span> server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -extfile server.ext -sha256 -days 365</span><br></pre></td></tr></table></figure>\n<p>这一步和生成根证书的命令略有不同。</p>\n<p>首先我们看到多了<code>-CA</code>和<code>-CAkey</code>两个参数，分别对应前面生成的CA私钥和CA根证书。表示需要使用CA的私钥来进行签名。</p>\n<p>然后，因为我们指定了CA，所以不再需要<code>-signkey</code>参数。</p>\n<p>最后，多了一个<code>CAcreateserial</code>参数。这个参数的作用是用来生成一个<code>ca.srl</code>文件。而这个文件的作用是记录当前CA生成的证书的序列号。而如果再次在同样的位置进行命令，OpenSSL会去读取这个文件中的序列号，并自动<code>+1</code>作为下一个证书的序列号。</p>\n<p>这样，我们就有了服务器的私钥和证书，可以用于配置服务器了。</p>\n<p><img src=\"/images/2017-08-03-https-certificate/03-ca_signed_cert.png\" alt=\"根证书签名后的证书受信任\"></p>\n<p>ok ， 大功告成！！！！！</p>\n<h2 id=\"附：根证书直接使用\"><a href=\"#附：根证书直接使用\" class=\"headerlink\" title=\"附：根证书直接使用\"></a>附：根证书直接使用</h2><blockquote>\n<p>注：大部分情况下我们不会拿CA根证书直接用于服务器配置，因此可以不用看本节内容。如果你一定要拿CA证书配置服务器的话，往下看。</p>\n</blockquote>\n<p>前面说过，如果我们在CSR中指定了<code>CommonName</code>，是可以直接拿根证书去配置服务器的。但是如果我们将这个证书加入操作系统信任列表，并配置服务器之后，浏览器仍然会报不信任：</p>\n<p><img src=\"/images/2017-08-03-https-certificate/02-ca_cert_invalid.png\" alt=\"根证书不受信任\"></p>\n<p>我们可以看到浏览器给出了“Subject Alternative Name Missing”的错误。查看证书的话，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Certificate:</span><br><span class=\"line\">    Data:</span><br><span class=\"line\">        Version: 1 (0x0)</span><br><span class=\"line\">        Serial Number:</span><br><span class=\"line\">            ec:97:d7:aa:0e:33:89:f8</span><br><span class=\"line\">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class=\"line\">        Issuer: C=CN, ST=Guangdong, L=Shenzhen, O=TooBug, OU=TooBug, CN=toobug.net/emailAddress=i@toobug.net</span><br><span class=\"line\">        Validity</span><br><span class=\"line\">            Not Before: Aug  3 08:12:18 2017 GMT</span><br><span class=\"line\">            Not After : Sep  2 08:12:18 2017 GMT</span><br><span class=\"line\">        Subject: C=CN, ST=Guangdong, L=Shenzhen, O=TooBug, OU=TooBug, CN=toobug.net/emailAddress=i@toobug.net</span><br><span class=\"line\">        Subject Public Key Info:</span><br><span class=\"line\">            Public Key Algorithm: rsaEncryption</span><br><span class=\"line\">                Public-Key: (1024 bit)</span><br><span class=\"line\">                Modulus:</span><br><span class=\"line\">                    00:cb:cf:c8:80:d4:39:6e:0c:17:9c:87:1a:4b:c7:</span><br><span class=\"line\">                    8b:0c:9b:9e:fc:fb:f7:b2:ef:80:e3:90:40:74:a9:</span><br><span class=\"line\">                    47:f3:e0:9b:d0:d2:f5:e3:e4:31:b7:40:9e:47:6e:</span><br><span class=\"line\">                    f6:07:68:39:d0:c7:0b:0f:8e:1e:54:ef:0b:c6:4e:</span><br><span class=\"line\">                    65:17:69:d8:64:7f:8c:80:4d:be:55:10:4f:df:47:</span><br><span class=\"line\">                    5e:6b:c8:f0:d4:3e:94:32:1a:45:80:c9:73:b2:87:</span><br><span class=\"line\">                    09:d1:b0:59:b7:e5:38:50:5b:26:dc:fc:d2:6c:d9:</span><br><span class=\"line\">                    d5:5e:10:2b:1a:a7:b1:61:c1:87:02:5d:f7:70:d5:</span><br><span class=\"line\">                    95:d7:0d:04:02:8c:37:fd:89</span><br><span class=\"line\">                Exponent: 65537 (0x10001)</span><br><span class=\"line\">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class=\"line\">         22:8e:5a:49:4b:8b:59:f9:ca:ae:92:cc:d7:7a:e8:50:21:41:</span><br><span class=\"line\">         35:18:11:d3:82:89:df:8f:8f:3d:39:c8:b2:bc:9b:53:17:89:</span><br><span class=\"line\">         e0:47:85:22:bf:31:c1:47:3a:80:cb:a7:12:00:a9:2c:78:2c:</span><br><span class=\"line\">         02:27:15:19:2a:85:41:f0:78:4b:78:20:fd:51:69:b8:ff:5d:</span><br><span class=\"line\">         af:fc:6c:26:ab:04:33:50:43:a6:91:51:17:a6:47:e4:51:70:</span><br><span class=\"line\">         09:9f:e6:80:88:2d:82:60:22:ec:a1:df:55:2c:c0:43:47:07:</span><br><span class=\"line\">         e7:6c:0c:b5:ac:ba:23:a1:75:50:8a:90:e1:c6:53:7d:49:d2:</span><br><span class=\"line\">         3b:a5</span><br></pre></td></tr></table></figure>\n<p>和我们前面看过的证书相比，根证书缺少了<code>X509v3 extensions:</code>这一节，其中非常重要的一个字段就是<code>X509v3 Subject Alternative Name:</code>。这正是导致浏览器报错的原因。</p>\n<p>事实上公钥证书体系的应用十分广泛，并不只是在HTTPS中使用。在某些特定的场景下，可能需要一些特定的信息，例如HTTPS下，就需要服务器端的主体信息（域名等）。为了应对这些特殊的场景，X509证书体系引入了扩展字段的概念，也就是<code>X509v3 extensions</code>的含义。</p>\n<p>我们之前生成的证书并没有包含这个扩展字段，所以才导致浏览器不信任这个证书。所以如果根证书直接用于配置服务器的话，需要再加一个扩展字段。</p>\n<p>首先需要准备一个<code>ca.ext</code>文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">authorityKeyIdentifier=keyid,issuer</span><br><span class=\"line\">basicConstraints=CA:FALSE</span><br><span class=\"line\">keyUsage=digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span><br><span class=\"line\">subjectAltName=@alt_names</span><br><span class=\"line\"></span><br><span class=\"line\">[alt_names]</span><br><span class=\"line\">DNS.1=ssltest.com</span><br></pre></td></tr></table></figure>\n<p>注意<code>[alt_names]</code>部分，里面的<code>DNS.1</code>就是要使用这个证书的域名。如果有多个域名的话，每行写一个，依次使用<code>DNS.1</code> <code>DNS.2</code>等列出来即可。</p>\n<p>然后，带上这个<code>.ext</code>文件再次生成证书：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -<span class=\"keyword\">in</span> ca.csr -signkey ca.key -out ca.crt -days 3650 -extfile ca.ext</span><br></pre></td></tr></table></figure>\n<p>这样，根证书直接配置服务器的话就可以被浏览器信任了。</p>"},{"title":"小马的大前端之路——Node.js初探","date":"2017-07-26T12:00:00.000Z","author":"Jin","_content":"\n一次偶然的机会让我有幸跨越浏览器的鸿沟来真真切切的体验一次Node.js。\n\n首先，我想说：“很荣幸在经历了2个月的努力，第一个Node.js项目落地了”。整个项目做下来，还是算比较顺畅的。\n\n事情很简单：Node.js做的是接入层。\n\n<!-- more -->\n\n## 事出有因\n前端的技术革新是日新月异的，前端工程化已经离不开Node.js。现在大多数的项目使用的是前后端分离的架构，后端提供接口前端通过接口数据进行数据渲染。但是现在前端的代码逻辑越来越复杂，场景也越来越多。这套架构是否适合所有的应用场景值得考虑了。大前端的出现，就是一种尝试吧。试图通过Node.js接入来应对各种应用场景。\n\n![架构图](/images/2017-07-26-first-time-use-node.js/0710_01.jpg)\n\n不管是个人还是团队，技术革新是必须的。现在我们团队面临的问题就是如此，所以必须有人迈出这一步。而我也很幸运的成为第一个吃螃蟹的人。\n\n## 始作俑者\n不管什么技术，不管怎样的优秀，它的运用与否都是要经过慎重考虑的。但，总不能都不用吧。那怎么办呢。找项目试点呗，线上项目运行的好好的肯定不能重构，而且人力紧张啊。只能找新项目了。刚巧，公司需要做新的项目，本以为按老路子前后分离做。可突然有一天...\n\n组长说：“团队不是要进行技术选型吗？看这个项目使用Node.js做接入层可不可行？“。\n\n经过慎重考虑，我回答说：“可以没问题。”。（管他3721，应了再说。😄）\n\n借我老大的一句话：“技术这东西不落地，说了也白说”。\n\n> 背景：其实团队对Node.js一直都保持着高度的关注，包括我。之前我一直都有在对Node.js的源码进行解读和研究。基础架构组也一直在进行Node.js技术框架进行调研，希望打造一套适用于团队开发的集成项目框架。\n\n所以我相信：机会总是会照顾有准备的人的。\n\n就这样我的Node.js之旅就开始了。\n\n## 万事开头难\n虽然我平时可能天天都会用Node.js跑命令，写各种npm包，甚至还写过一些自己的项目。但是要真正的用Node.js来真正开发项目还是有压力的。因为这种项目技术架构下要求我操心的东西变多了。平时的时候可能我只要写一些前端逻辑代码，做做前端工程化。但是这种架构下，要求我必须去学习和应用我不熟悉的东西。\n\n我大致列了一些大的方向：\n\n* 1.Node.js接入层的总体架构是怎样的？\n* 2.前端技术用什么？\n* 3.前端工程化如何做？\n* 4.项目如何根据不同的环境（常有的环境：开发，测试，正式）运行？\n* 5.前端自动化怎么搞？\n* 6.单元测试？\n* 7.编码风格？\n* 8.Node.js如何和服务端对接？\n* 9.日志，上报，登录服务接入，权限校验等等我应该怎么做？\n* 10.项目如何发布上线？\n* 11.上线了如何保证服务稳定？\n* 12.如何debug问题？\n\n\n可能还有很多很多需要处理的问题但是这已经可以看出一下端倪了。瞬间感觉我懂的只有冰山一角。代码码的再漂亮感觉也无力。要求的不再是单一的编码能力，而是大局观，思维角度的转变。\n\n但不管怎样，新建git仓库开始搞呗。\n\n## 如何得到一个合适的项目架构\n这个确实是个问题，架构设计的合不合理。会影响到后期编码是否可以做到快速开发，还会影响后期的功能迭代和维护。\n\n那么问题来了，我是预先设计还是预先编码？\n\n*这里我选择了先编码，然后重构。*\n\n> 背景：因为上文已经说过，基础架构组已经有一个简单的Node.js集成框架，它是不完整的，但是它够简单。也就是说我在这上面重构出自己的项目架构是完全没有问题的。\n\n你可能会觉得还是要预先设计啊？\n\n> 说的是侧重点不一样，侧重于编码实现，将这个项目跑起来，然后通过重构去寻找出合适的项目架构。\n\n对于先编码还是设计这个问题我借用重构里面的是一句话：\n\n“重构改变了预先设计的角色。如果没有重构，你就必须保证预先做出的设计是正确无误，这压力太大了。这意味着如果将来需要对原始设计做任何修改，代价都将非常昂贵。因此你需要把更多的精力放在预先设计上，以避免日后的修改。如果选择重构，问题的重点就转变了。你任然做预先设计，但是不必一定要找出证正确的解决方案，此刻的你只需要得到一个合理的解决方案就够了。“  --摘自《重构-改善既有代码的设计》\n\n把一个简单的解决方法重构成一个灵活的解决方法有多难？答案是：“相当容易”。 --摘自《重构-改善既有代码的设计》\n\n实在不明白我推荐你去看看[《重构-改善既有代码的设计》](https://book.douban.com/subject/1229923/)这本书。\n\n所以我将侧重点放在了预先编码上，让后在整个项目demo跑起来之后再去寻找合适的架构。一个合理的架构体系就是把代码放到它应该出现的位置上去。代码是具有流失性的，就好比一个房间从来不整理的话，就会变的脏乱不堪。重构就是将代码再次整理将它放回原位。\n\n![目录图](/images/2017-07-26-first-time-use-node.js/0710_02.jpg)\n\n## 技术框架选型考虑\n技术框架的选择会影响着项目的总体架构，编码，产出效益，以及后期人员维护的成本。\n\n首先我想说：“不管前端还是后端用什么框架我觉得还是要站在团队的角度上去考虑这个问题，毕竟这不是个人的项目。总不能说我不在就没人能维护这个项目吧”。\n\n### Node.js后端\n**[koa2](https://github.com/koajs/koa)**。为什么没有使用koa或者express等框架，或者为什么团队不自己开发。\n\nNode.js v8LTS 已经快要来临。koa已经升级到了koa2版本，没有必要再用旧的express太老了。koa2在这两年已经锋芒毕露，现阶段团队没有必要花费很多的人力去搞一套自己的框架，可以转变思维在koa2的基础上做一个集成的适合团队项目使用的框架。\n\n基于这个基础架构团队使用koa2作为主框架使用在现阶段是最合适的。特别是在Node.js v7.6+ 原生支持了`async`和`await`语法。\n\n### 前端框架\njQuery的王朝已经渐渐被瓦解。angular.js，react和vue三足鼎立的时代已经到来。再次基于团队的现状，选择了最有优势的angular.js v1.x。\n\n在这里我并没有说其他框架不好的意思，完全是基于团队现状的考虑，以及当前框架是否可以帮助我高效的完成开发的一种考虑。假如有一天我觉得angular.js已经不适合现阶段项目开发需求，我会义不容辞的提出我的疑问。\n\n比如：项目需要我们考虑加速页面渲染时，要考虑服务器渲染；服务器压力山大时，考虑前后端分离。同构作为最合适的编码方式react和vue都是不错的选择。\n\n> 框架没有对与错，只有合不合适。\n\nwebpack2 作为当红炸子鸡，我也是优先考虑的。至于为什么没有选webpack3嘛。。。\n\n其实是这样的，我也有实际的去使用webpack3来做过测试，就是这个项目。我的衡量标准就是压缩要比现在的要小。最后没有达到预期效果所以没有进行合并。\n\ngulp 工作流处理，没毛病。这里可能会有的让人疑惑，为什么使用了webpack2 还要使用gulp？为什么2个都要用？\n\n其实对于这2个组件，它们没有绝对的对立关系。在这里它们是相辅相成的。\n\n总的前端框架：angular.js v1.x + webpack2 + gulp。\n\n> babel用来编译前端代码。\n\n项目使用的主要框架，如图：\n\n![主要框架图](/images/2017-07-26-first-time-use-node.js/0710_03.jpg)\n\n## 前端工程化\n项目的总体架构和前端技术框架的选型势必会对前端工程化产生深远的影响。前端代码放到哪里，webpack打包如何做，产出文件放到哪里。gulp需要做哪些事情，多还是少，烦不烦琐。这种种问题都会对你项目的架构做出挑战。这也就是我为什么先编码然后通过重构来调整项目架构的原因之一。假如你预先就把项目的总体架构规定死了，那么后期你的编码就会想尽办法的去套这个项目架构，写出来的代码可想而知——一定是不尽人意的。\n\n那么第一个问题就来了。\n\n### 自己编写的anglaur.js部分的源码放到哪里\n对于这个问题，在使用Node.js开发初期，我就对基础的架构做出了建议：前端源码不能放到服务器静态资源目录。只有打包后的文件才会放到静态资源文件目录，除非该文件可以直访问。\n\n这就意味着，我需要寻找一个文件目录来放置前端源代码。最合理的位置就是于服务器目录平级放置。\n\n### webpack\n通过webpack的编译打包，将文件保存到静态资源目录。我这里把所以和代码相关的打包和编译任务都交给了webpack，其中还包含公共文件的提取，版本控制，压缩，以及模版文件注入。\n\n![webpack](/images/2017-07-26-first-time-use-node.js/0710_04.jpg)\n\n#### 如何进行版本控制\n版本控制用的比较多的就2种：基于文件和基于hash。\n\n基于文件就好比，每次打包的时候都会生成不同文件名的文件。有利于在线上跑多个版本的功能。\n\n基于hash就意味着线上这个功能的文件永远就只有一个，无法进行全量灰度。\n\n这里有个问题就是：基于文件的版本控制，难点就在于打包后的`.js`或`.css`文件名是不可控的，所以，并不能把引入的js或css文件路径写死在html模版文件里面。所以通过webpack打包的时候，我需要指定模版文件是哪一个，通过webpack的模版文件注入插件完成js或css文件路径的引入。\n\n> 其它方式；通过在webpack打包完成之后，将返回值种的hash参数保存下来。这样也可以完成基于文件的版本控制。\n\n### gulp的工作流\ngulp结合webpack的应用如鱼得水，webpack打包任务是gulp任务流里最重要的一环。考虑到打包编译，都交给webpack做了。那gulp所要做的就是保证前端各个任务正确的执行。包括何时执行webpack打包，完成打包以后做什么。\n\n![gulp](/images/2017-07-26-first-time-use-node.js/0710_05.jpg)\n\n## 前端自动化\n这里的自动化可能与你在别的地方所说的自动化可能有分歧。这里的前端自动化主要指的是在前端代码如何完成自动化打包编译。其实项目中可以进行自动化的流程有很多，我在项目里接入的是[jenkins](https://jenkins.io/)，主要用来自动完成前端打包编译，然后通过zip命令对webpack打包编译后的所有文件进行打包成`.zip`文件。因为打包后的文件不入库。\n\n这里有疑惑是正常的。首先为什么不把weboack打包后生成的文件纳入git版本库？\n\n道理很简单，git版本库里面的任意一个文件产生变化，就会有下一个版本号产生。webpack每次打包编译就势必会产生文件变化，如果把打包文件纳入版本库就必须提交文件，从而产生版本号。也就是说我本地提交一次代码到git库后，jenkins会进行打包，然后打包文件又必须提交回git库，这样就相当于每次提交代码否会产生2次提交记录（一次我自己的提交，一次jenkins完成自动化打包后的提交。）。所以为了不让jenkins完成打包后向git代码库提交文件，所要做的就是把webpack打包后产生的文件都移除版本库。\n\n但问题没有这么简单，webpack打包不纳入版本库，发布的时候，这些webpack打包后产生文件怎么发布。这里解决方案就是通过把所有和webpack打包相关的文件用zip命令打包成一个`${commitId}.zip`包（commitId 是git每次提交参数的可以通过bash获取：`commitId=$(git rev-parse HEAD)`）。这样发布的时候就可以通过commitId找到`${commitId}.zip`这个压缩包，然后解压它到指定位置即可。\n\n\n为什么有2个打包任务？\n\n第一次是webpack打包，前端代码需要打包编译。第二次是文件打包，发布需要，原因很就是webpack打包文件不入库的解决方法。\n\n所以要求团队中必须会搭建并且有使用过jenkins,这个工具对团队的帮助是非常大的，预先打包文件并缓存，比在发布项目的时候再进行打包要好很多。可以预先发现打包问题及时进行补救，以免发布时打包出现问题而影响发布进度和线上项目的正常运行。\n\n![jenkins](/images/2017-07-26-first-time-use-node.js/0710_06.jpg)\n\ngit仓库支持添加hooks。所以可以在git库里添加触发事件。让jenkins自动完成打包。\n\n假如有一天，我需要写单元测试的时候，也可以试着让jenkins帮我跑自动化测试了。这算是我回答了单元测试的问题吗？哈哈哈哈哈哈哈。。。。。。\n\n前端问题基本解决了，现在问题抛到了服务端。\n\n## Node.js服务端运行环境配置\n写个项目，要跑起来很简单，我的项目入口文件是`server/index.js`。通过执行如下命令就可以启动：\n\n```\nnode server/index.js\n```\n\n但有时候，环境并没有我想的那么简单。因为项目需要针对不同的环境运行，所以必需对不同的运行环境使用不同的配置文件。这样就需要我在启动Node.js服务的时候，必须携带不同的参数。所以要求我在编码的时候尽可能的做到环境参数的配置化——牵涉到与执行环境有关的参数尽量进行配置化。\n\n![启动](/images/2017-07-26-first-time-use-node.js/0710_07.jpg)\n\n## Node.js接入层服务的接入，权限的校验\n其实对于一个小白来说，很担心的是我如何才能在Node.js里面往真正的服务器发起request请求。我项目站点的登录服务鉴权如何去做，以及用户登录了，有没有权限去访问都是个问题。\n\n### http服务的接入\n通过http模块发起requset请求。其实开始的时候我也是一脸茫然的，如何在接入层请求后端服务，可想而知这是之前作为前端的我从来没有考虑过的。现在回想起来就那么回事。有些事情想着可能很复杂，真正的做起来就好像有种：`山重水复疑无路，柳暗花明又一春。`的感觉。\n\n![服务接入](/images/2017-07-26-first-time-use-node.js/0710_08.jpg)\n\n\nNode.js接入层请求后端服务简单的代码实现：\n\n```js\nexports.example = async (ctx)=>{\n  let options = {\n    port: 80,\n    hostname: 'www.test.com',\n    method:'GET',\n    path:'/api/getuser?token=document.cookie.token'\n  };\n  let getData = function (){\n    return new Promise((resolve , reject)=>{\n      let request = http.request(options , (socket)=>{\n        let data = '';\n        console.log('status: ' , socket.statusCode , socket.headers);\n        socket.on('data' , (chunk)=>{\n          data += chunk;\n        });\n        socket.on('end' , ()=>{\n          console.log('server call back get data: ' , data);\n          return resolve(data);\n        });\n        socket.on('error' , (e)=>{\n          return reject(data);\n        });\n      });\n      request.end();\n    });\n  }\n  ctx.body = await getData();\n}\n```\n\n这里我没有考虑https的方式，因为https是建立在SSL/TLS之上的，也就是说，需要有私钥和公钥和CA证书才行。CA证书虽说可以自己颁发但还是得本机自行安装才有效。对https自己颁发CA证书感兴趣的可以看看这篇文章：[HTTPS自签发CA证书](/posts/2017-07-17-https-certificate)。\n\n后端服务器（PHP/JAVA...）需要做的就是根据请求参数是否合法已经齐全，然后验证调用者是否有权限使用该功能。这样的案例比比皆是，比如使用第三方服务。\n\n### 小到Number校验\n有可能最简单的参数校验都不知道如何校验。这跟javascript语言以及前端的思维方式有关。我开始的时候也是这样，感觉写起代码来怪怪的。\n\n其实这是一个简单的例子，在前端检验一个Number类型的值是不是有效，我一般是通过：\n\n```js\nnum = typeof num === 'number' && num === num && num !== Infinity ? num : 0;\n```\n\n这种思路和逻辑放在前端完全是没有问题的，但是在Node.js接入层这么写感觉很尴尬。所以要转变我的思维方式：\n\n```js\nnum = Number.isFinite(num) ? num : 0;\n```\n\n小到参数的校验，我都要认真的考虑。是时候改变自己的思维方式了，考虑使用JavaScript原生的方式处理会比自己写好很多。\n\n### 权限的校验\n我并不希望所有的用户都能访问这个项目，即使他已经登录了也不行。这就是我要解决的问题。\n\n![权限](/images/2017-07-26-first-time-use-node.js/0710_09.jpg)\n\n\n权限管理在这里就显得极其重要了。最好的方式就是把权限相关的功能进行服务化。\n\n\n***\n\n使命感觉才刚刚开始！！！！！\n\n\n## 项目的部署上线\n可以说我对项目部署和运维基本上是没有经验。但是有一点就是项目上线后的可用率是必须要保证的。不能因为一点小问题，就让服务挂掉，然后还要人屁颠屁颠的重新手动重启吧。也不能说服务器断电了，重启后也要手动启动吧。这一些列的问题都是必须解决的。\n\n### pm2\n很高效的开发完成了项目后，其实项目的真正使命才要刚刚开始，如何保证服务在线上稳定的运行，保证高可用率。这就需要借助其它组件来完成了。使用[pm2](https://github.com/Unitech/pm2)管理确实是个好的方案。\n\n1. 首先通过`npm install -g pm2`进行安装。\n\n2. 安装完成了之后，就可以在项目中进行pm2相关配置。\n\n案例：\n```\n//test.config.js\n'use strict';\n//pm2配置文件\nmodule.exports = {\n    apps:[{\n        name : 'test',\n        script: './server/index.js',//应用入口\n        cwd: './',\n        instances : 1,\n        watch : ['server'],\n        env: {\n            'NODE_ENV': 'development',\n        },\n        env_production: {\n            'NODE_ENV': 'production',\n        },\n        exec_mode : 'cluster',\n        source_map_support : true,\n        max_memory_restart : '1G',\n        //日志地址\n        error_file : '/data/logs/pm2/test_error.log',\n        out_file : '/data/logs/pm2/test_access.log',\n        listen_timeout : 8000,\n        kill_timeout : 2000,\n        restart_delay : 10000, //异常情况\n        max_restarts : 10\n    }]\n};\n```\n\n3. 然后就可以通过命令启动：\n\n```\npm2 start test.config.js\n```\n\n### nginx\nNginx 是俄罗斯人编写的十分轻量级的 HTTP 服务器,Nginx，它的发音为“engine X”，是一个高性能的HTTP和反向代理服务器。nginx配置也是必不可少的，`80`端口就一个，所以我需要nginx进行转发。\n\n例如下面的案例：\n\n```\nupstream test_upstream {\n    server 127.0.0.1:6666;\n    keepalive 64;\n}\nserver{\n    listen 80;\n    server_name www.test.com;\n    client_max_body_size 10M;\n    \n    index index.html index.htm;\n    error_log /data/nginx/log/error_www.test.com.log;\n    access_log /data/nginx/log/access_www.test.com.log combined;\n \n    location / {\n        proxy_store off;\n        proxy_redirect off;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Remote-Host $remote_addr;\n        proxy_set_header X-Nginx-Proxy true;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_http_version 1.1;\n        proxy_pass http://test_upstream/;\n        proxy_read_timeout 60s;\n    }\n}\n```\n\n项目启动的端口是本机的`6666`端口，但是我不可能说访问`www.test.com`的时候后面还带着端口号吧。这个时候就是nginx发挥作用的时候，访问域名不带端口默认使用80端口，由nginx做反向代理到我服务`6666`端口。\n\n这里有一点`post`请求时`client_max_body_size`参数的设定直接会影响`data`的大小。\n\n## 日志，上报，运营维护\n项目的健康与否，都会在日志和上报中体现。我只需要每天看看日志，看看视图就可以对当天项目的运行情况做一个大致的了解。如果没有这些辅助的功能，两眼一抹黑，发生啥事都不知道。\n\n## 编码风格\n编码风格方面遵循eslint的语法标准。使用了最新的`async/await`和`import`语法。\n\n![编码](/images/2017-07-26-first-time-use-node.js/0710_10.jpg)\n\n## debug代码\nNode.js已经支持在chrome中直接调试Node.js代码，只要在启动项目的时候添加`--inspact`参数。\n\n```\nnode --inspect server/index.js\n```\n\n![debug](/images/2017-07-26-first-time-use-node.js/0710_11.jpg)\n\n\n复制上面红框的url链接到chrome里面打开，然后点击`start`后，再访问页面，需要暂停的时候可以点击`stop`，进行代码分析。\n\n\n## 总结\n作为一个初学者，我只能说Node.js在做接入层上，确实是可以做到如鱼得水，关键点就是契机。抛开Node.js接入层，前端的工程化是完全可以做的。但是服务器同构渲染是没有办法做到的，除非与后端同学配合；使用Node.js接入层，那么前端在处理一些棘手的问题时就会游刃有余，而且后端服务会得到更深一层的保护，不至于说后端服务直面攻击，因为多了一层Node.js接入层在前面。\n\n如果你正在考虑要不要使用Node.js，我是无法给出答案的。\n\n原创：Jin\n\n原文链接：[https://futu.im/posts/2017-07-26-first-time-use-node.js](https://futu.im/posts/2017-07-26-first-time-use-node.js)","source":"_posts/2017-07-26-first-time-use-node.js.md","raw":"---\ntitle: 小马的大前端之路——Node.js初探\ndate: 2017-07-26 20:00\ncategory: Node.js\ntags: [angular.js v1.x,koa2,webpack2]\nauthor: Jin\n---\n\n一次偶然的机会让我有幸跨越浏览器的鸿沟来真真切切的体验一次Node.js。\n\n首先，我想说：“很荣幸在经历了2个月的努力，第一个Node.js项目落地了”。整个项目做下来，还是算比较顺畅的。\n\n事情很简单：Node.js做的是接入层。\n\n<!-- more -->\n\n## 事出有因\n前端的技术革新是日新月异的，前端工程化已经离不开Node.js。现在大多数的项目使用的是前后端分离的架构，后端提供接口前端通过接口数据进行数据渲染。但是现在前端的代码逻辑越来越复杂，场景也越来越多。这套架构是否适合所有的应用场景值得考虑了。大前端的出现，就是一种尝试吧。试图通过Node.js接入来应对各种应用场景。\n\n![架构图](/images/2017-07-26-first-time-use-node.js/0710_01.jpg)\n\n不管是个人还是团队，技术革新是必须的。现在我们团队面临的问题就是如此，所以必须有人迈出这一步。而我也很幸运的成为第一个吃螃蟹的人。\n\n## 始作俑者\n不管什么技术，不管怎样的优秀，它的运用与否都是要经过慎重考虑的。但，总不能都不用吧。那怎么办呢。找项目试点呗，线上项目运行的好好的肯定不能重构，而且人力紧张啊。只能找新项目了。刚巧，公司需要做新的项目，本以为按老路子前后分离做。可突然有一天...\n\n组长说：“团队不是要进行技术选型吗？看这个项目使用Node.js做接入层可不可行？“。\n\n经过慎重考虑，我回答说：“可以没问题。”。（管他3721，应了再说。😄）\n\n借我老大的一句话：“技术这东西不落地，说了也白说”。\n\n> 背景：其实团队对Node.js一直都保持着高度的关注，包括我。之前我一直都有在对Node.js的源码进行解读和研究。基础架构组也一直在进行Node.js技术框架进行调研，希望打造一套适用于团队开发的集成项目框架。\n\n所以我相信：机会总是会照顾有准备的人的。\n\n就这样我的Node.js之旅就开始了。\n\n## 万事开头难\n虽然我平时可能天天都会用Node.js跑命令，写各种npm包，甚至还写过一些自己的项目。但是要真正的用Node.js来真正开发项目还是有压力的。因为这种项目技术架构下要求我操心的东西变多了。平时的时候可能我只要写一些前端逻辑代码，做做前端工程化。但是这种架构下，要求我必须去学习和应用我不熟悉的东西。\n\n我大致列了一些大的方向：\n\n* 1.Node.js接入层的总体架构是怎样的？\n* 2.前端技术用什么？\n* 3.前端工程化如何做？\n* 4.项目如何根据不同的环境（常有的环境：开发，测试，正式）运行？\n* 5.前端自动化怎么搞？\n* 6.单元测试？\n* 7.编码风格？\n* 8.Node.js如何和服务端对接？\n* 9.日志，上报，登录服务接入，权限校验等等我应该怎么做？\n* 10.项目如何发布上线？\n* 11.上线了如何保证服务稳定？\n* 12.如何debug问题？\n\n\n可能还有很多很多需要处理的问题但是这已经可以看出一下端倪了。瞬间感觉我懂的只有冰山一角。代码码的再漂亮感觉也无力。要求的不再是单一的编码能力，而是大局观，思维角度的转变。\n\n但不管怎样，新建git仓库开始搞呗。\n\n## 如何得到一个合适的项目架构\n这个确实是个问题，架构设计的合不合理。会影响到后期编码是否可以做到快速开发，还会影响后期的功能迭代和维护。\n\n那么问题来了，我是预先设计还是预先编码？\n\n*这里我选择了先编码，然后重构。*\n\n> 背景：因为上文已经说过，基础架构组已经有一个简单的Node.js集成框架，它是不完整的，但是它够简单。也就是说我在这上面重构出自己的项目架构是完全没有问题的。\n\n你可能会觉得还是要预先设计啊？\n\n> 说的是侧重点不一样，侧重于编码实现，将这个项目跑起来，然后通过重构去寻找出合适的项目架构。\n\n对于先编码还是设计这个问题我借用重构里面的是一句话：\n\n“重构改变了预先设计的角色。如果没有重构，你就必须保证预先做出的设计是正确无误，这压力太大了。这意味着如果将来需要对原始设计做任何修改，代价都将非常昂贵。因此你需要把更多的精力放在预先设计上，以避免日后的修改。如果选择重构，问题的重点就转变了。你任然做预先设计，但是不必一定要找出证正确的解决方案，此刻的你只需要得到一个合理的解决方案就够了。“  --摘自《重构-改善既有代码的设计》\n\n把一个简单的解决方法重构成一个灵活的解决方法有多难？答案是：“相当容易”。 --摘自《重构-改善既有代码的设计》\n\n实在不明白我推荐你去看看[《重构-改善既有代码的设计》](https://book.douban.com/subject/1229923/)这本书。\n\n所以我将侧重点放在了预先编码上，让后在整个项目demo跑起来之后再去寻找合适的架构。一个合理的架构体系就是把代码放到它应该出现的位置上去。代码是具有流失性的，就好比一个房间从来不整理的话，就会变的脏乱不堪。重构就是将代码再次整理将它放回原位。\n\n![目录图](/images/2017-07-26-first-time-use-node.js/0710_02.jpg)\n\n## 技术框架选型考虑\n技术框架的选择会影响着项目的总体架构，编码，产出效益，以及后期人员维护的成本。\n\n首先我想说：“不管前端还是后端用什么框架我觉得还是要站在团队的角度上去考虑这个问题，毕竟这不是个人的项目。总不能说我不在就没人能维护这个项目吧”。\n\n### Node.js后端\n**[koa2](https://github.com/koajs/koa)**。为什么没有使用koa或者express等框架，或者为什么团队不自己开发。\n\nNode.js v8LTS 已经快要来临。koa已经升级到了koa2版本，没有必要再用旧的express太老了。koa2在这两年已经锋芒毕露，现阶段团队没有必要花费很多的人力去搞一套自己的框架，可以转变思维在koa2的基础上做一个集成的适合团队项目使用的框架。\n\n基于这个基础架构团队使用koa2作为主框架使用在现阶段是最合适的。特别是在Node.js v7.6+ 原生支持了`async`和`await`语法。\n\n### 前端框架\njQuery的王朝已经渐渐被瓦解。angular.js，react和vue三足鼎立的时代已经到来。再次基于团队的现状，选择了最有优势的angular.js v1.x。\n\n在这里我并没有说其他框架不好的意思，完全是基于团队现状的考虑，以及当前框架是否可以帮助我高效的完成开发的一种考虑。假如有一天我觉得angular.js已经不适合现阶段项目开发需求，我会义不容辞的提出我的疑问。\n\n比如：项目需要我们考虑加速页面渲染时，要考虑服务器渲染；服务器压力山大时，考虑前后端分离。同构作为最合适的编码方式react和vue都是不错的选择。\n\n> 框架没有对与错，只有合不合适。\n\nwebpack2 作为当红炸子鸡，我也是优先考虑的。至于为什么没有选webpack3嘛。。。\n\n其实是这样的，我也有实际的去使用webpack3来做过测试，就是这个项目。我的衡量标准就是压缩要比现在的要小。最后没有达到预期效果所以没有进行合并。\n\ngulp 工作流处理，没毛病。这里可能会有的让人疑惑，为什么使用了webpack2 还要使用gulp？为什么2个都要用？\n\n其实对于这2个组件，它们没有绝对的对立关系。在这里它们是相辅相成的。\n\n总的前端框架：angular.js v1.x + webpack2 + gulp。\n\n> babel用来编译前端代码。\n\n项目使用的主要框架，如图：\n\n![主要框架图](/images/2017-07-26-first-time-use-node.js/0710_03.jpg)\n\n## 前端工程化\n项目的总体架构和前端技术框架的选型势必会对前端工程化产生深远的影响。前端代码放到哪里，webpack打包如何做，产出文件放到哪里。gulp需要做哪些事情，多还是少，烦不烦琐。这种种问题都会对你项目的架构做出挑战。这也就是我为什么先编码然后通过重构来调整项目架构的原因之一。假如你预先就把项目的总体架构规定死了，那么后期你的编码就会想尽办法的去套这个项目架构，写出来的代码可想而知——一定是不尽人意的。\n\n那么第一个问题就来了。\n\n### 自己编写的anglaur.js部分的源码放到哪里\n对于这个问题，在使用Node.js开发初期，我就对基础的架构做出了建议：前端源码不能放到服务器静态资源目录。只有打包后的文件才会放到静态资源文件目录，除非该文件可以直访问。\n\n这就意味着，我需要寻找一个文件目录来放置前端源代码。最合理的位置就是于服务器目录平级放置。\n\n### webpack\n通过webpack的编译打包，将文件保存到静态资源目录。我这里把所以和代码相关的打包和编译任务都交给了webpack，其中还包含公共文件的提取，版本控制，压缩，以及模版文件注入。\n\n![webpack](/images/2017-07-26-first-time-use-node.js/0710_04.jpg)\n\n#### 如何进行版本控制\n版本控制用的比较多的就2种：基于文件和基于hash。\n\n基于文件就好比，每次打包的时候都会生成不同文件名的文件。有利于在线上跑多个版本的功能。\n\n基于hash就意味着线上这个功能的文件永远就只有一个，无法进行全量灰度。\n\n这里有个问题就是：基于文件的版本控制，难点就在于打包后的`.js`或`.css`文件名是不可控的，所以，并不能把引入的js或css文件路径写死在html模版文件里面。所以通过webpack打包的时候，我需要指定模版文件是哪一个，通过webpack的模版文件注入插件完成js或css文件路径的引入。\n\n> 其它方式；通过在webpack打包完成之后，将返回值种的hash参数保存下来。这样也可以完成基于文件的版本控制。\n\n### gulp的工作流\ngulp结合webpack的应用如鱼得水，webpack打包任务是gulp任务流里最重要的一环。考虑到打包编译，都交给webpack做了。那gulp所要做的就是保证前端各个任务正确的执行。包括何时执行webpack打包，完成打包以后做什么。\n\n![gulp](/images/2017-07-26-first-time-use-node.js/0710_05.jpg)\n\n## 前端自动化\n这里的自动化可能与你在别的地方所说的自动化可能有分歧。这里的前端自动化主要指的是在前端代码如何完成自动化打包编译。其实项目中可以进行自动化的流程有很多，我在项目里接入的是[jenkins](https://jenkins.io/)，主要用来自动完成前端打包编译，然后通过zip命令对webpack打包编译后的所有文件进行打包成`.zip`文件。因为打包后的文件不入库。\n\n这里有疑惑是正常的。首先为什么不把weboack打包后生成的文件纳入git版本库？\n\n道理很简单，git版本库里面的任意一个文件产生变化，就会有下一个版本号产生。webpack每次打包编译就势必会产生文件变化，如果把打包文件纳入版本库就必须提交文件，从而产生版本号。也就是说我本地提交一次代码到git库后，jenkins会进行打包，然后打包文件又必须提交回git库，这样就相当于每次提交代码否会产生2次提交记录（一次我自己的提交，一次jenkins完成自动化打包后的提交。）。所以为了不让jenkins完成打包后向git代码库提交文件，所要做的就是把webpack打包后产生的文件都移除版本库。\n\n但问题没有这么简单，webpack打包不纳入版本库，发布的时候，这些webpack打包后产生文件怎么发布。这里解决方案就是通过把所有和webpack打包相关的文件用zip命令打包成一个`${commitId}.zip`包（commitId 是git每次提交参数的可以通过bash获取：`commitId=$(git rev-parse HEAD)`）。这样发布的时候就可以通过commitId找到`${commitId}.zip`这个压缩包，然后解压它到指定位置即可。\n\n\n为什么有2个打包任务？\n\n第一次是webpack打包，前端代码需要打包编译。第二次是文件打包，发布需要，原因很就是webpack打包文件不入库的解决方法。\n\n所以要求团队中必须会搭建并且有使用过jenkins,这个工具对团队的帮助是非常大的，预先打包文件并缓存，比在发布项目的时候再进行打包要好很多。可以预先发现打包问题及时进行补救，以免发布时打包出现问题而影响发布进度和线上项目的正常运行。\n\n![jenkins](/images/2017-07-26-first-time-use-node.js/0710_06.jpg)\n\ngit仓库支持添加hooks。所以可以在git库里添加触发事件。让jenkins自动完成打包。\n\n假如有一天，我需要写单元测试的时候，也可以试着让jenkins帮我跑自动化测试了。这算是我回答了单元测试的问题吗？哈哈哈哈哈哈哈。。。。。。\n\n前端问题基本解决了，现在问题抛到了服务端。\n\n## Node.js服务端运行环境配置\n写个项目，要跑起来很简单，我的项目入口文件是`server/index.js`。通过执行如下命令就可以启动：\n\n```\nnode server/index.js\n```\n\n但有时候，环境并没有我想的那么简单。因为项目需要针对不同的环境运行，所以必需对不同的运行环境使用不同的配置文件。这样就需要我在启动Node.js服务的时候，必须携带不同的参数。所以要求我在编码的时候尽可能的做到环境参数的配置化——牵涉到与执行环境有关的参数尽量进行配置化。\n\n![启动](/images/2017-07-26-first-time-use-node.js/0710_07.jpg)\n\n## Node.js接入层服务的接入，权限的校验\n其实对于一个小白来说，很担心的是我如何才能在Node.js里面往真正的服务器发起request请求。我项目站点的登录服务鉴权如何去做，以及用户登录了，有没有权限去访问都是个问题。\n\n### http服务的接入\n通过http模块发起requset请求。其实开始的时候我也是一脸茫然的，如何在接入层请求后端服务，可想而知这是之前作为前端的我从来没有考虑过的。现在回想起来就那么回事。有些事情想着可能很复杂，真正的做起来就好像有种：`山重水复疑无路，柳暗花明又一春。`的感觉。\n\n![服务接入](/images/2017-07-26-first-time-use-node.js/0710_08.jpg)\n\n\nNode.js接入层请求后端服务简单的代码实现：\n\n```js\nexports.example = async (ctx)=>{\n  let options = {\n    port: 80,\n    hostname: 'www.test.com',\n    method:'GET',\n    path:'/api/getuser?token=document.cookie.token'\n  };\n  let getData = function (){\n    return new Promise((resolve , reject)=>{\n      let request = http.request(options , (socket)=>{\n        let data = '';\n        console.log('status: ' , socket.statusCode , socket.headers);\n        socket.on('data' , (chunk)=>{\n          data += chunk;\n        });\n        socket.on('end' , ()=>{\n          console.log('server call back get data: ' , data);\n          return resolve(data);\n        });\n        socket.on('error' , (e)=>{\n          return reject(data);\n        });\n      });\n      request.end();\n    });\n  }\n  ctx.body = await getData();\n}\n```\n\n这里我没有考虑https的方式，因为https是建立在SSL/TLS之上的，也就是说，需要有私钥和公钥和CA证书才行。CA证书虽说可以自己颁发但还是得本机自行安装才有效。对https自己颁发CA证书感兴趣的可以看看这篇文章：[HTTPS自签发CA证书](/posts/2017-07-17-https-certificate)。\n\n后端服务器（PHP/JAVA...）需要做的就是根据请求参数是否合法已经齐全，然后验证调用者是否有权限使用该功能。这样的案例比比皆是，比如使用第三方服务。\n\n### 小到Number校验\n有可能最简单的参数校验都不知道如何校验。这跟javascript语言以及前端的思维方式有关。我开始的时候也是这样，感觉写起代码来怪怪的。\n\n其实这是一个简单的例子，在前端检验一个Number类型的值是不是有效，我一般是通过：\n\n```js\nnum = typeof num === 'number' && num === num && num !== Infinity ? num : 0;\n```\n\n这种思路和逻辑放在前端完全是没有问题的，但是在Node.js接入层这么写感觉很尴尬。所以要转变我的思维方式：\n\n```js\nnum = Number.isFinite(num) ? num : 0;\n```\n\n小到参数的校验，我都要认真的考虑。是时候改变自己的思维方式了，考虑使用JavaScript原生的方式处理会比自己写好很多。\n\n### 权限的校验\n我并不希望所有的用户都能访问这个项目，即使他已经登录了也不行。这就是我要解决的问题。\n\n![权限](/images/2017-07-26-first-time-use-node.js/0710_09.jpg)\n\n\n权限管理在这里就显得极其重要了。最好的方式就是把权限相关的功能进行服务化。\n\n\n***\n\n使命感觉才刚刚开始！！！！！\n\n\n## 项目的部署上线\n可以说我对项目部署和运维基本上是没有经验。但是有一点就是项目上线后的可用率是必须要保证的。不能因为一点小问题，就让服务挂掉，然后还要人屁颠屁颠的重新手动重启吧。也不能说服务器断电了，重启后也要手动启动吧。这一些列的问题都是必须解决的。\n\n### pm2\n很高效的开发完成了项目后，其实项目的真正使命才要刚刚开始，如何保证服务在线上稳定的运行，保证高可用率。这就需要借助其它组件来完成了。使用[pm2](https://github.com/Unitech/pm2)管理确实是个好的方案。\n\n1. 首先通过`npm install -g pm2`进行安装。\n\n2. 安装完成了之后，就可以在项目中进行pm2相关配置。\n\n案例：\n```\n//test.config.js\n'use strict';\n//pm2配置文件\nmodule.exports = {\n    apps:[{\n        name : 'test',\n        script: './server/index.js',//应用入口\n        cwd: './',\n        instances : 1,\n        watch : ['server'],\n        env: {\n            'NODE_ENV': 'development',\n        },\n        env_production: {\n            'NODE_ENV': 'production',\n        },\n        exec_mode : 'cluster',\n        source_map_support : true,\n        max_memory_restart : '1G',\n        //日志地址\n        error_file : '/data/logs/pm2/test_error.log',\n        out_file : '/data/logs/pm2/test_access.log',\n        listen_timeout : 8000,\n        kill_timeout : 2000,\n        restart_delay : 10000, //异常情况\n        max_restarts : 10\n    }]\n};\n```\n\n3. 然后就可以通过命令启动：\n\n```\npm2 start test.config.js\n```\n\n### nginx\nNginx 是俄罗斯人编写的十分轻量级的 HTTP 服务器,Nginx，它的发音为“engine X”，是一个高性能的HTTP和反向代理服务器。nginx配置也是必不可少的，`80`端口就一个，所以我需要nginx进行转发。\n\n例如下面的案例：\n\n```\nupstream test_upstream {\n    server 127.0.0.1:6666;\n    keepalive 64;\n}\nserver{\n    listen 80;\n    server_name www.test.com;\n    client_max_body_size 10M;\n    \n    index index.html index.htm;\n    error_log /data/nginx/log/error_www.test.com.log;\n    access_log /data/nginx/log/access_www.test.com.log combined;\n \n    location / {\n        proxy_store off;\n        proxy_redirect off;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Remote-Host $remote_addr;\n        proxy_set_header X-Nginx-Proxy true;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_http_version 1.1;\n        proxy_pass http://test_upstream/;\n        proxy_read_timeout 60s;\n    }\n}\n```\n\n项目启动的端口是本机的`6666`端口，但是我不可能说访问`www.test.com`的时候后面还带着端口号吧。这个时候就是nginx发挥作用的时候，访问域名不带端口默认使用80端口，由nginx做反向代理到我服务`6666`端口。\n\n这里有一点`post`请求时`client_max_body_size`参数的设定直接会影响`data`的大小。\n\n## 日志，上报，运营维护\n项目的健康与否，都会在日志和上报中体现。我只需要每天看看日志，看看视图就可以对当天项目的运行情况做一个大致的了解。如果没有这些辅助的功能，两眼一抹黑，发生啥事都不知道。\n\n## 编码风格\n编码风格方面遵循eslint的语法标准。使用了最新的`async/await`和`import`语法。\n\n![编码](/images/2017-07-26-first-time-use-node.js/0710_10.jpg)\n\n## debug代码\nNode.js已经支持在chrome中直接调试Node.js代码，只要在启动项目的时候添加`--inspact`参数。\n\n```\nnode --inspect server/index.js\n```\n\n![debug](/images/2017-07-26-first-time-use-node.js/0710_11.jpg)\n\n\n复制上面红框的url链接到chrome里面打开，然后点击`start`后，再访问页面，需要暂停的时候可以点击`stop`，进行代码分析。\n\n\n## 总结\n作为一个初学者，我只能说Node.js在做接入层上，确实是可以做到如鱼得水，关键点就是契机。抛开Node.js接入层，前端的工程化是完全可以做的。但是服务器同构渲染是没有办法做到的，除非与后端同学配合；使用Node.js接入层，那么前端在处理一些棘手的问题时就会游刃有余，而且后端服务会得到更深一层的保护，不至于说后端服务直面攻击，因为多了一层Node.js接入层在前面。\n\n如果你正在考虑要不要使用Node.js，我是无法给出答案的。\n\n原创：Jin\n\n原文链接：[https://futu.im/posts/2017-07-26-first-time-use-node.js](https://futu.im/posts/2017-07-26-first-time-use-node.js)","slug":"2017-07-26-first-time-use-node.js","published":1,"updated":"2017-12-01T08:50:00.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknif0013jxs1z8skyz16","content":"<p>一次偶然的机会让我有幸跨越浏览器的鸿沟来真真切切的体验一次Node.js。</p>\n<p>首先，我想说：“很荣幸在经历了2个月的努力，第一个Node.js项目落地了”。整个项目做下来，还是算比较顺畅的。</p>\n<p>事情很简单：Node.js做的是接入层。</p>\n<a id=\"more\"></a>\n<h2 id=\"事出有因\"><a href=\"#事出有因\" class=\"headerlink\" title=\"事出有因\"></a>事出有因</h2><p>前端的技术革新是日新月异的，前端工程化已经离不开Node.js。现在大多数的项目使用的是前后端分离的架构，后端提供接口前端通过接口数据进行数据渲染。但是现在前端的代码逻辑越来越复杂，场景也越来越多。这套架构是否适合所有的应用场景值得考虑了。大前端的出现，就是一种尝试吧。试图通过Node.js接入来应对各种应用场景。</p>\n<p><img src=\"/images/2017-07-26-first-time-use-node.js/0710_01.jpg\" alt=\"架构图\"></p>\n<p>不管是个人还是团队，技术革新是必须的。现在我们团队面临的问题就是如此，所以必须有人迈出这一步。而我也很幸运的成为第一个吃螃蟹的人。</p>\n<h2 id=\"始作俑者\"><a href=\"#始作俑者\" class=\"headerlink\" title=\"始作俑者\"></a>始作俑者</h2><p>不管什么技术，不管怎样的优秀，它的运用与否都是要经过慎重考虑的。但，总不能都不用吧。那怎么办呢。找项目试点呗，线上项目运行的好好的肯定不能重构，而且人力紧张啊。只能找新项目了。刚巧，公司需要做新的项目，本以为按老路子前后分离做。可突然有一天…</p>\n<p>组长说：“团队不是要进行技术选型吗？看这个项目使用Node.js做接入层可不可行？“。</p>\n<p>经过慎重考虑，我回答说：“可以没问题。”。（管他3721，应了再说。😄）</p>\n<p>借我老大的一句话：“技术这东西不落地，说了也白说”。</p>\n<blockquote>\n<p>背景：其实团队对Node.js一直都保持着高度的关注，包括我。之前我一直都有在对Node.js的源码进行解读和研究。基础架构组也一直在进行Node.js技术框架进行调研，希望打造一套适用于团队开发的集成项目框架。</p>\n</blockquote>\n<p>所以我相信：机会总是会照顾有准备的人的。</p>\n<p>就这样我的Node.js之旅就开始了。</p>\n<h2 id=\"万事开头难\"><a href=\"#万事开头难\" class=\"headerlink\" title=\"万事开头难\"></a>万事开头难</h2><p>虽然我平时可能天天都会用Node.js跑命令，写各种npm包，甚至还写过一些自己的项目。但是要真正的用Node.js来真正开发项目还是有压力的。因为这种项目技术架构下要求我操心的东西变多了。平时的时候可能我只要写一些前端逻辑代码，做做前端工程化。但是这种架构下，要求我必须去学习和应用我不熟悉的东西。</p>\n<p>我大致列了一些大的方向：</p>\n<ul>\n<li>1.Node.js接入层的总体架构是怎样的？</li>\n<li>2.前端技术用什么？</li>\n<li>3.前端工程化如何做？</li>\n<li>4.项目如何根据不同的环境（常有的环境：开发，测试，正式）运行？</li>\n<li>5.前端自动化怎么搞？</li>\n<li>6.单元测试？</li>\n<li>7.编码风格？</li>\n<li>8.Node.js如何和服务端对接？</li>\n<li>9.日志，上报，登录服务接入，权限校验等等我应该怎么做？</li>\n<li>10.项目如何发布上线？</li>\n<li>11.上线了如何保证服务稳定？</li>\n<li>12.如何debug问题？</li>\n</ul>\n<p>可能还有很多很多需要处理的问题但是这已经可以看出一下端倪了。瞬间感觉我懂的只有冰山一角。代码码的再漂亮感觉也无力。要求的不再是单一的编码能力，而是大局观，思维角度的转变。</p>\n<p>但不管怎样，新建git仓库开始搞呗。</p>\n<h2 id=\"如何得到一个合适的项目架构\"><a href=\"#如何得到一个合适的项目架构\" class=\"headerlink\" title=\"如何得到一个合适的项目架构\"></a>如何得到一个合适的项目架构</h2><p>这个确实是个问题，架构设计的合不合理。会影响到后期编码是否可以做到快速开发，还会影响后期的功能迭代和维护。</p>\n<p>那么问题来了，我是预先设计还是预先编码？</p>\n<p><em>这里我选择了先编码，然后重构。</em></p>\n<blockquote>\n<p>背景：因为上文已经说过，基础架构组已经有一个简单的Node.js集成框架，它是不完整的，但是它够简单。也就是说我在这上面重构出自己的项目架构是完全没有问题的。</p>\n</blockquote>\n<p>你可能会觉得还是要预先设计啊？</p>\n<blockquote>\n<p>说的是侧重点不一样，侧重于编码实现，将这个项目跑起来，然后通过重构去寻找出合适的项目架构。</p>\n</blockquote>\n<p>对于先编码还是设计这个问题我借用重构里面的是一句话：</p>\n<p>“重构改变了预先设计的角色。如果没有重构，你就必须保证预先做出的设计是正确无误，这压力太大了。这意味着如果将来需要对原始设计做任何修改，代价都将非常昂贵。因此你需要把更多的精力放在预先设计上，以避免日后的修改。如果选择重构，问题的重点就转变了。你任然做预先设计，但是不必一定要找出证正确的解决方案，此刻的你只需要得到一个合理的解决方案就够了。“  –摘自《重构-改善既有代码的设计》</p>\n<p>把一个简单的解决方法重构成一个灵活的解决方法有多难？答案是：“相当容易”。 –摘自《重构-改善既有代码的设计》</p>\n<p>实在不明白我推荐你去看看<a href=\"https://book.douban.com/subject/1229923/\" target=\"_blank\" rel=\"noopener\">《重构-改善既有代码的设计》</a>这本书。</p>\n<p>所以我将侧重点放在了预先编码上，让后在整个项目demo跑起来之后再去寻找合适的架构。一个合理的架构体系就是把代码放到它应该出现的位置上去。代码是具有流失性的，就好比一个房间从来不整理的话，就会变的脏乱不堪。重构就是将代码再次整理将它放回原位。</p>\n<p><img src=\"/images/2017-07-26-first-time-use-node.js/0710_02.jpg\" alt=\"目录图\"></p>\n<h2 id=\"技术框架选型考虑\"><a href=\"#技术框架选型考虑\" class=\"headerlink\" title=\"技术框架选型考虑\"></a>技术框架选型考虑</h2><p>技术框架的选择会影响着项目的总体架构，编码，产出效益，以及后期人员维护的成本。</p>\n<p>首先我想说：“不管前端还是后端用什么框架我觉得还是要站在团队的角度上去考虑这个问题，毕竟这不是个人的项目。总不能说我不在就没人能维护这个项目吧”。</p>\n<h3 id=\"Node-js后端\"><a href=\"#Node-js后端\" class=\"headerlink\" title=\"Node.js后端\"></a>Node.js后端</h3><p><strong><a href=\"https://github.com/koajs/koa\" target=\"_blank\" rel=\"noopener\">koa2</a></strong>。为什么没有使用koa或者express等框架，或者为什么团队不自己开发。</p>\n<p>Node.js v8LTS 已经快要来临。koa已经升级到了koa2版本，没有必要再用旧的express太老了。koa2在这两年已经锋芒毕露，现阶段团队没有必要花费很多的人力去搞一套自己的框架，可以转变思维在koa2的基础上做一个集成的适合团队项目使用的框架。</p>\n<p>基于这个基础架构团队使用koa2作为主框架使用在现阶段是最合适的。特别是在Node.js v7.6+ 原生支持了<code>async</code>和<code>await</code>语法。</p>\n<h3 id=\"前端框架\"><a href=\"#前端框架\" class=\"headerlink\" title=\"前端框架\"></a>前端框架</h3><p>jQuery的王朝已经渐渐被瓦解。angular.js，react和vue三足鼎立的时代已经到来。再次基于团队的现状，选择了最有优势的angular.js v1.x。</p>\n<p>在这里我并没有说其他框架不好的意思，完全是基于团队现状的考虑，以及当前框架是否可以帮助我高效的完成开发的一种考虑。假如有一天我觉得angular.js已经不适合现阶段项目开发需求，我会义不容辞的提出我的疑问。</p>\n<p>比如：项目需要我们考虑加速页面渲染时，要考虑服务器渲染；服务器压力山大时，考虑前后端分离。同构作为最合适的编码方式react和vue都是不错的选择。</p>\n<blockquote>\n<p>框架没有对与错，只有合不合适。</p>\n</blockquote>\n<p>webpack2 作为当红炸子鸡，我也是优先考虑的。至于为什么没有选webpack3嘛。。。</p>\n<p>其实是这样的，我也有实际的去使用webpack3来做过测试，就是这个项目。我的衡量标准就是压缩要比现在的要小。最后没有达到预期效果所以没有进行合并。</p>\n<p>gulp 工作流处理，没毛病。这里可能会有的让人疑惑，为什么使用了webpack2 还要使用gulp？为什么2个都要用？</p>\n<p>其实对于这2个组件，它们没有绝对的对立关系。在这里它们是相辅相成的。</p>\n<p>总的前端框架：angular.js v1.x + webpack2 + gulp。</p>\n<blockquote>\n<p>babel用来编译前端代码。</p>\n</blockquote>\n<p>项目使用的主要框架，如图：</p>\n<p><img src=\"/images/2017-07-26-first-time-use-node.js/0710_03.jpg\" alt=\"主要框架图\"></p>\n<h2 id=\"前端工程化\"><a href=\"#前端工程化\" class=\"headerlink\" title=\"前端工程化\"></a>前端工程化</h2><p>项目的总体架构和前端技术框架的选型势必会对前端工程化产生深远的影响。前端代码放到哪里，webpack打包如何做，产出文件放到哪里。gulp需要做哪些事情，多还是少，烦不烦琐。这种种问题都会对你项目的架构做出挑战。这也就是我为什么先编码然后通过重构来调整项目架构的原因之一。假如你预先就把项目的总体架构规定死了，那么后期你的编码就会想尽办法的去套这个项目架构，写出来的代码可想而知——一定是不尽人意的。</p>\n<p>那么第一个问题就来了。</p>\n<h3 id=\"自己编写的anglaur-js部分的源码放到哪里\"><a href=\"#自己编写的anglaur-js部分的源码放到哪里\" class=\"headerlink\" title=\"自己编写的anglaur.js部分的源码放到哪里\"></a>自己编写的anglaur.js部分的源码放到哪里</h3><p>对于这个问题，在使用Node.js开发初期，我就对基础的架构做出了建议：前端源码不能放到服务器静态资源目录。只有打包后的文件才会放到静态资源文件目录，除非该文件可以直访问。</p>\n<p>这就意味着，我需要寻找一个文件目录来放置前端源代码。最合理的位置就是于服务器目录平级放置。</p>\n<h3 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h3><p>通过webpack的编译打包，将文件保存到静态资源目录。我这里把所以和代码相关的打包和编译任务都交给了webpack，其中还包含公共文件的提取，版本控制，压缩，以及模版文件注入。</p>\n<p><img src=\"/images/2017-07-26-first-time-use-node.js/0710_04.jpg\" alt=\"webpack\"></p>\n<h4 id=\"如何进行版本控制\"><a href=\"#如何进行版本控制\" class=\"headerlink\" title=\"如何进行版本控制\"></a>如何进行版本控制</h4><p>版本控制用的比较多的就2种：基于文件和基于hash。</p>\n<p>基于文件就好比，每次打包的时候都会生成不同文件名的文件。有利于在线上跑多个版本的功能。</p>\n<p>基于hash就意味着线上这个功能的文件永远就只有一个，无法进行全量灰度。</p>\n<p>这里有个问题就是：基于文件的版本控制，难点就在于打包后的<code>.js</code>或<code>.css</code>文件名是不可控的，所以，并不能把引入的js或css文件路径写死在html模版文件里面。所以通过webpack打包的时候，我需要指定模版文件是哪一个，通过webpack的模版文件注入插件完成js或css文件路径的引入。</p>\n<blockquote>\n<p>其它方式；通过在webpack打包完成之后，将返回值种的hash参数保存下来。这样也可以完成基于文件的版本控制。</p>\n</blockquote>\n<h3 id=\"gulp的工作流\"><a href=\"#gulp的工作流\" class=\"headerlink\" title=\"gulp的工作流\"></a>gulp的工作流</h3><p>gulp结合webpack的应用如鱼得水，webpack打包任务是gulp任务流里最重要的一环。考虑到打包编译，都交给webpack做了。那gulp所要做的就是保证前端各个任务正确的执行。包括何时执行webpack打包，完成打包以后做什么。</p>\n<p><img src=\"/images/2017-07-26-first-time-use-node.js/0710_05.jpg\" alt=\"gulp\"></p>\n<h2 id=\"前端自动化\"><a href=\"#前端自动化\" class=\"headerlink\" title=\"前端自动化\"></a>前端自动化</h2><p>这里的自动化可能与你在别的地方所说的自动化可能有分歧。这里的前端自动化主要指的是在前端代码如何完成自动化打包编译。其实项目中可以进行自动化的流程有很多，我在项目里接入的是<a href=\"https://jenkins.io/\" target=\"_blank\" rel=\"noopener\">jenkins</a>，主要用来自动完成前端打包编译，然后通过zip命令对webpack打包编译后的所有文件进行打包成<code>.zip</code>文件。因为打包后的文件不入库。</p>\n<p>这里有疑惑是正常的。首先为什么不把weboack打包后生成的文件纳入git版本库？</p>\n<p>道理很简单，git版本库里面的任意一个文件产生变化，就会有下一个版本号产生。webpack每次打包编译就势必会产生文件变化，如果把打包文件纳入版本库就必须提交文件，从而产生版本号。也就是说我本地提交一次代码到git库后，jenkins会进行打包，然后打包文件又必须提交回git库，这样就相当于每次提交代码否会产生2次提交记录（一次我自己的提交，一次jenkins完成自动化打包后的提交。）。所以为了不让jenkins完成打包后向git代码库提交文件，所要做的就是把webpack打包后产生的文件都移除版本库。</p>\n<p>但问题没有这么简单，webpack打包不纳入版本库，发布的时候，这些webpack打包后产生文件怎么发布。这里解决方案就是通过把所有和webpack打包相关的文件用zip命令打包成一个<code>${commitId}.zip</code>包（commitId 是git每次提交参数的可以通过bash获取：<code>commitId=$(git rev-parse HEAD)</code>）。这样发布的时候就可以通过commitId找到<code>${commitId}.zip</code>这个压缩包，然后解压它到指定位置即可。</p>\n<p>为什么有2个打包任务？</p>\n<p>第一次是webpack打包，前端代码需要打包编译。第二次是文件打包，发布需要，原因很就是webpack打包文件不入库的解决方法。</p>\n<p>所以要求团队中必须会搭建并且有使用过jenkins,这个工具对团队的帮助是非常大的，预先打包文件并缓存，比在发布项目的时候再进行打包要好很多。可以预先发现打包问题及时进行补救，以免发布时打包出现问题而影响发布进度和线上项目的正常运行。</p>\n<p><img src=\"/images/2017-07-26-first-time-use-node.js/0710_06.jpg\" alt=\"jenkins\"></p>\n<p>git仓库支持添加hooks。所以可以在git库里添加触发事件。让jenkins自动完成打包。</p>\n<p>假如有一天，我需要写单元测试的时候，也可以试着让jenkins帮我跑自动化测试了。这算是我回答了单元测试的问题吗？哈哈哈哈哈哈哈。。。。。。</p>\n<p>前端问题基本解决了，现在问题抛到了服务端。</p>\n<h2 id=\"Node-js服务端运行环境配置\"><a href=\"#Node-js服务端运行环境配置\" class=\"headerlink\" title=\"Node.js服务端运行环境配置\"></a>Node.js服务端运行环境配置</h2><p>写个项目，要跑起来很简单，我的项目入口文件是<code>server/index.js</code>。通过执行如下命令就可以启动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node server/index.js</span><br></pre></td></tr></table></figure>\n<p>但有时候，环境并没有我想的那么简单。因为项目需要针对不同的环境运行，所以必需对不同的运行环境使用不同的配置文件。这样就需要我在启动Node.js服务的时候，必须携带不同的参数。所以要求我在编码的时候尽可能的做到环境参数的配置化——牵涉到与执行环境有关的参数尽量进行配置化。</p>\n<p><img src=\"/images/2017-07-26-first-time-use-node.js/0710_07.jpg\" alt=\"启动\"></p>\n<h2 id=\"Node-js接入层服务的接入，权限的校验\"><a href=\"#Node-js接入层服务的接入，权限的校验\" class=\"headerlink\" title=\"Node.js接入层服务的接入，权限的校验\"></a>Node.js接入层服务的接入，权限的校验</h2><p>其实对于一个小白来说，很担心的是我如何才能在Node.js里面往真正的服务器发起request请求。我项目站点的登录服务鉴权如何去做，以及用户登录了，有没有权限去访问都是个问题。</p>\n<h3 id=\"http服务的接入\"><a href=\"#http服务的接入\" class=\"headerlink\" title=\"http服务的接入\"></a>http服务的接入</h3><p>通过http模块发起requset请求。其实开始的时候我也是一脸茫然的，如何在接入层请求后端服务，可想而知这是之前作为前端的我从来没有考虑过的。现在回想起来就那么回事。有些事情想着可能很复杂，真正的做起来就好像有种：<code>山重水复疑无路，柳暗花明又一春。</code>的感觉。</p>\n<p><img src=\"/images/2017-07-26-first-time-use-node.js/0710_08.jpg\" alt=\"服务接入\"></p>\n<p>Node.js接入层请求后端服务简单的代码实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.example = <span class=\"keyword\">async</span> (ctx)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> options = &#123;</span><br><span class=\"line\">    port: <span class=\"number\">80</span>,</span><br><span class=\"line\">    hostname: <span class=\"string\">'www.test.com'</span>,</span><br><span class=\"line\">    method:<span class=\"string\">'GET'</span>,</span><br><span class=\"line\">    path:<span class=\"string\">'/api/getuser?token=document.cookie.token'</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> getData = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve , reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> request = http.request(options , (socket)=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'status: '</span> , socket.statusCode , socket.headers);</span><br><span class=\"line\">        socket.on(<span class=\"string\">'data'</span> , (chunk)=&gt;&#123;</span><br><span class=\"line\">          data += chunk;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        socket.on(<span class=\"string\">'end'</span> , ()=&gt;&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">'server call back get data: '</span> , data);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> resolve(data);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        socket.on(<span class=\"string\">'error'</span> , (e)=&gt;&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> reject(data);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      request.end();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ctx.body = <span class=\"keyword\">await</span> getData();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我没有考虑https的方式，因为https是建立在SSL/TLS之上的，也就是说，需要有私钥和公钥和CA证书才行。CA证书虽说可以自己颁发但还是得本机自行安装才有效。对https自己颁发CA证书感兴趣的可以看看这篇文章：<a href=\"/posts/2017-07-17-https-certificate\">HTTPS自签发CA证书</a>。</p>\n<p>后端服务器（PHP/JAVA…）需要做的就是根据请求参数是否合法已经齐全，然后验证调用者是否有权限使用该功能。这样的案例比比皆是，比如使用第三方服务。</p>\n<h3 id=\"小到Number校验\"><a href=\"#小到Number校验\" class=\"headerlink\" title=\"小到Number校验\"></a>小到Number校验</h3><p>有可能最简单的参数校验都不知道如何校验。这跟javascript语言以及前端的思维方式有关。我开始的时候也是这样，感觉写起代码来怪怪的。</p>\n<p>其实这是一个简单的例子，在前端检验一个Number类型的值是不是有效，我一般是通过：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = <span class=\"keyword\">typeof</span> num === <span class=\"string\">'number'</span> &amp;&amp; num === num &amp;&amp; num !== <span class=\"literal\">Infinity</span> ? num : <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>这种思路和逻辑放在前端完全是没有问题的，但是在Node.js接入层这么写感觉很尴尬。所以要转变我的思维方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = <span class=\"built_in\">Number</span>.isFinite(num) ? num : <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>小到参数的校验，我都要认真的考虑。是时候改变自己的思维方式了，考虑使用JavaScript原生的方式处理会比自己写好很多。</p>\n<h3 id=\"权限的校验\"><a href=\"#权限的校验\" class=\"headerlink\" title=\"权限的校验\"></a>权限的校验</h3><p>我并不希望所有的用户都能访问这个项目，即使他已经登录了也不行。这就是我要解决的问题。</p>\n<p><img src=\"/images/2017-07-26-first-time-use-node.js/0710_09.jpg\" alt=\"权限\"></p>\n<p>权限管理在这里就显得极其重要了。最好的方式就是把权限相关的功能进行服务化。</p>\n<hr>\n<p>使命感觉才刚刚开始！！！！！</p>\n<h2 id=\"项目的部署上线\"><a href=\"#项目的部署上线\" class=\"headerlink\" title=\"项目的部署上线\"></a>项目的部署上线</h2><p>可以说我对项目部署和运维基本上是没有经验。但是有一点就是项目上线后的可用率是必须要保证的。不能因为一点小问题，就让服务挂掉，然后还要人屁颠屁颠的重新手动重启吧。也不能说服务器断电了，重启后也要手动启动吧。这一些列的问题都是必须解决的。</p>\n<h3 id=\"pm2\"><a href=\"#pm2\" class=\"headerlink\" title=\"pm2\"></a>pm2</h3><p>很高效的开发完成了项目后，其实项目的真正使命才要刚刚开始，如何保证服务在线上稳定的运行，保证高可用率。这就需要借助其它组件来完成了。使用<a href=\"https://github.com/Unitech/pm2\" target=\"_blank\" rel=\"noopener\">pm2</a>管理确实是个好的方案。</p>\n<ol>\n<li><p>首先通过<code>npm install -g pm2</code>进行安装。</p>\n</li>\n<li><p>安装完成了之后，就可以在项目中进行pm2相关配置。</p>\n</li>\n</ol>\n<p>案例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//test.config.js</span><br><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">//pm2配置文件</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    apps:[&#123;</span><br><span class=\"line\">        name : &apos;test&apos;,</span><br><span class=\"line\">        script: &apos;./server/index.js&apos;,//应用入口</span><br><span class=\"line\">        cwd: &apos;./&apos;,</span><br><span class=\"line\">        instances : 1,</span><br><span class=\"line\">        watch : [&apos;server&apos;],</span><br><span class=\"line\">        env: &#123;</span><br><span class=\"line\">            &apos;NODE_ENV&apos;: &apos;development&apos;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        env_production: &#123;</span><br><span class=\"line\">            &apos;NODE_ENV&apos;: &apos;production&apos;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        exec_mode : &apos;cluster&apos;,</span><br><span class=\"line\">        source_map_support : true,</span><br><span class=\"line\">        max_memory_restart : &apos;1G&apos;,</span><br><span class=\"line\">        //日志地址</span><br><span class=\"line\">        error_file : &apos;/data/logs/pm2/test_error.log&apos;,</span><br><span class=\"line\">        out_file : &apos;/data/logs/pm2/test_access.log&apos;,</span><br><span class=\"line\">        listen_timeout : 8000,</span><br><span class=\"line\">        kill_timeout : 2000,</span><br><span class=\"line\">        restart_delay : 10000, //异常情况</span><br><span class=\"line\">        max_restarts : 10</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>然后就可以通过命令启动：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start test.config.js</span><br></pre></td></tr></table></figure>\n<h3 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h3><p>Nginx 是俄罗斯人编写的十分轻量级的 HTTP 服务器,Nginx，它的发音为“engine X”，是一个高性能的HTTP和反向代理服务器。nginx配置也是必不可少的，<code>80</code>端口就一个，所以我需要nginx进行转发。</p>\n<p>例如下面的案例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream test_upstream &#123;</span><br><span class=\"line\">    server 127.0.0.1:6666;</span><br><span class=\"line\">    keepalive 64;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.test.com;</span><br><span class=\"line\">    client_max_body_size 10M;</span><br><span class=\"line\">    </span><br><span class=\"line\">    index index.html index.htm;</span><br><span class=\"line\">    error_log /data/nginx/log/error_www.test.com.log;</span><br><span class=\"line\">    access_log /data/nginx/log/access_www.test.com.log combined;</span><br><span class=\"line\"> </span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_store off;</span><br><span class=\"line\">        proxy_redirect off;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header Host $http_host;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">        proxy_set_header Remote-Host $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Nginx-Proxy true;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_pass http://test_upstream/;</span><br><span class=\"line\">        proxy_read_timeout 60s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>项目启动的端口是本机的<code>6666</code>端口，但是我不可能说访问<code>www.test.com</code>的时候后面还带着端口号吧。这个时候就是nginx发挥作用的时候，访问域名不带端口默认使用80端口，由nginx做反向代理到我服务<code>6666</code>端口。</p>\n<p>这里有一点<code>post</code>请求时<code>client_max_body_size</code>参数的设定直接会影响<code>data</code>的大小。</p>\n<h2 id=\"日志，上报，运营维护\"><a href=\"#日志，上报，运营维护\" class=\"headerlink\" title=\"日志，上报，运营维护\"></a>日志，上报，运营维护</h2><p>项目的健康与否，都会在日志和上报中体现。我只需要每天看看日志，看看视图就可以对当天项目的运行情况做一个大致的了解。如果没有这些辅助的功能，两眼一抹黑，发生啥事都不知道。</p>\n<h2 id=\"编码风格\"><a href=\"#编码风格\" class=\"headerlink\" title=\"编码风格\"></a>编码风格</h2><p>编码风格方面遵循eslint的语法标准。使用了最新的<code>async/await</code>和<code>import</code>语法。</p>\n<p><img src=\"/images/2017-07-26-first-time-use-node.js/0710_10.jpg\" alt=\"编码\"></p>\n<h2 id=\"debug代码\"><a href=\"#debug代码\" class=\"headerlink\" title=\"debug代码\"></a>debug代码</h2><p>Node.js已经支持在chrome中直接调试Node.js代码，只要在启动项目的时候添加<code>--inspact</code>参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node --inspect server/index.js</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2017-07-26-first-time-use-node.js/0710_11.jpg\" alt=\"debug\"></p>\n<p>复制上面红框的url链接到chrome里面打开，然后点击<code>start</code>后，再访问页面，需要暂停的时候可以点击<code>stop</code>，进行代码分析。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>作为一个初学者，我只能说Node.js在做接入层上，确实是可以做到如鱼得水，关键点就是契机。抛开Node.js接入层，前端的工程化是完全可以做的。但是服务器同构渲染是没有办法做到的，除非与后端同学配合；使用Node.js接入层，那么前端在处理一些棘手的问题时就会游刃有余，而且后端服务会得到更深一层的保护，不至于说后端服务直面攻击，因为多了一层Node.js接入层在前面。</p>\n<p>如果你正在考虑要不要使用Node.js，我是无法给出答案的。</p>\n<p>原创：Jin</p>\n<p>原文链接：<a href=\"https://futu.im/posts/2017-07-26-first-time-use-node.js\">https://futu.im/posts/2017-07-26-first-time-use-node.js</a></p>\n","site":{"data":{}},"excerpt":"<p>一次偶然的机会让我有幸跨越浏览器的鸿沟来真真切切的体验一次Node.js。</p>\n<p>首先，我想说：“很荣幸在经历了2个月的努力，第一个Node.js项目落地了”。整个项目做下来，还是算比较顺畅的。</p>\n<p>事情很简单：Node.js做的是接入层。</p>","more":"<h2 id=\"事出有因\"><a href=\"#事出有因\" class=\"headerlink\" title=\"事出有因\"></a>事出有因</h2><p>前端的技术革新是日新月异的，前端工程化已经离不开Node.js。现在大多数的项目使用的是前后端分离的架构，后端提供接口前端通过接口数据进行数据渲染。但是现在前端的代码逻辑越来越复杂，场景也越来越多。这套架构是否适合所有的应用场景值得考虑了。大前端的出现，就是一种尝试吧。试图通过Node.js接入来应对各种应用场景。</p>\n<p><img src=\"/images/2017-07-26-first-time-use-node.js/0710_01.jpg\" alt=\"架构图\"></p>\n<p>不管是个人还是团队，技术革新是必须的。现在我们团队面临的问题就是如此，所以必须有人迈出这一步。而我也很幸运的成为第一个吃螃蟹的人。</p>\n<h2 id=\"始作俑者\"><a href=\"#始作俑者\" class=\"headerlink\" title=\"始作俑者\"></a>始作俑者</h2><p>不管什么技术，不管怎样的优秀，它的运用与否都是要经过慎重考虑的。但，总不能都不用吧。那怎么办呢。找项目试点呗，线上项目运行的好好的肯定不能重构，而且人力紧张啊。只能找新项目了。刚巧，公司需要做新的项目，本以为按老路子前后分离做。可突然有一天…</p>\n<p>组长说：“团队不是要进行技术选型吗？看这个项目使用Node.js做接入层可不可行？“。</p>\n<p>经过慎重考虑，我回答说：“可以没问题。”。（管他3721，应了再说。😄）</p>\n<p>借我老大的一句话：“技术这东西不落地，说了也白说”。</p>\n<blockquote>\n<p>背景：其实团队对Node.js一直都保持着高度的关注，包括我。之前我一直都有在对Node.js的源码进行解读和研究。基础架构组也一直在进行Node.js技术框架进行调研，希望打造一套适用于团队开发的集成项目框架。</p>\n</blockquote>\n<p>所以我相信：机会总是会照顾有准备的人的。</p>\n<p>就这样我的Node.js之旅就开始了。</p>\n<h2 id=\"万事开头难\"><a href=\"#万事开头难\" class=\"headerlink\" title=\"万事开头难\"></a>万事开头难</h2><p>虽然我平时可能天天都会用Node.js跑命令，写各种npm包，甚至还写过一些自己的项目。但是要真正的用Node.js来真正开发项目还是有压力的。因为这种项目技术架构下要求我操心的东西变多了。平时的时候可能我只要写一些前端逻辑代码，做做前端工程化。但是这种架构下，要求我必须去学习和应用我不熟悉的东西。</p>\n<p>我大致列了一些大的方向：</p>\n<ul>\n<li>1.Node.js接入层的总体架构是怎样的？</li>\n<li>2.前端技术用什么？</li>\n<li>3.前端工程化如何做？</li>\n<li>4.项目如何根据不同的环境（常有的环境：开发，测试，正式）运行？</li>\n<li>5.前端自动化怎么搞？</li>\n<li>6.单元测试？</li>\n<li>7.编码风格？</li>\n<li>8.Node.js如何和服务端对接？</li>\n<li>9.日志，上报，登录服务接入，权限校验等等我应该怎么做？</li>\n<li>10.项目如何发布上线？</li>\n<li>11.上线了如何保证服务稳定？</li>\n<li>12.如何debug问题？</li>\n</ul>\n<p>可能还有很多很多需要处理的问题但是这已经可以看出一下端倪了。瞬间感觉我懂的只有冰山一角。代码码的再漂亮感觉也无力。要求的不再是单一的编码能力，而是大局观，思维角度的转变。</p>\n<p>但不管怎样，新建git仓库开始搞呗。</p>\n<h2 id=\"如何得到一个合适的项目架构\"><a href=\"#如何得到一个合适的项目架构\" class=\"headerlink\" title=\"如何得到一个合适的项目架构\"></a>如何得到一个合适的项目架构</h2><p>这个确实是个问题，架构设计的合不合理。会影响到后期编码是否可以做到快速开发，还会影响后期的功能迭代和维护。</p>\n<p>那么问题来了，我是预先设计还是预先编码？</p>\n<p><em>这里我选择了先编码，然后重构。</em></p>\n<blockquote>\n<p>背景：因为上文已经说过，基础架构组已经有一个简单的Node.js集成框架，它是不完整的，但是它够简单。也就是说我在这上面重构出自己的项目架构是完全没有问题的。</p>\n</blockquote>\n<p>你可能会觉得还是要预先设计啊？</p>\n<blockquote>\n<p>说的是侧重点不一样，侧重于编码实现，将这个项目跑起来，然后通过重构去寻找出合适的项目架构。</p>\n</blockquote>\n<p>对于先编码还是设计这个问题我借用重构里面的是一句话：</p>\n<p>“重构改变了预先设计的角色。如果没有重构，你就必须保证预先做出的设计是正确无误，这压力太大了。这意味着如果将来需要对原始设计做任何修改，代价都将非常昂贵。因此你需要把更多的精力放在预先设计上，以避免日后的修改。如果选择重构，问题的重点就转变了。你任然做预先设计，但是不必一定要找出证正确的解决方案，此刻的你只需要得到一个合理的解决方案就够了。“  –摘自《重构-改善既有代码的设计》</p>\n<p>把一个简单的解决方法重构成一个灵活的解决方法有多难？答案是：“相当容易”。 –摘自《重构-改善既有代码的设计》</p>\n<p>实在不明白我推荐你去看看<a href=\"https://book.douban.com/subject/1229923/\" target=\"_blank\" rel=\"noopener\">《重构-改善既有代码的设计》</a>这本书。</p>\n<p>所以我将侧重点放在了预先编码上，让后在整个项目demo跑起来之后再去寻找合适的架构。一个合理的架构体系就是把代码放到它应该出现的位置上去。代码是具有流失性的，就好比一个房间从来不整理的话，就会变的脏乱不堪。重构就是将代码再次整理将它放回原位。</p>\n<p><img src=\"/images/2017-07-26-first-time-use-node.js/0710_02.jpg\" alt=\"目录图\"></p>\n<h2 id=\"技术框架选型考虑\"><a href=\"#技术框架选型考虑\" class=\"headerlink\" title=\"技术框架选型考虑\"></a>技术框架选型考虑</h2><p>技术框架的选择会影响着项目的总体架构，编码，产出效益，以及后期人员维护的成本。</p>\n<p>首先我想说：“不管前端还是后端用什么框架我觉得还是要站在团队的角度上去考虑这个问题，毕竟这不是个人的项目。总不能说我不在就没人能维护这个项目吧”。</p>\n<h3 id=\"Node-js后端\"><a href=\"#Node-js后端\" class=\"headerlink\" title=\"Node.js后端\"></a>Node.js后端</h3><p><strong><a href=\"https://github.com/koajs/koa\" target=\"_blank\" rel=\"noopener\">koa2</a></strong>。为什么没有使用koa或者express等框架，或者为什么团队不自己开发。</p>\n<p>Node.js v8LTS 已经快要来临。koa已经升级到了koa2版本，没有必要再用旧的express太老了。koa2在这两年已经锋芒毕露，现阶段团队没有必要花费很多的人力去搞一套自己的框架，可以转变思维在koa2的基础上做一个集成的适合团队项目使用的框架。</p>\n<p>基于这个基础架构团队使用koa2作为主框架使用在现阶段是最合适的。特别是在Node.js v7.6+ 原生支持了<code>async</code>和<code>await</code>语法。</p>\n<h3 id=\"前端框架\"><a href=\"#前端框架\" class=\"headerlink\" title=\"前端框架\"></a>前端框架</h3><p>jQuery的王朝已经渐渐被瓦解。angular.js，react和vue三足鼎立的时代已经到来。再次基于团队的现状，选择了最有优势的angular.js v1.x。</p>\n<p>在这里我并没有说其他框架不好的意思，完全是基于团队现状的考虑，以及当前框架是否可以帮助我高效的完成开发的一种考虑。假如有一天我觉得angular.js已经不适合现阶段项目开发需求，我会义不容辞的提出我的疑问。</p>\n<p>比如：项目需要我们考虑加速页面渲染时，要考虑服务器渲染；服务器压力山大时，考虑前后端分离。同构作为最合适的编码方式react和vue都是不错的选择。</p>\n<blockquote>\n<p>框架没有对与错，只有合不合适。</p>\n</blockquote>\n<p>webpack2 作为当红炸子鸡，我也是优先考虑的。至于为什么没有选webpack3嘛。。。</p>\n<p>其实是这样的，我也有实际的去使用webpack3来做过测试，就是这个项目。我的衡量标准就是压缩要比现在的要小。最后没有达到预期效果所以没有进行合并。</p>\n<p>gulp 工作流处理，没毛病。这里可能会有的让人疑惑，为什么使用了webpack2 还要使用gulp？为什么2个都要用？</p>\n<p>其实对于这2个组件，它们没有绝对的对立关系。在这里它们是相辅相成的。</p>\n<p>总的前端框架：angular.js v1.x + webpack2 + gulp。</p>\n<blockquote>\n<p>babel用来编译前端代码。</p>\n</blockquote>\n<p>项目使用的主要框架，如图：</p>\n<p><img src=\"/images/2017-07-26-first-time-use-node.js/0710_03.jpg\" alt=\"主要框架图\"></p>\n<h2 id=\"前端工程化\"><a href=\"#前端工程化\" class=\"headerlink\" title=\"前端工程化\"></a>前端工程化</h2><p>项目的总体架构和前端技术框架的选型势必会对前端工程化产生深远的影响。前端代码放到哪里，webpack打包如何做，产出文件放到哪里。gulp需要做哪些事情，多还是少，烦不烦琐。这种种问题都会对你项目的架构做出挑战。这也就是我为什么先编码然后通过重构来调整项目架构的原因之一。假如你预先就把项目的总体架构规定死了，那么后期你的编码就会想尽办法的去套这个项目架构，写出来的代码可想而知——一定是不尽人意的。</p>\n<p>那么第一个问题就来了。</p>\n<h3 id=\"自己编写的anglaur-js部分的源码放到哪里\"><a href=\"#自己编写的anglaur-js部分的源码放到哪里\" class=\"headerlink\" title=\"自己编写的anglaur.js部分的源码放到哪里\"></a>自己编写的anglaur.js部分的源码放到哪里</h3><p>对于这个问题，在使用Node.js开发初期，我就对基础的架构做出了建议：前端源码不能放到服务器静态资源目录。只有打包后的文件才会放到静态资源文件目录，除非该文件可以直访问。</p>\n<p>这就意味着，我需要寻找一个文件目录来放置前端源代码。最合理的位置就是于服务器目录平级放置。</p>\n<h3 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h3><p>通过webpack的编译打包，将文件保存到静态资源目录。我这里把所以和代码相关的打包和编译任务都交给了webpack，其中还包含公共文件的提取，版本控制，压缩，以及模版文件注入。</p>\n<p><img src=\"/images/2017-07-26-first-time-use-node.js/0710_04.jpg\" alt=\"webpack\"></p>\n<h4 id=\"如何进行版本控制\"><a href=\"#如何进行版本控制\" class=\"headerlink\" title=\"如何进行版本控制\"></a>如何进行版本控制</h4><p>版本控制用的比较多的就2种：基于文件和基于hash。</p>\n<p>基于文件就好比，每次打包的时候都会生成不同文件名的文件。有利于在线上跑多个版本的功能。</p>\n<p>基于hash就意味着线上这个功能的文件永远就只有一个，无法进行全量灰度。</p>\n<p>这里有个问题就是：基于文件的版本控制，难点就在于打包后的<code>.js</code>或<code>.css</code>文件名是不可控的，所以，并不能把引入的js或css文件路径写死在html模版文件里面。所以通过webpack打包的时候，我需要指定模版文件是哪一个，通过webpack的模版文件注入插件完成js或css文件路径的引入。</p>\n<blockquote>\n<p>其它方式；通过在webpack打包完成之后，将返回值种的hash参数保存下来。这样也可以完成基于文件的版本控制。</p>\n</blockquote>\n<h3 id=\"gulp的工作流\"><a href=\"#gulp的工作流\" class=\"headerlink\" title=\"gulp的工作流\"></a>gulp的工作流</h3><p>gulp结合webpack的应用如鱼得水，webpack打包任务是gulp任务流里最重要的一环。考虑到打包编译，都交给webpack做了。那gulp所要做的就是保证前端各个任务正确的执行。包括何时执行webpack打包，完成打包以后做什么。</p>\n<p><img src=\"/images/2017-07-26-first-time-use-node.js/0710_05.jpg\" alt=\"gulp\"></p>\n<h2 id=\"前端自动化\"><a href=\"#前端自动化\" class=\"headerlink\" title=\"前端自动化\"></a>前端自动化</h2><p>这里的自动化可能与你在别的地方所说的自动化可能有分歧。这里的前端自动化主要指的是在前端代码如何完成自动化打包编译。其实项目中可以进行自动化的流程有很多，我在项目里接入的是<a href=\"https://jenkins.io/\" target=\"_blank\" rel=\"noopener\">jenkins</a>，主要用来自动完成前端打包编译，然后通过zip命令对webpack打包编译后的所有文件进行打包成<code>.zip</code>文件。因为打包后的文件不入库。</p>\n<p>这里有疑惑是正常的。首先为什么不把weboack打包后生成的文件纳入git版本库？</p>\n<p>道理很简单，git版本库里面的任意一个文件产生变化，就会有下一个版本号产生。webpack每次打包编译就势必会产生文件变化，如果把打包文件纳入版本库就必须提交文件，从而产生版本号。也就是说我本地提交一次代码到git库后，jenkins会进行打包，然后打包文件又必须提交回git库，这样就相当于每次提交代码否会产生2次提交记录（一次我自己的提交，一次jenkins完成自动化打包后的提交。）。所以为了不让jenkins完成打包后向git代码库提交文件，所要做的就是把webpack打包后产生的文件都移除版本库。</p>\n<p>但问题没有这么简单，webpack打包不纳入版本库，发布的时候，这些webpack打包后产生文件怎么发布。这里解决方案就是通过把所有和webpack打包相关的文件用zip命令打包成一个<code>${commitId}.zip</code>包（commitId 是git每次提交参数的可以通过bash获取：<code>commitId=$(git rev-parse HEAD)</code>）。这样发布的时候就可以通过commitId找到<code>${commitId}.zip</code>这个压缩包，然后解压它到指定位置即可。</p>\n<p>为什么有2个打包任务？</p>\n<p>第一次是webpack打包，前端代码需要打包编译。第二次是文件打包，发布需要，原因很就是webpack打包文件不入库的解决方法。</p>\n<p>所以要求团队中必须会搭建并且有使用过jenkins,这个工具对团队的帮助是非常大的，预先打包文件并缓存，比在发布项目的时候再进行打包要好很多。可以预先发现打包问题及时进行补救，以免发布时打包出现问题而影响发布进度和线上项目的正常运行。</p>\n<p><img src=\"/images/2017-07-26-first-time-use-node.js/0710_06.jpg\" alt=\"jenkins\"></p>\n<p>git仓库支持添加hooks。所以可以在git库里添加触发事件。让jenkins自动完成打包。</p>\n<p>假如有一天，我需要写单元测试的时候，也可以试着让jenkins帮我跑自动化测试了。这算是我回答了单元测试的问题吗？哈哈哈哈哈哈哈。。。。。。</p>\n<p>前端问题基本解决了，现在问题抛到了服务端。</p>\n<h2 id=\"Node-js服务端运行环境配置\"><a href=\"#Node-js服务端运行环境配置\" class=\"headerlink\" title=\"Node.js服务端运行环境配置\"></a>Node.js服务端运行环境配置</h2><p>写个项目，要跑起来很简单，我的项目入口文件是<code>server/index.js</code>。通过执行如下命令就可以启动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node server/index.js</span><br></pre></td></tr></table></figure>\n<p>但有时候，环境并没有我想的那么简单。因为项目需要针对不同的环境运行，所以必需对不同的运行环境使用不同的配置文件。这样就需要我在启动Node.js服务的时候，必须携带不同的参数。所以要求我在编码的时候尽可能的做到环境参数的配置化——牵涉到与执行环境有关的参数尽量进行配置化。</p>\n<p><img src=\"/images/2017-07-26-first-time-use-node.js/0710_07.jpg\" alt=\"启动\"></p>\n<h2 id=\"Node-js接入层服务的接入，权限的校验\"><a href=\"#Node-js接入层服务的接入，权限的校验\" class=\"headerlink\" title=\"Node.js接入层服务的接入，权限的校验\"></a>Node.js接入层服务的接入，权限的校验</h2><p>其实对于一个小白来说，很担心的是我如何才能在Node.js里面往真正的服务器发起request请求。我项目站点的登录服务鉴权如何去做，以及用户登录了，有没有权限去访问都是个问题。</p>\n<h3 id=\"http服务的接入\"><a href=\"#http服务的接入\" class=\"headerlink\" title=\"http服务的接入\"></a>http服务的接入</h3><p>通过http模块发起requset请求。其实开始的时候我也是一脸茫然的，如何在接入层请求后端服务，可想而知这是之前作为前端的我从来没有考虑过的。现在回想起来就那么回事。有些事情想着可能很复杂，真正的做起来就好像有种：<code>山重水复疑无路，柳暗花明又一春。</code>的感觉。</p>\n<p><img src=\"/images/2017-07-26-first-time-use-node.js/0710_08.jpg\" alt=\"服务接入\"></p>\n<p>Node.js接入层请求后端服务简单的代码实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.example = <span class=\"keyword\">async</span> (ctx)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> options = &#123;</span><br><span class=\"line\">    port: <span class=\"number\">80</span>,</span><br><span class=\"line\">    hostname: <span class=\"string\">'www.test.com'</span>,</span><br><span class=\"line\">    method:<span class=\"string\">'GET'</span>,</span><br><span class=\"line\">    path:<span class=\"string\">'/api/getuser?token=document.cookie.token'</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> getData = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve , reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> request = http.request(options , (socket)=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'status: '</span> , socket.statusCode , socket.headers);</span><br><span class=\"line\">        socket.on(<span class=\"string\">'data'</span> , (chunk)=&gt;&#123;</span><br><span class=\"line\">          data += chunk;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        socket.on(<span class=\"string\">'end'</span> , ()=&gt;&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">'server call back get data: '</span> , data);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> resolve(data);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        socket.on(<span class=\"string\">'error'</span> , (e)=&gt;&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> reject(data);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      request.end();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ctx.body = <span class=\"keyword\">await</span> getData();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我没有考虑https的方式，因为https是建立在SSL/TLS之上的，也就是说，需要有私钥和公钥和CA证书才行。CA证书虽说可以自己颁发但还是得本机自行安装才有效。对https自己颁发CA证书感兴趣的可以看看这篇文章：<a href=\"/posts/2017-07-17-https-certificate\">HTTPS自签发CA证书</a>。</p>\n<p>后端服务器（PHP/JAVA…）需要做的就是根据请求参数是否合法已经齐全，然后验证调用者是否有权限使用该功能。这样的案例比比皆是，比如使用第三方服务。</p>\n<h3 id=\"小到Number校验\"><a href=\"#小到Number校验\" class=\"headerlink\" title=\"小到Number校验\"></a>小到Number校验</h3><p>有可能最简单的参数校验都不知道如何校验。这跟javascript语言以及前端的思维方式有关。我开始的时候也是这样，感觉写起代码来怪怪的。</p>\n<p>其实这是一个简单的例子，在前端检验一个Number类型的值是不是有效，我一般是通过：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = <span class=\"keyword\">typeof</span> num === <span class=\"string\">'number'</span> &amp;&amp; num === num &amp;&amp; num !== <span class=\"literal\">Infinity</span> ? num : <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>这种思路和逻辑放在前端完全是没有问题的，但是在Node.js接入层这么写感觉很尴尬。所以要转变我的思维方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = <span class=\"built_in\">Number</span>.isFinite(num) ? num : <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>小到参数的校验，我都要认真的考虑。是时候改变自己的思维方式了，考虑使用JavaScript原生的方式处理会比自己写好很多。</p>\n<h3 id=\"权限的校验\"><a href=\"#权限的校验\" class=\"headerlink\" title=\"权限的校验\"></a>权限的校验</h3><p>我并不希望所有的用户都能访问这个项目，即使他已经登录了也不行。这就是我要解决的问题。</p>\n<p><img src=\"/images/2017-07-26-first-time-use-node.js/0710_09.jpg\" alt=\"权限\"></p>\n<p>权限管理在这里就显得极其重要了。最好的方式就是把权限相关的功能进行服务化。</p>\n<hr>\n<p>使命感觉才刚刚开始！！！！！</p>\n<h2 id=\"项目的部署上线\"><a href=\"#项目的部署上线\" class=\"headerlink\" title=\"项目的部署上线\"></a>项目的部署上线</h2><p>可以说我对项目部署和运维基本上是没有经验。但是有一点就是项目上线后的可用率是必须要保证的。不能因为一点小问题，就让服务挂掉，然后还要人屁颠屁颠的重新手动重启吧。也不能说服务器断电了，重启后也要手动启动吧。这一些列的问题都是必须解决的。</p>\n<h3 id=\"pm2\"><a href=\"#pm2\" class=\"headerlink\" title=\"pm2\"></a>pm2</h3><p>很高效的开发完成了项目后，其实项目的真正使命才要刚刚开始，如何保证服务在线上稳定的运行，保证高可用率。这就需要借助其它组件来完成了。使用<a href=\"https://github.com/Unitech/pm2\" target=\"_blank\" rel=\"noopener\">pm2</a>管理确实是个好的方案。</p>\n<ol>\n<li><p>首先通过<code>npm install -g pm2</code>进行安装。</p>\n</li>\n<li><p>安装完成了之后，就可以在项目中进行pm2相关配置。</p>\n</li>\n</ol>\n<p>案例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//test.config.js</span><br><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">//pm2配置文件</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    apps:[&#123;</span><br><span class=\"line\">        name : &apos;test&apos;,</span><br><span class=\"line\">        script: &apos;./server/index.js&apos;,//应用入口</span><br><span class=\"line\">        cwd: &apos;./&apos;,</span><br><span class=\"line\">        instances : 1,</span><br><span class=\"line\">        watch : [&apos;server&apos;],</span><br><span class=\"line\">        env: &#123;</span><br><span class=\"line\">            &apos;NODE_ENV&apos;: &apos;development&apos;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        env_production: &#123;</span><br><span class=\"line\">            &apos;NODE_ENV&apos;: &apos;production&apos;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        exec_mode : &apos;cluster&apos;,</span><br><span class=\"line\">        source_map_support : true,</span><br><span class=\"line\">        max_memory_restart : &apos;1G&apos;,</span><br><span class=\"line\">        //日志地址</span><br><span class=\"line\">        error_file : &apos;/data/logs/pm2/test_error.log&apos;,</span><br><span class=\"line\">        out_file : &apos;/data/logs/pm2/test_access.log&apos;,</span><br><span class=\"line\">        listen_timeout : 8000,</span><br><span class=\"line\">        kill_timeout : 2000,</span><br><span class=\"line\">        restart_delay : 10000, //异常情况</span><br><span class=\"line\">        max_restarts : 10</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>然后就可以通过命令启动：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start test.config.js</span><br></pre></td></tr></table></figure>\n<h3 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h3><p>Nginx 是俄罗斯人编写的十分轻量级的 HTTP 服务器,Nginx，它的发音为“engine X”，是一个高性能的HTTP和反向代理服务器。nginx配置也是必不可少的，<code>80</code>端口就一个，所以我需要nginx进行转发。</p>\n<p>例如下面的案例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream test_upstream &#123;</span><br><span class=\"line\">    server 127.0.0.1:6666;</span><br><span class=\"line\">    keepalive 64;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.test.com;</span><br><span class=\"line\">    client_max_body_size 10M;</span><br><span class=\"line\">    </span><br><span class=\"line\">    index index.html index.htm;</span><br><span class=\"line\">    error_log /data/nginx/log/error_www.test.com.log;</span><br><span class=\"line\">    access_log /data/nginx/log/access_www.test.com.log combined;</span><br><span class=\"line\"> </span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_store off;</span><br><span class=\"line\">        proxy_redirect off;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header Host $http_host;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class=\"line\">        proxy_set_header Remote-Host $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Nginx-Proxy true;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_pass http://test_upstream/;</span><br><span class=\"line\">        proxy_read_timeout 60s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>项目启动的端口是本机的<code>6666</code>端口，但是我不可能说访问<code>www.test.com</code>的时候后面还带着端口号吧。这个时候就是nginx发挥作用的时候，访问域名不带端口默认使用80端口，由nginx做反向代理到我服务<code>6666</code>端口。</p>\n<p>这里有一点<code>post</code>请求时<code>client_max_body_size</code>参数的设定直接会影响<code>data</code>的大小。</p>\n<h2 id=\"日志，上报，运营维护\"><a href=\"#日志，上报，运营维护\" class=\"headerlink\" title=\"日志，上报，运营维护\"></a>日志，上报，运营维护</h2><p>项目的健康与否，都会在日志和上报中体现。我只需要每天看看日志，看看视图就可以对当天项目的运行情况做一个大致的了解。如果没有这些辅助的功能，两眼一抹黑，发生啥事都不知道。</p>\n<h2 id=\"编码风格\"><a href=\"#编码风格\" class=\"headerlink\" title=\"编码风格\"></a>编码风格</h2><p>编码风格方面遵循eslint的语法标准。使用了最新的<code>async/await</code>和<code>import</code>语法。</p>\n<p><img src=\"/images/2017-07-26-first-time-use-node.js/0710_10.jpg\" alt=\"编码\"></p>\n<h2 id=\"debug代码\"><a href=\"#debug代码\" class=\"headerlink\" title=\"debug代码\"></a>debug代码</h2><p>Node.js已经支持在chrome中直接调试Node.js代码，只要在启动项目的时候添加<code>--inspact</code>参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node --inspect server/index.js</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2017-07-26-first-time-use-node.js/0710_11.jpg\" alt=\"debug\"></p>\n<p>复制上面红框的url链接到chrome里面打开，然后点击<code>start</code>后，再访问页面，需要暂停的时候可以点击<code>stop</code>，进行代码分析。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>作为一个初学者，我只能说Node.js在做接入层上，确实是可以做到如鱼得水，关键点就是契机。抛开Node.js接入层，前端的工程化是完全可以做的。但是服务器同构渲染是没有办法做到的，除非与后端同学配合；使用Node.js接入层，那么前端在处理一些棘手的问题时就会游刃有余，而且后端服务会得到更深一层的保护，不至于说后端服务直面攻击，因为多了一层Node.js接入层在前面。</p>\n<p>如果你正在考虑要不要使用Node.js，我是无法给出答案的。</p>\n<p>原创：Jin</p>\n<p>原文链接：<a href=\"https://futu.im/posts/2017-07-26-first-time-use-node.js\">https://futu.im/posts/2017-07-26-first-time-use-node.js</a></p>"},{"title":"【译】在Promise回调之间传值的方法","date":"2017-08-22T05:00:00.000Z","author":"TooBug","_content":"\n在基于 Promise 编写的代码中，经常会有很多回调函数，它们都有各自的变量作用域。那么如果我们需要在这些回调函数之间共享数据，要怎么办呢？本文总结了一些方法。\n\n## 1. 问题\n\n下面的代码演示了使用 Promise 回调时经常碰到的一类问题：变量`connection`（A）在一个作用域中存在，但是需要被另一个作用域访问（B和C）：\n\n```javascript\ndb.open()\n.then(connection => { // (A)\n    return connection.select({ name: 'Jane' });\n})\n.then(result => {\n    // Process result\n    // Use `connection` to make more queries (B)\n})\n···\n.catch(error => {\n    // handle errors\n})\n.finally(() => {\n    connection.close(); // (C)\n});\n```\n\n在这段代码中，我们使用了 ES 规范中的`Promise.prototype.finally()`。它提供了和`try`语句的`finally`分支类似的功能。\n\n<!-- more -->\n\n## 2. 解决方法：副作用\n\n第一种解决方法是将要共享的值`connection`存入这些回调函数的上级作用域（A）：\n\n```javascript\nlet connection; // (A)\ndb.open()\n.then(conn => {\n    connection = conn;\n    return connection.select({ name: 'Jane' });\n})\n.then(result => {\n    // Process result\n    // Use `connection` to make more queries (B)\n})\n···\n.catch(error => {\n    // handle errors\n})\n.finally(() => {\n    connection.close(); // (C)\n});\n```\n\n因为`connection`的定义在回调函数的外面，所以 B 和 C 都能访问它。\n\n## 3. 解决方法：嵌套作用域\n\n上面例子的同步版本，看起来是这样的：\n\n```javascript\ntry {\n    const connection = await db.open();\n    const result = await connection.select({ name: 'Jane' });\n    ···\n} catch (error) {\n    // handle errors\n} finally {\n    connection.close();\n}\n```\n\n同步版本的代码中，使得`connection`在函数内部可用的方法是将声明提前到上级作用域中：\n\n```javascript\nconst connection = await db.open();\ntry {\n    const result = await connection.select({ name: 'Jane' });\n    ···\n} catch (error) {\n    // handle errors\n} finally {\n    connection.close();        \n}\n```\n\n> 译注：`try...catch`中，`catch`和`finally`可以共享`try`中的变量，所以此处将`connection`移到外部定义，对于同步代码来说，是非必需的。\n\n我们可以在 Promise 中做同样的事情——将 Promise 链起来：\n\n```javascript\ndb.open() // (A)\n.then(connection => { // (B)\n    return connection.select({ name: 'Jane' }) // (C)\n    .then(result => {\n        // Process result\n        // Use `connection` to make more queries\n    })\n    ···\n    .catch(error => {\n        // handle errors\n    })\n    .finally(() => {\n        connection.close();\n    });    \n})\n```\n\n这段代码有两个 Promise 链：\n\n- 第一个开始于 A ，`connection`是`db.open()`的结果\n- 第二个被包裹在 B 处的`.then()`中，从 C 处开始，注意 C 处的`return`将两个 Promise 连接起来了\n\n你可能已经注意到了，不管是同步版本还是异步版本的代码，如果`db.open()`同步抛出一个错误，这个错误将不能被`catch`处理。有[一篇专门的关于 `Promise.try()`](http://2ality.com/2017/08/promise-try.html)将演示在异步版本中如何修复这个问题。在同步版本的代码中，你可以将`db.open()`移入`try`中即可。\n\n## 4. 解决方法：返回多值\n\n下面将演示另一种在回调函数之间传值的方法。但是它不是任何时候都能工作，尤其是你不能将它用于前面演示的数据库操作中。我们来看一个它能工作的例子。\n\n我们面临一个相似的问题：在 Promise 链中，需要将`intermediate`的值从 A 处的回调传递到 B 处的回调。\n\n```javascript\nreturn asyncFunc1()\n.then(result1 => { // (A)\n    const intermediate = ···;\n    return asyncFunc2();\n})\n.then(result2 => { // (B)\n    console.log(intermediate);\n    ···\n});\n```\n\n我们使用`Promise.all()`从第一个回调函数中传递多个值给第二个回调函数，从而解决这个问题：\n\n```javascript\nreturn asyncFunc1()\n.then(result1 => {\n    const intermediate = ···;\n    return Promise.all([asyncFunc2(), intermediate]); // (A)\n})\n.then(([result2, intermediate]) => {\n    console.log(intermediate);\n    ···\n});\n```\n\n注意，在 A 处返回一个数组是不行的，因为`.then()`会获得一个Promise，一个值。使用`Promise.all()`时，内部会使用`Promise.resolve()`来保证数组元素都是 Promise ，并且在它们全部被满足（fulfill）时，将它们的值组成一个数组传递给作为下一个回调的参数。\n\n这种方法的局限性在于你不能传值到`.catch()`或者`.finally()`回调中。\n\n最后，这种方法还可以在`Promise.all()`中传入一个对象（不仅仅可以是数组），这样每一个返回的值都有一个标签。\n\n> 译注：`Promise.all()`目前并不支持传入对象，作者应该是希望支持这样一种使用方式。\n\n## 5. 相关链接\n\n- 在 Exploring ES6 的\"[Promises for asynchronous programming](http://exploringjs.com/es6/ch_promises.html)\"章节，有关于 Promise 链的更多内容\n- [ES提案：`Promise.prototype.finally()`](http://2ality.com/2017/07/promise-prototype-finally.html)\n- [ES提案：`Promise.try()`](http://2ality.com/2017/08/promise-try.html)\n\n作者：Dr. Axel Rauschmayer\n\n原文链接：<http://2ality.com/2017/08/promise-callback-data-flow.html>\n","source":"_posts/2017-08-22-passing-data-between-promise-callbacks.md","raw":"---\ntitle: 【译】在Promise回调之间传值的方法\ndate: 2017-08-22 13:00:00\ncategory: JavaScript\ntags: [JavaScript,Promise,异步]\nauthor: TooBug\n---\n\n在基于 Promise 编写的代码中，经常会有很多回调函数，它们都有各自的变量作用域。那么如果我们需要在这些回调函数之间共享数据，要怎么办呢？本文总结了一些方法。\n\n## 1. 问题\n\n下面的代码演示了使用 Promise 回调时经常碰到的一类问题：变量`connection`（A）在一个作用域中存在，但是需要被另一个作用域访问（B和C）：\n\n```javascript\ndb.open()\n.then(connection => { // (A)\n    return connection.select({ name: 'Jane' });\n})\n.then(result => {\n    // Process result\n    // Use `connection` to make more queries (B)\n})\n···\n.catch(error => {\n    // handle errors\n})\n.finally(() => {\n    connection.close(); // (C)\n});\n```\n\n在这段代码中，我们使用了 ES 规范中的`Promise.prototype.finally()`。它提供了和`try`语句的`finally`分支类似的功能。\n\n<!-- more -->\n\n## 2. 解决方法：副作用\n\n第一种解决方法是将要共享的值`connection`存入这些回调函数的上级作用域（A）：\n\n```javascript\nlet connection; // (A)\ndb.open()\n.then(conn => {\n    connection = conn;\n    return connection.select({ name: 'Jane' });\n})\n.then(result => {\n    // Process result\n    // Use `connection` to make more queries (B)\n})\n···\n.catch(error => {\n    // handle errors\n})\n.finally(() => {\n    connection.close(); // (C)\n});\n```\n\n因为`connection`的定义在回调函数的外面，所以 B 和 C 都能访问它。\n\n## 3. 解决方法：嵌套作用域\n\n上面例子的同步版本，看起来是这样的：\n\n```javascript\ntry {\n    const connection = await db.open();\n    const result = await connection.select({ name: 'Jane' });\n    ···\n} catch (error) {\n    // handle errors\n} finally {\n    connection.close();\n}\n```\n\n同步版本的代码中，使得`connection`在函数内部可用的方法是将声明提前到上级作用域中：\n\n```javascript\nconst connection = await db.open();\ntry {\n    const result = await connection.select({ name: 'Jane' });\n    ···\n} catch (error) {\n    // handle errors\n} finally {\n    connection.close();        \n}\n```\n\n> 译注：`try...catch`中，`catch`和`finally`可以共享`try`中的变量，所以此处将`connection`移到外部定义，对于同步代码来说，是非必需的。\n\n我们可以在 Promise 中做同样的事情——将 Promise 链起来：\n\n```javascript\ndb.open() // (A)\n.then(connection => { // (B)\n    return connection.select({ name: 'Jane' }) // (C)\n    .then(result => {\n        // Process result\n        // Use `connection` to make more queries\n    })\n    ···\n    .catch(error => {\n        // handle errors\n    })\n    .finally(() => {\n        connection.close();\n    });    \n})\n```\n\n这段代码有两个 Promise 链：\n\n- 第一个开始于 A ，`connection`是`db.open()`的结果\n- 第二个被包裹在 B 处的`.then()`中，从 C 处开始，注意 C 处的`return`将两个 Promise 连接起来了\n\n你可能已经注意到了，不管是同步版本还是异步版本的代码，如果`db.open()`同步抛出一个错误，这个错误将不能被`catch`处理。有[一篇专门的关于 `Promise.try()`](http://2ality.com/2017/08/promise-try.html)将演示在异步版本中如何修复这个问题。在同步版本的代码中，你可以将`db.open()`移入`try`中即可。\n\n## 4. 解决方法：返回多值\n\n下面将演示另一种在回调函数之间传值的方法。但是它不是任何时候都能工作，尤其是你不能将它用于前面演示的数据库操作中。我们来看一个它能工作的例子。\n\n我们面临一个相似的问题：在 Promise 链中，需要将`intermediate`的值从 A 处的回调传递到 B 处的回调。\n\n```javascript\nreturn asyncFunc1()\n.then(result1 => { // (A)\n    const intermediate = ···;\n    return asyncFunc2();\n})\n.then(result2 => { // (B)\n    console.log(intermediate);\n    ···\n});\n```\n\n我们使用`Promise.all()`从第一个回调函数中传递多个值给第二个回调函数，从而解决这个问题：\n\n```javascript\nreturn asyncFunc1()\n.then(result1 => {\n    const intermediate = ···;\n    return Promise.all([asyncFunc2(), intermediate]); // (A)\n})\n.then(([result2, intermediate]) => {\n    console.log(intermediate);\n    ···\n});\n```\n\n注意，在 A 处返回一个数组是不行的，因为`.then()`会获得一个Promise，一个值。使用`Promise.all()`时，内部会使用`Promise.resolve()`来保证数组元素都是 Promise ，并且在它们全部被满足（fulfill）时，将它们的值组成一个数组传递给作为下一个回调的参数。\n\n这种方法的局限性在于你不能传值到`.catch()`或者`.finally()`回调中。\n\n最后，这种方法还可以在`Promise.all()`中传入一个对象（不仅仅可以是数组），这样每一个返回的值都有一个标签。\n\n> 译注：`Promise.all()`目前并不支持传入对象，作者应该是希望支持这样一种使用方式。\n\n## 5. 相关链接\n\n- 在 Exploring ES6 的\"[Promises for asynchronous programming](http://exploringjs.com/es6/ch_promises.html)\"章节，有关于 Promise 链的更多内容\n- [ES提案：`Promise.prototype.finally()`](http://2ality.com/2017/07/promise-prototype-finally.html)\n- [ES提案：`Promise.try()`](http://2ality.com/2017/08/promise-try.html)\n\n作者：Dr. Axel Rauschmayer\n\n原文链接：<http://2ality.com/2017/08/promise-callback-data-flow.html>\n","slug":"2017-08-22-passing-data-between-promise-callbacks","published":1,"updated":"2017-12-01T08:50:00.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknii0016jxs1fkmi7206","content":"<p>在基于 Promise 编写的代码中，经常会有很多回调函数，它们都有各自的变量作用域。那么如果我们需要在这些回调函数之间共享数据，要怎么办呢？本文总结了一些方法。</p>\n<h2 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1. 问题\"></a>1. 问题</h2><p>下面的代码演示了使用 Promise 回调时经常碰到的一类问题：变量<code>connection</code>（A）在一个作用域中存在，但是需要被另一个作用域访问（B和C）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.open()</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">connection</span> =&gt;</span> &#123; <span class=\"comment\">// (A)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> connection.select(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Jane'</span> &#125;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Process result</span></span><br><span class=\"line\">    <span class=\"comment\">// Use `connection` to make more queries (B)</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">···</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle errors</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    connection.close(); <span class=\"comment\">// (C)</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在这段代码中，我们使用了 ES 规范中的<code>Promise.prototype.finally()</code>。它提供了和<code>try</code>语句的<code>finally</code>分支类似的功能。</p>\n<a id=\"more\"></a>\n<h2 id=\"2-解决方法：副作用\"><a href=\"#2-解决方法：副作用\" class=\"headerlink\" title=\"2. 解决方法：副作用\"></a>2. 解决方法：副作用</h2><p>第一种解决方法是将要共享的值<code>connection</code>存入这些回调函数的上级作用域（A）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> connection; <span class=\"comment\">// (A)</span></span><br><span class=\"line\">db.open()</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">conn</span> =&gt;</span> &#123;</span><br><span class=\"line\">    connection = conn;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> connection.select(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Jane'</span> &#125;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Process result</span></span><br><span class=\"line\">    <span class=\"comment\">// Use `connection` to make more queries (B)</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">···</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle errors</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    connection.close(); <span class=\"comment\">// (C)</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>因为<code>connection</code>的定义在回调函数的外面，所以 B 和 C 都能访问它。</p>\n<h2 id=\"3-解决方法：嵌套作用域\"><a href=\"#3-解决方法：嵌套作用域\" class=\"headerlink\" title=\"3. 解决方法：嵌套作用域\"></a>3. 解决方法：嵌套作用域</h2><p>上面例子的同步版本，看起来是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> connection = <span class=\"keyword\">await</span> db.open();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> connection.select(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Jane'</span> &#125;);</span><br><span class=\"line\">    ···</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle errors</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    connection.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同步版本的代码中，使得<code>connection</code>在函数内部可用的方法是将声明提前到上级作用域中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> connection = <span class=\"keyword\">await</span> db.open();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> connection.select(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Jane'</span> &#125;);</span><br><span class=\"line\">    ···</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle errors</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    connection.close();        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>译注：<code>try...catch</code>中，<code>catch</code>和<code>finally</code>可以共享<code>try</code>中的变量，所以此处将<code>connection</code>移到外部定义，对于同步代码来说，是非必需的。</p>\n</blockquote>\n<p>我们可以在 Promise 中做同样的事情——将 Promise 链起来：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.open() <span class=\"comment\">// (A)</span></span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">connection</span> =&gt;</span> &#123; <span class=\"comment\">// (B)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> connection.select(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Jane'</span> &#125;) <span class=\"comment\">// (C)</span></span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Process result</span></span><br><span class=\"line\">        <span class=\"comment\">// Use `connection` to make more queries</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    ···</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// handle errors</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        connection.close();</span><br><span class=\"line\">    &#125;);    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这段代码有两个 Promise 链：</p>\n<ul>\n<li>第一个开始于 A ，<code>connection</code>是<code>db.open()</code>的结果</li>\n<li>第二个被包裹在 B 处的<code>.then()</code>中，从 C 处开始，注意 C 处的<code>return</code>将两个 Promise 连接起来了</li>\n</ul>\n<p>你可能已经注意到了，不管是同步版本还是异步版本的代码，如果<code>db.open()</code>同步抛出一个错误，这个错误将不能被<code>catch</code>处理。有<a href=\"http://2ality.com/2017/08/promise-try.html\" target=\"_blank\" rel=\"noopener\">一篇专门的关于 <code>Promise.try()</code></a>将演示在异步版本中如何修复这个问题。在同步版本的代码中，你可以将<code>db.open()</code>移入<code>try</code>中即可。</p>\n<h2 id=\"4-解决方法：返回多值\"><a href=\"#4-解决方法：返回多值\" class=\"headerlink\" title=\"4. 解决方法：返回多值\"></a>4. 解决方法：返回多值</h2><p>下面将演示另一种在回调函数之间传值的方法。但是它不是任何时候都能工作，尤其是你不能将它用于前面演示的数据库操作中。我们来看一个它能工作的例子。</p>\n<p>我们面临一个相似的问题：在 Promise 链中，需要将<code>intermediate</code>的值从 A 处的回调传递到 B 处的回调。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> asyncFunc1()</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result1</span> =&gt;</span> &#123; <span class=\"comment\">// (A)</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> intermediate = ···;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> asyncFunc2();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result2</span> =&gt;</span> &#123; <span class=\"comment\">// (B)</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(intermediate);</span><br><span class=\"line\">    ···</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我们使用<code>Promise.all()</code>从第一个回调函数中传递多个值给第二个回调函数，从而解决这个问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> asyncFunc1()</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result1</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> intermediate = ···;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all([asyncFunc2(), intermediate]); <span class=\"comment\">// (A)</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">[result2, intermediate]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(intermediate);</span><br><span class=\"line\">    ···</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>注意，在 A 处返回一个数组是不行的，因为<code>.then()</code>会获得一个Promise，一个值。使用<code>Promise.all()</code>时，内部会使用<code>Promise.resolve()</code>来保证数组元素都是 Promise ，并且在它们全部被满足（fulfill）时，将它们的值组成一个数组传递给作为下一个回调的参数。</p>\n<p>这种方法的局限性在于你不能传值到<code>.catch()</code>或者<code>.finally()</code>回调中。</p>\n<p>最后，这种方法还可以在<code>Promise.all()</code>中传入一个对象（不仅仅可以是数组），这样每一个返回的值都有一个标签。</p>\n<blockquote>\n<p>译注：<code>Promise.all()</code>目前并不支持传入对象，作者应该是希望支持这样一种使用方式。</p>\n</blockquote>\n<h2 id=\"5-相关链接\"><a href=\"#5-相关链接\" class=\"headerlink\" title=\"5. 相关链接\"></a>5. 相关链接</h2><ul>\n<li>在 Exploring ES6 的”<a href=\"http://exploringjs.com/es6/ch_promises.html\" target=\"_blank\" rel=\"noopener\">Promises for asynchronous programming</a>“章节，有关于 Promise 链的更多内容</li>\n<li><a href=\"http://2ality.com/2017/07/promise-prototype-finally.html\" target=\"_blank\" rel=\"noopener\">ES提案：<code>Promise.prototype.finally()</code></a></li>\n<li><a href=\"http://2ality.com/2017/08/promise-try.html\" target=\"_blank\" rel=\"noopener\">ES提案：<code>Promise.try()</code></a></li>\n</ul>\n<p>作者：Dr. Axel Rauschmayer</p>\n<p>原文链接：<a href=\"http://2ality.com/2017/08/promise-callback-data-flow.html\" target=\"_blank\" rel=\"noopener\">http://2ality.com/2017/08/promise-callback-data-flow.html</a></p>\n","site":{"data":{}},"excerpt":"<p>在基于 Promise 编写的代码中，经常会有很多回调函数，它们都有各自的变量作用域。那么如果我们需要在这些回调函数之间共享数据，要怎么办呢？本文总结了一些方法。</p>\n<h2 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1. 问题\"></a>1. 问题</h2><p>下面的代码演示了使用 Promise 回调时经常碰到的一类问题：变量<code>connection</code>（A）在一个作用域中存在，但是需要被另一个作用域访问（B和C）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.open()</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">connection</span> =&gt;</span> &#123; <span class=\"comment\">// (A)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> connection.select(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Jane'</span> &#125;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Process result</span></span><br><span class=\"line\">    <span class=\"comment\">// Use `connection` to make more queries (B)</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">···</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle errors</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    connection.close(); <span class=\"comment\">// (C)</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在这段代码中，我们使用了 ES 规范中的<code>Promise.prototype.finally()</code>。它提供了和<code>try</code>语句的<code>finally</code>分支类似的功能。</p>","more":"<h2 id=\"2-解决方法：副作用\"><a href=\"#2-解决方法：副作用\" class=\"headerlink\" title=\"2. 解决方法：副作用\"></a>2. 解决方法：副作用</h2><p>第一种解决方法是将要共享的值<code>connection</code>存入这些回调函数的上级作用域（A）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> connection; <span class=\"comment\">// (A)</span></span><br><span class=\"line\">db.open()</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">conn</span> =&gt;</span> &#123;</span><br><span class=\"line\">    connection = conn;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> connection.select(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Jane'</span> &#125;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Process result</span></span><br><span class=\"line\">    <span class=\"comment\">// Use `connection` to make more queries (B)</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">···</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle errors</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    connection.close(); <span class=\"comment\">// (C)</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>因为<code>connection</code>的定义在回调函数的外面，所以 B 和 C 都能访问它。</p>\n<h2 id=\"3-解决方法：嵌套作用域\"><a href=\"#3-解决方法：嵌套作用域\" class=\"headerlink\" title=\"3. 解决方法：嵌套作用域\"></a>3. 解决方法：嵌套作用域</h2><p>上面例子的同步版本，看起来是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> connection = <span class=\"keyword\">await</span> db.open();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> connection.select(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Jane'</span> &#125;);</span><br><span class=\"line\">    ···</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle errors</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    connection.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同步版本的代码中，使得<code>connection</code>在函数内部可用的方法是将声明提前到上级作用域中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> connection = <span class=\"keyword\">await</span> db.open();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> connection.select(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Jane'</span> &#125;);</span><br><span class=\"line\">    ···</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle errors</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    connection.close();        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>译注：<code>try...catch</code>中，<code>catch</code>和<code>finally</code>可以共享<code>try</code>中的变量，所以此处将<code>connection</code>移到外部定义，对于同步代码来说，是非必需的。</p>\n</blockquote>\n<p>我们可以在 Promise 中做同样的事情——将 Promise 链起来：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.open() <span class=\"comment\">// (A)</span></span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">connection</span> =&gt;</span> &#123; <span class=\"comment\">// (B)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> connection.select(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Jane'</span> &#125;) <span class=\"comment\">// (C)</span></span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Process result</span></span><br><span class=\"line\">        <span class=\"comment\">// Use `connection` to make more queries</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    ···</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// handle errors</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .finally(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        connection.close();</span><br><span class=\"line\">    &#125;);    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这段代码有两个 Promise 链：</p>\n<ul>\n<li>第一个开始于 A ，<code>connection</code>是<code>db.open()</code>的结果</li>\n<li>第二个被包裹在 B 处的<code>.then()</code>中，从 C 处开始，注意 C 处的<code>return</code>将两个 Promise 连接起来了</li>\n</ul>\n<p>你可能已经注意到了，不管是同步版本还是异步版本的代码，如果<code>db.open()</code>同步抛出一个错误，这个错误将不能被<code>catch</code>处理。有<a href=\"http://2ality.com/2017/08/promise-try.html\" target=\"_blank\" rel=\"noopener\">一篇专门的关于 <code>Promise.try()</code></a>将演示在异步版本中如何修复这个问题。在同步版本的代码中，你可以将<code>db.open()</code>移入<code>try</code>中即可。</p>\n<h2 id=\"4-解决方法：返回多值\"><a href=\"#4-解决方法：返回多值\" class=\"headerlink\" title=\"4. 解决方法：返回多值\"></a>4. 解决方法：返回多值</h2><p>下面将演示另一种在回调函数之间传值的方法。但是它不是任何时候都能工作，尤其是你不能将它用于前面演示的数据库操作中。我们来看一个它能工作的例子。</p>\n<p>我们面临一个相似的问题：在 Promise 链中，需要将<code>intermediate</code>的值从 A 处的回调传递到 B 处的回调。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> asyncFunc1()</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result1</span> =&gt;</span> &#123; <span class=\"comment\">// (A)</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> intermediate = ···;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> asyncFunc2();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result2</span> =&gt;</span> &#123; <span class=\"comment\">// (B)</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(intermediate);</span><br><span class=\"line\">    ···</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我们使用<code>Promise.all()</code>从第一个回调函数中传递多个值给第二个回调函数，从而解决这个问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> asyncFunc1()</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result1</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> intermediate = ···;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all([asyncFunc2(), intermediate]); <span class=\"comment\">// (A)</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">[result2, intermediate]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(intermediate);</span><br><span class=\"line\">    ···</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>注意，在 A 处返回一个数组是不行的，因为<code>.then()</code>会获得一个Promise，一个值。使用<code>Promise.all()</code>时，内部会使用<code>Promise.resolve()</code>来保证数组元素都是 Promise ，并且在它们全部被满足（fulfill）时，将它们的值组成一个数组传递给作为下一个回调的参数。</p>\n<p>这种方法的局限性在于你不能传值到<code>.catch()</code>或者<code>.finally()</code>回调中。</p>\n<p>最后，这种方法还可以在<code>Promise.all()</code>中传入一个对象（不仅仅可以是数组），这样每一个返回的值都有一个标签。</p>\n<blockquote>\n<p>译注：<code>Promise.all()</code>目前并不支持传入对象，作者应该是希望支持这样一种使用方式。</p>\n</blockquote>\n<h2 id=\"5-相关链接\"><a href=\"#5-相关链接\" class=\"headerlink\" title=\"5. 相关链接\"></a>5. 相关链接</h2><ul>\n<li>在 Exploring ES6 的”<a href=\"http://exploringjs.com/es6/ch_promises.html\" target=\"_blank\" rel=\"noopener\">Promises for asynchronous programming</a>“章节，有关于 Promise 链的更多内容</li>\n<li><a href=\"http://2ality.com/2017/07/promise-prototype-finally.html\" target=\"_blank\" rel=\"noopener\">ES提案：<code>Promise.prototype.finally()</code></a></li>\n<li><a href=\"http://2ality.com/2017/08/promise-try.html\" target=\"_blank\" rel=\"noopener\">ES提案：<code>Promise.try()</code></a></li>\n</ul>\n<p>作者：Dr. Axel Rauschmayer</p>\n<p>原文链接：<a href=\"http://2ality.com/2017/08/promise-callback-data-flow.html\" target=\"_blank\" rel=\"noopener\">http://2ality.com/2017/08/promise-callback-data-flow.html</a></p>"},{"title":"处理 Crocodile(NodeJs 脚手架)内存泄露经验小结","date":"2017-08-11T02:00:00.000Z","author":"Mark","_content":"\n## 背景\n\n### Crocodile\n\nCrocodile 是基于 koa2，集成了常用中间件，适用于富途 web 项目的接入层框架。\n\n使用 NodeJs 编写的服务一般都是常驻进程的，我们常常会听到 NodeJs 项目有内存泄露的情况，Crocodile 1.0.0 版本在使用过程中也发生了内存泄露。\n\n<!-- more -->\n\n### 发现问题\n\nCrocodile 初步完成，web 组已有两个项目开始基于它进行开发，其中由 [@timi](/author/Timi/) 负责的项目提供了一个接口会被前端每秒钟轮询请求，这在开发阶段就带来了较大的请求量，也让项目内存泄露的问题很快暴露出来。\n\n**项目在连续运行短短两天时间，内存占用已经增长到 1.8G，而且还在持续增长中**\n\n![内存泄露](/images/2017-08-11-experience-of-handling-memory-leak-in-nodejs-project/1.png)\n\n\n### 基础知识\n\n>Node.js 进程的内存管理，都是有 V8 自动处理的，包括内存分配和释放。那么 V8 什么时候会将内存释放呢？\n\n>在 V8 内部，会为程序中的所有变量构建一个图，来表示变量间的关联关系，当变量从根节点无法触达时，就意味着这个变量不会再被使用了，就是可以回收的了。\n而这个回收是一个过程性的，从快速 GC 到 最后的 Full GC，是需要一段时间的。\n\n### 处理过程\n\n发现有内存泄露，我第一反应是有循环引用或者有持续增长的全局变量。\n\n#### Review 业务代码\n\n我们 review 业务代码后发现并没有上述两种情况，简单地在业务最后将几个变量置为 `null` 后观察发现内存增长放缓了，但是还是在稳步增长，并没有解决内存泄露。\n\n#### 借助工具\n\nReview 代码未果，我们决定使用 `heapdump`，dump 出一段时间内 Crocodile 项目进程的内存使用快照。\n使用 chrome devtool 打开快照发现了 `context` 对象出现了循环引用，每次请求的 `context` 都没有被释放，一直占用内存：\n\n![context对象循环引用](/images/2017-08-11-experience-of-handling-memory-leak-in-nodejs-project/2.png)\n\n从内存快照中可以看到，`context` 对象被 `i18n`，`getRealIp`，`getHomeUrl` 这些对象或方法引用，而这些对象又被 `context` 所引用。Review Crocodile 代码发现，在 Crocodile 自定义中间件 BaseContext 和第三方中间件 `koa-i18n` 的定义都会导致循环引用。\n\n**BaseContext**\n\n![BaseContext](/images/2017-08-11-experience-of-handling-memory-leak-in-nodejs-project/3.png)\n\n#### 解决问题\n\n目前已将这两个中间件从 Crocodile 中移除，经过压测后发现内存泄露问题已解决，进程内存维持在一个稳定的值。\n\n### 小结\n\n在 koa 中间件中如果出现类似写法，都会造成循环引用而导致每次请求的 `context` 无法被释放：\n\n```javascript\nmodule.exports = () => {\n    return async (context, next) => {\n       context.attr = () => {\n\t\t   // do something\n\t   }\n    };\n};\n```\n\n在中间件中扩展 `context` 或者给 `context` 赋值一个方法都会出现循环引用，因为上面这种情况，`context` 将会持有该方法的引用，而该方法由于定义在中间件方法内部，虽然方法内部并没有使用 `context`，但该方法是可以使用 `context` 的，因此它持有 `context` 的引用，这样就形成循环引用了。\n\n所以我们在编写 koa 中间件的时候一定要注意，扩展 `context` 时一定不能在中间件方法内部定义方法赋值给 `context` 的扩展属性！\n\n","source":"_posts/2017-08-11-experience-of-handling-memory-leak-in-nodejs-project.md","raw":"---\ntitle: 处理 Crocodile(NodeJs 脚手架)内存泄露经验小结\ndate: 2017-08-11 10:00:00\ncategory: Node.js\ntags: [Node.js]\nauthor: Mark\n---\n\n## 背景\n\n### Crocodile\n\nCrocodile 是基于 koa2，集成了常用中间件，适用于富途 web 项目的接入层框架。\n\n使用 NodeJs 编写的服务一般都是常驻进程的，我们常常会听到 NodeJs 项目有内存泄露的情况，Crocodile 1.0.0 版本在使用过程中也发生了内存泄露。\n\n<!-- more -->\n\n### 发现问题\n\nCrocodile 初步完成，web 组已有两个项目开始基于它进行开发，其中由 [@timi](/author/Timi/) 负责的项目提供了一个接口会被前端每秒钟轮询请求，这在开发阶段就带来了较大的请求量，也让项目内存泄露的问题很快暴露出来。\n\n**项目在连续运行短短两天时间，内存占用已经增长到 1.8G，而且还在持续增长中**\n\n![内存泄露](/images/2017-08-11-experience-of-handling-memory-leak-in-nodejs-project/1.png)\n\n\n### 基础知识\n\n>Node.js 进程的内存管理，都是有 V8 自动处理的，包括内存分配和释放。那么 V8 什么时候会将内存释放呢？\n\n>在 V8 内部，会为程序中的所有变量构建一个图，来表示变量间的关联关系，当变量从根节点无法触达时，就意味着这个变量不会再被使用了，就是可以回收的了。\n而这个回收是一个过程性的，从快速 GC 到 最后的 Full GC，是需要一段时间的。\n\n### 处理过程\n\n发现有内存泄露，我第一反应是有循环引用或者有持续增长的全局变量。\n\n#### Review 业务代码\n\n我们 review 业务代码后发现并没有上述两种情况，简单地在业务最后将几个变量置为 `null` 后观察发现内存增长放缓了，但是还是在稳步增长，并没有解决内存泄露。\n\n#### 借助工具\n\nReview 代码未果，我们决定使用 `heapdump`，dump 出一段时间内 Crocodile 项目进程的内存使用快照。\n使用 chrome devtool 打开快照发现了 `context` 对象出现了循环引用，每次请求的 `context` 都没有被释放，一直占用内存：\n\n![context对象循环引用](/images/2017-08-11-experience-of-handling-memory-leak-in-nodejs-project/2.png)\n\n从内存快照中可以看到，`context` 对象被 `i18n`，`getRealIp`，`getHomeUrl` 这些对象或方法引用，而这些对象又被 `context` 所引用。Review Crocodile 代码发现，在 Crocodile 自定义中间件 BaseContext 和第三方中间件 `koa-i18n` 的定义都会导致循环引用。\n\n**BaseContext**\n\n![BaseContext](/images/2017-08-11-experience-of-handling-memory-leak-in-nodejs-project/3.png)\n\n#### 解决问题\n\n目前已将这两个中间件从 Crocodile 中移除，经过压测后发现内存泄露问题已解决，进程内存维持在一个稳定的值。\n\n### 小结\n\n在 koa 中间件中如果出现类似写法，都会造成循环引用而导致每次请求的 `context` 无法被释放：\n\n```javascript\nmodule.exports = () => {\n    return async (context, next) => {\n       context.attr = () => {\n\t\t   // do something\n\t   }\n    };\n};\n```\n\n在中间件中扩展 `context` 或者给 `context` 赋值一个方法都会出现循环引用，因为上面这种情况，`context` 将会持有该方法的引用，而该方法由于定义在中间件方法内部，虽然方法内部并没有使用 `context`，但该方法是可以使用 `context` 的，因此它持有 `context` 的引用，这样就形成循环引用了。\n\n所以我们在编写 koa 中间件的时候一定要注意，扩展 `context` 时一定不能在中间件方法内部定义方法赋值给 `context` 的扩展属性！\n\n","slug":"2017-08-11-experience-of-handling-memory-leak-in-nodejs-project","published":1,"updated":"2017-12-01T08:50:00.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknij0019jxs1mwb9btrj","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><h3 id=\"Crocodile\"><a href=\"#Crocodile\" class=\"headerlink\" title=\"Crocodile\"></a>Crocodile</h3><p>Crocodile 是基于 koa2，集成了常用中间件，适用于富途 web 项目的接入层框架。</p>\n<p>使用 NodeJs 编写的服务一般都是常驻进程的，我们常常会听到 NodeJs 项目有内存泄露的情况，Crocodile 1.0.0 版本在使用过程中也发生了内存泄露。</p>\n<a id=\"more\"></a>\n<h3 id=\"发现问题\"><a href=\"#发现问题\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h3><p>Crocodile 初步完成，web 组已有两个项目开始基于它进行开发，其中由 <a href=\"/author/Timi/\">@timi</a> 负责的项目提供了一个接口会被前端每秒钟轮询请求，这在开发阶段就带来了较大的请求量，也让项目内存泄露的问题很快暴露出来。</p>\n<p><strong>项目在连续运行短短两天时间，内存占用已经增长到 1.8G，而且还在持续增长中</strong></p>\n<p><img src=\"/images/2017-08-11-experience-of-handling-memory-leak-in-nodejs-project/1.png\" alt=\"内存泄露\"></p>\n<h3 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h3><blockquote>\n<p>Node.js 进程的内存管理，都是有 V8 自动处理的，包括内存分配和释放。那么 V8 什么时候会将内存释放呢？</p>\n<p>在 V8 内部，会为程序中的所有变量构建一个图，来表示变量间的关联关系，当变量从根节点无法触达时，就意味着这个变量不会再被使用了，就是可以回收的了。<br>而这个回收是一个过程性的，从快速 GC 到 最后的 Full GC，是需要一段时间的。</p>\n</blockquote>\n<h3 id=\"处理过程\"><a href=\"#处理过程\" class=\"headerlink\" title=\"处理过程\"></a>处理过程</h3><p>发现有内存泄露，我第一反应是有循环引用或者有持续增长的全局变量。</p>\n<h4 id=\"Review-业务代码\"><a href=\"#Review-业务代码\" class=\"headerlink\" title=\"Review 业务代码\"></a>Review 业务代码</h4><p>我们 review 业务代码后发现并没有上述两种情况，简单地在业务最后将几个变量置为 <code>null</code> 后观察发现内存增长放缓了，但是还是在稳步增长，并没有解决内存泄露。</p>\n<h4 id=\"借助工具\"><a href=\"#借助工具\" class=\"headerlink\" title=\"借助工具\"></a>借助工具</h4><p>Review 代码未果，我们决定使用 <code>heapdump</code>，dump 出一段时间内 Crocodile 项目进程的内存使用快照。<br>使用 chrome devtool 打开快照发现了 <code>context</code> 对象出现了循环引用，每次请求的 <code>context</code> 都没有被释放，一直占用内存：</p>\n<p><img src=\"/images/2017-08-11-experience-of-handling-memory-leak-in-nodejs-project/2.png\" alt=\"context对象循环引用\"></p>\n<p>从内存快照中可以看到，<code>context</code> 对象被 <code>i18n</code>，<code>getRealIp</code>，<code>getHomeUrl</code> 这些对象或方法引用，而这些对象又被 <code>context</code> 所引用。Review Crocodile 代码发现，在 Crocodile 自定义中间件 BaseContext 和第三方中间件 <code>koa-i18n</code> 的定义都会导致循环引用。</p>\n<p><strong>BaseContext</strong></p>\n<p><img src=\"/images/2017-08-11-experience-of-handling-memory-leak-in-nodejs-project/3.png\" alt=\"BaseContext\"></p>\n<h4 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h4><p>目前已将这两个中间件从 Crocodile 中移除，经过压测后发现内存泄露问题已解决，进程内存维持在一个稳定的值。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>在 koa 中间件中如果出现类似写法，都会造成循环引用而导致每次请求的 <code>context</code> 无法被释放：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">async</span> (context, next) =&gt; &#123;</span><br><span class=\"line\">       context.attr = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t   <span class=\"comment\">// do something</span></span><br><span class=\"line\">\t   &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在中间件中扩展 <code>context</code> 或者给 <code>context</code> 赋值一个方法都会出现循环引用，因为上面这种情况，<code>context</code> 将会持有该方法的引用，而该方法由于定义在中间件方法内部，虽然方法内部并没有使用 <code>context</code>，但该方法是可以使用 <code>context</code> 的，因此它持有 <code>context</code> 的引用，这样就形成循环引用了。</p>\n<p>所以我们在编写 koa 中间件的时候一定要注意，扩展 <code>context</code> 时一定不能在中间件方法内部定义方法赋值给 <code>context</code> 的扩展属性！</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><h3 id=\"Crocodile\"><a href=\"#Crocodile\" class=\"headerlink\" title=\"Crocodile\"></a>Crocodile</h3><p>Crocodile 是基于 koa2，集成了常用中间件，适用于富途 web 项目的接入层框架。</p>\n<p>使用 NodeJs 编写的服务一般都是常驻进程的，我们常常会听到 NodeJs 项目有内存泄露的情况，Crocodile 1.0.0 版本在使用过程中也发生了内存泄露。</p>","more":"<h3 id=\"发现问题\"><a href=\"#发现问题\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h3><p>Crocodile 初步完成，web 组已有两个项目开始基于它进行开发，其中由 <a href=\"/author/Timi/\">@timi</a> 负责的项目提供了一个接口会被前端每秒钟轮询请求，这在开发阶段就带来了较大的请求量，也让项目内存泄露的问题很快暴露出来。</p>\n<p><strong>项目在连续运行短短两天时间，内存占用已经增长到 1.8G，而且还在持续增长中</strong></p>\n<p><img src=\"/images/2017-08-11-experience-of-handling-memory-leak-in-nodejs-project/1.png\" alt=\"内存泄露\"></p>\n<h3 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h3><blockquote>\n<p>Node.js 进程的内存管理，都是有 V8 自动处理的，包括内存分配和释放。那么 V8 什么时候会将内存释放呢？</p>\n<p>在 V8 内部，会为程序中的所有变量构建一个图，来表示变量间的关联关系，当变量从根节点无法触达时，就意味着这个变量不会再被使用了，就是可以回收的了。<br>而这个回收是一个过程性的，从快速 GC 到 最后的 Full GC，是需要一段时间的。</p>\n</blockquote>\n<h3 id=\"处理过程\"><a href=\"#处理过程\" class=\"headerlink\" title=\"处理过程\"></a>处理过程</h3><p>发现有内存泄露，我第一反应是有循环引用或者有持续增长的全局变量。</p>\n<h4 id=\"Review-业务代码\"><a href=\"#Review-业务代码\" class=\"headerlink\" title=\"Review 业务代码\"></a>Review 业务代码</h4><p>我们 review 业务代码后发现并没有上述两种情况，简单地在业务最后将几个变量置为 <code>null</code> 后观察发现内存增长放缓了，但是还是在稳步增长，并没有解决内存泄露。</p>\n<h4 id=\"借助工具\"><a href=\"#借助工具\" class=\"headerlink\" title=\"借助工具\"></a>借助工具</h4><p>Review 代码未果，我们决定使用 <code>heapdump</code>，dump 出一段时间内 Crocodile 项目进程的内存使用快照。<br>使用 chrome devtool 打开快照发现了 <code>context</code> 对象出现了循环引用，每次请求的 <code>context</code> 都没有被释放，一直占用内存：</p>\n<p><img src=\"/images/2017-08-11-experience-of-handling-memory-leak-in-nodejs-project/2.png\" alt=\"context对象循环引用\"></p>\n<p>从内存快照中可以看到，<code>context</code> 对象被 <code>i18n</code>，<code>getRealIp</code>，<code>getHomeUrl</code> 这些对象或方法引用，而这些对象又被 <code>context</code> 所引用。Review Crocodile 代码发现，在 Crocodile 自定义中间件 BaseContext 和第三方中间件 <code>koa-i18n</code> 的定义都会导致循环引用。</p>\n<p><strong>BaseContext</strong></p>\n<p><img src=\"/images/2017-08-11-experience-of-handling-memory-leak-in-nodejs-project/3.png\" alt=\"BaseContext\"></p>\n<h4 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h4><p>目前已将这两个中间件从 Crocodile 中移除，经过压测后发现内存泄露问题已解决，进程内存维持在一个稳定的值。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>在 koa 中间件中如果出现类似写法，都会造成循环引用而导致每次请求的 <code>context</code> 无法被释放：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">async</span> (context, next) =&gt; &#123;</span><br><span class=\"line\">       context.attr = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t   <span class=\"comment\">// do something</span></span><br><span class=\"line\">\t   &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在中间件中扩展 <code>context</code> 或者给 <code>context</code> 赋值一个方法都会出现循环引用，因为上面这种情况，<code>context</code> 将会持有该方法的引用，而该方法由于定义在中间件方法内部，虽然方法内部并没有使用 <code>context</code>，但该方法是可以使用 <code>context</code> 的，因此它持有 <code>context</code> 的引用，这样就形成循环引用了。</p>\n<p>所以我们在编写 koa 中间件的时候一定要注意，扩展 <code>context</code> 时一定不能在中间件方法内部定义方法赋值给 <code>context</code> 的扩展属性！</p>"},{"title":"【译】你需要知道的有关Node.js Error对象的变化","date":"2017-08-24T12:00:00.000Z","author":"Jin","_content":"\n### 概要\n**变化来自Node.js运行时抛出的错误。**这些变化在Node.js V8+版本中开始生效，在后期的V9+版本中将继续存在。这将影响通过解析字符串消息判断错误的任何用户的代码。\n\n### 什么和为什么？\n**首先，为什么说这些变化是需要的，它们又是什么？**直到目前为止，Node.js抛出的大多数错误依然只有一个与它们相关的消息而已。如果你打算基于错误执行特定的操作，你只能通过将错误消息字符串与一个已知的字符串进行比较。结果可能是这样的：\n\n![Error早期处理](/images/2017-08-24-node-js-errors-changes-you-need-to-know-about/1.png)\n\n<!-- more -->\n\n**像这样的代码从根本上来说是不应该经常出现的，因为在大多数情况下，当您从Node.js中获取错误时，您的代码可能只是简单地记录/显示错误消息，然后恢复到正常的代码流程。**然而，在需要的情况下，最终还是会依赖于特定的错误消息字符串。\n\n现在你可能已经注意到，上面的例子中使用的消息判断中有一个错字。显然这也有可能发生在Node.js代码库中。**问题是当我们注意到打字错误并且想要在当前这个[语义化版本](http://semver.org/)修复它时。**这意味着更改将仅包含在下一个主要版本中，旧版本依然是错误的没有得到修改。在打字错误的情况下可能不是很大的事情，但是如果我们有一个错误或误导的信息，那么就需要多加注意了。\n\n对消息字符串的严重依赖也对国际化构成了挑战。Node.js通过添加ICU和API来使应用程序代码来支持国际化，并取得了良好的进展。假如或者当我们想让Node.js返回的错误消息时是支持国际化的，我们需要保证能在不使用消息比较的情况下识别特定的错误。这是必须的，因为一旦本地化，消息本身就会根据用户设置的区域设置而改变。\n\n**当前进行的更改是向Node.js API抛出的所有错误（Error）对象添加`code`属性。**这些代码在API文档中可以找到[https://nodejs.org/dist/latest/docs/api/errors.html#errors_node_js_error_codes](https://nodejs.org/dist/latest/docs/api/errors.html#errors_node_js_error_codes)（如果您为`master`分支生成一份文档，您将看到一个更大的列表）。\n\n通过重写上面的例子：\n\n![Error处理](/images/2017-08-24-node-js-errors-changes-you-need-to-know-about/2.png)\n\n结果是如果/当消息在将来更改时，示例代码将不会受到影响，因为错误代码逻辑保持不变。\n\n随着`code`属性的添加，错误的名称也被设置为包括错误代码`code`。 例如，对于常见错误：\n\n* Error [error-code]\n* TypeError [error-code]\n* RangeError [error-code]\n\n结果是使用`toString()`输出的错误将是以下格式：\n\n* Error [error-code]: 消息\n* TypeError [error-code]: 消息\n* RangeError [error-code]: 消息\n\n一旦上述的错误对象落地，是完全有时间更新消息字符串，而不必将更改标记为一个语义化版本。当我们准备好这样做时，还是存在一些争议的地方。如果您想了解讨论的详细内容，请查看此问题：[https://github.com/nodejs/node/issues/13937](https://github.com/nodejs/node/issues/13937)。\n\n### 你需要做什么\n\n* 对于代码库，您需要根据错误的消息字符串查找实例。\n* 在不是绝对必要的情况下，删除依赖于消息字符串内容的实例。\n* 添加错误代码后，更新代码库以使用错误代码而不是消息。 在需要支持多个版本的Node.js的情况下，您可以执行以下操作：\n\n![Error兼容处理](/images/2017-08-24-node-js-errors-changes-you-need-to-know-about/3.png)\n\n初始检查以查看错误`code`属性是否存在是确保我们只接受该消息的匹配，如果错误对象上没有`code`属性。 这样可以避免在可能具有相同消息的不同错误上进行匹配的任何可能性。\n\n### 贡献仍然需要\n虽然进行转换取得了很大进展（非常感谢那些已经加紧进行转换的人），但仍有工作要做。\n\nJames Snell创建的这个问题正在涵盖转型为新方法的进展：[https://github.com/nodejs/node/issues/11273](https://github.com/nodejs/node/issues/11273)。他也一起介绍了如何开始转换那个问题中列出的Node.js文件。我已经使用该指南进行了一些转换，这是一个很好的起点。\n\n开始要找到一个尚未转换的文件（或多个），并且没有出现在PR(Pull Request)列表里面的。您可以通过首先验证在列表里的PR或者[https://github.com/nodejs/node/issues/11273](https://github.com/nodejs/node/issues/11273)中的文件的的评论。我还建议快速扫描开放的Node.js问题，看看是否有最近的PR覆盖您选择的文件，因为主要问题并不总是最新的。一旦您打开PR，必须用上面的`11273`问题链接进行评论，以便我们可以更新主列表。\n\nPR更新错误消息之间往往会发生冲突，因此准备重新提交您的提交（甚至可能不止一次）但目前有一些合作者正在积极努力让他们及时审查/合并。\n\n### 总结\n更改来自Node.js运行时抛出的错误。 **我概述了是什么，为什么，并提出了一些建议，你应该做什么，现在准备好。** 我也希望你们中的一些能够帮助完成转换，我期待着在GitHub中见到你。\n\n原文：[https://medium.com/the-node-js-collection/node-js-errors-changes-you-need-to-know-about-dc8c82417f65](https://medium.com/the-node-js-collection/node-js-errors-changes-you-need-to-know-about-dc8c82417f65)\n\n译者：[Jin](https://github.com/Yi-love)\n\n作者：[Michael Dawson](https://twitter.com/mhdawson1)","source":"_posts/2017-08-24-node-js-errors-changes-you-need-to-know-about.md","raw":"---\ntitle: 【译】你需要知道的有关Node.js Error对象的变化\ndate: 2017-08-24 20:00\ncategory: Node.js\ntags: [Error,Nodejs,JavaScript]\nauthor: Jin\n---\n\n### 概要\n**变化来自Node.js运行时抛出的错误。**这些变化在Node.js V8+版本中开始生效，在后期的V9+版本中将继续存在。这将影响通过解析字符串消息判断错误的任何用户的代码。\n\n### 什么和为什么？\n**首先，为什么说这些变化是需要的，它们又是什么？**直到目前为止，Node.js抛出的大多数错误依然只有一个与它们相关的消息而已。如果你打算基于错误执行特定的操作，你只能通过将错误消息字符串与一个已知的字符串进行比较。结果可能是这样的：\n\n![Error早期处理](/images/2017-08-24-node-js-errors-changes-you-need-to-know-about/1.png)\n\n<!-- more -->\n\n**像这样的代码从根本上来说是不应该经常出现的，因为在大多数情况下，当您从Node.js中获取错误时，您的代码可能只是简单地记录/显示错误消息，然后恢复到正常的代码流程。**然而，在需要的情况下，最终还是会依赖于特定的错误消息字符串。\n\n现在你可能已经注意到，上面的例子中使用的消息判断中有一个错字。显然这也有可能发生在Node.js代码库中。**问题是当我们注意到打字错误并且想要在当前这个[语义化版本](http://semver.org/)修复它时。**这意味着更改将仅包含在下一个主要版本中，旧版本依然是错误的没有得到修改。在打字错误的情况下可能不是很大的事情，但是如果我们有一个错误或误导的信息，那么就需要多加注意了。\n\n对消息字符串的严重依赖也对国际化构成了挑战。Node.js通过添加ICU和API来使应用程序代码来支持国际化，并取得了良好的进展。假如或者当我们想让Node.js返回的错误消息时是支持国际化的，我们需要保证能在不使用消息比较的情况下识别特定的错误。这是必须的，因为一旦本地化，消息本身就会根据用户设置的区域设置而改变。\n\n**当前进行的更改是向Node.js API抛出的所有错误（Error）对象添加`code`属性。**这些代码在API文档中可以找到[https://nodejs.org/dist/latest/docs/api/errors.html#errors_node_js_error_codes](https://nodejs.org/dist/latest/docs/api/errors.html#errors_node_js_error_codes)（如果您为`master`分支生成一份文档，您将看到一个更大的列表）。\n\n通过重写上面的例子：\n\n![Error处理](/images/2017-08-24-node-js-errors-changes-you-need-to-know-about/2.png)\n\n结果是如果/当消息在将来更改时，示例代码将不会受到影响，因为错误代码逻辑保持不变。\n\n随着`code`属性的添加，错误的名称也被设置为包括错误代码`code`。 例如，对于常见错误：\n\n* Error [error-code]\n* TypeError [error-code]\n* RangeError [error-code]\n\n结果是使用`toString()`输出的错误将是以下格式：\n\n* Error [error-code]: 消息\n* TypeError [error-code]: 消息\n* RangeError [error-code]: 消息\n\n一旦上述的错误对象落地，是完全有时间更新消息字符串，而不必将更改标记为一个语义化版本。当我们准备好这样做时，还是存在一些争议的地方。如果您想了解讨论的详细内容，请查看此问题：[https://github.com/nodejs/node/issues/13937](https://github.com/nodejs/node/issues/13937)。\n\n### 你需要做什么\n\n* 对于代码库，您需要根据错误的消息字符串查找实例。\n* 在不是绝对必要的情况下，删除依赖于消息字符串内容的实例。\n* 添加错误代码后，更新代码库以使用错误代码而不是消息。 在需要支持多个版本的Node.js的情况下，您可以执行以下操作：\n\n![Error兼容处理](/images/2017-08-24-node-js-errors-changes-you-need-to-know-about/3.png)\n\n初始检查以查看错误`code`属性是否存在是确保我们只接受该消息的匹配，如果错误对象上没有`code`属性。 这样可以避免在可能具有相同消息的不同错误上进行匹配的任何可能性。\n\n### 贡献仍然需要\n虽然进行转换取得了很大进展（非常感谢那些已经加紧进行转换的人），但仍有工作要做。\n\nJames Snell创建的这个问题正在涵盖转型为新方法的进展：[https://github.com/nodejs/node/issues/11273](https://github.com/nodejs/node/issues/11273)。他也一起介绍了如何开始转换那个问题中列出的Node.js文件。我已经使用该指南进行了一些转换，这是一个很好的起点。\n\n开始要找到一个尚未转换的文件（或多个），并且没有出现在PR(Pull Request)列表里面的。您可以通过首先验证在列表里的PR或者[https://github.com/nodejs/node/issues/11273](https://github.com/nodejs/node/issues/11273)中的文件的的评论。我还建议快速扫描开放的Node.js问题，看看是否有最近的PR覆盖您选择的文件，因为主要问题并不总是最新的。一旦您打开PR，必须用上面的`11273`问题链接进行评论，以便我们可以更新主列表。\n\nPR更新错误消息之间往往会发生冲突，因此准备重新提交您的提交（甚至可能不止一次）但目前有一些合作者正在积极努力让他们及时审查/合并。\n\n### 总结\n更改来自Node.js运行时抛出的错误。 **我概述了是什么，为什么，并提出了一些建议，你应该做什么，现在准备好。** 我也希望你们中的一些能够帮助完成转换，我期待着在GitHub中见到你。\n\n原文：[https://medium.com/the-node-js-collection/node-js-errors-changes-you-need-to-know-about-dc8c82417f65](https://medium.com/the-node-js-collection/node-js-errors-changes-you-need-to-know-about-dc8c82417f65)\n\n译者：[Jin](https://github.com/Yi-love)\n\n作者：[Michael Dawson](https://twitter.com/mhdawson1)","slug":"2017-08-24-node-js-errors-changes-you-need-to-know-about","published":1,"updated":"2017-12-01T08:50:00.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknin001ejxs1uva1x55a","content":"<h3 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h3><p><strong>变化来自Node.js运行时抛出的错误。</strong>这些变化在Node.js V8+版本中开始生效，在后期的V9+版本中将继续存在。这将影响通过解析字符串消息判断错误的任何用户的代码。</p>\n<h3 id=\"什么和为什么？\"><a href=\"#什么和为什么？\" class=\"headerlink\" title=\"什么和为什么？\"></a>什么和为什么？</h3><p><strong>首先，为什么说这些变化是需要的，它们又是什么？</strong>直到目前为止，Node.js抛出的大多数错误依然只有一个与它们相关的消息而已。如果你打算基于错误执行特定的操作，你只能通过将错误消息字符串与一个已知的字符串进行比较。结果可能是这样的：</p>\n<p><img src=\"/images/2017-08-24-node-js-errors-changes-you-need-to-know-about/1.png\" alt=\"Error早期处理\"></p>\n<a id=\"more\"></a>\n<p><strong>像这样的代码从根本上来说是不应该经常出现的，因为在大多数情况下，当您从Node.js中获取错误时，您的代码可能只是简单地记录/显示错误消息，然后恢复到正常的代码流程。</strong>然而，在需要的情况下，最终还是会依赖于特定的错误消息字符串。</p>\n<p>现在你可能已经注意到，上面的例子中使用的消息判断中有一个错字。显然这也有可能发生在Node.js代码库中。<strong>问题是当我们注意到打字错误并且想要在当前这个<a href=\"http://semver.org/\" target=\"_blank\" rel=\"noopener\">语义化版本</a>修复它时。</strong>这意味着更改将仅包含在下一个主要版本中，旧版本依然是错误的没有得到修改。在打字错误的情况下可能不是很大的事情，但是如果我们有一个错误或误导的信息，那么就需要多加注意了。</p>\n<p>对消息字符串的严重依赖也对国际化构成了挑战。Node.js通过添加ICU和API来使应用程序代码来支持国际化，并取得了良好的进展。假如或者当我们想让Node.js返回的错误消息时是支持国际化的，我们需要保证能在不使用消息比较的情况下识别特定的错误。这是必须的，因为一旦本地化，消息本身就会根据用户设置的区域设置而改变。</p>\n<p><strong>当前进行的更改是向Node.js API抛出的所有错误（Error）对象添加<code>code</code>属性。</strong>这些代码在API文档中可以找到<a href=\"https://nodejs.org/dist/latest/docs/api/errors.html#errors_node_js_error_codes\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/dist/latest/docs/api/errors.html#errors_node_js_error_codes</a>（如果您为<code>master</code>分支生成一份文档，您将看到一个更大的列表）。</p>\n<p>通过重写上面的例子：</p>\n<p><img src=\"/images/2017-08-24-node-js-errors-changes-you-need-to-know-about/2.png\" alt=\"Error处理\"></p>\n<p>结果是如果/当消息在将来更改时，示例代码将不会受到影响，因为错误代码逻辑保持不变。</p>\n<p>随着<code>code</code>属性的添加，错误的名称也被设置为包括错误代码<code>code</code>。 例如，对于常见错误：</p>\n<ul>\n<li>Error [error-code]</li>\n<li>TypeError [error-code]</li>\n<li>RangeError [error-code]</li>\n</ul>\n<p>结果是使用<code>toString()</code>输出的错误将是以下格式：</p>\n<ul>\n<li>Error [error-code]: 消息</li>\n<li>TypeError [error-code]: 消息</li>\n<li>RangeError [error-code]: 消息</li>\n</ul>\n<p>一旦上述的错误对象落地，是完全有时间更新消息字符串，而不必将更改标记为一个语义化版本。当我们准备好这样做时，还是存在一些争议的地方。如果您想了解讨论的详细内容，请查看此问题：<a href=\"https://github.com/nodejs/node/issues/13937\" target=\"_blank\" rel=\"noopener\">https://github.com/nodejs/node/issues/13937</a>。</p>\n<h3 id=\"你需要做什么\"><a href=\"#你需要做什么\" class=\"headerlink\" title=\"你需要做什么\"></a>你需要做什么</h3><ul>\n<li>对于代码库，您需要根据错误的消息字符串查找实例。</li>\n<li>在不是绝对必要的情况下，删除依赖于消息字符串内容的实例。</li>\n<li>添加错误代码后，更新代码库以使用错误代码而不是消息。 在需要支持多个版本的Node.js的情况下，您可以执行以下操作：</li>\n</ul>\n<p><img src=\"/images/2017-08-24-node-js-errors-changes-you-need-to-know-about/3.png\" alt=\"Error兼容处理\"></p>\n<p>初始检查以查看错误<code>code</code>属性是否存在是确保我们只接受该消息的匹配，如果错误对象上没有<code>code</code>属性。 这样可以避免在可能具有相同消息的不同错误上进行匹配的任何可能性。</p>\n<h3 id=\"贡献仍然需要\"><a href=\"#贡献仍然需要\" class=\"headerlink\" title=\"贡献仍然需要\"></a>贡献仍然需要</h3><p>虽然进行转换取得了很大进展（非常感谢那些已经加紧进行转换的人），但仍有工作要做。</p>\n<p>James Snell创建的这个问题正在涵盖转型为新方法的进展：<a href=\"https://github.com/nodejs/node/issues/11273\" target=\"_blank\" rel=\"noopener\">https://github.com/nodejs/node/issues/11273</a>。他也一起介绍了如何开始转换那个问题中列出的Node.js文件。我已经使用该指南进行了一些转换，这是一个很好的起点。</p>\n<p>开始要找到一个尚未转换的文件（或多个），并且没有出现在PR(Pull Request)列表里面的。您可以通过首先验证在列表里的PR或者<a href=\"https://github.com/nodejs/node/issues/11273\" target=\"_blank\" rel=\"noopener\">https://github.com/nodejs/node/issues/11273</a>中的文件的的评论。我还建议快速扫描开放的Node.js问题，看看是否有最近的PR覆盖您选择的文件，因为主要问题并不总是最新的。一旦您打开PR，必须用上面的<code>11273</code>问题链接进行评论，以便我们可以更新主列表。</p>\n<p>PR更新错误消息之间往往会发生冲突，因此准备重新提交您的提交（甚至可能不止一次）但目前有一些合作者正在积极努力让他们及时审查/合并。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>更改来自Node.js运行时抛出的错误。 <strong>我概述了是什么，为什么，并提出了一些建议，你应该做什么，现在准备好。</strong> 我也希望你们中的一些能够帮助完成转换，我期待着在GitHub中见到你。</p>\n<p>原文：<a href=\"https://medium.com/the-node-js-collection/node-js-errors-changes-you-need-to-know-about-dc8c82417f65\" target=\"_blank\" rel=\"noopener\">https://medium.com/the-node-js-collection/node-js-errors-changes-you-need-to-know-about-dc8c82417f65</a></p>\n<p>译者：<a href=\"https://github.com/Yi-love\" target=\"_blank\" rel=\"noopener\">Jin</a></p>\n<p>作者：<a href=\"https://twitter.com/mhdawson1\" target=\"_blank\" rel=\"noopener\">Michael Dawson</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h3><p><strong>变化来自Node.js运行时抛出的错误。</strong>这些变化在Node.js V8+版本中开始生效，在后期的V9+版本中将继续存在。这将影响通过解析字符串消息判断错误的任何用户的代码。</p>\n<h3 id=\"什么和为什么？\"><a href=\"#什么和为什么？\" class=\"headerlink\" title=\"什么和为什么？\"></a>什么和为什么？</h3><p><strong>首先，为什么说这些变化是需要的，它们又是什么？</strong>直到目前为止，Node.js抛出的大多数错误依然只有一个与它们相关的消息而已。如果你打算基于错误执行特定的操作，你只能通过将错误消息字符串与一个已知的字符串进行比较。结果可能是这样的：</p>\n<p><img src=\"/images/2017-08-24-node-js-errors-changes-you-need-to-know-about/1.png\" alt=\"Error早期处理\"></p>","more":"<p><strong>像这样的代码从根本上来说是不应该经常出现的，因为在大多数情况下，当您从Node.js中获取错误时，您的代码可能只是简单地记录/显示错误消息，然后恢复到正常的代码流程。</strong>然而，在需要的情况下，最终还是会依赖于特定的错误消息字符串。</p>\n<p>现在你可能已经注意到，上面的例子中使用的消息判断中有一个错字。显然这也有可能发生在Node.js代码库中。<strong>问题是当我们注意到打字错误并且想要在当前这个<a href=\"http://semver.org/\" target=\"_blank\" rel=\"noopener\">语义化版本</a>修复它时。</strong>这意味着更改将仅包含在下一个主要版本中，旧版本依然是错误的没有得到修改。在打字错误的情况下可能不是很大的事情，但是如果我们有一个错误或误导的信息，那么就需要多加注意了。</p>\n<p>对消息字符串的严重依赖也对国际化构成了挑战。Node.js通过添加ICU和API来使应用程序代码来支持国际化，并取得了良好的进展。假如或者当我们想让Node.js返回的错误消息时是支持国际化的，我们需要保证能在不使用消息比较的情况下识别特定的错误。这是必须的，因为一旦本地化，消息本身就会根据用户设置的区域设置而改变。</p>\n<p><strong>当前进行的更改是向Node.js API抛出的所有错误（Error）对象添加<code>code</code>属性。</strong>这些代码在API文档中可以找到<a href=\"https://nodejs.org/dist/latest/docs/api/errors.html#errors_node_js_error_codes\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/dist/latest/docs/api/errors.html#errors_node_js_error_codes</a>（如果您为<code>master</code>分支生成一份文档，您将看到一个更大的列表）。</p>\n<p>通过重写上面的例子：</p>\n<p><img src=\"/images/2017-08-24-node-js-errors-changes-you-need-to-know-about/2.png\" alt=\"Error处理\"></p>\n<p>结果是如果/当消息在将来更改时，示例代码将不会受到影响，因为错误代码逻辑保持不变。</p>\n<p>随着<code>code</code>属性的添加，错误的名称也被设置为包括错误代码<code>code</code>。 例如，对于常见错误：</p>\n<ul>\n<li>Error [error-code]</li>\n<li>TypeError [error-code]</li>\n<li>RangeError [error-code]</li>\n</ul>\n<p>结果是使用<code>toString()</code>输出的错误将是以下格式：</p>\n<ul>\n<li>Error [error-code]: 消息</li>\n<li>TypeError [error-code]: 消息</li>\n<li>RangeError [error-code]: 消息</li>\n</ul>\n<p>一旦上述的错误对象落地，是完全有时间更新消息字符串，而不必将更改标记为一个语义化版本。当我们准备好这样做时，还是存在一些争议的地方。如果您想了解讨论的详细内容，请查看此问题：<a href=\"https://github.com/nodejs/node/issues/13937\" target=\"_blank\" rel=\"noopener\">https://github.com/nodejs/node/issues/13937</a>。</p>\n<h3 id=\"你需要做什么\"><a href=\"#你需要做什么\" class=\"headerlink\" title=\"你需要做什么\"></a>你需要做什么</h3><ul>\n<li>对于代码库，您需要根据错误的消息字符串查找实例。</li>\n<li>在不是绝对必要的情况下，删除依赖于消息字符串内容的实例。</li>\n<li>添加错误代码后，更新代码库以使用错误代码而不是消息。 在需要支持多个版本的Node.js的情况下，您可以执行以下操作：</li>\n</ul>\n<p><img src=\"/images/2017-08-24-node-js-errors-changes-you-need-to-know-about/3.png\" alt=\"Error兼容处理\"></p>\n<p>初始检查以查看错误<code>code</code>属性是否存在是确保我们只接受该消息的匹配，如果错误对象上没有<code>code</code>属性。 这样可以避免在可能具有相同消息的不同错误上进行匹配的任何可能性。</p>\n<h3 id=\"贡献仍然需要\"><a href=\"#贡献仍然需要\" class=\"headerlink\" title=\"贡献仍然需要\"></a>贡献仍然需要</h3><p>虽然进行转换取得了很大进展（非常感谢那些已经加紧进行转换的人），但仍有工作要做。</p>\n<p>James Snell创建的这个问题正在涵盖转型为新方法的进展：<a href=\"https://github.com/nodejs/node/issues/11273\" target=\"_blank\" rel=\"noopener\">https://github.com/nodejs/node/issues/11273</a>。他也一起介绍了如何开始转换那个问题中列出的Node.js文件。我已经使用该指南进行了一些转换，这是一个很好的起点。</p>\n<p>开始要找到一个尚未转换的文件（或多个），并且没有出现在PR(Pull Request)列表里面的。您可以通过首先验证在列表里的PR或者<a href=\"https://github.com/nodejs/node/issues/11273\" target=\"_blank\" rel=\"noopener\">https://github.com/nodejs/node/issues/11273</a>中的文件的的评论。我还建议快速扫描开放的Node.js问题，看看是否有最近的PR覆盖您选择的文件，因为主要问题并不总是最新的。一旦您打开PR，必须用上面的<code>11273</code>问题链接进行评论，以便我们可以更新主列表。</p>\n<p>PR更新错误消息之间往往会发生冲突，因此准备重新提交您的提交（甚至可能不止一次）但目前有一些合作者正在积极努力让他们及时审查/合并。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>更改来自Node.js运行时抛出的错误。 <strong>我概述了是什么，为什么，并提出了一些建议，你应该做什么，现在准备好。</strong> 我也希望你们中的一些能够帮助完成转换，我期待着在GitHub中见到你。</p>\n<p>原文：<a href=\"https://medium.com/the-node-js-collection/node-js-errors-changes-you-need-to-know-about-dc8c82417f65\" target=\"_blank\" rel=\"noopener\">https://medium.com/the-node-js-collection/node-js-errors-changes-you-need-to-know-about-dc8c82417f65</a></p>\n<p>译者：<a href=\"https://github.com/Yi-love\" target=\"_blank\" rel=\"noopener\">Jin</a></p>\n<p>作者：<a href=\"https://twitter.com/mhdawson1\" target=\"_blank\" rel=\"noopener\">Michael Dawson</a></p>"},{"title":"【译】澄清对AMP的十个误解","date":"2017-08-23T02:30:00.000Z","author":"TooBug","_content":"\n## 1. AMP是一个新的渲染引擎/编程语言\n\nAMP 是一套开源的 web 组件格式和类库。与其它类库或者框架相比，AMP 最大的区别在于，它采用了白名单策略，来约定你可以做什么。\n\n为什么要限制一些东西的使用呢？这是因为一些看起来很无辜的小代码很容易拖慢网站的性能。而且一段时间后回来排查这些性能问题会是一件非常困难的事情。这就像你在德国的 Autobahn 快速路上开车，却只在右道行走，不知道最左边的道路才是更快的。AMP 就是这样一种技术，强迫你走到最左边的快速道路，并且保证你前方的道路是没有障碍的。\n\nAMP 带来的并不只有限制，它还提供了很多的自定义标签，这些标签都有各自内置的功能。当你使用这些自定义标签，并遵守一些其它的规则，那么 AMP 将通过一些手段保证你的网站速度是非常快的。这些手段主要包括强制静态布局、高效率资源加载和一些其它的优化。\n\nAMP 有一份文档，规定了什么样的标签是兼容的，什么样的标签是不兼容的。它还发布了一个内置的验证工具，可以让你看到当前页面的是否符合 AMP 文档的要求。需要强调的是，从技术上来说，即使不遵守所有的规定，AMP 页面也能运行得很好，只是你的页面无法通过 AMP 验证（从性能上来说，不遵守 AMP 规定到一定程度的时候，AMP做的性能改进也会全部失效，另外如果有一些东西是要求与 AMP 页面协作的，那么你的页面可能无法正常显示 ）。但同时，这也意味着 AMP 所强调的一些特性全部没有了。\n\n<!-- more -->\n\n### 还有更多解释吗？\n\n真的没有了。AMP 只是一套 web 组件生态系统而已。但是，因为可以很容易通过编程的方式来确定一个页面是合法的 AMP，就可以做更多炫酷的事情了。比如：\n\n- 合法的 AMP 可以使用免费、高速的缓存（例如[Google AMP Cache](https://developers.google.com/amp/cache/)）\n- 基本可以确认合法的 AMP 页面速度很快，且对用户友好\n- AMP 页面是“自包含”（self-contained）的（译注：指页面是完整、独立的），所以可以被嵌入第三方平台\n\n这也允许第三方平台做一些很炫酷的事情：\n\n- 出现在 Google 搜索的 Top Stories 轮播上\n- 从 Pinterest 上链接到 AMP 页面\n- 在 PWA 中使用 AMP 页面\n\n## 2. AMP是Google的项目\n\nAMP 最早是由出版行业和 Google 在2015年提出来的（当然，一些促使 AMP 诞生的体验问题，比如移动端 web 页面加载慢等，属于明显的行业内共性问题）。从一开始，它就是由出版行业、广告行业、技术提供者和平台提供方一起携手开发的，除了 Google 以外，参与者还包括 Twitter、Linkedin 和 Pinterest 。AMP 从提出来的第一天起就是一个通过 Github 进行开放协作的开源项目。到现在为止，AMP 接受了来自超过 200 名贡献者的 Pull Request，这些贡献者绝大部分不是 Google 的员工。\n\nGoogle 确实有一支团队在全职为 AMP 项目工作，AMP 项目的大部分贡献也来自这个团队，但这个团队也是通过和其它人一样的[Intent to implement](https://github.com/ampproject/amphtml/blob/master/CONTRIBUTING.md#contributing-features)流程来工作。Google 团队也会将它们的[周会纪要](https://github.com/ampproject/amphtml/issues?utf8=%E2%9C%93&q=label%3A%22Meeting%20Notes%22%20)以及其它的文档发布出来，尽量保证外部贡献者都可以参与进来。\n\n> 10月17日更新：针对这一点，外界有一些疑问和评论。上面这两段话仍然有效，但是我补充一个更精简的结论：AMP 项目当前的核心贡献者都是 Google 员工，所以 AMP 可以称作是 Google 领导（Google-led）的项目。但是它是被当作一个独立的开源项目来看待的，我们正在邀请开发者和社区参与进来一起贡献，让他们也变成核心贡献者，使 AMP 项目更加独立。\n\n## 3. AMP需要Chrome才能运行\n\n绝对不是这样！AMP 是一个跨平台、跨浏览器的类库，支持所有流行的移动浏览器和桌面浏览器的[最新两个版本](https://www.ampproject.org/learn/browsers/):\n\n![AMP可以运行的浏览器](/images/2017-08-23-misconceptions-about-amp/1.png)\n\n## 4. AMP 限制了我的布局和设计\n\n你肯定会被 AMP 能做的事情惊讶到。AMP 确实限制了一些标签和对性能影响很大的 CSS 属性的使用，但是整体来看，在为站点编写样式时，受到的[限制非常小](https://www.ampproject.org/docs/guides/responsive/style_pages)。想写一个疯狂的 5 层 flexbox 嵌套布局？那就写吧。想基于伪元素写一个疯狂的 UI ？也 OK。\n\n下面是一个我写的[AMP发展计划页面](https://paulbakaus.com/tutorials/css/flexbox-freebie-auto-growing-list-for-amp-roadmap/)：\n\n<iframe height='265' scrolling='no' title='Flexy Steppy List' src='//codepen.io/pbakaus/embed/ezOQYa/?height=265&theme-id=0&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/pbakaus/pen/ezOQYa/'>Flexy Steppy List</a> by Paul Bakaus (<a href='https://codepen.io/pbakaus'>@pbakaus</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n## 5. AMP只适合轻量级页面\n\n有几分道理，但也有误导性。这主要取决于你如何理解“轻量”。严格来说，AMP 的目标是静态内容。但我们所说的静态内容同样可以包含具有艺术气息的动画、侧边栏、灯箱广告、手风琴导航、轮播等等。你可以查看[AMPByExample](https://ampbyexample.com/)中的一些[高级例子](https://ampbyexample.com/#advanced)。\n\n## 6. AMP只适用于移动端\n\n诚然，AMP（Accelerated Mobile Pages）中的“Mobile”无助于澄清这个问题，但是这个说法还是跟事实完全不符。\n\nAMP 是一个非常强大的跨平台解决方案，它希望出版行业和开发者将工程资源从细碎的多平台兼容支持中解放出来，将焦点放到创建伟大的新产品特性上，而这些产品特性可以被任何设备上的所有用户轻易访问到。\n\nAMP本身是在[响应式设计](https://www.ampproject.org/docs/guides/responsive_amp)的概念支持下被创造出来的。目前有与 AMP 集成的平台大部分是聚焦移动端的，但是在桌面端，你也可以从 AMP 中获取得很多好处。\n\n想知道如何使用 AMP 来处理不同分辨率和不同设备的话，可以看我的另一篇文章[“AMP中的'mobile'”](https://paulbakaus.com/2016/07/01/about-that-mobile-in-accelerated-mobile-pages/)。\n\n## 7. 我现有的网站上无法使用AMP\n\n我们已经澄清过第 4 点，并没有什么特别的理由让你现在的网站无法使用 AMP，因为当你读完第一个问题后，就知道了 AMP 只是一个 web 组件类库而已。事实上，[AMP项目主页](https://www.ampproject.org/)就是完全使用的 AMP：\n\n![AMP项目主页使用的AMP](/images/2017-08-23-misconceptions-about-amp/2.png)\n\n当然，和其它类库一样，[AMP并不适合每一个人](https://paulbakaus.com/2016/02/26/life-after-amp/)。在动手前想一想在[AMP的强制限制](https://www.ampproject.org/learn/how-amp-works/)（同时也带来好处）下，你的网站是否能正常运行。如果答案是肯定的，那么就切换到 AMP 吧。有一个基本的原则，如果你的网站没有静态内容，并且页面并不是最深层次的页面（译注：原文 leaf pages，leaf 指树状结构中的叶子节点，对应到网站一般指最深层次的页面，例如文章页），例如入口页，也就是用户从搜索中点进来的页面，那么 AMP 可能不适合你。\n\n## 8. 如果我自己做优化，那AMP就没什么用\n\nAMP 的优化是“无脑优化”，即使你身边没有web开发大师，它也能帮助你。我们对将网站性能优化到极致这件事情感到自信和骄傲。事实上，因为 AMP 是一个通用库，它可能会漏掉一些针对你的网站特殊场景下的优化策略，这意味着你自己的手工优化工作很可能会带来更好的性能。\n\n但到今天为止，浏览器和一些大的平台例如 Google 搜索，仍然没有办法来确认你的网站是非常快速且对用户友好的。所以如果你选择自己做优化工作，你可能能得到一个非常快的网站，但是没有办法让其它人确信。而 AMP 的验证使得它对于第三方平台非常有吸引力。\n\n## 9. AMP只对出版发行行业有好处\n\n没错，如果你将你的新闻站点变成 AMP，就有机会出现在 Google 的 Top Stories 轮播上，并且 Google 会在移动端[搜索结果](https://search.googleblog.com/2016/09/search-results-are-officially-ampd.html)中使用一个内联的查看器来加速 AMP 页面。但是[eBay也创建了AMP页面](http://www.ebaytechblog.com/2016/06/30/browse-ebay-with-style-and-speed/)（[示例](http://m.ebay.com/sch/amp/16GB-iPhone-5s-Smartphones/9355/bn_341667/i.html)），尽管它们并不是新闻网站。\n\n![AMP可以运行的浏览器](/images/2017-08-23-misconceptions-about-amp/3.png)\n\n为什么 eBay 要选择AMP？[它们自己是这么说的](http://www.ebaytechblog.com/2016/06/30/browse-ebay-with-style-and-speed/)：\n\n> AMP 的好处之一在于，它是一套构建移动端 web 页面的最佳实践的集合。我们之前已经在遵守这些最佳实践中的一部分，但是这些不同的做法分散在各个团队中，而且每个团队都有自己的偏好。AMP 的出现让我们可以更好地整理加固这个最佳实践的清单，并将它们作为常规开发周期中的一部分。\n\n## 10. 我得在AMP和PWA中做出选择\n\nAMP 和 PWA 是互补的技术，它们的使用场景完全不一样。如果将它们结合在一起使用，你就能使用它们创建出我认为目前最完美的内容站点：\n\n1. 用户发现了你的内容的链接，点进来了\n2. 内容被瞬间加载完毕，并且看起来很舒服\n3. 阅读完之后，用户被邀请阅读更多内容，或者邀请用户使用一个更好体验的版本，它们由快速导航、通知推送、离线支持等技术支持\n4. 当用户接受了你的邀请后，他们将被引导到一个可以安装到桌面的版本，这个版本的使用体验就像 App 一样\n\n听起来非常棒对吧？你需要做的只是下面这些（或许有稍许变化）：\n\n- 最深层面的页面（有内容的页面，而不是概览页面）使用 AMP 发布，以获得瞬间加载的体验\n- 当用户浏览你的内容的时候，在这些AMP页面中使用[<amp-install-serviceworker>](https://www.ampproject.org/docs/reference/extended/amp-install-serviceworker.html)初始化缓存和 PWA 应用外壳（PWA app shell）\n- 当用户点击网站上的其它链接的时候（例如，在类似 App 的体验中，点击底部的按钮），[Service Worker](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers)接管请求，然后加载[PWA应用外壳](https://developers.google.com/web/updates/2015/11/app-shell?hl=en)\n- 最后，已经加载好的PWA应用外壳可以将 AMP 作为数据源嵌入到页面，这将使得你只需要为相同内容创建一个后台（既可以作为单独的AMP浏览，也可以作为 PWA 的数据源）\n\n如果同时谈到 AMP 和 PWA 的话，还有更多话题可以说，所以请期待在这个主题上的后续深度文章吧。\n\n## 总结\n\n现在你有答案了。针对 10 个误解，我们给了 10 个澄清的答案，希望能给你一个对 AMP 更大更清晰的印象，也让你想清楚 AMP 对你来说是否适合。还有问题吗？[联系我吧](https://twitter.com/pbakaus)！\n\n原文链接<https://paulbakaus.com/2016/10/13/debunked-10-misconceptions-about-amp/>\n\n作者：Paul Bakaus (@pbakaus)","source":"_posts/2017-08-23-10-misconceptions-about-amp.md","raw":"---\ntitle: 【译】澄清对AMP的十个误解\ndate: 2017-08-23 10:30\ncategory: 翻译\ntags: [AMP]\nauthor: TooBug\n---\n\n## 1. AMP是一个新的渲染引擎/编程语言\n\nAMP 是一套开源的 web 组件格式和类库。与其它类库或者框架相比，AMP 最大的区别在于，它采用了白名单策略，来约定你可以做什么。\n\n为什么要限制一些东西的使用呢？这是因为一些看起来很无辜的小代码很容易拖慢网站的性能。而且一段时间后回来排查这些性能问题会是一件非常困难的事情。这就像你在德国的 Autobahn 快速路上开车，却只在右道行走，不知道最左边的道路才是更快的。AMP 就是这样一种技术，强迫你走到最左边的快速道路，并且保证你前方的道路是没有障碍的。\n\nAMP 带来的并不只有限制，它还提供了很多的自定义标签，这些标签都有各自内置的功能。当你使用这些自定义标签，并遵守一些其它的规则，那么 AMP 将通过一些手段保证你的网站速度是非常快的。这些手段主要包括强制静态布局、高效率资源加载和一些其它的优化。\n\nAMP 有一份文档，规定了什么样的标签是兼容的，什么样的标签是不兼容的。它还发布了一个内置的验证工具，可以让你看到当前页面的是否符合 AMP 文档的要求。需要强调的是，从技术上来说，即使不遵守所有的规定，AMP 页面也能运行得很好，只是你的页面无法通过 AMP 验证（从性能上来说，不遵守 AMP 规定到一定程度的时候，AMP做的性能改进也会全部失效，另外如果有一些东西是要求与 AMP 页面协作的，那么你的页面可能无法正常显示 ）。但同时，这也意味着 AMP 所强调的一些特性全部没有了。\n\n<!-- more -->\n\n### 还有更多解释吗？\n\n真的没有了。AMP 只是一套 web 组件生态系统而已。但是，因为可以很容易通过编程的方式来确定一个页面是合法的 AMP，就可以做更多炫酷的事情了。比如：\n\n- 合法的 AMP 可以使用免费、高速的缓存（例如[Google AMP Cache](https://developers.google.com/amp/cache/)）\n- 基本可以确认合法的 AMP 页面速度很快，且对用户友好\n- AMP 页面是“自包含”（self-contained）的（译注：指页面是完整、独立的），所以可以被嵌入第三方平台\n\n这也允许第三方平台做一些很炫酷的事情：\n\n- 出现在 Google 搜索的 Top Stories 轮播上\n- 从 Pinterest 上链接到 AMP 页面\n- 在 PWA 中使用 AMP 页面\n\n## 2. AMP是Google的项目\n\nAMP 最早是由出版行业和 Google 在2015年提出来的（当然，一些促使 AMP 诞生的体验问题，比如移动端 web 页面加载慢等，属于明显的行业内共性问题）。从一开始，它就是由出版行业、广告行业、技术提供者和平台提供方一起携手开发的，除了 Google 以外，参与者还包括 Twitter、Linkedin 和 Pinterest 。AMP 从提出来的第一天起就是一个通过 Github 进行开放协作的开源项目。到现在为止，AMP 接受了来自超过 200 名贡献者的 Pull Request，这些贡献者绝大部分不是 Google 的员工。\n\nGoogle 确实有一支团队在全职为 AMP 项目工作，AMP 项目的大部分贡献也来自这个团队，但这个团队也是通过和其它人一样的[Intent to implement](https://github.com/ampproject/amphtml/blob/master/CONTRIBUTING.md#contributing-features)流程来工作。Google 团队也会将它们的[周会纪要](https://github.com/ampproject/amphtml/issues?utf8=%E2%9C%93&q=label%3A%22Meeting%20Notes%22%20)以及其它的文档发布出来，尽量保证外部贡献者都可以参与进来。\n\n> 10月17日更新：针对这一点，外界有一些疑问和评论。上面这两段话仍然有效，但是我补充一个更精简的结论：AMP 项目当前的核心贡献者都是 Google 员工，所以 AMP 可以称作是 Google 领导（Google-led）的项目。但是它是被当作一个独立的开源项目来看待的，我们正在邀请开发者和社区参与进来一起贡献，让他们也变成核心贡献者，使 AMP 项目更加独立。\n\n## 3. AMP需要Chrome才能运行\n\n绝对不是这样！AMP 是一个跨平台、跨浏览器的类库，支持所有流行的移动浏览器和桌面浏览器的[最新两个版本](https://www.ampproject.org/learn/browsers/):\n\n![AMP可以运行的浏览器](/images/2017-08-23-misconceptions-about-amp/1.png)\n\n## 4. AMP 限制了我的布局和设计\n\n你肯定会被 AMP 能做的事情惊讶到。AMP 确实限制了一些标签和对性能影响很大的 CSS 属性的使用，但是整体来看，在为站点编写样式时，受到的[限制非常小](https://www.ampproject.org/docs/guides/responsive/style_pages)。想写一个疯狂的 5 层 flexbox 嵌套布局？那就写吧。想基于伪元素写一个疯狂的 UI ？也 OK。\n\n下面是一个我写的[AMP发展计划页面](https://paulbakaus.com/tutorials/css/flexbox-freebie-auto-growing-list-for-amp-roadmap/)：\n\n<iframe height='265' scrolling='no' title='Flexy Steppy List' src='//codepen.io/pbakaus/embed/ezOQYa/?height=265&theme-id=0&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/pbakaus/pen/ezOQYa/'>Flexy Steppy List</a> by Paul Bakaus (<a href='https://codepen.io/pbakaus'>@pbakaus</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n## 5. AMP只适合轻量级页面\n\n有几分道理，但也有误导性。这主要取决于你如何理解“轻量”。严格来说，AMP 的目标是静态内容。但我们所说的静态内容同样可以包含具有艺术气息的动画、侧边栏、灯箱广告、手风琴导航、轮播等等。你可以查看[AMPByExample](https://ampbyexample.com/)中的一些[高级例子](https://ampbyexample.com/#advanced)。\n\n## 6. AMP只适用于移动端\n\n诚然，AMP（Accelerated Mobile Pages）中的“Mobile”无助于澄清这个问题，但是这个说法还是跟事实完全不符。\n\nAMP 是一个非常强大的跨平台解决方案，它希望出版行业和开发者将工程资源从细碎的多平台兼容支持中解放出来，将焦点放到创建伟大的新产品特性上，而这些产品特性可以被任何设备上的所有用户轻易访问到。\n\nAMP本身是在[响应式设计](https://www.ampproject.org/docs/guides/responsive_amp)的概念支持下被创造出来的。目前有与 AMP 集成的平台大部分是聚焦移动端的，但是在桌面端，你也可以从 AMP 中获取得很多好处。\n\n想知道如何使用 AMP 来处理不同分辨率和不同设备的话，可以看我的另一篇文章[“AMP中的'mobile'”](https://paulbakaus.com/2016/07/01/about-that-mobile-in-accelerated-mobile-pages/)。\n\n## 7. 我现有的网站上无法使用AMP\n\n我们已经澄清过第 4 点，并没有什么特别的理由让你现在的网站无法使用 AMP，因为当你读完第一个问题后，就知道了 AMP 只是一个 web 组件类库而已。事实上，[AMP项目主页](https://www.ampproject.org/)就是完全使用的 AMP：\n\n![AMP项目主页使用的AMP](/images/2017-08-23-misconceptions-about-amp/2.png)\n\n当然，和其它类库一样，[AMP并不适合每一个人](https://paulbakaus.com/2016/02/26/life-after-amp/)。在动手前想一想在[AMP的强制限制](https://www.ampproject.org/learn/how-amp-works/)（同时也带来好处）下，你的网站是否能正常运行。如果答案是肯定的，那么就切换到 AMP 吧。有一个基本的原则，如果你的网站没有静态内容，并且页面并不是最深层次的页面（译注：原文 leaf pages，leaf 指树状结构中的叶子节点，对应到网站一般指最深层次的页面，例如文章页），例如入口页，也就是用户从搜索中点进来的页面，那么 AMP 可能不适合你。\n\n## 8. 如果我自己做优化，那AMP就没什么用\n\nAMP 的优化是“无脑优化”，即使你身边没有web开发大师，它也能帮助你。我们对将网站性能优化到极致这件事情感到自信和骄傲。事实上，因为 AMP 是一个通用库，它可能会漏掉一些针对你的网站特殊场景下的优化策略，这意味着你自己的手工优化工作很可能会带来更好的性能。\n\n但到今天为止，浏览器和一些大的平台例如 Google 搜索，仍然没有办法来确认你的网站是非常快速且对用户友好的。所以如果你选择自己做优化工作，你可能能得到一个非常快的网站，但是没有办法让其它人确信。而 AMP 的验证使得它对于第三方平台非常有吸引力。\n\n## 9. AMP只对出版发行行业有好处\n\n没错，如果你将你的新闻站点变成 AMP，就有机会出现在 Google 的 Top Stories 轮播上，并且 Google 会在移动端[搜索结果](https://search.googleblog.com/2016/09/search-results-are-officially-ampd.html)中使用一个内联的查看器来加速 AMP 页面。但是[eBay也创建了AMP页面](http://www.ebaytechblog.com/2016/06/30/browse-ebay-with-style-and-speed/)（[示例](http://m.ebay.com/sch/amp/16GB-iPhone-5s-Smartphones/9355/bn_341667/i.html)），尽管它们并不是新闻网站。\n\n![AMP可以运行的浏览器](/images/2017-08-23-misconceptions-about-amp/3.png)\n\n为什么 eBay 要选择AMP？[它们自己是这么说的](http://www.ebaytechblog.com/2016/06/30/browse-ebay-with-style-and-speed/)：\n\n> AMP 的好处之一在于，它是一套构建移动端 web 页面的最佳实践的集合。我们之前已经在遵守这些最佳实践中的一部分，但是这些不同的做法分散在各个团队中，而且每个团队都有自己的偏好。AMP 的出现让我们可以更好地整理加固这个最佳实践的清单，并将它们作为常规开发周期中的一部分。\n\n## 10. 我得在AMP和PWA中做出选择\n\nAMP 和 PWA 是互补的技术，它们的使用场景完全不一样。如果将它们结合在一起使用，你就能使用它们创建出我认为目前最完美的内容站点：\n\n1. 用户发现了你的内容的链接，点进来了\n2. 内容被瞬间加载完毕，并且看起来很舒服\n3. 阅读完之后，用户被邀请阅读更多内容，或者邀请用户使用一个更好体验的版本，它们由快速导航、通知推送、离线支持等技术支持\n4. 当用户接受了你的邀请后，他们将被引导到一个可以安装到桌面的版本，这个版本的使用体验就像 App 一样\n\n听起来非常棒对吧？你需要做的只是下面这些（或许有稍许变化）：\n\n- 最深层面的页面（有内容的页面，而不是概览页面）使用 AMP 发布，以获得瞬间加载的体验\n- 当用户浏览你的内容的时候，在这些AMP页面中使用[<amp-install-serviceworker>](https://www.ampproject.org/docs/reference/extended/amp-install-serviceworker.html)初始化缓存和 PWA 应用外壳（PWA app shell）\n- 当用户点击网站上的其它链接的时候（例如，在类似 App 的体验中，点击底部的按钮），[Service Worker](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers)接管请求，然后加载[PWA应用外壳](https://developers.google.com/web/updates/2015/11/app-shell?hl=en)\n- 最后，已经加载好的PWA应用外壳可以将 AMP 作为数据源嵌入到页面，这将使得你只需要为相同内容创建一个后台（既可以作为单独的AMP浏览，也可以作为 PWA 的数据源）\n\n如果同时谈到 AMP 和 PWA 的话，还有更多话题可以说，所以请期待在这个主题上的后续深度文章吧。\n\n## 总结\n\n现在你有答案了。针对 10 个误解，我们给了 10 个澄清的答案，希望能给你一个对 AMP 更大更清晰的印象，也让你想清楚 AMP 对你来说是否适合。还有问题吗？[联系我吧](https://twitter.com/pbakaus)！\n\n原文链接<https://paulbakaus.com/2016/10/13/debunked-10-misconceptions-about-amp/>\n\n作者：Paul Bakaus (@pbakaus)","slug":"2017-08-23-10-misconceptions-about-amp","published":1,"updated":"2017-12-01T08:50:00.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknio001gjxs1w4p6zg8e","content":"<h2 id=\"1-AMP是一个新的渲染引擎-编程语言\"><a href=\"#1-AMP是一个新的渲染引擎-编程语言\" class=\"headerlink\" title=\"1. AMP是一个新的渲染引擎/编程语言\"></a>1. AMP是一个新的渲染引擎/编程语言</h2><p>AMP 是一套开源的 web 组件格式和类库。与其它类库或者框架相比，AMP 最大的区别在于，它采用了白名单策略，来约定你可以做什么。</p>\n<p>为什么要限制一些东西的使用呢？这是因为一些看起来很无辜的小代码很容易拖慢网站的性能。而且一段时间后回来排查这些性能问题会是一件非常困难的事情。这就像你在德国的 Autobahn 快速路上开车，却只在右道行走，不知道最左边的道路才是更快的。AMP 就是这样一种技术，强迫你走到最左边的快速道路，并且保证你前方的道路是没有障碍的。</p>\n<p>AMP 带来的并不只有限制，它还提供了很多的自定义标签，这些标签都有各自内置的功能。当你使用这些自定义标签，并遵守一些其它的规则，那么 AMP 将通过一些手段保证你的网站速度是非常快的。这些手段主要包括强制静态布局、高效率资源加载和一些其它的优化。</p>\n<p>AMP 有一份文档，规定了什么样的标签是兼容的，什么样的标签是不兼容的。它还发布了一个内置的验证工具，可以让你看到当前页面的是否符合 AMP 文档的要求。需要强调的是，从技术上来说，即使不遵守所有的规定，AMP 页面也能运行得很好，只是你的页面无法通过 AMP 验证（从性能上来说，不遵守 AMP 规定到一定程度的时候，AMP做的性能改进也会全部失效，另外如果有一些东西是要求与 AMP 页面协作的，那么你的页面可能无法正常显示 ）。但同时，这也意味着 AMP 所强调的一些特性全部没有了。</p>\n<a id=\"more\"></a>\n<h3 id=\"还有更多解释吗？\"><a href=\"#还有更多解释吗？\" class=\"headerlink\" title=\"还有更多解释吗？\"></a>还有更多解释吗？</h3><p>真的没有了。AMP 只是一套 web 组件生态系统而已。但是，因为可以很容易通过编程的方式来确定一个页面是合法的 AMP，就可以做更多炫酷的事情了。比如：</p>\n<ul>\n<li>合法的 AMP 可以使用免费、高速的缓存（例如<a href=\"https://developers.google.com/amp/cache/\" target=\"_blank\" rel=\"noopener\">Google AMP Cache</a>）</li>\n<li>基本可以确认合法的 AMP 页面速度很快，且对用户友好</li>\n<li>AMP 页面是“自包含”（self-contained）的（译注：指页面是完整、独立的），所以可以被嵌入第三方平台</li>\n</ul>\n<p>这也允许第三方平台做一些很炫酷的事情：</p>\n<ul>\n<li>出现在 Google 搜索的 Top Stories 轮播上</li>\n<li>从 Pinterest 上链接到 AMP 页面</li>\n<li>在 PWA 中使用 AMP 页面</li>\n</ul>\n<h2 id=\"2-AMP是Google的项目\"><a href=\"#2-AMP是Google的项目\" class=\"headerlink\" title=\"2. AMP是Google的项目\"></a>2. AMP是Google的项目</h2><p>AMP 最早是由出版行业和 Google 在2015年提出来的（当然，一些促使 AMP 诞生的体验问题，比如移动端 web 页面加载慢等，属于明显的行业内共性问题）。从一开始，它就是由出版行业、广告行业、技术提供者和平台提供方一起携手开发的，除了 Google 以外，参与者还包括 Twitter、Linkedin 和 Pinterest 。AMP 从提出来的第一天起就是一个通过 Github 进行开放协作的开源项目。到现在为止，AMP 接受了来自超过 200 名贡献者的 Pull Request，这些贡献者绝大部分不是 Google 的员工。</p>\n<p>Google 确实有一支团队在全职为 AMP 项目工作，AMP 项目的大部分贡献也来自这个团队，但这个团队也是通过和其它人一样的<a href=\"https://github.com/ampproject/amphtml/blob/master/CONTRIBUTING.md#contributing-features\" target=\"_blank\" rel=\"noopener\">Intent to implement</a>流程来工作。Google 团队也会将它们的<a href=\"https://github.com/ampproject/amphtml/issues?utf8=%E2%9C%93&amp;q=label%3A%22Meeting%20Notes%22%20\" target=\"_blank\" rel=\"noopener\">周会纪要</a>以及其它的文档发布出来，尽量保证外部贡献者都可以参与进来。</p>\n<blockquote>\n<p>10月17日更新：针对这一点，外界有一些疑问和评论。上面这两段话仍然有效，但是我补充一个更精简的结论：AMP 项目当前的核心贡献者都是 Google 员工，所以 AMP 可以称作是 Google 领导（Google-led）的项目。但是它是被当作一个独立的开源项目来看待的，我们正在邀请开发者和社区参与进来一起贡献，让他们也变成核心贡献者，使 AMP 项目更加独立。</p>\n</blockquote>\n<h2 id=\"3-AMP需要Chrome才能运行\"><a href=\"#3-AMP需要Chrome才能运行\" class=\"headerlink\" title=\"3. AMP需要Chrome才能运行\"></a>3. AMP需要Chrome才能运行</h2><p>绝对不是这样！AMP 是一个跨平台、跨浏览器的类库，支持所有流行的移动浏览器和桌面浏览器的<a href=\"https://www.ampproject.org/learn/browsers/\" target=\"_blank\" rel=\"noopener\">最新两个版本</a>:</p>\n<p><img src=\"/images/2017-08-23-misconceptions-about-amp/1.png\" alt=\"AMP可以运行的浏览器\"></p>\n<h2 id=\"4-AMP-限制了我的布局和设计\"><a href=\"#4-AMP-限制了我的布局和设计\" class=\"headerlink\" title=\"4. AMP 限制了我的布局和设计\"></a>4. AMP 限制了我的布局和设计</h2><p>你肯定会被 AMP 能做的事情惊讶到。AMP 确实限制了一些标签和对性能影响很大的 CSS 属性的使用，但是整体来看，在为站点编写样式时，受到的<a href=\"https://www.ampproject.org/docs/guides/responsive/style_pages\" target=\"_blank\" rel=\"noopener\">限制非常小</a>。想写一个疯狂的 5 层 flexbox 嵌套布局？那就写吧。想基于伪元素写一个疯狂的 UI ？也 OK。</p>\n<p>下面是一个我写的<a href=\"https://paulbakaus.com/tutorials/css/flexbox-freebie-auto-growing-list-for-amp-roadmap/\" target=\"_blank\" rel=\"noopener\">AMP发展计划页面</a>：</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"Flexy Steppy List\" src=\"//codepen.io/pbakaus/embed/ezOQYa/?height=265&theme-id=0&default-tab=result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">See the Pen <a href=\"https://codepen.io/pbakaus/pen/ezOQYa/\" target=\"_blank\" rel=\"noopener\">Flexy Steppy List</a> by Paul Bakaus (<a href=\"https://codepen.io/pbakaus\" target=\"_blank\" rel=\"noopener\">@pbakaus</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.<br></iframe>\n\n<h2 id=\"5-AMP只适合轻量级页面\"><a href=\"#5-AMP只适合轻量级页面\" class=\"headerlink\" title=\"5. AMP只适合轻量级页面\"></a>5. AMP只适合轻量级页面</h2><p>有几分道理，但也有误导性。这主要取决于你如何理解“轻量”。严格来说，AMP 的目标是静态内容。但我们所说的静态内容同样可以包含具有艺术气息的动画、侧边栏、灯箱广告、手风琴导航、轮播等等。你可以查看<a href=\"https://ampbyexample.com/\" target=\"_blank\" rel=\"noopener\">AMPByExample</a>中的一些<a href=\"https://ampbyexample.com/#advanced\" target=\"_blank\" rel=\"noopener\">高级例子</a>。</p>\n<h2 id=\"6-AMP只适用于移动端\"><a href=\"#6-AMP只适用于移动端\" class=\"headerlink\" title=\"6. AMP只适用于移动端\"></a>6. AMP只适用于移动端</h2><p>诚然，AMP（Accelerated Mobile Pages）中的“Mobile”无助于澄清这个问题，但是这个说法还是跟事实完全不符。</p>\n<p>AMP 是一个非常强大的跨平台解决方案，它希望出版行业和开发者将工程资源从细碎的多平台兼容支持中解放出来，将焦点放到创建伟大的新产品特性上，而这些产品特性可以被任何设备上的所有用户轻易访问到。</p>\n<p>AMP本身是在<a href=\"https://www.ampproject.org/docs/guides/responsive_amp\" target=\"_blank\" rel=\"noopener\">响应式设计</a>的概念支持下被创造出来的。目前有与 AMP 集成的平台大部分是聚焦移动端的，但是在桌面端，你也可以从 AMP 中获取得很多好处。</p>\n<p>想知道如何使用 AMP 来处理不同分辨率和不同设备的话，可以看我的另一篇文章<a href=\"https://paulbakaus.com/2016/07/01/about-that-mobile-in-accelerated-mobile-pages/\" target=\"_blank\" rel=\"noopener\">“AMP中的’mobile’”</a>。</p>\n<h2 id=\"7-我现有的网站上无法使用AMP\"><a href=\"#7-我现有的网站上无法使用AMP\" class=\"headerlink\" title=\"7. 我现有的网站上无法使用AMP\"></a>7. 我现有的网站上无法使用AMP</h2><p>我们已经澄清过第 4 点，并没有什么特别的理由让你现在的网站无法使用 AMP，因为当你读完第一个问题后，就知道了 AMP 只是一个 web 组件类库而已。事实上，<a href=\"https://www.ampproject.org/\" target=\"_blank\" rel=\"noopener\">AMP项目主页</a>就是完全使用的 AMP：</p>\n<p><img src=\"/images/2017-08-23-misconceptions-about-amp/2.png\" alt=\"AMP项目主页使用的AMP\"></p>\n<p>当然，和其它类库一样，<a href=\"https://paulbakaus.com/2016/02/26/life-after-amp/\" target=\"_blank\" rel=\"noopener\">AMP并不适合每一个人</a>。在动手前想一想在<a href=\"https://www.ampproject.org/learn/how-amp-works/\" target=\"_blank\" rel=\"noopener\">AMP的强制限制</a>（同时也带来好处）下，你的网站是否能正常运行。如果答案是肯定的，那么就切换到 AMP 吧。有一个基本的原则，如果你的网站没有静态内容，并且页面并不是最深层次的页面（译注：原文 leaf pages，leaf 指树状结构中的叶子节点，对应到网站一般指最深层次的页面，例如文章页），例如入口页，也就是用户从搜索中点进来的页面，那么 AMP 可能不适合你。</p>\n<h2 id=\"8-如果我自己做优化，那AMP就没什么用\"><a href=\"#8-如果我自己做优化，那AMP就没什么用\" class=\"headerlink\" title=\"8. 如果我自己做优化，那AMP就没什么用\"></a>8. 如果我自己做优化，那AMP就没什么用</h2><p>AMP 的优化是“无脑优化”，即使你身边没有web开发大师，它也能帮助你。我们对将网站性能优化到极致这件事情感到自信和骄傲。事实上，因为 AMP 是一个通用库，它可能会漏掉一些针对你的网站特殊场景下的优化策略，这意味着你自己的手工优化工作很可能会带来更好的性能。</p>\n<p>但到今天为止，浏览器和一些大的平台例如 Google 搜索，仍然没有办法来确认你的网站是非常快速且对用户友好的。所以如果你选择自己做优化工作，你可能能得到一个非常快的网站，但是没有办法让其它人确信。而 AMP 的验证使得它对于第三方平台非常有吸引力。</p>\n<h2 id=\"9-AMP只对出版发行行业有好处\"><a href=\"#9-AMP只对出版发行行业有好处\" class=\"headerlink\" title=\"9. AMP只对出版发行行业有好处\"></a>9. AMP只对出版发行行业有好处</h2><p>没错，如果你将你的新闻站点变成 AMP，就有机会出现在 Google 的 Top Stories 轮播上，并且 Google 会在移动端<a href=\"https://search.googleblog.com/2016/09/search-results-are-officially-ampd.html\" target=\"_blank\" rel=\"noopener\">搜索结果</a>中使用一个内联的查看器来加速 AMP 页面。但是<a href=\"http://www.ebaytechblog.com/2016/06/30/browse-ebay-with-style-and-speed/\" target=\"_blank\" rel=\"noopener\">eBay也创建了AMP页面</a>（<a href=\"http://m.ebay.com/sch/amp/16GB-iPhone-5s-Smartphones/9355/bn_341667/i.html\" target=\"_blank\" rel=\"noopener\">示例</a>），尽管它们并不是新闻网站。</p>\n<p><img src=\"/images/2017-08-23-misconceptions-about-amp/3.png\" alt=\"AMP可以运行的浏览器\"></p>\n<p>为什么 eBay 要选择AMP？<a href=\"http://www.ebaytechblog.com/2016/06/30/browse-ebay-with-style-and-speed/\" target=\"_blank\" rel=\"noopener\">它们自己是这么说的</a>：</p>\n<blockquote>\n<p>AMP 的好处之一在于，它是一套构建移动端 web 页面的最佳实践的集合。我们之前已经在遵守这些最佳实践中的一部分，但是这些不同的做法分散在各个团队中，而且每个团队都有自己的偏好。AMP 的出现让我们可以更好地整理加固这个最佳实践的清单，并将它们作为常规开发周期中的一部分。</p>\n</blockquote>\n<h2 id=\"10-我得在AMP和PWA中做出选择\"><a href=\"#10-我得在AMP和PWA中做出选择\" class=\"headerlink\" title=\"10. 我得在AMP和PWA中做出选择\"></a>10. 我得在AMP和PWA中做出选择</h2><p>AMP 和 PWA 是互补的技术，它们的使用场景完全不一样。如果将它们结合在一起使用，你就能使用它们创建出我认为目前最完美的内容站点：</p>\n<ol>\n<li>用户发现了你的内容的链接，点进来了</li>\n<li>内容被瞬间加载完毕，并且看起来很舒服</li>\n<li>阅读完之后，用户被邀请阅读更多内容，或者邀请用户使用一个更好体验的版本，它们由快速导航、通知推送、离线支持等技术支持</li>\n<li>当用户接受了你的邀请后，他们将被引导到一个可以安装到桌面的版本，这个版本的使用体验就像 App 一样</li>\n</ol>\n<p>听起来非常棒对吧？你需要做的只是下面这些（或许有稍许变化）：</p>\n<ul>\n<li>最深层面的页面（有内容的页面，而不是概览页面）使用 AMP 发布，以获得瞬间加载的体验</li>\n<li>当用户浏览你的内容的时候，在这些AMP页面中使用<a href=\"https://www.ampproject.org/docs/reference/extended/amp-install-serviceworker.html\" target=\"_blank\" rel=\"noopener\"><amp-install-serviceworker></amp-install-serviceworker></a>初始化缓存和 PWA 应用外壳（PWA app shell）</li>\n<li>当用户点击网站上的其它链接的时候（例如，在类似 App 的体验中，点击底部的按钮），<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers\" target=\"_blank\" rel=\"noopener\">Service Worker</a>接管请求，然后加载<a href=\"https://developers.google.com/web/updates/2015/11/app-shell?hl=en\" target=\"_blank\" rel=\"noopener\">PWA应用外壳</a></li>\n<li>最后，已经加载好的PWA应用外壳可以将 AMP 作为数据源嵌入到页面，这将使得你只需要为相同内容创建一个后台（既可以作为单独的AMP浏览，也可以作为 PWA 的数据源）</li>\n</ul>\n<p>如果同时谈到 AMP 和 PWA 的话，还有更多话题可以说，所以请期待在这个主题上的后续深度文章吧。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>现在你有答案了。针对 10 个误解，我们给了 10 个澄清的答案，希望能给你一个对 AMP 更大更清晰的印象，也让你想清楚 AMP 对你来说是否适合。还有问题吗？<a href=\"https://twitter.com/pbakaus\" target=\"_blank\" rel=\"noopener\">联系我吧</a>！</p>\n<p>原文链接<a href=\"https://paulbakaus.com/2016/10/13/debunked-10-misconceptions-about-amp/\" target=\"_blank\" rel=\"noopener\">https://paulbakaus.com/2016/10/13/debunked-10-misconceptions-about-amp/</a></p>\n<p>作者：Paul Bakaus (@pbakaus)</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-AMP是一个新的渲染引擎-编程语言\"><a href=\"#1-AMP是一个新的渲染引擎-编程语言\" class=\"headerlink\" title=\"1. AMP是一个新的渲染引擎/编程语言\"></a>1. AMP是一个新的渲染引擎/编程语言</h2><p>AMP 是一套开源的 web 组件格式和类库。与其它类库或者框架相比，AMP 最大的区别在于，它采用了白名单策略，来约定你可以做什么。</p>\n<p>为什么要限制一些东西的使用呢？这是因为一些看起来很无辜的小代码很容易拖慢网站的性能。而且一段时间后回来排查这些性能问题会是一件非常困难的事情。这就像你在德国的 Autobahn 快速路上开车，却只在右道行走，不知道最左边的道路才是更快的。AMP 就是这样一种技术，强迫你走到最左边的快速道路，并且保证你前方的道路是没有障碍的。</p>\n<p>AMP 带来的并不只有限制，它还提供了很多的自定义标签，这些标签都有各自内置的功能。当你使用这些自定义标签，并遵守一些其它的规则，那么 AMP 将通过一些手段保证你的网站速度是非常快的。这些手段主要包括强制静态布局、高效率资源加载和一些其它的优化。</p>\n<p>AMP 有一份文档，规定了什么样的标签是兼容的，什么样的标签是不兼容的。它还发布了一个内置的验证工具，可以让你看到当前页面的是否符合 AMP 文档的要求。需要强调的是，从技术上来说，即使不遵守所有的规定，AMP 页面也能运行得很好，只是你的页面无法通过 AMP 验证（从性能上来说，不遵守 AMP 规定到一定程度的时候，AMP做的性能改进也会全部失效，另外如果有一些东西是要求与 AMP 页面协作的，那么你的页面可能无法正常显示 ）。但同时，这也意味着 AMP 所强调的一些特性全部没有了。</p>","more":"<h3 id=\"还有更多解释吗？\"><a href=\"#还有更多解释吗？\" class=\"headerlink\" title=\"还有更多解释吗？\"></a>还有更多解释吗？</h3><p>真的没有了。AMP 只是一套 web 组件生态系统而已。但是，因为可以很容易通过编程的方式来确定一个页面是合法的 AMP，就可以做更多炫酷的事情了。比如：</p>\n<ul>\n<li>合法的 AMP 可以使用免费、高速的缓存（例如<a href=\"https://developers.google.com/amp/cache/\" target=\"_blank\" rel=\"noopener\">Google AMP Cache</a>）</li>\n<li>基本可以确认合法的 AMP 页面速度很快，且对用户友好</li>\n<li>AMP 页面是“自包含”（self-contained）的（译注：指页面是完整、独立的），所以可以被嵌入第三方平台</li>\n</ul>\n<p>这也允许第三方平台做一些很炫酷的事情：</p>\n<ul>\n<li>出现在 Google 搜索的 Top Stories 轮播上</li>\n<li>从 Pinterest 上链接到 AMP 页面</li>\n<li>在 PWA 中使用 AMP 页面</li>\n</ul>\n<h2 id=\"2-AMP是Google的项目\"><a href=\"#2-AMP是Google的项目\" class=\"headerlink\" title=\"2. AMP是Google的项目\"></a>2. AMP是Google的项目</h2><p>AMP 最早是由出版行业和 Google 在2015年提出来的（当然，一些促使 AMP 诞生的体验问题，比如移动端 web 页面加载慢等，属于明显的行业内共性问题）。从一开始，它就是由出版行业、广告行业、技术提供者和平台提供方一起携手开发的，除了 Google 以外，参与者还包括 Twitter、Linkedin 和 Pinterest 。AMP 从提出来的第一天起就是一个通过 Github 进行开放协作的开源项目。到现在为止，AMP 接受了来自超过 200 名贡献者的 Pull Request，这些贡献者绝大部分不是 Google 的员工。</p>\n<p>Google 确实有一支团队在全职为 AMP 项目工作，AMP 项目的大部分贡献也来自这个团队，但这个团队也是通过和其它人一样的<a href=\"https://github.com/ampproject/amphtml/blob/master/CONTRIBUTING.md#contributing-features\" target=\"_blank\" rel=\"noopener\">Intent to implement</a>流程来工作。Google 团队也会将它们的<a href=\"https://github.com/ampproject/amphtml/issues?utf8=%E2%9C%93&amp;q=label%3A%22Meeting%20Notes%22%20\" target=\"_blank\" rel=\"noopener\">周会纪要</a>以及其它的文档发布出来，尽量保证外部贡献者都可以参与进来。</p>\n<blockquote>\n<p>10月17日更新：针对这一点，外界有一些疑问和评论。上面这两段话仍然有效，但是我补充一个更精简的结论：AMP 项目当前的核心贡献者都是 Google 员工，所以 AMP 可以称作是 Google 领导（Google-led）的项目。但是它是被当作一个独立的开源项目来看待的，我们正在邀请开发者和社区参与进来一起贡献，让他们也变成核心贡献者，使 AMP 项目更加独立。</p>\n</blockquote>\n<h2 id=\"3-AMP需要Chrome才能运行\"><a href=\"#3-AMP需要Chrome才能运行\" class=\"headerlink\" title=\"3. AMP需要Chrome才能运行\"></a>3. AMP需要Chrome才能运行</h2><p>绝对不是这样！AMP 是一个跨平台、跨浏览器的类库，支持所有流行的移动浏览器和桌面浏览器的<a href=\"https://www.ampproject.org/learn/browsers/\" target=\"_blank\" rel=\"noopener\">最新两个版本</a>:</p>\n<p><img src=\"/images/2017-08-23-misconceptions-about-amp/1.png\" alt=\"AMP可以运行的浏览器\"></p>\n<h2 id=\"4-AMP-限制了我的布局和设计\"><a href=\"#4-AMP-限制了我的布局和设计\" class=\"headerlink\" title=\"4. AMP 限制了我的布局和设计\"></a>4. AMP 限制了我的布局和设计</h2><p>你肯定会被 AMP 能做的事情惊讶到。AMP 确实限制了一些标签和对性能影响很大的 CSS 属性的使用，但是整体来看，在为站点编写样式时，受到的<a href=\"https://www.ampproject.org/docs/guides/responsive/style_pages\" target=\"_blank\" rel=\"noopener\">限制非常小</a>。想写一个疯狂的 5 层 flexbox 嵌套布局？那就写吧。想基于伪元素写一个疯狂的 UI ？也 OK。</p>\n<p>下面是一个我写的<a href=\"https://paulbakaus.com/tutorials/css/flexbox-freebie-auto-growing-list-for-amp-roadmap/\" target=\"_blank\" rel=\"noopener\">AMP发展计划页面</a>：</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"Flexy Steppy List\" src=\"//codepen.io/pbakaus/embed/ezOQYa/?height=265&theme-id=0&default-tab=result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">See the Pen <a href=\"https://codepen.io/pbakaus/pen/ezOQYa/\" target=\"_blank\" rel=\"noopener\">Flexy Steppy List</a> by Paul Bakaus (<a href=\"https://codepen.io/pbakaus\" target=\"_blank\" rel=\"noopener\">@pbakaus</a>) on <a href=\"https://codepen.io\" target=\"_blank\" rel=\"noopener\">CodePen</a>.<br></iframe>\n\n<h2 id=\"5-AMP只适合轻量级页面\"><a href=\"#5-AMP只适合轻量级页面\" class=\"headerlink\" title=\"5. AMP只适合轻量级页面\"></a>5. AMP只适合轻量级页面</h2><p>有几分道理，但也有误导性。这主要取决于你如何理解“轻量”。严格来说，AMP 的目标是静态内容。但我们所说的静态内容同样可以包含具有艺术气息的动画、侧边栏、灯箱广告、手风琴导航、轮播等等。你可以查看<a href=\"https://ampbyexample.com/\" target=\"_blank\" rel=\"noopener\">AMPByExample</a>中的一些<a href=\"https://ampbyexample.com/#advanced\" target=\"_blank\" rel=\"noopener\">高级例子</a>。</p>\n<h2 id=\"6-AMP只适用于移动端\"><a href=\"#6-AMP只适用于移动端\" class=\"headerlink\" title=\"6. AMP只适用于移动端\"></a>6. AMP只适用于移动端</h2><p>诚然，AMP（Accelerated Mobile Pages）中的“Mobile”无助于澄清这个问题，但是这个说法还是跟事实完全不符。</p>\n<p>AMP 是一个非常强大的跨平台解决方案，它希望出版行业和开发者将工程资源从细碎的多平台兼容支持中解放出来，将焦点放到创建伟大的新产品特性上，而这些产品特性可以被任何设备上的所有用户轻易访问到。</p>\n<p>AMP本身是在<a href=\"https://www.ampproject.org/docs/guides/responsive_amp\" target=\"_blank\" rel=\"noopener\">响应式设计</a>的概念支持下被创造出来的。目前有与 AMP 集成的平台大部分是聚焦移动端的，但是在桌面端，你也可以从 AMP 中获取得很多好处。</p>\n<p>想知道如何使用 AMP 来处理不同分辨率和不同设备的话，可以看我的另一篇文章<a href=\"https://paulbakaus.com/2016/07/01/about-that-mobile-in-accelerated-mobile-pages/\" target=\"_blank\" rel=\"noopener\">“AMP中的’mobile’”</a>。</p>\n<h2 id=\"7-我现有的网站上无法使用AMP\"><a href=\"#7-我现有的网站上无法使用AMP\" class=\"headerlink\" title=\"7. 我现有的网站上无法使用AMP\"></a>7. 我现有的网站上无法使用AMP</h2><p>我们已经澄清过第 4 点，并没有什么特别的理由让你现在的网站无法使用 AMP，因为当你读完第一个问题后，就知道了 AMP 只是一个 web 组件类库而已。事实上，<a href=\"https://www.ampproject.org/\" target=\"_blank\" rel=\"noopener\">AMP项目主页</a>就是完全使用的 AMP：</p>\n<p><img src=\"/images/2017-08-23-misconceptions-about-amp/2.png\" alt=\"AMP项目主页使用的AMP\"></p>\n<p>当然，和其它类库一样，<a href=\"https://paulbakaus.com/2016/02/26/life-after-amp/\" target=\"_blank\" rel=\"noopener\">AMP并不适合每一个人</a>。在动手前想一想在<a href=\"https://www.ampproject.org/learn/how-amp-works/\" target=\"_blank\" rel=\"noopener\">AMP的强制限制</a>（同时也带来好处）下，你的网站是否能正常运行。如果答案是肯定的，那么就切换到 AMP 吧。有一个基本的原则，如果你的网站没有静态内容，并且页面并不是最深层次的页面（译注：原文 leaf pages，leaf 指树状结构中的叶子节点，对应到网站一般指最深层次的页面，例如文章页），例如入口页，也就是用户从搜索中点进来的页面，那么 AMP 可能不适合你。</p>\n<h2 id=\"8-如果我自己做优化，那AMP就没什么用\"><a href=\"#8-如果我自己做优化，那AMP就没什么用\" class=\"headerlink\" title=\"8. 如果我自己做优化，那AMP就没什么用\"></a>8. 如果我自己做优化，那AMP就没什么用</h2><p>AMP 的优化是“无脑优化”，即使你身边没有web开发大师，它也能帮助你。我们对将网站性能优化到极致这件事情感到自信和骄傲。事实上，因为 AMP 是一个通用库，它可能会漏掉一些针对你的网站特殊场景下的优化策略，这意味着你自己的手工优化工作很可能会带来更好的性能。</p>\n<p>但到今天为止，浏览器和一些大的平台例如 Google 搜索，仍然没有办法来确认你的网站是非常快速且对用户友好的。所以如果你选择自己做优化工作，你可能能得到一个非常快的网站，但是没有办法让其它人确信。而 AMP 的验证使得它对于第三方平台非常有吸引力。</p>\n<h2 id=\"9-AMP只对出版发行行业有好处\"><a href=\"#9-AMP只对出版发行行业有好处\" class=\"headerlink\" title=\"9. AMP只对出版发行行业有好处\"></a>9. AMP只对出版发行行业有好处</h2><p>没错，如果你将你的新闻站点变成 AMP，就有机会出现在 Google 的 Top Stories 轮播上，并且 Google 会在移动端<a href=\"https://search.googleblog.com/2016/09/search-results-are-officially-ampd.html\" target=\"_blank\" rel=\"noopener\">搜索结果</a>中使用一个内联的查看器来加速 AMP 页面。但是<a href=\"http://www.ebaytechblog.com/2016/06/30/browse-ebay-with-style-and-speed/\" target=\"_blank\" rel=\"noopener\">eBay也创建了AMP页面</a>（<a href=\"http://m.ebay.com/sch/amp/16GB-iPhone-5s-Smartphones/9355/bn_341667/i.html\" target=\"_blank\" rel=\"noopener\">示例</a>），尽管它们并不是新闻网站。</p>\n<p><img src=\"/images/2017-08-23-misconceptions-about-amp/3.png\" alt=\"AMP可以运行的浏览器\"></p>\n<p>为什么 eBay 要选择AMP？<a href=\"http://www.ebaytechblog.com/2016/06/30/browse-ebay-with-style-and-speed/\" target=\"_blank\" rel=\"noopener\">它们自己是这么说的</a>：</p>\n<blockquote>\n<p>AMP 的好处之一在于，它是一套构建移动端 web 页面的最佳实践的集合。我们之前已经在遵守这些最佳实践中的一部分，但是这些不同的做法分散在各个团队中，而且每个团队都有自己的偏好。AMP 的出现让我们可以更好地整理加固这个最佳实践的清单，并将它们作为常规开发周期中的一部分。</p>\n</blockquote>\n<h2 id=\"10-我得在AMP和PWA中做出选择\"><a href=\"#10-我得在AMP和PWA中做出选择\" class=\"headerlink\" title=\"10. 我得在AMP和PWA中做出选择\"></a>10. 我得在AMP和PWA中做出选择</h2><p>AMP 和 PWA 是互补的技术，它们的使用场景完全不一样。如果将它们结合在一起使用，你就能使用它们创建出我认为目前最完美的内容站点：</p>\n<ol>\n<li>用户发现了你的内容的链接，点进来了</li>\n<li>内容被瞬间加载完毕，并且看起来很舒服</li>\n<li>阅读完之后，用户被邀请阅读更多内容，或者邀请用户使用一个更好体验的版本，它们由快速导航、通知推送、离线支持等技术支持</li>\n<li>当用户接受了你的邀请后，他们将被引导到一个可以安装到桌面的版本，这个版本的使用体验就像 App 一样</li>\n</ol>\n<p>听起来非常棒对吧？你需要做的只是下面这些（或许有稍许变化）：</p>\n<ul>\n<li>最深层面的页面（有内容的页面，而不是概览页面）使用 AMP 发布，以获得瞬间加载的体验</li>\n<li>当用户浏览你的内容的时候，在这些AMP页面中使用<a href=\"https://www.ampproject.org/docs/reference/extended/amp-install-serviceworker.html\" target=\"_blank\" rel=\"noopener\"><amp-install-serviceworker></amp-install-serviceworker></a>初始化缓存和 PWA 应用外壳（PWA app shell）</li>\n<li>当用户点击网站上的其它链接的时候（例如，在类似 App 的体验中，点击底部的按钮），<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers\" target=\"_blank\" rel=\"noopener\">Service Worker</a>接管请求，然后加载<a href=\"https://developers.google.com/web/updates/2015/11/app-shell?hl=en\" target=\"_blank\" rel=\"noopener\">PWA应用外壳</a></li>\n<li>最后，已经加载好的PWA应用外壳可以将 AMP 作为数据源嵌入到页面，这将使得你只需要为相同内容创建一个后台（既可以作为单独的AMP浏览，也可以作为 PWA 的数据源）</li>\n</ul>\n<p>如果同时谈到 AMP 和 PWA 的话，还有更多话题可以说，所以请期待在这个主题上的后续深度文章吧。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>现在你有答案了。针对 10 个误解，我们给了 10 个澄清的答案，希望能给你一个对 AMP 更大更清晰的印象，也让你想清楚 AMP 对你来说是否适合。还有问题吗？<a href=\"https://twitter.com/pbakaus\" target=\"_blank\" rel=\"noopener\">联系我吧</a>！</p>\n<p>原文链接<a href=\"https://paulbakaus.com/2016/10/13/debunked-10-misconceptions-about-amp/\" target=\"_blank\" rel=\"noopener\">https://paulbakaus.com/2016/10/13/debunked-10-misconceptions-about-amp/</a></p>\n<p>作者：Paul Bakaus (@pbakaus)</p>"},{"title":"【译】Node.js之HTTP/2服务器推送","date":"2017-09-01T12:00:00.000Z","author":"Jin","_content":"\nNode.js v8.4+版本发布带来了体验版的HTTP/2，你可以自己通过设置参数`--expose-http2`启动。\n\n这篇文章，我将介绍HTTP/2最重要的一方面服务器推送并且创建一个小的Node.js程序案例来使用它。\n\n## 关于HTTP/2\nHTTP/2 的目的是通过支持完整的请求与响应复用来减少延迟，通过有效压缩 HTTP 标头字段将协议开销降至最低，同时增加对请求优先级和服务器推送的支持。\n\n更多关于HTTP/2内容，请查看文章[HTTP/2](https://developers.google.com/web/fundamentals/performance/http2/)。\n\n<!-- more -->\n\n## 服务器推送\nHTTP/2 服务器推送（Server Push）允许服务器在浏览器请求之前将资源发送到浏览器。\n\n> 在我们转到HTTP/2之前，我们来看看它如何与HTTP/1配合使用：\n\n在HTTP/1中，客户端向服务器发送一个请求，服务器返回一个包含许多外部资源（.js，.css等文件）链接的HTML文件。当浏览器处理这个初始HTML文件时，它开始解析这些链接，并分别加载它们。\n\n查看下面的demo加载过程的图像。 请注意时间表上的独立请求以及这些请求的启动：\n\n![http/1](/images/2017-09-01-node-js-http-2-push/1.png)\n\n*HTTP/1资源加载*\n\n这是HTTP/1的工作原理，这就是我们如何开发这么多年的应用程序。**为什么要改变它呢？**\n\n\n当前方法的问题是用户必须等待浏览器解析响应，发现链接并获取资源。 这会延迟渲染并增加加载时间。 有一些解决方案，如内联一些资源，但也使得初始响应越来越大。\n\n> 这是HTTP/2服务器推送功能进入视线的地方，因为服务器可以在浏览器请求之前将资源发送到浏览器。\n\n看看下面的图片，通过HTTP/2提供相同服务的网站。查看时间轴和启动器。 你可以看到HTTP/2复用减少了请求数量，并且资源与初始请求一起立即发送。\n\n![http/2](/images/2017-09-01-node-js-http-2-push/2.png)\n\n*HTTP/2服务器推送*\n\n让我们看看今天如何在Node.js中使用HTTP/2服务器推送，来加快客户端的加载时间。\n\n## 一个Node.js HTTP/2服务器推送案例\n通过加载内置的`http2`模块，我们可以创建我们的服务器，就像我们使用`https`模块一样。\n\n有趣的部分是在请求`index.html`时推送其他资源：\n\n```js\nconst http2 = require('http2')  \nconst server = http2.createSecureServer(  \n  { cert, key },\n  onRequest\n)\n\nfunction push (stream, filePath) {  \n  const { file, headers } = getFile(filePath)\n  const pushHeaders = { [HTTP2_HEADER_PATH]: filePath }\n\n  stream.pushStream(pushHeaders, (pushStream) => {\n    pushStream.respondWithFD(file, headers)\n  })\n}\n\nfunction onRequest (req, res) {  \n  // Push files with index.html\n  if (reqPath === '/index.html') {\n    push(res.stream, 'bundle1.js')\n    push(res.stream, 'bundle2.js')\n  }\n\n  // Serve file\n  res.stream.respondWithFD(file.fileDescriptor, file.headers)\n}\n```\n\n这样`bundle1.js`和`bundle2.js`资源即使在它要求它们之前也会被发送到浏览器。\n\n你可以查看完整的案例：[https://github.com/RisingStack/http2-push-example](https://github.com/RisingStack/http2-push-example)\n\n## HTTP/2 & Node\n\n> HTTP/2可以帮助我们在很多方面优化我们的客户端与服务器之间的通信。\n\n通过服务器推送，我们可以将资源发送到浏览器，减少用户的初始加载时间。\n\n原文：[https://blog.risingstack.com/node-js-http-2-push/](https://blog.risingstack.com/node-js-http-2-push/)\n\n译者：[Jin](https://github.com/Yi-love)\n\n作者：[Péter Márton](https://twitter.com/slashdotpeter)","source":"_posts/2017-09-01-node-js-http-2-push.md","raw":"---\ntitle: 【译】Node.js之HTTP/2服务器推送\ndate: 2017-09-01 20:00\ncategory: Node.js\ntags: [HTTP/2,Nodejs,JavaScript,Server Push]\nauthor: Jin\n---\n\nNode.js v8.4+版本发布带来了体验版的HTTP/2，你可以自己通过设置参数`--expose-http2`启动。\n\n这篇文章，我将介绍HTTP/2最重要的一方面服务器推送并且创建一个小的Node.js程序案例来使用它。\n\n## 关于HTTP/2\nHTTP/2 的目的是通过支持完整的请求与响应复用来减少延迟，通过有效压缩 HTTP 标头字段将协议开销降至最低，同时增加对请求优先级和服务器推送的支持。\n\n更多关于HTTP/2内容，请查看文章[HTTP/2](https://developers.google.com/web/fundamentals/performance/http2/)。\n\n<!-- more -->\n\n## 服务器推送\nHTTP/2 服务器推送（Server Push）允许服务器在浏览器请求之前将资源发送到浏览器。\n\n> 在我们转到HTTP/2之前，我们来看看它如何与HTTP/1配合使用：\n\n在HTTP/1中，客户端向服务器发送一个请求，服务器返回一个包含许多外部资源（.js，.css等文件）链接的HTML文件。当浏览器处理这个初始HTML文件时，它开始解析这些链接，并分别加载它们。\n\n查看下面的demo加载过程的图像。 请注意时间表上的独立请求以及这些请求的启动：\n\n![http/1](/images/2017-09-01-node-js-http-2-push/1.png)\n\n*HTTP/1资源加载*\n\n这是HTTP/1的工作原理，这就是我们如何开发这么多年的应用程序。**为什么要改变它呢？**\n\n\n当前方法的问题是用户必须等待浏览器解析响应，发现链接并获取资源。 这会延迟渲染并增加加载时间。 有一些解决方案，如内联一些资源，但也使得初始响应越来越大。\n\n> 这是HTTP/2服务器推送功能进入视线的地方，因为服务器可以在浏览器请求之前将资源发送到浏览器。\n\n看看下面的图片，通过HTTP/2提供相同服务的网站。查看时间轴和启动器。 你可以看到HTTP/2复用减少了请求数量，并且资源与初始请求一起立即发送。\n\n![http/2](/images/2017-09-01-node-js-http-2-push/2.png)\n\n*HTTP/2服务器推送*\n\n让我们看看今天如何在Node.js中使用HTTP/2服务器推送，来加快客户端的加载时间。\n\n## 一个Node.js HTTP/2服务器推送案例\n通过加载内置的`http2`模块，我们可以创建我们的服务器，就像我们使用`https`模块一样。\n\n有趣的部分是在请求`index.html`时推送其他资源：\n\n```js\nconst http2 = require('http2')  \nconst server = http2.createSecureServer(  \n  { cert, key },\n  onRequest\n)\n\nfunction push (stream, filePath) {  \n  const { file, headers } = getFile(filePath)\n  const pushHeaders = { [HTTP2_HEADER_PATH]: filePath }\n\n  stream.pushStream(pushHeaders, (pushStream) => {\n    pushStream.respondWithFD(file, headers)\n  })\n}\n\nfunction onRequest (req, res) {  \n  // Push files with index.html\n  if (reqPath === '/index.html') {\n    push(res.stream, 'bundle1.js')\n    push(res.stream, 'bundle2.js')\n  }\n\n  // Serve file\n  res.stream.respondWithFD(file.fileDescriptor, file.headers)\n}\n```\n\n这样`bundle1.js`和`bundle2.js`资源即使在它要求它们之前也会被发送到浏览器。\n\n你可以查看完整的案例：[https://github.com/RisingStack/http2-push-example](https://github.com/RisingStack/http2-push-example)\n\n## HTTP/2 & Node\n\n> HTTP/2可以帮助我们在很多方面优化我们的客户端与服务器之间的通信。\n\n通过服务器推送，我们可以将资源发送到浏览器，减少用户的初始加载时间。\n\n原文：[https://blog.risingstack.com/node-js-http-2-push/](https://blog.risingstack.com/node-js-http-2-push/)\n\n译者：[Jin](https://github.com/Yi-love)\n\n作者：[Péter Márton](https://twitter.com/slashdotpeter)","slug":"2017-09-01-node-js-http-2-push","published":1,"updated":"2017-12-01T08:50:00.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknir001kjxs1n52febuj","content":"<p>Node.js v8.4+版本发布带来了体验版的HTTP/2，你可以自己通过设置参数<code>--expose-http2</code>启动。</p>\n<p>这篇文章，我将介绍HTTP/2最重要的一方面服务器推送并且创建一个小的Node.js程序案例来使用它。</p>\n<h2 id=\"关于HTTP-2\"><a href=\"#关于HTTP-2\" class=\"headerlink\" title=\"关于HTTP/2\"></a>关于HTTP/2</h2><p>HTTP/2 的目的是通过支持完整的请求与响应复用来减少延迟，通过有效压缩 HTTP 标头字段将协议开销降至最低，同时增加对请求优先级和服务器推送的支持。</p>\n<p>更多关于HTTP/2内容，请查看文章<a href=\"https://developers.google.com/web/fundamentals/performance/http2/\" target=\"_blank\" rel=\"noopener\">HTTP/2</a>。</p>\n<a id=\"more\"></a>\n<h2 id=\"服务器推送\"><a href=\"#服务器推送\" class=\"headerlink\" title=\"服务器推送\"></a>服务器推送</h2><p>HTTP/2 服务器推送（Server Push）允许服务器在浏览器请求之前将资源发送到浏览器。</p>\n<blockquote>\n<p>在我们转到HTTP/2之前，我们来看看它如何与HTTP/1配合使用：</p>\n</blockquote>\n<p>在HTTP/1中，客户端向服务器发送一个请求，服务器返回一个包含许多外部资源（.js，.css等文件）链接的HTML文件。当浏览器处理这个初始HTML文件时，它开始解析这些链接，并分别加载它们。</p>\n<p>查看下面的demo加载过程的图像。 请注意时间表上的独立请求以及这些请求的启动：</p>\n<p><img src=\"/images/2017-09-01-node-js-http-2-push/1.png\" alt=\"http/1\"></p>\n<p><em>HTTP/1资源加载</em></p>\n<p>这是HTTP/1的工作原理，这就是我们如何开发这么多年的应用程序。<strong>为什么要改变它呢？</strong></p>\n<p>当前方法的问题是用户必须等待浏览器解析响应，发现链接并获取资源。 这会延迟渲染并增加加载时间。 有一些解决方案，如内联一些资源，但也使得初始响应越来越大。</p>\n<blockquote>\n<p>这是HTTP/2服务器推送功能进入视线的地方，因为服务器可以在浏览器请求之前将资源发送到浏览器。</p>\n</blockquote>\n<p>看看下面的图片，通过HTTP/2提供相同服务的网站。查看时间轴和启动器。 你可以看到HTTP/2复用减少了请求数量，并且资源与初始请求一起立即发送。</p>\n<p><img src=\"/images/2017-09-01-node-js-http-2-push/2.png\" alt=\"http/2\"></p>\n<p><em>HTTP/2服务器推送</em></p>\n<p>让我们看看今天如何在Node.js中使用HTTP/2服务器推送，来加快客户端的加载时间。</p>\n<h2 id=\"一个Node-js-HTTP-2服务器推送案例\"><a href=\"#一个Node-js-HTTP-2服务器推送案例\" class=\"headerlink\" title=\"一个Node.js HTTP/2服务器推送案例\"></a>一个Node.js HTTP/2服务器推送案例</h2><p>通过加载内置的<code>http2</code>模块，我们可以创建我们的服务器，就像我们使用<code>https</code>模块一样。</p>\n<p>有趣的部分是在请求<code>index.html</code>时推送其他资源：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http2 = <span class=\"built_in\">require</span>(<span class=\"string\">'http2'</span>)  </span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http2.createSecureServer(  </span><br><span class=\"line\">  &#123; cert, key &#125;,</span><br><span class=\"line\">  onRequest</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span> (<span class=\"params\">stream, filePath</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; file, headers &#125; = getFile(filePath)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> pushHeaders = &#123; [HTTP2_HEADER_PATH]: filePath &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  stream.pushStream(pushHeaders, (pushStream) =&gt; &#123;</span><br><span class=\"line\">    pushStream.respondWithFD(file, headers)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span> (<span class=\"params\">req, res</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"comment\">// Push files with index.html</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (reqPath === <span class=\"string\">'/index.html'</span>) &#123;</span><br><span class=\"line\">    push(res.stream, <span class=\"string\">'bundle1.js'</span>)</span><br><span class=\"line\">    push(res.stream, <span class=\"string\">'bundle2.js'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Serve file</span></span><br><span class=\"line\">  res.stream.respondWithFD(file.fileDescriptor, file.headers)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样<code>bundle1.js</code>和<code>bundle2.js</code>资源即使在它要求它们之前也会被发送到浏览器。</p>\n<p>你可以查看完整的案例：<a href=\"https://github.com/RisingStack/http2-push-example\" target=\"_blank\" rel=\"noopener\">https://github.com/RisingStack/http2-push-example</a></p>\n<h2 id=\"HTTP-2-amp-Node\"><a href=\"#HTTP-2-amp-Node\" class=\"headerlink\" title=\"HTTP/2 &amp; Node\"></a>HTTP/2 &amp; Node</h2><blockquote>\n<p>HTTP/2可以帮助我们在很多方面优化我们的客户端与服务器之间的通信。</p>\n</blockquote>\n<p>通过服务器推送，我们可以将资源发送到浏览器，减少用户的初始加载时间。</p>\n<p>原文：<a href=\"https://blog.risingstack.com/node-js-http-2-push/\" target=\"_blank\" rel=\"noopener\">https://blog.risingstack.com/node-js-http-2-push/</a></p>\n<p>译者：<a href=\"https://github.com/Yi-love\" target=\"_blank\" rel=\"noopener\">Jin</a></p>\n<p>作者：<a href=\"https://twitter.com/slashdotpeter\" target=\"_blank\" rel=\"noopener\">Péter Márton</a></p>\n","site":{"data":{}},"excerpt":"<p>Node.js v8.4+版本发布带来了体验版的HTTP/2，你可以自己通过设置参数<code>--expose-http2</code>启动。</p>\n<p>这篇文章，我将介绍HTTP/2最重要的一方面服务器推送并且创建一个小的Node.js程序案例来使用它。</p>\n<h2 id=\"关于HTTP-2\"><a href=\"#关于HTTP-2\" class=\"headerlink\" title=\"关于HTTP/2\"></a>关于HTTP/2</h2><p>HTTP/2 的目的是通过支持完整的请求与响应复用来减少延迟，通过有效压缩 HTTP 标头字段将协议开销降至最低，同时增加对请求优先级和服务器推送的支持。</p>\n<p>更多关于HTTP/2内容，请查看文章<a href=\"https://developers.google.com/web/fundamentals/performance/http2/\" target=\"_blank\" rel=\"noopener\">HTTP/2</a>。</p>","more":"<h2 id=\"服务器推送\"><a href=\"#服务器推送\" class=\"headerlink\" title=\"服务器推送\"></a>服务器推送</h2><p>HTTP/2 服务器推送（Server Push）允许服务器在浏览器请求之前将资源发送到浏览器。</p>\n<blockquote>\n<p>在我们转到HTTP/2之前，我们来看看它如何与HTTP/1配合使用：</p>\n</blockquote>\n<p>在HTTP/1中，客户端向服务器发送一个请求，服务器返回一个包含许多外部资源（.js，.css等文件）链接的HTML文件。当浏览器处理这个初始HTML文件时，它开始解析这些链接，并分别加载它们。</p>\n<p>查看下面的demo加载过程的图像。 请注意时间表上的独立请求以及这些请求的启动：</p>\n<p><img src=\"/images/2017-09-01-node-js-http-2-push/1.png\" alt=\"http/1\"></p>\n<p><em>HTTP/1资源加载</em></p>\n<p>这是HTTP/1的工作原理，这就是我们如何开发这么多年的应用程序。<strong>为什么要改变它呢？</strong></p>\n<p>当前方法的问题是用户必须等待浏览器解析响应，发现链接并获取资源。 这会延迟渲染并增加加载时间。 有一些解决方案，如内联一些资源，但也使得初始响应越来越大。</p>\n<blockquote>\n<p>这是HTTP/2服务器推送功能进入视线的地方，因为服务器可以在浏览器请求之前将资源发送到浏览器。</p>\n</blockquote>\n<p>看看下面的图片，通过HTTP/2提供相同服务的网站。查看时间轴和启动器。 你可以看到HTTP/2复用减少了请求数量，并且资源与初始请求一起立即发送。</p>\n<p><img src=\"/images/2017-09-01-node-js-http-2-push/2.png\" alt=\"http/2\"></p>\n<p><em>HTTP/2服务器推送</em></p>\n<p>让我们看看今天如何在Node.js中使用HTTP/2服务器推送，来加快客户端的加载时间。</p>\n<h2 id=\"一个Node-js-HTTP-2服务器推送案例\"><a href=\"#一个Node-js-HTTP-2服务器推送案例\" class=\"headerlink\" title=\"一个Node.js HTTP/2服务器推送案例\"></a>一个Node.js HTTP/2服务器推送案例</h2><p>通过加载内置的<code>http2</code>模块，我们可以创建我们的服务器，就像我们使用<code>https</code>模块一样。</p>\n<p>有趣的部分是在请求<code>index.html</code>时推送其他资源：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http2 = <span class=\"built_in\">require</span>(<span class=\"string\">'http2'</span>)  </span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http2.createSecureServer(  </span><br><span class=\"line\">  &#123; cert, key &#125;,</span><br><span class=\"line\">  onRequest</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span> (<span class=\"params\">stream, filePath</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; file, headers &#125; = getFile(filePath)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> pushHeaders = &#123; [HTTP2_HEADER_PATH]: filePath &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  stream.pushStream(pushHeaders, (pushStream) =&gt; &#123;</span><br><span class=\"line\">    pushStream.respondWithFD(file, headers)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span> (<span class=\"params\">req, res</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"comment\">// Push files with index.html</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (reqPath === <span class=\"string\">'/index.html'</span>) &#123;</span><br><span class=\"line\">    push(res.stream, <span class=\"string\">'bundle1.js'</span>)</span><br><span class=\"line\">    push(res.stream, <span class=\"string\">'bundle2.js'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Serve file</span></span><br><span class=\"line\">  res.stream.respondWithFD(file.fileDescriptor, file.headers)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样<code>bundle1.js</code>和<code>bundle2.js</code>资源即使在它要求它们之前也会被发送到浏览器。</p>\n<p>你可以查看完整的案例：<a href=\"https://github.com/RisingStack/http2-push-example\" target=\"_blank\" rel=\"noopener\">https://github.com/RisingStack/http2-push-example</a></p>\n<h2 id=\"HTTP-2-amp-Node\"><a href=\"#HTTP-2-amp-Node\" class=\"headerlink\" title=\"HTTP/2 &amp; Node\"></a>HTTP/2 &amp; Node</h2><blockquote>\n<p>HTTP/2可以帮助我们在很多方面优化我们的客户端与服务器之间的通信。</p>\n</blockquote>\n<p>通过服务器推送，我们可以将资源发送到浏览器，减少用户的初始加载时间。</p>\n<p>原文：<a href=\"https://blog.risingstack.com/node-js-http-2-push/\" target=\"_blank\" rel=\"noopener\">https://blog.risingstack.com/node-js-http-2-push/</a></p>\n<p>译者：<a href=\"https://github.com/Yi-love\" target=\"_blank\" rel=\"noopener\">Jin</a></p>\n<p>作者：<a href=\"https://twitter.com/slashdotpeter\" target=\"_blank\" rel=\"noopener\">Péter Márton</a></p>"},{"title":"简单权限控制-8421法则","date":"2017-09-11T03:00:00.000Z","author":"Ivanxiao","_content":"\n在系统开发过程中，最常见的一个需求就是权限控制了，大到整个系统的用户权限的管理，小到某个状态下操作权限的判断。\n\n其中最常见的操作就是权限的添加、删除、鉴权等，那么有什么简单的方法可以去控制这些权限呢？\n\n<!--more-->\n\n\n\n### 前言\n在系统开发过程中，最常见的一个需求就是权限控制了，大到整个系统的用户权限的管理，小到某个状态下操作权限的判断。\n\n其中最常见的操作就是权限的添加、删除、鉴权等，那么有什么简单的方法可以去控制这些权限呢？\n\n对于复杂的权限控制可以采用 RBAC 方案，这里向大家推荐一种简单方法，来处理简单的权限控制，涉及[二进制](https://www.wikiwand.com/zh-hans/%E4%BA%8C%E8%BF%9B%E5%88%B6)、[8421码](https://www.wikiwand.com/zh-hans/%E4%BA%8C%E9%80%B2%E7%A2%BC%E5%8D%81%E9%80%B2%E6%95%B8)以及[按位与](https://www.wikiwand.com/zh-hans/%E4%BD%8D%E6%93%8D%E4%BD%9C)等知识。\n\n### 模拟需求\n假设要对文章进行权限管理，分为新增、查看、修改三个权限。\n\n### 方案设计\n1、把权限对应的值设置如下\n\n| 新增   | 查看   | 修改   |\n| ---- | ---- | ---- |\n| 1    | 2    | 4    |\n\n2、用户初始权限 authority 设置为 0，也即`authority = 0;` 。\n3、赋予权限 a 时，先要判断用户是否已经有此权限，若无，则把 a 对应的值与 authority 相加作为用户的当前权限，也即 `authority = authority + a;` 。 \n4、判断用户是否有某个权限 b 的方法\n```c\nif ( (authority & b) == b){\n    //有权限b\n}\nc = a + b;\nif ( (authority & c) == c){\n    //同时有权限a和b\n}\n```\n5、去除权限 a 时，先要判断用户是否已经有此权限，若有，则把 a 对应的值与 authority 相减作为用户的当前权限，也即 `authority = authority - a;` 。 \n\n### 原理\n我们知道，在计算机里面数据的底层表示都是二进制数，我们可以通过设定每一位表示不同的权限，用0来表示未拥有此权限，1来表示拥有对应权限。\n\n例如上面例子中3个权限的情况，我们可以用3位的二进制数来表示其权限，如下\n\n| 权限   | 二进制值   |\n| ---- | ------ |\n| 查看   | 001（1） |\n| 新增   | 010（2） |\n| 修改   | 100（4） |\n\n我们用 000 来表示初始权限（未拥有权限），这样赋予或删除权限的时候只修改了对应位置为1或0，不同权限所处的位置不同，不会互相冲突。\n\n判断权限的时候通过 & 进行\n>按位与处理两个长度相同的二进制数，两个相应的二进位都为1，该位的结果值才为1，否则为0。\n\n故通过 `(authority & b) == b` 可以判断是否拥有权限 b 。\n\nBTW，linux 系统也是通过这种方式来进行权限判断的，对于文件的权限的 read/write/execute 分别用4/2/1表示。\n\n### 灵活性\n本方案通过数字来表示权限，故若有新权限加入的时候，只需在文档或注释里标明对应的数值即可，之前的代码或者数据无需修改。\n\n例如上面的例子中，如果要添加一个新的权限-删除，只需设定删除对应的权限为8即可。\n\n可使用的数值列为：\n1 2 4 8 16 .... （每一个后续的值为前一个值*2）\n\n### 拓展\n本方案不仅只适用于权限判断，也可以用于叠加状态的判断\n\n例如某条数据需要经过操作A和操作B才能进入下一步，而操作A、B互相独立，无操作顺序要求。\n\n具体如何使用大家可以思考一下。\n","source":"_posts/2017-09-11-8421-auth.md","raw":"---\ntitle: 简单权限控制-8421法则\ndate: 2017-09-11 11:00\ntags: []\ncategory: 后端\nauthor: Ivanxiao\n---\n\n在系统开发过程中，最常见的一个需求就是权限控制了，大到整个系统的用户权限的管理，小到某个状态下操作权限的判断。\n\n其中最常见的操作就是权限的添加、删除、鉴权等，那么有什么简单的方法可以去控制这些权限呢？\n\n<!--more-->\n\n\n\n### 前言\n在系统开发过程中，最常见的一个需求就是权限控制了，大到整个系统的用户权限的管理，小到某个状态下操作权限的判断。\n\n其中最常见的操作就是权限的添加、删除、鉴权等，那么有什么简单的方法可以去控制这些权限呢？\n\n对于复杂的权限控制可以采用 RBAC 方案，这里向大家推荐一种简单方法，来处理简单的权限控制，涉及[二进制](https://www.wikiwand.com/zh-hans/%E4%BA%8C%E8%BF%9B%E5%88%B6)、[8421码](https://www.wikiwand.com/zh-hans/%E4%BA%8C%E9%80%B2%E7%A2%BC%E5%8D%81%E9%80%B2%E6%95%B8)以及[按位与](https://www.wikiwand.com/zh-hans/%E4%BD%8D%E6%93%8D%E4%BD%9C)等知识。\n\n### 模拟需求\n假设要对文章进行权限管理，分为新增、查看、修改三个权限。\n\n### 方案设计\n1、把权限对应的值设置如下\n\n| 新增   | 查看   | 修改   |\n| ---- | ---- | ---- |\n| 1    | 2    | 4    |\n\n2、用户初始权限 authority 设置为 0，也即`authority = 0;` 。\n3、赋予权限 a 时，先要判断用户是否已经有此权限，若无，则把 a 对应的值与 authority 相加作为用户的当前权限，也即 `authority = authority + a;` 。 \n4、判断用户是否有某个权限 b 的方法\n```c\nif ( (authority & b) == b){\n    //有权限b\n}\nc = a + b;\nif ( (authority & c) == c){\n    //同时有权限a和b\n}\n```\n5、去除权限 a 时，先要判断用户是否已经有此权限，若有，则把 a 对应的值与 authority 相减作为用户的当前权限，也即 `authority = authority - a;` 。 \n\n### 原理\n我们知道，在计算机里面数据的底层表示都是二进制数，我们可以通过设定每一位表示不同的权限，用0来表示未拥有此权限，1来表示拥有对应权限。\n\n例如上面例子中3个权限的情况，我们可以用3位的二进制数来表示其权限，如下\n\n| 权限   | 二进制值   |\n| ---- | ------ |\n| 查看   | 001（1） |\n| 新增   | 010（2） |\n| 修改   | 100（4） |\n\n我们用 000 来表示初始权限（未拥有权限），这样赋予或删除权限的时候只修改了对应位置为1或0，不同权限所处的位置不同，不会互相冲突。\n\n判断权限的时候通过 & 进行\n>按位与处理两个长度相同的二进制数，两个相应的二进位都为1，该位的结果值才为1，否则为0。\n\n故通过 `(authority & b) == b` 可以判断是否拥有权限 b 。\n\nBTW，linux 系统也是通过这种方式来进行权限判断的，对于文件的权限的 read/write/execute 分别用4/2/1表示。\n\n### 灵活性\n本方案通过数字来表示权限，故若有新权限加入的时候，只需在文档或注释里标明对应的数值即可，之前的代码或者数据无需修改。\n\n例如上面的例子中，如果要添加一个新的权限-删除，只需设定删除对应的权限为8即可。\n\n可使用的数值列为：\n1 2 4 8 16 .... （每一个后续的值为前一个值*2）\n\n### 拓展\n本方案不仅只适用于权限判断，也可以用于叠加状态的判断\n\n例如某条数据需要经过操作A和操作B才能进入下一步，而操作A、B互相独立，无操作顺序要求。\n\n具体如何使用大家可以思考一下。\n","slug":"2017-09-11-8421-auth","published":1,"updated":"2017-12-01T08:50:00.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknis001njxs13bwddvob","content":"<p>在系统开发过程中，最常见的一个需求就是权限控制了，大到整个系统的用户权限的管理，小到某个状态下操作权限的判断。</p>\n<p>其中最常见的操作就是权限的添加、删除、鉴权等，那么有什么简单的方法可以去控制这些权限呢？</p>\n<a id=\"more\"></a>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在系统开发过程中，最常见的一个需求就是权限控制了，大到整个系统的用户权限的管理，小到某个状态下操作权限的判断。</p>\n<p>其中最常见的操作就是权限的添加、删除、鉴权等，那么有什么简单的方法可以去控制这些权限呢？</p>\n<p>对于复杂的权限控制可以采用 RBAC 方案，这里向大家推荐一种简单方法，来处理简单的权限控制，涉及<a href=\"https://www.wikiwand.com/zh-hans/%E4%BA%8C%E8%BF%9B%E5%88%B6\" target=\"_blank\" rel=\"noopener\">二进制</a>、<a href=\"https://www.wikiwand.com/zh-hans/%E4%BA%8C%E9%80%B2%E7%A2%BC%E5%8D%81%E9%80%B2%E6%95%B8\" target=\"_blank\" rel=\"noopener\">8421码</a>以及<a href=\"https://www.wikiwand.com/zh-hans/%E4%BD%8D%E6%93%8D%E4%BD%9C\" target=\"_blank\" rel=\"noopener\">按位与</a>等知识。</p>\n<h3 id=\"模拟需求\"><a href=\"#模拟需求\" class=\"headerlink\" title=\"模拟需求\"></a>模拟需求</h3><p>假设要对文章进行权限管理，分为新增、查看、修改三个权限。</p>\n<h3 id=\"方案设计\"><a href=\"#方案设计\" class=\"headerlink\" title=\"方案设计\"></a>方案设计</h3><p>1、把权限对应的值设置如下</p>\n<table>\n<thead>\n<tr>\n<th>新增</th>\n<th>查看</th>\n<th>修改</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>2</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n<p>2、用户初始权限 authority 设置为 0，也即<code>authority = 0;</code> 。<br>3、赋予权限 a 时，先要判断用户是否已经有此权限，若无，则把 a 对应的值与 authority 相加作为用户的当前权限，也即 <code>authority = authority + a;</code> 。<br>4、判断用户是否有某个权限 b 的方法<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( (authority &amp; b) == b)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//有权限b</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">c = a + b;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( (authority &amp; c) == c)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//同时有权限a和b</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>5、去除权限 a 时，先要判断用户是否已经有此权限，若有，则把 a 对应的值与 authority 相减作为用户的当前权限，也即 <code>authority = authority - a;</code> 。 </p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>我们知道，在计算机里面数据的底层表示都是二进制数，我们可以通过设定每一位表示不同的权限，用0来表示未拥有此权限，1来表示拥有对应权限。</p>\n<p>例如上面例子中3个权限的情况，我们可以用3位的二进制数来表示其权限，如下</p>\n<table>\n<thead>\n<tr>\n<th>权限</th>\n<th>二进制值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>查看</td>\n<td>001（1）</td>\n</tr>\n<tr>\n<td>新增</td>\n<td>010（2）</td>\n</tr>\n<tr>\n<td>修改</td>\n<td>100（4）</td>\n</tr>\n</tbody>\n</table>\n<p>我们用 000 来表示初始权限（未拥有权限），这样赋予或删除权限的时候只修改了对应位置为1或0，不同权限所处的位置不同，不会互相冲突。</p>\n<p>判断权限的时候通过 &amp; 进行</p>\n<blockquote>\n<p>按位与处理两个长度相同的二进制数，两个相应的二进位都为1，该位的结果值才为1，否则为0。</p>\n</blockquote>\n<p>故通过 <code>(authority &amp; b) == b</code> 可以判断是否拥有权限 b 。</p>\n<p>BTW，linux 系统也是通过这种方式来进行权限判断的，对于文件的权限的 read/write/execute 分别用4/2/1表示。</p>\n<h3 id=\"灵活性\"><a href=\"#灵活性\" class=\"headerlink\" title=\"灵活性\"></a>灵活性</h3><p>本方案通过数字来表示权限，故若有新权限加入的时候，只需在文档或注释里标明对应的数值即可，之前的代码或者数据无需修改。</p>\n<p>例如上面的例子中，如果要添加一个新的权限-删除，只需设定删除对应的权限为8即可。</p>\n<p>可使用的数值列为：<br>1 2 4 8 16 …. （每一个后续的值为前一个值*2）</p>\n<h3 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h3><p>本方案不仅只适用于权限判断，也可以用于叠加状态的判断</p>\n<p>例如某条数据需要经过操作A和操作B才能进入下一步，而操作A、B互相独立，无操作顺序要求。</p>\n<p>具体如何使用大家可以思考一下。</p>\n","site":{"data":{}},"excerpt":"<p>在系统开发过程中，最常见的一个需求就是权限控制了，大到整个系统的用户权限的管理，小到某个状态下操作权限的判断。</p>\n<p>其中最常见的操作就是权限的添加、删除、鉴权等，那么有什么简单的方法可以去控制这些权限呢？</p>","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在系统开发过程中，最常见的一个需求就是权限控制了，大到整个系统的用户权限的管理，小到某个状态下操作权限的判断。</p>\n<p>其中最常见的操作就是权限的添加、删除、鉴权等，那么有什么简单的方法可以去控制这些权限呢？</p>\n<p>对于复杂的权限控制可以采用 RBAC 方案，这里向大家推荐一种简单方法，来处理简单的权限控制，涉及<a href=\"https://www.wikiwand.com/zh-hans/%E4%BA%8C%E8%BF%9B%E5%88%B6\" target=\"_blank\" rel=\"noopener\">二进制</a>、<a href=\"https://www.wikiwand.com/zh-hans/%E4%BA%8C%E9%80%B2%E7%A2%BC%E5%8D%81%E9%80%B2%E6%95%B8\" target=\"_blank\" rel=\"noopener\">8421码</a>以及<a href=\"https://www.wikiwand.com/zh-hans/%E4%BD%8D%E6%93%8D%E4%BD%9C\" target=\"_blank\" rel=\"noopener\">按位与</a>等知识。</p>\n<h3 id=\"模拟需求\"><a href=\"#模拟需求\" class=\"headerlink\" title=\"模拟需求\"></a>模拟需求</h3><p>假设要对文章进行权限管理，分为新增、查看、修改三个权限。</p>\n<h3 id=\"方案设计\"><a href=\"#方案设计\" class=\"headerlink\" title=\"方案设计\"></a>方案设计</h3><p>1、把权限对应的值设置如下</p>\n<table>\n<thead>\n<tr>\n<th>新增</th>\n<th>查看</th>\n<th>修改</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>2</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n<p>2、用户初始权限 authority 设置为 0，也即<code>authority = 0;</code> 。<br>3、赋予权限 a 时，先要判断用户是否已经有此权限，若无，则把 a 对应的值与 authority 相加作为用户的当前权限，也即 <code>authority = authority + a;</code> 。<br>4、判断用户是否有某个权限 b 的方法<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( (authority &amp; b) == b)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//有权限b</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">c = a + b;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( (authority &amp; c) == c)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//同时有权限a和b</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>5、去除权限 a 时，先要判断用户是否已经有此权限，若有，则把 a 对应的值与 authority 相减作为用户的当前权限，也即 <code>authority = authority - a;</code> 。 </p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>我们知道，在计算机里面数据的底层表示都是二进制数，我们可以通过设定每一位表示不同的权限，用0来表示未拥有此权限，1来表示拥有对应权限。</p>\n<p>例如上面例子中3个权限的情况，我们可以用3位的二进制数来表示其权限，如下</p>\n<table>\n<thead>\n<tr>\n<th>权限</th>\n<th>二进制值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>查看</td>\n<td>001（1）</td>\n</tr>\n<tr>\n<td>新增</td>\n<td>010（2）</td>\n</tr>\n<tr>\n<td>修改</td>\n<td>100（4）</td>\n</tr>\n</tbody>\n</table>\n<p>我们用 000 来表示初始权限（未拥有权限），这样赋予或删除权限的时候只修改了对应位置为1或0，不同权限所处的位置不同，不会互相冲突。</p>\n<p>判断权限的时候通过 &amp; 进行</p>\n<blockquote>\n<p>按位与处理两个长度相同的二进制数，两个相应的二进位都为1，该位的结果值才为1，否则为0。</p>\n</blockquote>\n<p>故通过 <code>(authority &amp; b) == b</code> 可以判断是否拥有权限 b 。</p>\n<p>BTW，linux 系统也是通过这种方式来进行权限判断的，对于文件的权限的 read/write/execute 分别用4/2/1表示。</p>\n<h3 id=\"灵活性\"><a href=\"#灵活性\" class=\"headerlink\" title=\"灵活性\"></a>灵活性</h3><p>本方案通过数字来表示权限，故若有新权限加入的时候，只需在文档或注释里标明对应的数值即可，之前的代码或者数据无需修改。</p>\n<p>例如上面的例子中，如果要添加一个新的权限-删除，只需设定删除对应的权限为8即可。</p>\n<p>可使用的数值列为：<br>1 2 4 8 16 …. （每一个后续的值为前一个值*2）</p>\n<h3 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h3><p>本方案不仅只适用于权限判断，也可以用于叠加状态的判断</p>\n<p>例如某条数据需要经过操作A和操作B才能进入下一步，而操作A、B互相独立，无操作顺序要求。</p>\n<p>具体如何使用大家可以思考一下。</p>"},{"title":"touchstart与click不得不说的故事","date":"2017-09-29T12:00:00.000Z","author":"AlanZhang","_content":"\n## 写在最前\n\n最近给公司做了个自适应的的费用介绍页，主要是关于收费标准的调整，老板表示很重视，适用人群也很多，所以也反馈得到几个不常遇到的问题，其中一个就是关于`touchstart`与`click`事件的问题。这里记录一下，欢迎指正。\n\n## 1. 问题\n\n某天中午，开发了好几天的费用介绍页终于上线了。运营同学满怀信心地发送了收费标准页面的推广消息，然后我们都潇洒地吃午饭去了。正吃着午饭的时候，收到微信群中某客户的反馈：我们的页面最关键的地方——收费详情点击没有反应！\n\n![页面点击无反应](/images/2017-09-29-touchstart-click/1.png)\n\n随后我们查看了前端错误上报和日志，没有任何线索。与客户确认环境，客户使用的是 windows PC 。\n\n但奇怪的是，我测试了多台设备，仍然无法重现问题。在同事的机器上也没能复现这个问题。\n\n## 2. 溯源\n\n我们重新审视了一遍事件绑定的代码，发现其实非常简单。\n\n```\nvar tap = 'ontouchstart' in window ? 'touchstart' : 'click';\nwrap.addEvenListener(tap, function(){\n    signUp();\n});\n```\n\n唯一有点特殊的就是我们的页面是自适应的，为了避免移动端点击 300ms 延迟，在绑定前做了一下判断，移动端绑定了`touchstart`事件，PC 端绑定了`click`事件。然而这段代码看起来也是人畜无害，并不至于导致点击没有反应。\n\n<!-- more -->\n\n## 3. 定位\n\n我们再次询问了客户更详细的环境信息，获得了一个非常关键的信息，客户使用的是联想的笔记本。由于在 surface 出来的时候组里有同事关注过，想起来当时联想也出了很多触屏笔记本。于是和客户再次联系，确认了他使用的就是联想的触屏笔记本。\n\n至此问题就非常明确了，问题最终还是定位在绑定的“点击”事件上。我们在检测时只是粗暴地检测了设备是否支持触控事件，却忽略了支持触控事件的仍然可能是 PC 设备，客户仍然可能通过点击鼠标来进行操作。这实际上反映出我们忽略了用户设备的多样性，开发的时候对用户设备做了太多的假设，最终导致我们以为它是一台手机，结果它是一台货真价实的笔记本电脑。\n\n归纳起来，关键的点就是：\n\n- 有些 PC 设备屏幕为触摸屏，同时支持`touchstart`和`click`事件；\n- 用户触发`touchstart`事件，默认必然会导致触发`click`事件，但是触发`click`事件，不一定会导致`touchstart`事件被触发；\n- 此类设备外接鼠标时，通过上面的绑定方式，会绑定`touchstart`事件，但是鼠标操作只能触发`click`，导致`touchstart`不触发；\n\n## 4. 解决办法\n\n至此，问题的原因已经分析完毕，如何应对又成了一个问题。这个问题的关键在于确定不同设备上使用“点击”事件的策略。大致分为如下几种：\n\n### 1. 均使用click事件\n\n- 优点：自适应时，不同设备均支持，没有兼容性问题，开发成本低；\n- 缺点：移动端存在300ms的延迟问题（虽然同事表示一般感觉不出来）\n\n### 2. 通过UA判断设备是否为移动端，再确认事件类型\n    \n```\nfunction isMobile() {\n    return navigator.userAgent.match(/(blackberry|configuration\\/cldc|hp |hp-|htc |htc_|htc-|iemobile|kindle|midp|mmp|motorola|mobile|nokia|opera mini|opera |Googlebot-Mobile|YahooSeeker\\/M1A1-R2D2|android|iphone|ipod|mobi|palm|palmos|pocket|portalmmm|ppc;|smartphone|sonyericsson|sqh|spv|symbian|treo|up.browser|up.link|vodafone|windows ce|xda |xda_)/i) ? true : false;\n}\n var tap = isMobile() ? 'touchstart' : 'click';\n```\n\n- 优点：自适应时，开发成本低，通过设备类型确定点击事件类型，能满足绝大部分问题，用户操作也比较符合预期；\n- 缺点：不能满足所有情况，如果用户给 iPad 或者 Android 手机（认定为移动设备）外接鼠标进行操作，这种方式就不起作用（PS：你非要这么做，我也无FUCK说）。\n\n### 3. 全部使用click，通过FastClick解决300毫秒的延迟问题\n\n```\n//引入FastClick\nvar FastClick = require('tool-fastclick');\n//页面初始化时调用\nnew FastClick(document.body);\n```\n\n- 优点：开发成本低也比较低，也不会出现1，2中问题 \n- 缺点：额外引入三方库，FastClick 是否会有其他的坑？这点不能保证\n\n> 注：`tool-fastclick`是组内 fork 的 FastClick 版本，目前没有开源。我们对其中存在的问题进行了一部分修复，比如：同个页面有多个 select 框选择时，会跳选项的 bug 。\n\n### 4. 万全之策\n\n其实最好的方案是不要在绑定的时候进行判断，而是对`touchstart`和`click`同时绑定，但是在`touchstart`触发的时候暂时取消后续 click 的响应。\n\n具体的实施方式有三种：\n\n1. 在`touchstart`事件响应中调用`preventDefault()`方法，阻止后续`click`事件的触发\n2. 在`touchstart`事件中设置一些标记，或者取消`click`事件的绑定，使得`click`事件触发时不会触发我们绑定的逻辑，在一段时间（例如300-500ms）后再恢复\n3. 直接对事件处理函数进行节流（throttle），保证在一段时间内（300ms - 500ms），事件处理函数只触发一次\n\n当然，和上面一样，每种方案都有利弊。\n\n方案1取消了后续`click`事件的触发，在多个事件绑定叠加或者多人合作的时候，有可能导致一些依赖`click`事件的逻辑出现bug。\n\n方案2和方案3的原理基本一样，实施起来有一定的复杂度，而且本质上属于 hack 的方案，应对一些非常规场景时就不适用了。比如需要快速连续点击的场景，或者用户点击非常慢的场景等等。\n\n总之，没有万全之策，呵呵……\n\n## 最后\n\n有人可能会对文章最前提到的收费介绍页比较感兴趣，来了，看[这里](https://www.futu5.com/about/commissionnew)。\n","source":"_posts/2017-09-29-touchstart-click.md","raw":"---\ntitle: touchstart与click不得不说的故事\ndate: 2017-09-29 20:00\ncategory: JavaScript\ntags: [touchstart,click]\nauthor: AlanZhang\n---\n\n## 写在最前\n\n最近给公司做了个自适应的的费用介绍页，主要是关于收费标准的调整，老板表示很重视，适用人群也很多，所以也反馈得到几个不常遇到的问题，其中一个就是关于`touchstart`与`click`事件的问题。这里记录一下，欢迎指正。\n\n## 1. 问题\n\n某天中午，开发了好几天的费用介绍页终于上线了。运营同学满怀信心地发送了收费标准页面的推广消息，然后我们都潇洒地吃午饭去了。正吃着午饭的时候，收到微信群中某客户的反馈：我们的页面最关键的地方——收费详情点击没有反应！\n\n![页面点击无反应](/images/2017-09-29-touchstart-click/1.png)\n\n随后我们查看了前端错误上报和日志，没有任何线索。与客户确认环境，客户使用的是 windows PC 。\n\n但奇怪的是，我测试了多台设备，仍然无法重现问题。在同事的机器上也没能复现这个问题。\n\n## 2. 溯源\n\n我们重新审视了一遍事件绑定的代码，发现其实非常简单。\n\n```\nvar tap = 'ontouchstart' in window ? 'touchstart' : 'click';\nwrap.addEvenListener(tap, function(){\n    signUp();\n});\n```\n\n唯一有点特殊的就是我们的页面是自适应的，为了避免移动端点击 300ms 延迟，在绑定前做了一下判断，移动端绑定了`touchstart`事件，PC 端绑定了`click`事件。然而这段代码看起来也是人畜无害，并不至于导致点击没有反应。\n\n<!-- more -->\n\n## 3. 定位\n\n我们再次询问了客户更详细的环境信息，获得了一个非常关键的信息，客户使用的是联想的笔记本。由于在 surface 出来的时候组里有同事关注过，想起来当时联想也出了很多触屏笔记本。于是和客户再次联系，确认了他使用的就是联想的触屏笔记本。\n\n至此问题就非常明确了，问题最终还是定位在绑定的“点击”事件上。我们在检测时只是粗暴地检测了设备是否支持触控事件，却忽略了支持触控事件的仍然可能是 PC 设备，客户仍然可能通过点击鼠标来进行操作。这实际上反映出我们忽略了用户设备的多样性，开发的时候对用户设备做了太多的假设，最终导致我们以为它是一台手机，结果它是一台货真价实的笔记本电脑。\n\n归纳起来，关键的点就是：\n\n- 有些 PC 设备屏幕为触摸屏，同时支持`touchstart`和`click`事件；\n- 用户触发`touchstart`事件，默认必然会导致触发`click`事件，但是触发`click`事件，不一定会导致`touchstart`事件被触发；\n- 此类设备外接鼠标时，通过上面的绑定方式，会绑定`touchstart`事件，但是鼠标操作只能触发`click`，导致`touchstart`不触发；\n\n## 4. 解决办法\n\n至此，问题的原因已经分析完毕，如何应对又成了一个问题。这个问题的关键在于确定不同设备上使用“点击”事件的策略。大致分为如下几种：\n\n### 1. 均使用click事件\n\n- 优点：自适应时，不同设备均支持，没有兼容性问题，开发成本低；\n- 缺点：移动端存在300ms的延迟问题（虽然同事表示一般感觉不出来）\n\n### 2. 通过UA判断设备是否为移动端，再确认事件类型\n    \n```\nfunction isMobile() {\n    return navigator.userAgent.match(/(blackberry|configuration\\/cldc|hp |hp-|htc |htc_|htc-|iemobile|kindle|midp|mmp|motorola|mobile|nokia|opera mini|opera |Googlebot-Mobile|YahooSeeker\\/M1A1-R2D2|android|iphone|ipod|mobi|palm|palmos|pocket|portalmmm|ppc;|smartphone|sonyericsson|sqh|spv|symbian|treo|up.browser|up.link|vodafone|windows ce|xda |xda_)/i) ? true : false;\n}\n var tap = isMobile() ? 'touchstart' : 'click';\n```\n\n- 优点：自适应时，开发成本低，通过设备类型确定点击事件类型，能满足绝大部分问题，用户操作也比较符合预期；\n- 缺点：不能满足所有情况，如果用户给 iPad 或者 Android 手机（认定为移动设备）外接鼠标进行操作，这种方式就不起作用（PS：你非要这么做，我也无FUCK说）。\n\n### 3. 全部使用click，通过FastClick解决300毫秒的延迟问题\n\n```\n//引入FastClick\nvar FastClick = require('tool-fastclick');\n//页面初始化时调用\nnew FastClick(document.body);\n```\n\n- 优点：开发成本低也比较低，也不会出现1，2中问题 \n- 缺点：额外引入三方库，FastClick 是否会有其他的坑？这点不能保证\n\n> 注：`tool-fastclick`是组内 fork 的 FastClick 版本，目前没有开源。我们对其中存在的问题进行了一部分修复，比如：同个页面有多个 select 框选择时，会跳选项的 bug 。\n\n### 4. 万全之策\n\n其实最好的方案是不要在绑定的时候进行判断，而是对`touchstart`和`click`同时绑定，但是在`touchstart`触发的时候暂时取消后续 click 的响应。\n\n具体的实施方式有三种：\n\n1. 在`touchstart`事件响应中调用`preventDefault()`方法，阻止后续`click`事件的触发\n2. 在`touchstart`事件中设置一些标记，或者取消`click`事件的绑定，使得`click`事件触发时不会触发我们绑定的逻辑，在一段时间（例如300-500ms）后再恢复\n3. 直接对事件处理函数进行节流（throttle），保证在一段时间内（300ms - 500ms），事件处理函数只触发一次\n\n当然，和上面一样，每种方案都有利弊。\n\n方案1取消了后续`click`事件的触发，在多个事件绑定叠加或者多人合作的时候，有可能导致一些依赖`click`事件的逻辑出现bug。\n\n方案2和方案3的原理基本一样，实施起来有一定的复杂度，而且本质上属于 hack 的方案，应对一些非常规场景时就不适用了。比如需要快速连续点击的场景，或者用户点击非常慢的场景等等。\n\n总之，没有万全之策，呵呵……\n\n## 最后\n\n有人可能会对文章最前提到的收费介绍页比较感兴趣，来了，看[这里](https://www.futu5.com/about/commissionnew)。\n","slug":"2017-09-29-touchstart-click","published":1,"updated":"2017-12-01T08:50:00.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanokniu001rjxs13w2whoqx","content":"<h2 id=\"写在最前\"><a href=\"#写在最前\" class=\"headerlink\" title=\"写在最前\"></a>写在最前</h2><p>最近给公司做了个自适应的的费用介绍页，主要是关于收费标准的调整，老板表示很重视，适用人群也很多，所以也反馈得到几个不常遇到的问题，其中一个就是关于<code>touchstart</code>与<code>click</code>事件的问题。这里记录一下，欢迎指正。</p>\n<h2 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1. 问题\"></a>1. 问题</h2><p>某天中午，开发了好几天的费用介绍页终于上线了。运营同学满怀信心地发送了收费标准页面的推广消息，然后我们都潇洒地吃午饭去了。正吃着午饭的时候，收到微信群中某客户的反馈：我们的页面最关键的地方——收费详情点击没有反应！</p>\n<p><img src=\"/images/2017-09-29-touchstart-click/1.png\" alt=\"页面点击无反应\"></p>\n<p>随后我们查看了前端错误上报和日志，没有任何线索。与客户确认环境，客户使用的是 windows PC 。</p>\n<p>但奇怪的是，我测试了多台设备，仍然无法重现问题。在同事的机器上也没能复现这个问题。</p>\n<h2 id=\"2-溯源\"><a href=\"#2-溯源\" class=\"headerlink\" title=\"2. 溯源\"></a>2. 溯源</h2><p>我们重新审视了一遍事件绑定的代码，发现其实非常简单。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var tap = &apos;ontouchstart&apos; in window ? &apos;touchstart&apos; : &apos;click&apos;;</span><br><span class=\"line\">wrap.addEvenListener(tap, function()&#123;</span><br><span class=\"line\">    signUp();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>唯一有点特殊的就是我们的页面是自适应的，为了避免移动端点击 300ms 延迟，在绑定前做了一下判断，移动端绑定了<code>touchstart</code>事件，PC 端绑定了<code>click</code>事件。然而这段代码看起来也是人畜无害，并不至于导致点击没有反应。</p>\n<a id=\"more\"></a>\n<h2 id=\"3-定位\"><a href=\"#3-定位\" class=\"headerlink\" title=\"3. 定位\"></a>3. 定位</h2><p>我们再次询问了客户更详细的环境信息，获得了一个非常关键的信息，客户使用的是联想的笔记本。由于在 surface 出来的时候组里有同事关注过，想起来当时联想也出了很多触屏笔记本。于是和客户再次联系，确认了他使用的就是联想的触屏笔记本。</p>\n<p>至此问题就非常明确了，问题最终还是定位在绑定的“点击”事件上。我们在检测时只是粗暴地检测了设备是否支持触控事件，却忽略了支持触控事件的仍然可能是 PC 设备，客户仍然可能通过点击鼠标来进行操作。这实际上反映出我们忽略了用户设备的多样性，开发的时候对用户设备做了太多的假设，最终导致我们以为它是一台手机，结果它是一台货真价实的笔记本电脑。</p>\n<p>归纳起来，关键的点就是：</p>\n<ul>\n<li>有些 PC 设备屏幕为触摸屏，同时支持<code>touchstart</code>和<code>click</code>事件；</li>\n<li>用户触发<code>touchstart</code>事件，默认必然会导致触发<code>click</code>事件，但是触发<code>click</code>事件，不一定会导致<code>touchstart</code>事件被触发；</li>\n<li>此类设备外接鼠标时，通过上面的绑定方式，会绑定<code>touchstart</code>事件，但是鼠标操作只能触发<code>click</code>，导致<code>touchstart</code>不触发；</li>\n</ul>\n<h2 id=\"4-解决办法\"><a href=\"#4-解决办法\" class=\"headerlink\" title=\"4. 解决办法\"></a>4. 解决办法</h2><p>至此，问题的原因已经分析完毕，如何应对又成了一个问题。这个问题的关键在于确定不同设备上使用“点击”事件的策略。大致分为如下几种：</p>\n<h3 id=\"1-均使用click事件\"><a href=\"#1-均使用click事件\" class=\"headerlink\" title=\"1. 均使用click事件\"></a>1. 均使用click事件</h3><ul>\n<li>优点：自适应时，不同设备均支持，没有兼容性问题，开发成本低；</li>\n<li>缺点：移动端存在300ms的延迟问题（虽然同事表示一般感觉不出来）</li>\n</ul>\n<h3 id=\"2-通过UA判断设备是否为移动端，再确认事件类型\"><a href=\"#2-通过UA判断设备是否为移动端，再确认事件类型\" class=\"headerlink\" title=\"2. 通过UA判断设备是否为移动端，再确认事件类型\"></a>2. 通过UA判断设备是否为移动端，再确认事件类型</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isMobile() &#123;</span><br><span class=\"line\">    return navigator.userAgent.match(/(blackberry|configuration\\/cldc|hp |hp-|htc |htc_|htc-|iemobile|kindle|midp|mmp|motorola|mobile|nokia|opera mini|opera |Googlebot-Mobile|YahooSeeker\\/M1A1-R2D2|android|iphone|ipod|mobi|palm|palmos|pocket|portalmmm|ppc;|smartphone|sonyericsson|sqh|spv|symbian|treo|up.browser|up.link|vodafone|windows ce|xda |xda_)/i) ? true : false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> var tap = isMobile() ? &apos;touchstart&apos; : &apos;click&apos;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：自适应时，开发成本低，通过设备类型确定点击事件类型，能满足绝大部分问题，用户操作也比较符合预期；</li>\n<li>缺点：不能满足所有情况，如果用户给 iPad 或者 Android 手机（认定为移动设备）外接鼠标进行操作，这种方式就不起作用（PS：你非要这么做，我也无FUCK说）。</li>\n</ul>\n<h3 id=\"3-全部使用click，通过FastClick解决300毫秒的延迟问题\"><a href=\"#3-全部使用click，通过FastClick解决300毫秒的延迟问题\" class=\"headerlink\" title=\"3. 全部使用click，通过FastClick解决300毫秒的延迟问题\"></a>3. 全部使用click，通过FastClick解决300毫秒的延迟问题</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//引入FastClick</span><br><span class=\"line\">var FastClick = require(&apos;tool-fastclick&apos;);</span><br><span class=\"line\">//页面初始化时调用</span><br><span class=\"line\">new FastClick(document.body);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：开发成本低也比较低，也不会出现1，2中问题 </li>\n<li>缺点：额外引入三方库，FastClick 是否会有其他的坑？这点不能保证</li>\n</ul>\n<blockquote>\n<p>注：<code>tool-fastclick</code>是组内 fork 的 FastClick 版本，目前没有开源。我们对其中存在的问题进行了一部分修复，比如：同个页面有多个 select 框选择时，会跳选项的 bug 。</p>\n</blockquote>\n<h3 id=\"4-万全之策\"><a href=\"#4-万全之策\" class=\"headerlink\" title=\"4. 万全之策\"></a>4. 万全之策</h3><p>其实最好的方案是不要在绑定的时候进行判断，而是对<code>touchstart</code>和<code>click</code>同时绑定，但是在<code>touchstart</code>触发的时候暂时取消后续 click 的响应。</p>\n<p>具体的实施方式有三种：</p>\n<ol>\n<li>在<code>touchstart</code>事件响应中调用<code>preventDefault()</code>方法，阻止后续<code>click</code>事件的触发</li>\n<li>在<code>touchstart</code>事件中设置一些标记，或者取消<code>click</code>事件的绑定，使得<code>click</code>事件触发时不会触发我们绑定的逻辑，在一段时间（例如300-500ms）后再恢复</li>\n<li>直接对事件处理函数进行节流（throttle），保证在一段时间内（300ms - 500ms），事件处理函数只触发一次</li>\n</ol>\n<p>当然，和上面一样，每种方案都有利弊。</p>\n<p>方案1取消了后续<code>click</code>事件的触发，在多个事件绑定叠加或者多人合作的时候，有可能导致一些依赖<code>click</code>事件的逻辑出现bug。</p>\n<p>方案2和方案3的原理基本一样，实施起来有一定的复杂度，而且本质上属于 hack 的方案，应对一些非常规场景时就不适用了。比如需要快速连续点击的场景，或者用户点击非常慢的场景等等。</p>\n<p>总之，没有万全之策，呵呵……</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>有人可能会对文章最前提到的收费介绍页比较感兴趣，来了，看<a href=\"https://www.futu5.com/about/commissionnew\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"写在最前\"><a href=\"#写在最前\" class=\"headerlink\" title=\"写在最前\"></a>写在最前</h2><p>最近给公司做了个自适应的的费用介绍页，主要是关于收费标准的调整，老板表示很重视，适用人群也很多，所以也反馈得到几个不常遇到的问题，其中一个就是关于<code>touchstart</code>与<code>click</code>事件的问题。这里记录一下，欢迎指正。</p>\n<h2 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1. 问题\"></a>1. 问题</h2><p>某天中午，开发了好几天的费用介绍页终于上线了。运营同学满怀信心地发送了收费标准页面的推广消息，然后我们都潇洒地吃午饭去了。正吃着午饭的时候，收到微信群中某客户的反馈：我们的页面最关键的地方——收费详情点击没有反应！</p>\n<p><img src=\"/images/2017-09-29-touchstart-click/1.png\" alt=\"页面点击无反应\"></p>\n<p>随后我们查看了前端错误上报和日志，没有任何线索。与客户确认环境，客户使用的是 windows PC 。</p>\n<p>但奇怪的是，我测试了多台设备，仍然无法重现问题。在同事的机器上也没能复现这个问题。</p>\n<h2 id=\"2-溯源\"><a href=\"#2-溯源\" class=\"headerlink\" title=\"2. 溯源\"></a>2. 溯源</h2><p>我们重新审视了一遍事件绑定的代码，发现其实非常简单。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var tap = &apos;ontouchstart&apos; in window ? &apos;touchstart&apos; : &apos;click&apos;;</span><br><span class=\"line\">wrap.addEvenListener(tap, function()&#123;</span><br><span class=\"line\">    signUp();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>唯一有点特殊的就是我们的页面是自适应的，为了避免移动端点击 300ms 延迟，在绑定前做了一下判断，移动端绑定了<code>touchstart</code>事件，PC 端绑定了<code>click</code>事件。然而这段代码看起来也是人畜无害，并不至于导致点击没有反应。</p>","more":"<h2 id=\"3-定位\"><a href=\"#3-定位\" class=\"headerlink\" title=\"3. 定位\"></a>3. 定位</h2><p>我们再次询问了客户更详细的环境信息，获得了一个非常关键的信息，客户使用的是联想的笔记本。由于在 surface 出来的时候组里有同事关注过，想起来当时联想也出了很多触屏笔记本。于是和客户再次联系，确认了他使用的就是联想的触屏笔记本。</p>\n<p>至此问题就非常明确了，问题最终还是定位在绑定的“点击”事件上。我们在检测时只是粗暴地检测了设备是否支持触控事件，却忽略了支持触控事件的仍然可能是 PC 设备，客户仍然可能通过点击鼠标来进行操作。这实际上反映出我们忽略了用户设备的多样性，开发的时候对用户设备做了太多的假设，最终导致我们以为它是一台手机，结果它是一台货真价实的笔记本电脑。</p>\n<p>归纳起来，关键的点就是：</p>\n<ul>\n<li>有些 PC 设备屏幕为触摸屏，同时支持<code>touchstart</code>和<code>click</code>事件；</li>\n<li>用户触发<code>touchstart</code>事件，默认必然会导致触发<code>click</code>事件，但是触发<code>click</code>事件，不一定会导致<code>touchstart</code>事件被触发；</li>\n<li>此类设备外接鼠标时，通过上面的绑定方式，会绑定<code>touchstart</code>事件，但是鼠标操作只能触发<code>click</code>，导致<code>touchstart</code>不触发；</li>\n</ul>\n<h2 id=\"4-解决办法\"><a href=\"#4-解决办法\" class=\"headerlink\" title=\"4. 解决办法\"></a>4. 解决办法</h2><p>至此，问题的原因已经分析完毕，如何应对又成了一个问题。这个问题的关键在于确定不同设备上使用“点击”事件的策略。大致分为如下几种：</p>\n<h3 id=\"1-均使用click事件\"><a href=\"#1-均使用click事件\" class=\"headerlink\" title=\"1. 均使用click事件\"></a>1. 均使用click事件</h3><ul>\n<li>优点：自适应时，不同设备均支持，没有兼容性问题，开发成本低；</li>\n<li>缺点：移动端存在300ms的延迟问题（虽然同事表示一般感觉不出来）</li>\n</ul>\n<h3 id=\"2-通过UA判断设备是否为移动端，再确认事件类型\"><a href=\"#2-通过UA判断设备是否为移动端，再确认事件类型\" class=\"headerlink\" title=\"2. 通过UA判断设备是否为移动端，再确认事件类型\"></a>2. 通过UA判断设备是否为移动端，再确认事件类型</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isMobile() &#123;</span><br><span class=\"line\">    return navigator.userAgent.match(/(blackberry|configuration\\/cldc|hp |hp-|htc |htc_|htc-|iemobile|kindle|midp|mmp|motorola|mobile|nokia|opera mini|opera |Googlebot-Mobile|YahooSeeker\\/M1A1-R2D2|android|iphone|ipod|mobi|palm|palmos|pocket|portalmmm|ppc;|smartphone|sonyericsson|sqh|spv|symbian|treo|up.browser|up.link|vodafone|windows ce|xda |xda_)/i) ? true : false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> var tap = isMobile() ? &apos;touchstart&apos; : &apos;click&apos;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：自适应时，开发成本低，通过设备类型确定点击事件类型，能满足绝大部分问题，用户操作也比较符合预期；</li>\n<li>缺点：不能满足所有情况，如果用户给 iPad 或者 Android 手机（认定为移动设备）外接鼠标进行操作，这种方式就不起作用（PS：你非要这么做，我也无FUCK说）。</li>\n</ul>\n<h3 id=\"3-全部使用click，通过FastClick解决300毫秒的延迟问题\"><a href=\"#3-全部使用click，通过FastClick解决300毫秒的延迟问题\" class=\"headerlink\" title=\"3. 全部使用click，通过FastClick解决300毫秒的延迟问题\"></a>3. 全部使用click，通过FastClick解决300毫秒的延迟问题</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//引入FastClick</span><br><span class=\"line\">var FastClick = require(&apos;tool-fastclick&apos;);</span><br><span class=\"line\">//页面初始化时调用</span><br><span class=\"line\">new FastClick(document.body);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：开发成本低也比较低，也不会出现1，2中问题 </li>\n<li>缺点：额外引入三方库，FastClick 是否会有其他的坑？这点不能保证</li>\n</ul>\n<blockquote>\n<p>注：<code>tool-fastclick</code>是组内 fork 的 FastClick 版本，目前没有开源。我们对其中存在的问题进行了一部分修复，比如：同个页面有多个 select 框选择时，会跳选项的 bug 。</p>\n</blockquote>\n<h3 id=\"4-万全之策\"><a href=\"#4-万全之策\" class=\"headerlink\" title=\"4. 万全之策\"></a>4. 万全之策</h3><p>其实最好的方案是不要在绑定的时候进行判断，而是对<code>touchstart</code>和<code>click</code>同时绑定，但是在<code>touchstart</code>触发的时候暂时取消后续 click 的响应。</p>\n<p>具体的实施方式有三种：</p>\n<ol>\n<li>在<code>touchstart</code>事件响应中调用<code>preventDefault()</code>方法，阻止后续<code>click</code>事件的触发</li>\n<li>在<code>touchstart</code>事件中设置一些标记，或者取消<code>click</code>事件的绑定，使得<code>click</code>事件触发时不会触发我们绑定的逻辑，在一段时间（例如300-500ms）后再恢复</li>\n<li>直接对事件处理函数进行节流（throttle），保证在一段时间内（300ms - 500ms），事件处理函数只触发一次</li>\n</ol>\n<p>当然，和上面一样，每种方案都有利弊。</p>\n<p>方案1取消了后续<code>click</code>事件的触发，在多个事件绑定叠加或者多人合作的时候，有可能导致一些依赖<code>click</code>事件的逻辑出现bug。</p>\n<p>方案2和方案3的原理基本一样，实施起来有一定的复杂度，而且本质上属于 hack 的方案，应对一些非常规场景时就不适用了。比如需要快速连续点击的场景，或者用户点击非常慢的场景等等。</p>\n<p>总之，没有万全之策，呵呵……</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>有人可能会对文章最前提到的收费介绍页比较感兴趣，来了，看<a href=\"https://www.futu5.com/about/commissionnew\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>"},{"title":"【译】vue 自定义指令的魅力","date":"2017-10-31T02:00:00.000Z","author":"Diandian","_content":"\n在你初次接触一个新的Javascript框架时，会像第一次进糖果店的孩子一样。给啥拿啥，而更直接点，有些东西可以让你更容易成为一个开发者。不可避免的是，我们在用框架时都会有一个同感，就是总有些场景是框架不能帮我们完成的。\n\n[Vue](https://vuejs.org/)框架的漂亮之处在于它的功能非常强大，虽然这个框架的指令不够面面俱到，但也能在开发上助你一臂之力了，因为创建一个自定义指令是很轻松的。\n\n<!-- more -->\n\n## 什么是指令？\n\n我在[Vue.js guide](https://css-tricks.com/guides/vue/)中写过指令的一篇[文章](https://css-tricks.com/intro-to-vue-1-rendering-directives-events/)，现在再一起复习下。\n\n指令是可以写在DOM元素的小命令，他们以`v-`为前缀，vue就能识别这是一个指令并保持语法的一致性。如果你需要对HTML进行底层操作的话，这种方式是非常有用的。\n\n如果你已经用过vue或者angular的话，对于`v-if`,`v-else`,`v-show`等指令就会比较熟悉了，但是我还是要介绍一些基础的知识，如果你更想直接看例子，可以直接看后文就好了。\n\n以下是使用指令的几种方法，以及示例，这些例子并不规范，它们只是示例。这里的`example`代替了实际的指令。\n\n`v-example` - 会实例化一个指令，但这个指令没有参数。如果不传参数会比较不灵活，但是这样就已经操作DOM元素的能力了。\n\n`v-example=\"value\"` - 这样可以传值到指令中，指令会根据`value`值来操作html。\n\n```html\n<div v-if=\"stateExample\">stateExample为true时会显示</div>\n```\n\n`v-example=\"'string'\"` - 使用字符串作为表达式。\n\n```html\n<p v-html=\"'<strong>this is an example of a string in some text<strong> '\"></p>\n```\n\n`v-example:arg=\"value\"` - 这里可以传参数（`arg`），在下面的例子中，我们绑定一个`class`，然后给这个`class`设置样式。\n\n\n```html\n<div v-bind:class=\"someClassObject\"></div>\n```\n\n`v-example:arg.modifier=\"value\"` - 使用修饰符（`modifier`），下面的例子可以在`click`事件上调用`preventDefault()`;\n\n```html\n<button v-on:submit.prevent=\"onSubmit\"></button>\n```\n\n## 了解自定义指令\n\n现在对指令有了大概的了解后，我们再来学习下如何创建一个自定义指令。自定义指令的典型例子就是创建一个`scroll`事件的指令，下面让我们一起来看一下。\n\n首先创建一个单纯的全局指令（它还没有做任何事情）。\n\n```javascript\nvue.directive('tack');\n```\n\n根据这个指令HTML就是这样的：\n\n```html\n<p v-tack>This element has a directive on it</p>\n```\n\n指令定义函数提供了几个钩子函数 (可选)：\n\n1. `bind`-只调用一次，指令第一次绑定到元素时调用。\n2. `insert`-被绑定元素插入父节点时调用。\n3. `update`-所在组件的 VNode 更新时调用，但是可能发生在其子元素的 VNode 更新之前。\n4. `componentUpdated`-所在组件的 VNode 及其子元素的 VNode 全部更新时调用。\n5. `unbind`-只调用一次，指令与元素解绑时调用。\n\n![hookArguments](/images/2017-10-31-vue-cutom-directive/01.svg)\n\n我认为这五个钩子函数中`bind`和`update`是最有用的。\n\n他们中的每一个都有可以用的`el`,`binding`和`vnode`参数，除了`update`和`componentUpdated`之外，还会暴露`oldVnode`，以区分传递的旧值和新值。\n\n- `el` 指令所绑定的元素，可以用来直接操作 DOM 。\n- `binding` 一个对象，包含以下属性：`name`,`value`,`oldValue`,`expression`,`arg`和`modifiers`。\n- `vnode` Vue 编译生成的虚拟节点。\n\n`binding`和`vnode`都是只读。\n\n## 创建一个自定义指令\n\n了解了自定义指令概念后，来看下如何使用一个自定义指令，下面用一个例子来实现我们刚才所说的：\n\n```javascript\nVue.directive('tack',{\n    bind(el,binding,vnode){\n        el.style.position = 'fixed'\n    }\n})\n```\n相对应的HTML就是：\n\n```html\n<p v-tack>I will now be tacked onto the page</p>\n```\n\n这样就可以了，但是还不够灵活。如果能接受参数以便后续更新它的表现或者进行复用的话就会更加灵活。让我们看下如何实现让这个元素离页面顶部有一定的距离：\n\n```javascript\nVue.directive('tack',{\n    bind(el,binding,vnode){\n        el.style.position = 'fixed';\n        el.style.top = binding.value + 'px';\n    }\n})\n```\n\n```html\n<div id=\"app\">\n    <p>向下滚动页面</p>\n    <p v-tack=\"70\">我固定在离顶部70px的地方</p>\n</div>\n```\n\n完成后的CodePen展示：(如无法展示效果，点击[链接](https://codepen.io/sdras/pen/0959829d6dfd86f6a1e06be2fd424ec7)查看)\n\n<iframe id=\"cp_embed_0959829d6dfd86f6a1e06be2fd424ec7\" src=\"//codepen.io/sdras/embed/0959829d6dfd86f6a1e06be2fd424ec7?height=265&amp;theme-id=1&amp;slug-hash=0959829d6dfd86f6a1e06be2fd424ec7&amp;default-tab=result&amp;user=sdras&amp;embed-version=2&amp;pen-title=Simple%20custom%20directive\" scrolling=\"no\" frameborder=\"0\" height=\"265\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"Simple custom directive\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden; height: 100%;\"></iframe>\n\n假设我们想要区分偏离的70px是在顶部还是左侧，可以通过传递一个参数来实现：\n\n```html\n<p v-tack:left=\"70\">现在我会在距离左侧70px的地方</p>\n```\n\n```javascript\nVue.directive('tack',{\n    bind(el,binding,vnode){\n        el.style.position = 'fixed';\n        const s = (binding.arg == 'left'?'left':top);\n        el.style[s] = binding.value + 'px';\n    }\n})\n```\n\n完成后的CodePen展示：(如无法展示效果，点击[链接](https://codepen.io/sdras/pen/4dfeb0b4f8ac1158236d3b9fea71cc9a)查看)\n\n<iframe id=\"result-iframe\" sandbox=\"allow-scripts allow-pointer-lock allow-same-origin allow-popups allow-modals allow-forms\" src=\"https://s.codepen.io/sdras/fullembedgrid/4dfeb0b4f8ac1158236d3b9fea71cc9a?type=embed&amp;animations=run\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"yes\" allowfullscreen=\"true\" name=\"CodePen Preview for Simple directive with arg\" title=\"CodePen Preview for Simple directive with arg\" data-src=\"https://s.codepen.io/sdras/fullembedgrid/4dfeb0b4f8ac1158236d3b9fea71cc9a?type=embed&amp;animations=run\"></iframe>\n\n你也可以使用多个值，像自带指令一样用：\n\n```html\n<p v-tack=\"{top:'40',left:'100'}\">我固定在离顶部40px、左侧100px的地方</p>\n```\n\n然后这两个值将会在指令上同时生效：\n\n```javascript\nVue.directive('tack',{\n    bind(el,binding,vnode){\n        el.style.position = 'fixed';\n        el.style.top = binding.value.top+'px';\n        el.style.left = binding.value.left+'px';\n    }\n})\n```\n\n完成后的CodePen展示：(如无法展示效果，点击[链接](https://codepen.io/sdras/pen/b307a9dd0449ad8563fb489d9ae4ab95)查看)\n\n<iframe id=\"cp_embed_b307a9dd0449ad8563fb489d9ae4ab95\" src=\"//codepen.io/sdras/embed/b307a9dd0449ad8563fb489d9ae4ab95?height=265&amp;theme-id=1&amp;slug-hash=b307a9dd0449ad8563fb489d9ae4ab95&amp;default-tab=result&amp;user=sdras&amp;embed-version=2&amp;pen-title=Simple%20directive%20with%20two%20values\" scrolling=\"no\" frameborder=\"0\" height=\"265\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"Simple directive with two values\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden; height: 100%;\"></iframe>\n\n我们还可以编写更复杂的东西，我们可以根据自定义指令来创建和修改方法。这里，我们简单创建一个滚动动画小例子：\n\n```javascript\nVue.directive('scroll',{\n    inserted:function(el,binding){\n        let f = function(evt){\n            if(binding.value(evt,el)){\n                 window.removeEventListener('scroll',f);\n            }\n        }\n        window.addEventListener('scroll',f);\n    }\n});\n\n//main app\n\nnew Vue({\n    el:'#app',\n    methods:{\n        handleScroll:function(evt,el){\n            if(window.scrollY>50){\n                TweenMax.to(el,1.5,{\n                    y:-10,\n                    opacity:1,\n                    ease:sine.easeOut\n                })\n            }\n            return window.scrollY>100;\n        }\n    }\n});\n```\n\n```html\n<div class=\"box\" v-scroll=\"handleScroll\">\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. A atque amet harum aut ab veritatis earum porro praesentium ut corporis. Quasi provident dolorem officia iure fugiat, eius mollitia sequi quisquam.</p>\n</div>\n```\n\n完成后的CodePen展示：(如无法展示效果，点击[链接](https://codepen.io/sdras/pen/5ca1e0c724d7d900603d8898b5551189)查看)\n\n<iframe id=\"result-iframe\" sandbox=\"allow-scripts allow-pointer-lock allow-same-origin allow-popups allow-modals allow-forms\" src=\"https://s.codepen.io/sdras/fullembedgrid/5ca1e0c724d7d900603d8898b5551189?type=embed&amp;animations=run\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"yes\" allowfullscreen=\"true\" name=\"CodePen Preview for Custom Scroll Directive\" title=\"CodePen Preview for Custom Scroll Directive\" data-src=\"https://s.codepen.io/sdras/fullembedgrid/5ca1e0c724d7d900603d8898b5551189?type=embed&amp;animations=run\"></iframe>\n\n以上都是很简单的代码来实现效果，在实际的开发中，你可以创建更高级灵活的自定义指令。\n\n在一个实际构建过程中，我会将指令代码放在`main.js`中，这个文件位于`src`目录下（如果你使用的是vue-cli这样的工具的话），这样`App.vue`及以`.vue`后缀名的文件都可以引入使用。你当然也可以使用其他的方式，但这是我认为在实现整个App过程中最灵活的方式。\n\n如果你想了解有关Vue框架的更多知识，请查看[guide](https://css-tricks.com/guides/vue/).\n\n原文：[The Power of Custom Directives in Vue](https://css-tricks.com/power-custom-directives-vue/)\n\n作者：[SARAH DRASNER ](https://css-tricks.com/author/sdrasner/)\n\n译者：[Diandian](https://futu.im/author/Diandian)\n","source":"_posts/2017-10-31-vue-cutom-directive.md","raw":"---\ntitle: 【译】vue 自定义指令的魅力\ndate: 2017-10-31 10:00\ncategory: 翻译\ntags: [JS,技术]\nauthor: Diandian\n---\n\n在你初次接触一个新的Javascript框架时，会像第一次进糖果店的孩子一样。给啥拿啥，而更直接点，有些东西可以让你更容易成为一个开发者。不可避免的是，我们在用框架时都会有一个同感，就是总有些场景是框架不能帮我们完成的。\n\n[Vue](https://vuejs.org/)框架的漂亮之处在于它的功能非常强大，虽然这个框架的指令不够面面俱到，但也能在开发上助你一臂之力了，因为创建一个自定义指令是很轻松的。\n\n<!-- more -->\n\n## 什么是指令？\n\n我在[Vue.js guide](https://css-tricks.com/guides/vue/)中写过指令的一篇[文章](https://css-tricks.com/intro-to-vue-1-rendering-directives-events/)，现在再一起复习下。\n\n指令是可以写在DOM元素的小命令，他们以`v-`为前缀，vue就能识别这是一个指令并保持语法的一致性。如果你需要对HTML进行底层操作的话，这种方式是非常有用的。\n\n如果你已经用过vue或者angular的话，对于`v-if`,`v-else`,`v-show`等指令就会比较熟悉了，但是我还是要介绍一些基础的知识，如果你更想直接看例子，可以直接看后文就好了。\n\n以下是使用指令的几种方法，以及示例，这些例子并不规范，它们只是示例。这里的`example`代替了实际的指令。\n\n`v-example` - 会实例化一个指令，但这个指令没有参数。如果不传参数会比较不灵活，但是这样就已经操作DOM元素的能力了。\n\n`v-example=\"value\"` - 这样可以传值到指令中，指令会根据`value`值来操作html。\n\n```html\n<div v-if=\"stateExample\">stateExample为true时会显示</div>\n```\n\n`v-example=\"'string'\"` - 使用字符串作为表达式。\n\n```html\n<p v-html=\"'<strong>this is an example of a string in some text<strong> '\"></p>\n```\n\n`v-example:arg=\"value\"` - 这里可以传参数（`arg`），在下面的例子中，我们绑定一个`class`，然后给这个`class`设置样式。\n\n\n```html\n<div v-bind:class=\"someClassObject\"></div>\n```\n\n`v-example:arg.modifier=\"value\"` - 使用修饰符（`modifier`），下面的例子可以在`click`事件上调用`preventDefault()`;\n\n```html\n<button v-on:submit.prevent=\"onSubmit\"></button>\n```\n\n## 了解自定义指令\n\n现在对指令有了大概的了解后，我们再来学习下如何创建一个自定义指令。自定义指令的典型例子就是创建一个`scroll`事件的指令，下面让我们一起来看一下。\n\n首先创建一个单纯的全局指令（它还没有做任何事情）。\n\n```javascript\nvue.directive('tack');\n```\n\n根据这个指令HTML就是这样的：\n\n```html\n<p v-tack>This element has a directive on it</p>\n```\n\n指令定义函数提供了几个钩子函数 (可选)：\n\n1. `bind`-只调用一次，指令第一次绑定到元素时调用。\n2. `insert`-被绑定元素插入父节点时调用。\n3. `update`-所在组件的 VNode 更新时调用，但是可能发生在其子元素的 VNode 更新之前。\n4. `componentUpdated`-所在组件的 VNode 及其子元素的 VNode 全部更新时调用。\n5. `unbind`-只调用一次，指令与元素解绑时调用。\n\n![hookArguments](/images/2017-10-31-vue-cutom-directive/01.svg)\n\n我认为这五个钩子函数中`bind`和`update`是最有用的。\n\n他们中的每一个都有可以用的`el`,`binding`和`vnode`参数，除了`update`和`componentUpdated`之外，还会暴露`oldVnode`，以区分传递的旧值和新值。\n\n- `el` 指令所绑定的元素，可以用来直接操作 DOM 。\n- `binding` 一个对象，包含以下属性：`name`,`value`,`oldValue`,`expression`,`arg`和`modifiers`。\n- `vnode` Vue 编译生成的虚拟节点。\n\n`binding`和`vnode`都是只读。\n\n## 创建一个自定义指令\n\n了解了自定义指令概念后，来看下如何使用一个自定义指令，下面用一个例子来实现我们刚才所说的：\n\n```javascript\nVue.directive('tack',{\n    bind(el,binding,vnode){\n        el.style.position = 'fixed'\n    }\n})\n```\n相对应的HTML就是：\n\n```html\n<p v-tack>I will now be tacked onto the page</p>\n```\n\n这样就可以了，但是还不够灵活。如果能接受参数以便后续更新它的表现或者进行复用的话就会更加灵活。让我们看下如何实现让这个元素离页面顶部有一定的距离：\n\n```javascript\nVue.directive('tack',{\n    bind(el,binding,vnode){\n        el.style.position = 'fixed';\n        el.style.top = binding.value + 'px';\n    }\n})\n```\n\n```html\n<div id=\"app\">\n    <p>向下滚动页面</p>\n    <p v-tack=\"70\">我固定在离顶部70px的地方</p>\n</div>\n```\n\n完成后的CodePen展示：(如无法展示效果，点击[链接](https://codepen.io/sdras/pen/0959829d6dfd86f6a1e06be2fd424ec7)查看)\n\n<iframe id=\"cp_embed_0959829d6dfd86f6a1e06be2fd424ec7\" src=\"//codepen.io/sdras/embed/0959829d6dfd86f6a1e06be2fd424ec7?height=265&amp;theme-id=1&amp;slug-hash=0959829d6dfd86f6a1e06be2fd424ec7&amp;default-tab=result&amp;user=sdras&amp;embed-version=2&amp;pen-title=Simple%20custom%20directive\" scrolling=\"no\" frameborder=\"0\" height=\"265\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"Simple custom directive\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden; height: 100%;\"></iframe>\n\n假设我们想要区分偏离的70px是在顶部还是左侧，可以通过传递一个参数来实现：\n\n```html\n<p v-tack:left=\"70\">现在我会在距离左侧70px的地方</p>\n```\n\n```javascript\nVue.directive('tack',{\n    bind(el,binding,vnode){\n        el.style.position = 'fixed';\n        const s = (binding.arg == 'left'?'left':top);\n        el.style[s] = binding.value + 'px';\n    }\n})\n```\n\n完成后的CodePen展示：(如无法展示效果，点击[链接](https://codepen.io/sdras/pen/4dfeb0b4f8ac1158236d3b9fea71cc9a)查看)\n\n<iframe id=\"result-iframe\" sandbox=\"allow-scripts allow-pointer-lock allow-same-origin allow-popups allow-modals allow-forms\" src=\"https://s.codepen.io/sdras/fullembedgrid/4dfeb0b4f8ac1158236d3b9fea71cc9a?type=embed&amp;animations=run\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"yes\" allowfullscreen=\"true\" name=\"CodePen Preview for Simple directive with arg\" title=\"CodePen Preview for Simple directive with arg\" data-src=\"https://s.codepen.io/sdras/fullembedgrid/4dfeb0b4f8ac1158236d3b9fea71cc9a?type=embed&amp;animations=run\"></iframe>\n\n你也可以使用多个值，像自带指令一样用：\n\n```html\n<p v-tack=\"{top:'40',left:'100'}\">我固定在离顶部40px、左侧100px的地方</p>\n```\n\n然后这两个值将会在指令上同时生效：\n\n```javascript\nVue.directive('tack',{\n    bind(el,binding,vnode){\n        el.style.position = 'fixed';\n        el.style.top = binding.value.top+'px';\n        el.style.left = binding.value.left+'px';\n    }\n})\n```\n\n完成后的CodePen展示：(如无法展示效果，点击[链接](https://codepen.io/sdras/pen/b307a9dd0449ad8563fb489d9ae4ab95)查看)\n\n<iframe id=\"cp_embed_b307a9dd0449ad8563fb489d9ae4ab95\" src=\"//codepen.io/sdras/embed/b307a9dd0449ad8563fb489d9ae4ab95?height=265&amp;theme-id=1&amp;slug-hash=b307a9dd0449ad8563fb489d9ae4ab95&amp;default-tab=result&amp;user=sdras&amp;embed-version=2&amp;pen-title=Simple%20directive%20with%20two%20values\" scrolling=\"no\" frameborder=\"0\" height=\"265\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"Simple directive with two values\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden; height: 100%;\"></iframe>\n\n我们还可以编写更复杂的东西，我们可以根据自定义指令来创建和修改方法。这里，我们简单创建一个滚动动画小例子：\n\n```javascript\nVue.directive('scroll',{\n    inserted:function(el,binding){\n        let f = function(evt){\n            if(binding.value(evt,el)){\n                 window.removeEventListener('scroll',f);\n            }\n        }\n        window.addEventListener('scroll',f);\n    }\n});\n\n//main app\n\nnew Vue({\n    el:'#app',\n    methods:{\n        handleScroll:function(evt,el){\n            if(window.scrollY>50){\n                TweenMax.to(el,1.5,{\n                    y:-10,\n                    opacity:1,\n                    ease:sine.easeOut\n                })\n            }\n            return window.scrollY>100;\n        }\n    }\n});\n```\n\n```html\n<div class=\"box\" v-scroll=\"handleScroll\">\n    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. A atque amet harum aut ab veritatis earum porro praesentium ut corporis. Quasi provident dolorem officia iure fugiat, eius mollitia sequi quisquam.</p>\n</div>\n```\n\n完成后的CodePen展示：(如无法展示效果，点击[链接](https://codepen.io/sdras/pen/5ca1e0c724d7d900603d8898b5551189)查看)\n\n<iframe id=\"result-iframe\" sandbox=\"allow-scripts allow-pointer-lock allow-same-origin allow-popups allow-modals allow-forms\" src=\"https://s.codepen.io/sdras/fullembedgrid/5ca1e0c724d7d900603d8898b5551189?type=embed&amp;animations=run\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"yes\" allowfullscreen=\"true\" name=\"CodePen Preview for Custom Scroll Directive\" title=\"CodePen Preview for Custom Scroll Directive\" data-src=\"https://s.codepen.io/sdras/fullembedgrid/5ca1e0c724d7d900603d8898b5551189?type=embed&amp;animations=run\"></iframe>\n\n以上都是很简单的代码来实现效果，在实际的开发中，你可以创建更高级灵活的自定义指令。\n\n在一个实际构建过程中，我会将指令代码放在`main.js`中，这个文件位于`src`目录下（如果你使用的是vue-cli这样的工具的话），这样`App.vue`及以`.vue`后缀名的文件都可以引入使用。你当然也可以使用其他的方式，但这是我认为在实现整个App过程中最灵活的方式。\n\n如果你想了解有关Vue框架的更多知识，请查看[guide](https://css-tricks.com/guides/vue/).\n\n原文：[The Power of Custom Directives in Vue](https://css-tricks.com/power-custom-directives-vue/)\n\n作者：[SARAH DRASNER ](https://css-tricks.com/author/sdrasner/)\n\n译者：[Diandian](https://futu.im/author/Diandian)\n","slug":"2017-10-31-vue-cutom-directive","published":1,"updated":"2017-12-01T08:50:00.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanokniv001vjxs1fyokktzm","content":"<p>在你初次接触一个新的Javascript框架时，会像第一次进糖果店的孩子一样。给啥拿啥，而更直接点，有些东西可以让你更容易成为一个开发者。不可避免的是，我们在用框架时都会有一个同感，就是总有些场景是框架不能帮我们完成的。</p>\n<p><a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vue</a>框架的漂亮之处在于它的功能非常强大，虽然这个框架的指令不够面面俱到，但也能在开发上助你一臂之力了，因为创建一个自定义指令是很轻松的。</p>\n<a id=\"more\"></a>\n<h2 id=\"什么是指令？\"><a href=\"#什么是指令？\" class=\"headerlink\" title=\"什么是指令？\"></a>什么是指令？</h2><p>我在<a href=\"https://css-tricks.com/guides/vue/\" target=\"_blank\" rel=\"noopener\">Vue.js guide</a>中写过指令的一篇<a href=\"https://css-tricks.com/intro-to-vue-1-rendering-directives-events/\" target=\"_blank\" rel=\"noopener\">文章</a>，现在再一起复习下。</p>\n<p>指令是可以写在DOM元素的小命令，他们以<code>v-</code>为前缀，vue就能识别这是一个指令并保持语法的一致性。如果你需要对HTML进行底层操作的话，这种方式是非常有用的。</p>\n<p>如果你已经用过vue或者angular的话，对于<code>v-if</code>,<code>v-else</code>,<code>v-show</code>等指令就会比较熟悉了，但是我还是要介绍一些基础的知识，如果你更想直接看例子，可以直接看后文就好了。</p>\n<p>以下是使用指令的几种方法，以及示例，这些例子并不规范，它们只是示例。这里的<code>example</code>代替了实际的指令。</p>\n<p><code>v-example</code> - 会实例化一个指令，但这个指令没有参数。如果不传参数会比较不灵活，但是这样就已经操作DOM元素的能力了。</p>\n<p><code>v-example=&quot;value&quot;</code> - 这样可以传值到指令中，指令会根据<code>value</code>值来操作html。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"stateExample\"</span>&gt;</span>stateExample为true时会显示<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>v-example=&quot;&#39;string&#39;&quot;</code> - 使用字符串作为表达式。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"'&lt;strong&gt;this is an example of a string in some text&lt;strong&gt; '\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>v-example:arg=&quot;value&quot;</code> - 这里可以传参数（<code>arg</code>），在下面的例子中，我们绑定一个<code>class</code>，然后给这个<code>class</code>设置样式。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"someClassObject\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>v-example:arg.modifier=&quot;value&quot;</code> - 使用修饰符（<code>modifier</code>），下面的例子可以在<code>click</code>事件上调用<code>preventDefault()</code>;</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"了解自定义指令\"><a href=\"#了解自定义指令\" class=\"headerlink\" title=\"了解自定义指令\"></a>了解自定义指令</h2><p>现在对指令有了大概的了解后，我们再来学习下如何创建一个自定义指令。自定义指令的典型例子就是创建一个<code>scroll</code>事件的指令，下面让我们一起来看一下。</p>\n<p>首先创建一个单纯的全局指令（它还没有做任何事情）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue.directive(<span class=\"string\">'tack'</span>);</span><br></pre></td></tr></table></figure>\n<p>根据这个指令HTML就是这样的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-tack</span>&gt;</span>This element has a directive on it<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>指令定义函数提供了几个钩子函数 (可选)：</p>\n<ol>\n<li><code>bind</code>-只调用一次，指令第一次绑定到元素时调用。</li>\n<li><code>insert</code>-被绑定元素插入父节点时调用。</li>\n<li><code>update</code>-所在组件的 VNode 更新时调用，但是可能发生在其子元素的 VNode 更新之前。</li>\n<li><code>componentUpdated</code>-所在组件的 VNode 及其子元素的 VNode 全部更新时调用。</li>\n<li><code>unbind</code>-只调用一次，指令与元素解绑时调用。</li>\n</ol>\n<p><img src=\"/images/2017-10-31-vue-cutom-directive/01.svg\" alt=\"hookArguments\"></p>\n<p>我认为这五个钩子函数中<code>bind</code>和<code>update</code>是最有用的。</p>\n<p>他们中的每一个都有可以用的<code>el</code>,<code>binding</code>和<code>vnode</code>参数，除了<code>update</code>和<code>componentUpdated</code>之外，还会暴露<code>oldVnode</code>，以区分传递的旧值和新值。</p>\n<ul>\n<li><code>el</code> 指令所绑定的元素，可以用来直接操作 DOM 。</li>\n<li><code>binding</code> 一个对象，包含以下属性：<code>name</code>,<code>value</code>,<code>oldValue</code>,<code>expression</code>,<code>arg</code>和<code>modifiers</code>。</li>\n<li><code>vnode</code> Vue 编译生成的虚拟节点。</li>\n</ul>\n<p><code>binding</code>和<code>vnode</code>都是只读。</p>\n<h2 id=\"创建一个自定义指令\"><a href=\"#创建一个自定义指令\" class=\"headerlink\" title=\"创建一个自定义指令\"></a>创建一个自定义指令</h2><p>了解了自定义指令概念后，来看下如何使用一个自定义指令，下面用一个例子来实现我们刚才所说的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'tack'</span>,&#123;</span><br><span class=\"line\">    bind(el,binding,vnode)&#123;</span><br><span class=\"line\">        el.style.position = <span class=\"string\">'fixed'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>相对应的HTML就是：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-tack</span>&gt;</span>I will now be tacked onto the page<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样就可以了，但是还不够灵活。如果能接受参数以便后续更新它的表现或者进行复用的话就会更加灵活。让我们看下如何实现让这个元素离页面顶部有一定的距离：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'tack'</span>,&#123;</span><br><span class=\"line\">    bind(el,binding,vnode)&#123;</span><br><span class=\"line\">        el.style.position = <span class=\"string\">'fixed'</span>;</span><br><span class=\"line\">        el.style.top = binding.value + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>向下滚动页面<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-tack</span>=<span class=\"string\">\"70\"</span>&gt;</span>我固定在离顶部70px的地方<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>完成后的CodePen展示：(如无法展示效果，点击<a href=\"https://codepen.io/sdras/pen/0959829d6dfd86f6a1e06be2fd424ec7\" target=\"_blank\" rel=\"noopener\">链接</a>查看)</p>\n<iframe id=\"cp_embed_0959829d6dfd86f6a1e06be2fd424ec7\" src=\"//codepen.io/sdras/embed/0959829d6dfd86f6a1e06be2fd424ec7?height=265&amp;theme-id=1&amp;slug-hash=0959829d6dfd86f6a1e06be2fd424ec7&amp;default-tab=result&amp;user=sdras&amp;embed-version=2&amp;pen-title=Simple%20custom%20directive\" scrolling=\"no\" frameborder=\"0\" height=\"265\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"Simple custom directive\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden; height: 100%;\"></iframe>\n\n<p>假设我们想要区分偏离的70px是在顶部还是左侧，可以通过传递一个参数来实现：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-tack:left</span>=<span class=\"string\">\"70\"</span>&gt;</span>现在我会在距离左侧70px的地方<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'tack'</span>,&#123;</span><br><span class=\"line\">    bind(el,binding,vnode)&#123;</span><br><span class=\"line\">        el.style.position = <span class=\"string\">'fixed'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> s = (binding.arg == <span class=\"string\">'left'</span>?<span class=\"string\">'left'</span>:top);</span><br><span class=\"line\">        el.style[s] = binding.value + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>完成后的CodePen展示：(如无法展示效果，点击<a href=\"https://codepen.io/sdras/pen/4dfeb0b4f8ac1158236d3b9fea71cc9a\" target=\"_blank\" rel=\"noopener\">链接</a>查看)</p>\n<iframe id=\"result-iframe\" sandbox=\"allow-scripts allow-pointer-lock allow-same-origin allow-popups allow-modals allow-forms\" src=\"https://s.codepen.io/sdras/fullembedgrid/4dfeb0b4f8ac1158236d3b9fea71cc9a?type=embed&amp;animations=run\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"yes\" allowfullscreen=\"true\" name=\"CodePen Preview for Simple directive with arg\" title=\"CodePen Preview for Simple directive with arg\" data-src=\"https://s.codepen.io/sdras/fullembedgrid/4dfeb0b4f8ac1158236d3b9fea71cc9a?type=embed&amp;animations=run\"></iframe>\n\n<p>你也可以使用多个值，像自带指令一样用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-tack</span>=<span class=\"string\">\"&#123;top:'40',left:'100'&#125;\"</span>&gt;</span>我固定在离顶部40px、左侧100px的地方<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后这两个值将会在指令上同时生效：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'tack'</span>,&#123;</span><br><span class=\"line\">    bind(el,binding,vnode)&#123;</span><br><span class=\"line\">        el.style.position = <span class=\"string\">'fixed'</span>;</span><br><span class=\"line\">        el.style.top = binding.value.top+<span class=\"string\">'px'</span>;</span><br><span class=\"line\">        el.style.left = binding.value.left+<span class=\"string\">'px'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>完成后的CodePen展示：(如无法展示效果，点击<a href=\"https://codepen.io/sdras/pen/b307a9dd0449ad8563fb489d9ae4ab95\" target=\"_blank\" rel=\"noopener\">链接</a>查看)</p>\n<iframe id=\"cp_embed_b307a9dd0449ad8563fb489d9ae4ab95\" src=\"//codepen.io/sdras/embed/b307a9dd0449ad8563fb489d9ae4ab95?height=265&amp;theme-id=1&amp;slug-hash=b307a9dd0449ad8563fb489d9ae4ab95&amp;default-tab=result&amp;user=sdras&amp;embed-version=2&amp;pen-title=Simple%20directive%20with%20two%20values\" scrolling=\"no\" frameborder=\"0\" height=\"265\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"Simple directive with two values\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden; height: 100%;\"></iframe>\n\n<p>我们还可以编写更复杂的东西，我们可以根据自定义指令来创建和修改方法。这里，我们简单创建一个滚动动画小例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'scroll'</span>,&#123;</span><br><span class=\"line\">    inserted:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,binding</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(binding.value(evt,el))&#123;</span><br><span class=\"line\">                 <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'scroll'</span>,f);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>,f);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        handleScroll:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt,el</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.scrollY&gt;<span class=\"number\">50</span>)&#123;</span><br><span class=\"line\">                TweenMax.to(el,<span class=\"number\">1.5</span>,&#123;</span><br><span class=\"line\">                    y:<span class=\"number\">-10</span>,</span><br><span class=\"line\">                    opacity:<span class=\"number\">1</span>,</span><br><span class=\"line\">                    ease:sine.easeOut</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.scrollY&gt;<span class=\"number\">100</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">v-scroll</span>=<span class=\"string\">\"handleScroll\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. A atque amet harum aut ab veritatis earum porro praesentium ut corporis. Quasi provident dolorem officia iure fugiat, eius mollitia sequi quisquam.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>完成后的CodePen展示：(如无法展示效果，点击<a href=\"https://codepen.io/sdras/pen/5ca1e0c724d7d900603d8898b5551189\" target=\"_blank\" rel=\"noopener\">链接</a>查看)</p>\n<iframe id=\"result-iframe\" sandbox=\"allow-scripts allow-pointer-lock allow-same-origin allow-popups allow-modals allow-forms\" src=\"https://s.codepen.io/sdras/fullembedgrid/5ca1e0c724d7d900603d8898b5551189?type=embed&amp;animations=run\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"yes\" allowfullscreen=\"true\" name=\"CodePen Preview for Custom Scroll Directive\" title=\"CodePen Preview for Custom Scroll Directive\" data-src=\"https://s.codepen.io/sdras/fullembedgrid/5ca1e0c724d7d900603d8898b5551189?type=embed&amp;animations=run\"></iframe>\n\n<p>以上都是很简单的代码来实现效果，在实际的开发中，你可以创建更高级灵活的自定义指令。</p>\n<p>在一个实际构建过程中，我会将指令代码放在<code>main.js</code>中，这个文件位于<code>src</code>目录下（如果你使用的是vue-cli这样的工具的话），这样<code>App.vue</code>及以<code>.vue</code>后缀名的文件都可以引入使用。你当然也可以使用其他的方式，但这是我认为在实现整个App过程中最灵活的方式。</p>\n<p>如果你想了解有关Vue框架的更多知识，请查看<a href=\"https://css-tricks.com/guides/vue/\" target=\"_blank\" rel=\"noopener\">guide</a>.</p>\n<p>原文：<a href=\"https://css-tricks.com/power-custom-directives-vue/\" target=\"_blank\" rel=\"noopener\">The Power of Custom Directives in Vue</a></p>\n<p>作者：<a href=\"https://css-tricks.com/author/sdrasner/\" target=\"_blank\" rel=\"noopener\">SARAH DRASNER </a></p>\n<p>译者：<a href=\"https://futu.im/author/Diandian\">Diandian</a></p>\n","site":{"data":{}},"excerpt":"<p>在你初次接触一个新的Javascript框架时，会像第一次进糖果店的孩子一样。给啥拿啥，而更直接点，有些东西可以让你更容易成为一个开发者。不可避免的是，我们在用框架时都会有一个同感，就是总有些场景是框架不能帮我们完成的。</p>\n<p><a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vue</a>框架的漂亮之处在于它的功能非常强大，虽然这个框架的指令不够面面俱到，但也能在开发上助你一臂之力了，因为创建一个自定义指令是很轻松的。</p>","more":"<h2 id=\"什么是指令？\"><a href=\"#什么是指令？\" class=\"headerlink\" title=\"什么是指令？\"></a>什么是指令？</h2><p>我在<a href=\"https://css-tricks.com/guides/vue/\" target=\"_blank\" rel=\"noopener\">Vue.js guide</a>中写过指令的一篇<a href=\"https://css-tricks.com/intro-to-vue-1-rendering-directives-events/\" target=\"_blank\" rel=\"noopener\">文章</a>，现在再一起复习下。</p>\n<p>指令是可以写在DOM元素的小命令，他们以<code>v-</code>为前缀，vue就能识别这是一个指令并保持语法的一致性。如果你需要对HTML进行底层操作的话，这种方式是非常有用的。</p>\n<p>如果你已经用过vue或者angular的话，对于<code>v-if</code>,<code>v-else</code>,<code>v-show</code>等指令就会比较熟悉了，但是我还是要介绍一些基础的知识，如果你更想直接看例子，可以直接看后文就好了。</p>\n<p>以下是使用指令的几种方法，以及示例，这些例子并不规范，它们只是示例。这里的<code>example</code>代替了实际的指令。</p>\n<p><code>v-example</code> - 会实例化一个指令，但这个指令没有参数。如果不传参数会比较不灵活，但是这样就已经操作DOM元素的能力了。</p>\n<p><code>v-example=&quot;value&quot;</code> - 这样可以传值到指令中，指令会根据<code>value</code>值来操作html。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"stateExample\"</span>&gt;</span>stateExample为true时会显示<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>v-example=&quot;&#39;string&#39;&quot;</code> - 使用字符串作为表达式。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"'&lt;strong&gt;this is an example of a string in some text&lt;strong&gt; '\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>v-example:arg=&quot;value&quot;</code> - 这里可以传参数（<code>arg</code>），在下面的例子中，我们绑定一个<code>class</code>，然后给这个<code>class</code>设置样式。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"someClassObject\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>v-example:arg.modifier=&quot;value&quot;</code> - 使用修饰符（<code>modifier</code>），下面的例子可以在<code>click</code>事件上调用<code>preventDefault()</code>;</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"了解自定义指令\"><a href=\"#了解自定义指令\" class=\"headerlink\" title=\"了解自定义指令\"></a>了解自定义指令</h2><p>现在对指令有了大概的了解后，我们再来学习下如何创建一个自定义指令。自定义指令的典型例子就是创建一个<code>scroll</code>事件的指令，下面让我们一起来看一下。</p>\n<p>首先创建一个单纯的全局指令（它还没有做任何事情）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue.directive(<span class=\"string\">'tack'</span>);</span><br></pre></td></tr></table></figure>\n<p>根据这个指令HTML就是这样的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-tack</span>&gt;</span>This element has a directive on it<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>指令定义函数提供了几个钩子函数 (可选)：</p>\n<ol>\n<li><code>bind</code>-只调用一次，指令第一次绑定到元素时调用。</li>\n<li><code>insert</code>-被绑定元素插入父节点时调用。</li>\n<li><code>update</code>-所在组件的 VNode 更新时调用，但是可能发生在其子元素的 VNode 更新之前。</li>\n<li><code>componentUpdated</code>-所在组件的 VNode 及其子元素的 VNode 全部更新时调用。</li>\n<li><code>unbind</code>-只调用一次，指令与元素解绑时调用。</li>\n</ol>\n<p><img src=\"/images/2017-10-31-vue-cutom-directive/01.svg\" alt=\"hookArguments\"></p>\n<p>我认为这五个钩子函数中<code>bind</code>和<code>update</code>是最有用的。</p>\n<p>他们中的每一个都有可以用的<code>el</code>,<code>binding</code>和<code>vnode</code>参数，除了<code>update</code>和<code>componentUpdated</code>之外，还会暴露<code>oldVnode</code>，以区分传递的旧值和新值。</p>\n<ul>\n<li><code>el</code> 指令所绑定的元素，可以用来直接操作 DOM 。</li>\n<li><code>binding</code> 一个对象，包含以下属性：<code>name</code>,<code>value</code>,<code>oldValue</code>,<code>expression</code>,<code>arg</code>和<code>modifiers</code>。</li>\n<li><code>vnode</code> Vue 编译生成的虚拟节点。</li>\n</ul>\n<p><code>binding</code>和<code>vnode</code>都是只读。</p>\n<h2 id=\"创建一个自定义指令\"><a href=\"#创建一个自定义指令\" class=\"headerlink\" title=\"创建一个自定义指令\"></a>创建一个自定义指令</h2><p>了解了自定义指令概念后，来看下如何使用一个自定义指令，下面用一个例子来实现我们刚才所说的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'tack'</span>,&#123;</span><br><span class=\"line\">    bind(el,binding,vnode)&#123;</span><br><span class=\"line\">        el.style.position = <span class=\"string\">'fixed'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>相对应的HTML就是：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-tack</span>&gt;</span>I will now be tacked onto the page<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样就可以了，但是还不够灵活。如果能接受参数以便后续更新它的表现或者进行复用的话就会更加灵活。让我们看下如何实现让这个元素离页面顶部有一定的距离：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'tack'</span>,&#123;</span><br><span class=\"line\">    bind(el,binding,vnode)&#123;</span><br><span class=\"line\">        el.style.position = <span class=\"string\">'fixed'</span>;</span><br><span class=\"line\">        el.style.top = binding.value + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>向下滚动页面<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-tack</span>=<span class=\"string\">\"70\"</span>&gt;</span>我固定在离顶部70px的地方<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>完成后的CodePen展示：(如无法展示效果，点击<a href=\"https://codepen.io/sdras/pen/0959829d6dfd86f6a1e06be2fd424ec7\" target=\"_blank\" rel=\"noopener\">链接</a>查看)</p>\n<iframe id=\"cp_embed_0959829d6dfd86f6a1e06be2fd424ec7\" src=\"//codepen.io/sdras/embed/0959829d6dfd86f6a1e06be2fd424ec7?height=265&amp;theme-id=1&amp;slug-hash=0959829d6dfd86f6a1e06be2fd424ec7&amp;default-tab=result&amp;user=sdras&amp;embed-version=2&amp;pen-title=Simple%20custom%20directive\" scrolling=\"no\" frameborder=\"0\" height=\"265\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"Simple custom directive\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden; height: 100%;\"></iframe>\n\n<p>假设我们想要区分偏离的70px是在顶部还是左侧，可以通过传递一个参数来实现：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-tack:left</span>=<span class=\"string\">\"70\"</span>&gt;</span>现在我会在距离左侧70px的地方<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'tack'</span>,&#123;</span><br><span class=\"line\">    bind(el,binding,vnode)&#123;</span><br><span class=\"line\">        el.style.position = <span class=\"string\">'fixed'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> s = (binding.arg == <span class=\"string\">'left'</span>?<span class=\"string\">'left'</span>:top);</span><br><span class=\"line\">        el.style[s] = binding.value + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>完成后的CodePen展示：(如无法展示效果，点击<a href=\"https://codepen.io/sdras/pen/4dfeb0b4f8ac1158236d3b9fea71cc9a\" target=\"_blank\" rel=\"noopener\">链接</a>查看)</p>\n<iframe id=\"result-iframe\" sandbox=\"allow-scripts allow-pointer-lock allow-same-origin allow-popups allow-modals allow-forms\" src=\"https://s.codepen.io/sdras/fullembedgrid/4dfeb0b4f8ac1158236d3b9fea71cc9a?type=embed&amp;animations=run\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"yes\" allowfullscreen=\"true\" name=\"CodePen Preview for Simple directive with arg\" title=\"CodePen Preview for Simple directive with arg\" data-src=\"https://s.codepen.io/sdras/fullembedgrid/4dfeb0b4f8ac1158236d3b9fea71cc9a?type=embed&amp;animations=run\"></iframe>\n\n<p>你也可以使用多个值，像自带指令一样用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-tack</span>=<span class=\"string\">\"&#123;top:'40',left:'100'&#125;\"</span>&gt;</span>我固定在离顶部40px、左侧100px的地方<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后这两个值将会在指令上同时生效：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'tack'</span>,&#123;</span><br><span class=\"line\">    bind(el,binding,vnode)&#123;</span><br><span class=\"line\">        el.style.position = <span class=\"string\">'fixed'</span>;</span><br><span class=\"line\">        el.style.top = binding.value.top+<span class=\"string\">'px'</span>;</span><br><span class=\"line\">        el.style.left = binding.value.left+<span class=\"string\">'px'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>完成后的CodePen展示：(如无法展示效果，点击<a href=\"https://codepen.io/sdras/pen/b307a9dd0449ad8563fb489d9ae4ab95\" target=\"_blank\" rel=\"noopener\">链接</a>查看)</p>\n<iframe id=\"cp_embed_b307a9dd0449ad8563fb489d9ae4ab95\" src=\"//codepen.io/sdras/embed/b307a9dd0449ad8563fb489d9ae4ab95?height=265&amp;theme-id=1&amp;slug-hash=b307a9dd0449ad8563fb489d9ae4ab95&amp;default-tab=result&amp;user=sdras&amp;embed-version=2&amp;pen-title=Simple%20directive%20with%20two%20values\" scrolling=\"no\" frameborder=\"0\" height=\"265\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"Simple directive with two values\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden; height: 100%;\"></iframe>\n\n<p>我们还可以编写更复杂的东西，我们可以根据自定义指令来创建和修改方法。这里，我们简单创建一个滚动动画小例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.directive(<span class=\"string\">'scroll'</span>,&#123;</span><br><span class=\"line\">    inserted:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,binding</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(binding.value(evt,el))&#123;</span><br><span class=\"line\">                 <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'scroll'</span>,f);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>,f);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">'#app'</span>,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        handleScroll:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt,el</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.scrollY&gt;<span class=\"number\">50</span>)&#123;</span><br><span class=\"line\">                TweenMax.to(el,<span class=\"number\">1.5</span>,&#123;</span><br><span class=\"line\">                    y:<span class=\"number\">-10</span>,</span><br><span class=\"line\">                    opacity:<span class=\"number\">1</span>,</span><br><span class=\"line\">                    ease:sine.easeOut</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.scrollY&gt;<span class=\"number\">100</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">v-scroll</span>=<span class=\"string\">\"handleScroll\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. A atque amet harum aut ab veritatis earum porro praesentium ut corporis. Quasi provident dolorem officia iure fugiat, eius mollitia sequi quisquam.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>完成后的CodePen展示：(如无法展示效果，点击<a href=\"https://codepen.io/sdras/pen/5ca1e0c724d7d900603d8898b5551189\" target=\"_blank\" rel=\"noopener\">链接</a>查看)</p>\n<iframe id=\"result-iframe\" sandbox=\"allow-scripts allow-pointer-lock allow-same-origin allow-popups allow-modals allow-forms\" src=\"https://s.codepen.io/sdras/fullembedgrid/5ca1e0c724d7d900603d8898b5551189?type=embed&amp;animations=run\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"yes\" allowfullscreen=\"true\" name=\"CodePen Preview for Custom Scroll Directive\" title=\"CodePen Preview for Custom Scroll Directive\" data-src=\"https://s.codepen.io/sdras/fullembedgrid/5ca1e0c724d7d900603d8898b5551189?type=embed&amp;animations=run\"></iframe>\n\n<p>以上都是很简单的代码来实现效果，在实际的开发中，你可以创建更高级灵活的自定义指令。</p>\n<p>在一个实际构建过程中，我会将指令代码放在<code>main.js</code>中，这个文件位于<code>src</code>目录下（如果你使用的是vue-cli这样的工具的话），这样<code>App.vue</code>及以<code>.vue</code>后缀名的文件都可以引入使用。你当然也可以使用其他的方式，但这是我认为在实现整个App过程中最灵活的方式。</p>\n<p>如果你想了解有关Vue框架的更多知识，请查看<a href=\"https://css-tricks.com/guides/vue/\" target=\"_blank\" rel=\"noopener\">guide</a>.</p>\n<p>原文：<a href=\"https://css-tricks.com/power-custom-directives-vue/\" target=\"_blank\" rel=\"noopener\">The Power of Custom Directives in Vue</a></p>\n<p>作者：<a href=\"https://css-tricks.com/author/sdrasner/\" target=\"_blank\" rel=\"noopener\">SARAH DRASNER </a></p>\n<p>译者：<a href=\"https://futu.im/author/Diandian\">Diandian</a></p>"},{"title":"移动端字体放大问题的研究","date":"2017-10-24T04:00:00.000Z","author":"AlanZhang","_content":"\n## 问题背景\n\n很多webview提供了调整页面字体大小的功能，例如手机QQ、微信、部分Android内置浏览器等。大部分浏览器调整字体只会导致字体显示大小发生改变，其他元素的大小不受影响。但对于结构稍微复杂一点的页面，字体大小的变动就足以导致页面布局乱掉，导致文本不居中、文字折行、布局混乱等问题。\n\n![调整字体大小功能](/images/2017-10-24-mobile-browser-font-size/1.png)\n\n作为前端工程师，碰到页面乱掉的情况就会觉得很无辜了，明明是你自己放大的字体，放大了却还要我来承担排版乱掉的后果，多委屈啊。很久以前，在PC端，好歹我们还可以提示用户按CTRL + 0将页面的比例调整回来，现在在移动端，却很难阻止用户缩放字体大小。\n\n然而即使再委屈，当问题来了之后还是需要处理的，谁让我们是前端工程师呢？（笑）\n\n## 原理\n\n由于并不是很清楚各个平台（浏览器）放大字体的机制，我分别咨询了我们 iOS 和 Android 的同事，得知在调整字体大小时时，2个客户端的处理方式不同。\n\n<!-- more -->\n\n### iOS\n\niOS上需要调整 webview 的字体大小时，是通过给 body 设置 `-webkit-text-size-adjust` 属性实现的：\n\n![iOS设置字体缩放代码](/images/2017-10-24-mobile-browser-font-size/2.png)\n \n既然这样，我们应该可以通过JS取到这个属性：\n\n```javascript\nvar body = document.body;\nalert(body.getAttribute('style'));\n```\n\n![iOS获取样式](/images/2017-10-24-mobile-browser-font-size/3.png)\n\n图上可以看到，当页面文字被放大时，确实多了一个`-webkit-text-size-adjust`属性。\n\n### Android\n\nAndroid通过给 webview 设置字体的缩放来完成，具体的API是`setTextZoom(int)`。\n\n![Android设置字体缩放代码](/images/2017-10-24-mobile-browser-font-size/4.png)\n\n我们通过一个demo页面来查看效果：\n\n![Android设置字体缩放代码](/images/2017-10-24-mobile-browser-font-size/5.jpg)\n\n从图中可以看到，文字确实是被放大了。例如“文字大小10px”这一段文字被放大了两倍，随文字一同被放大的还有以`em`为单位的尺寸和`line-height`。\n\n于是很自然地想到，我们是否可以取到这些属性呢？\n\n```javascript\n// 取元素的fontSize\ndocument.querySelector('.s10').style.fontSize;\n```\n\n结果很失望，取不到什么有用的信息。\n\n按iOS的方式，也取不到任何有用的样式，可见Android webview中并不是使用`-webkit-text-size-adjust`这个属性来放大文字的。\n\n一筹莫展之际，忽然想到是否应该取一下`computedStyle`？\n\n```javascript\nwindow.getComputedStyle(document.querySelector('.fs10'),null).getPropertyValue('font-size')\n```\n\n这次终于有结果了，“文字大小10px”这一段文字明明白白地被使用了`20px`的文字大小！\n\n至此，我们可以大概推测出 Android webview 放大文字的原理：在CSS解析之后，渲染之前，将所有的字体大小的值进行缩放，后面的排版和渲染都会直接使用缩放后的CSS值。\n\n## 解决方案\n\n针对iOS，调整字体大小本身只是改变`body`的css属性，因此可以通过覆盖样式来控制。\n    \n```\nbody {\n    -webkit-text-size-adjust: 100% !important;\n}\n```\n\nAndroid因为改变的是字体的大小，所以可以考虑将字体大小在设置的时候进行等比例缩小。例如，一个文字希望以`10px`来进行渲染，当webview被放大两倍时，此时`font-size`会变为`20px`。因此我们可以在取到这个放大比例之后，对原样式进行等比缩小，比如将原文字大小设置为`5px`，渲染的时候就变成了`10px`。\n\n```javascript\nvar $dom = document.querySelector('.fs10');\nvar originFontSize = 10;\nvar scaledFontSize = parseInt(window.getComputedStyle($dom, null).getPropertyValue('font-size'));\nvar scaleFactor = originFontSize / scaledFontSize;\n$dom.style.fontSize = originFontSize * scaleFactor;\n```\n\n但是这样做仍然有几个问题：\n\n1. 一次只能操作一个DOM元素，无法批量处理\n2. 需要知道DOM元素原来设置的字体大小\n\n这几个问题并不如想象中的好解决。于是另辟蹊径，看看是否有一劳永逸的办法。脑海中很快冒出一个名词——`rem`！\n\n如果我们的页面字体大小都使用`rem`进行声明，那么我们就只需要在页面加载的时候根据缩放比例计算出`html`元素的字体大小即可！详见下方代码：\n\n```javascript\n(function(){\n    var $dom = document.createElement('div');\n    $dom.style = 'font-size:10px;';\n    document.body.appendChild($dom);\n    // 计算出放大后的字体\n    var scaledFontSize = parseInt(window.getComputedStyle($dom, null).getPropertyValue('font-size'));\n    document.body.removeChild($dom);\n    // 计算原字体和放大后字体的比例\n    var scaleFactor = 10 / scaledFontSize;\n    \n    // 取html元素的字体大小\n    // 注意，这个大小也经过缩放了\n    // 所以下方计算的时候 *scaledFontSize是原来的html字体大小\n    // 再次 *scaledFontSize才是我们要设置的大小\n    var originRootFontSize = parseInt(window.getComputedStyle(document.documentElement, null).getPropertyValue('font-size'));\n    document.documentElement.style.fontSize = originRootFontSize * scaleFactor * scaleFactor + 'px';\n})();\n```\n\n因为这段代码中创建了一个元素，并放入了`document.body`中，所以不能放在`head`中运行。如果放在页尾运行的话，则有可能会产生闪烁的情况，因此最好的办法是将这段代码放在`<body>`开始的地方。\n\n> 除了在Android webview以外，以上代码在 Android 微信中实测也有效。\n\n## 其它方案\n\n### Android微信\n\n在编写本文时，通过网上一些资料，发现在Android微信中，也可以借助`WeixinJSBridge`对象来阻止字体大小调整。实测也有效。\n\n```javascript\n(function() {\n    if (typeof WeixinJSBridge == \"object\" && typeof WeixinJSBridge.invoke == \"function\") {\n        handleFontSize();\n    } else {\n        document.addEventListener(\"WeixinJSBridgeReady\", handleFontSize, false);\n    }\n    function handleFontSize() {\n        // 设置网页字体为默认大小\n        WeixinJSBridge.invoke('setFontSizeCallback', { 'fontSize' : 0 });\n        // 重写设置网页字体大小的事件\n        WeixinJSBridge.on('menu:setfont', function() {\n            WeixinJSBridge.invoke('setFontSizeCallback', { 'fontSize' : 0 });\n        });\n    }\n })();\n```\n\n### Android QQ\n\n作为用户量庞大的APP之一，QQ也提供了禁止调整字体大小的方案，android qq中可以自定义webview显示的控件，通过在url中加入指定参数即可。见[如何定制手Q的Webview](http://wiki.open.qq.com/wiki/%E5%A6%82%E4%BD%95%E5%AE%9A%E5%88%B6%E6%89%8BQ%E7%9A%84Webview).\n\n![手机QQ文档](/images/2017-10-24-mobile-browser-font-size/6.png)\n\n理论上，<http://www.futu5.com/?_wv=128>访问这个链接，功能菜单中不会出现调整字体大小的按钮。但是，但是，但是，在我实测过程中，所有的参数中，就只有【128隐藏字体项不生效】。不知道是QQ的bug还是有意为之，目前已提交反馈，但未收到回应。\n\n## 声音和思考\n\n在组内分享的时候，大家对于字体大小调整这个头疼的问题各自有不同的看法，大概有怎么几种声音：\n\n1. 从产品的角度来说，微信、QQ等客户端既然提供调整字体的功能，必然是想用它来提供更好的体验，不应该禁用。\n2. 从开发的角度来说，字体缩放之后，页面会乱掉，根本原因在于页面的适应性不够，应该从代码层面去优化。\n3. 继续从开发的角度说，虽然理论上开发应该做好适配，但是对于文字突然被放大两倍，很多时候确实心有余而力不足。如果要做好，需要花费大量的时间和精力，并且需要设计和产品同学从设计上留出一些适配空间。\n4. 既然用户选择了用大字体来浏览页面，他就应该知道这个页面是被自己放大了，需要承担页面布局乱掉的结果。\n\n作为开发者，我内心是倾向于第4种声音的，但是从产品的角度考虑，这个锅不能丢给用户。另一方面，在有限时间中，又只能从大部分人的都觉得ok的视觉体验为标准来展开开发，时间充足的情况才有可能再对大字体另做适配方面的考虑（这可能吗？）。\n\n这也许是产品、设计、开发、老板都比较能接受的结果，可以类比国内大部分网站在无障碍浏览上的工作量，不完美，但又很无奈。\n\n## 参考资料\n\n- [如何定制手Q的Webview](http://wiki.open.qq.com/wiki/%E5%A6%82%E4%BD%95%E5%AE%9A%E5%88%B6%E6%89%8BQ%E7%9A%84Webview)\n- [微信sdk](http://qydev.weixin.qq.com/wiki/index.php?title=%E5%BE%AE%E4%BF%A1JS-SDK%E6%8E%A5%E5%8F%A3#.E9.99.84.E5.BD.953-.E6.89.80.E6.9C.89JS.E6.8E.A5.E5.8F.A3.E5.88.97.E8.A1.A8)\n- [禁用微信 webview 调整字体大小](https://zhuanlan.zhihu.com/p/21574121)\n\nTooBug对本文进行了审校。\n","source":"_posts/2017-10-24-mobile-browser-font-size.md","raw":"---\ntitle: 移动端字体放大问题的研究\ndate: 2017-10-24 12:00\ncategory: 前端\ntags: [css,字体大小]\nauthor: AlanZhang\n---\n\n## 问题背景\n\n很多webview提供了调整页面字体大小的功能，例如手机QQ、微信、部分Android内置浏览器等。大部分浏览器调整字体只会导致字体显示大小发生改变，其他元素的大小不受影响。但对于结构稍微复杂一点的页面，字体大小的变动就足以导致页面布局乱掉，导致文本不居中、文字折行、布局混乱等问题。\n\n![调整字体大小功能](/images/2017-10-24-mobile-browser-font-size/1.png)\n\n作为前端工程师，碰到页面乱掉的情况就会觉得很无辜了，明明是你自己放大的字体，放大了却还要我来承担排版乱掉的后果，多委屈啊。很久以前，在PC端，好歹我们还可以提示用户按CTRL + 0将页面的比例调整回来，现在在移动端，却很难阻止用户缩放字体大小。\n\n然而即使再委屈，当问题来了之后还是需要处理的，谁让我们是前端工程师呢？（笑）\n\n## 原理\n\n由于并不是很清楚各个平台（浏览器）放大字体的机制，我分别咨询了我们 iOS 和 Android 的同事，得知在调整字体大小时时，2个客户端的处理方式不同。\n\n<!-- more -->\n\n### iOS\n\niOS上需要调整 webview 的字体大小时，是通过给 body 设置 `-webkit-text-size-adjust` 属性实现的：\n\n![iOS设置字体缩放代码](/images/2017-10-24-mobile-browser-font-size/2.png)\n \n既然这样，我们应该可以通过JS取到这个属性：\n\n```javascript\nvar body = document.body;\nalert(body.getAttribute('style'));\n```\n\n![iOS获取样式](/images/2017-10-24-mobile-browser-font-size/3.png)\n\n图上可以看到，当页面文字被放大时，确实多了一个`-webkit-text-size-adjust`属性。\n\n### Android\n\nAndroid通过给 webview 设置字体的缩放来完成，具体的API是`setTextZoom(int)`。\n\n![Android设置字体缩放代码](/images/2017-10-24-mobile-browser-font-size/4.png)\n\n我们通过一个demo页面来查看效果：\n\n![Android设置字体缩放代码](/images/2017-10-24-mobile-browser-font-size/5.jpg)\n\n从图中可以看到，文字确实是被放大了。例如“文字大小10px”这一段文字被放大了两倍，随文字一同被放大的还有以`em`为单位的尺寸和`line-height`。\n\n于是很自然地想到，我们是否可以取到这些属性呢？\n\n```javascript\n// 取元素的fontSize\ndocument.querySelector('.s10').style.fontSize;\n```\n\n结果很失望，取不到什么有用的信息。\n\n按iOS的方式，也取不到任何有用的样式，可见Android webview中并不是使用`-webkit-text-size-adjust`这个属性来放大文字的。\n\n一筹莫展之际，忽然想到是否应该取一下`computedStyle`？\n\n```javascript\nwindow.getComputedStyle(document.querySelector('.fs10'),null).getPropertyValue('font-size')\n```\n\n这次终于有结果了，“文字大小10px”这一段文字明明白白地被使用了`20px`的文字大小！\n\n至此，我们可以大概推测出 Android webview 放大文字的原理：在CSS解析之后，渲染之前，将所有的字体大小的值进行缩放，后面的排版和渲染都会直接使用缩放后的CSS值。\n\n## 解决方案\n\n针对iOS，调整字体大小本身只是改变`body`的css属性，因此可以通过覆盖样式来控制。\n    \n```\nbody {\n    -webkit-text-size-adjust: 100% !important;\n}\n```\n\nAndroid因为改变的是字体的大小，所以可以考虑将字体大小在设置的时候进行等比例缩小。例如，一个文字希望以`10px`来进行渲染，当webview被放大两倍时，此时`font-size`会变为`20px`。因此我们可以在取到这个放大比例之后，对原样式进行等比缩小，比如将原文字大小设置为`5px`，渲染的时候就变成了`10px`。\n\n```javascript\nvar $dom = document.querySelector('.fs10');\nvar originFontSize = 10;\nvar scaledFontSize = parseInt(window.getComputedStyle($dom, null).getPropertyValue('font-size'));\nvar scaleFactor = originFontSize / scaledFontSize;\n$dom.style.fontSize = originFontSize * scaleFactor;\n```\n\n但是这样做仍然有几个问题：\n\n1. 一次只能操作一个DOM元素，无法批量处理\n2. 需要知道DOM元素原来设置的字体大小\n\n这几个问题并不如想象中的好解决。于是另辟蹊径，看看是否有一劳永逸的办法。脑海中很快冒出一个名词——`rem`！\n\n如果我们的页面字体大小都使用`rem`进行声明，那么我们就只需要在页面加载的时候根据缩放比例计算出`html`元素的字体大小即可！详见下方代码：\n\n```javascript\n(function(){\n    var $dom = document.createElement('div');\n    $dom.style = 'font-size:10px;';\n    document.body.appendChild($dom);\n    // 计算出放大后的字体\n    var scaledFontSize = parseInt(window.getComputedStyle($dom, null).getPropertyValue('font-size'));\n    document.body.removeChild($dom);\n    // 计算原字体和放大后字体的比例\n    var scaleFactor = 10 / scaledFontSize;\n    \n    // 取html元素的字体大小\n    // 注意，这个大小也经过缩放了\n    // 所以下方计算的时候 *scaledFontSize是原来的html字体大小\n    // 再次 *scaledFontSize才是我们要设置的大小\n    var originRootFontSize = parseInt(window.getComputedStyle(document.documentElement, null).getPropertyValue('font-size'));\n    document.documentElement.style.fontSize = originRootFontSize * scaleFactor * scaleFactor + 'px';\n})();\n```\n\n因为这段代码中创建了一个元素，并放入了`document.body`中，所以不能放在`head`中运行。如果放在页尾运行的话，则有可能会产生闪烁的情况，因此最好的办法是将这段代码放在`<body>`开始的地方。\n\n> 除了在Android webview以外，以上代码在 Android 微信中实测也有效。\n\n## 其它方案\n\n### Android微信\n\n在编写本文时，通过网上一些资料，发现在Android微信中，也可以借助`WeixinJSBridge`对象来阻止字体大小调整。实测也有效。\n\n```javascript\n(function() {\n    if (typeof WeixinJSBridge == \"object\" && typeof WeixinJSBridge.invoke == \"function\") {\n        handleFontSize();\n    } else {\n        document.addEventListener(\"WeixinJSBridgeReady\", handleFontSize, false);\n    }\n    function handleFontSize() {\n        // 设置网页字体为默认大小\n        WeixinJSBridge.invoke('setFontSizeCallback', { 'fontSize' : 0 });\n        // 重写设置网页字体大小的事件\n        WeixinJSBridge.on('menu:setfont', function() {\n            WeixinJSBridge.invoke('setFontSizeCallback', { 'fontSize' : 0 });\n        });\n    }\n })();\n```\n\n### Android QQ\n\n作为用户量庞大的APP之一，QQ也提供了禁止调整字体大小的方案，android qq中可以自定义webview显示的控件，通过在url中加入指定参数即可。见[如何定制手Q的Webview](http://wiki.open.qq.com/wiki/%E5%A6%82%E4%BD%95%E5%AE%9A%E5%88%B6%E6%89%8BQ%E7%9A%84Webview).\n\n![手机QQ文档](/images/2017-10-24-mobile-browser-font-size/6.png)\n\n理论上，<http://www.futu5.com/?_wv=128>访问这个链接，功能菜单中不会出现调整字体大小的按钮。但是，但是，但是，在我实测过程中，所有的参数中，就只有【128隐藏字体项不生效】。不知道是QQ的bug还是有意为之，目前已提交反馈，但未收到回应。\n\n## 声音和思考\n\n在组内分享的时候，大家对于字体大小调整这个头疼的问题各自有不同的看法，大概有怎么几种声音：\n\n1. 从产品的角度来说，微信、QQ等客户端既然提供调整字体的功能，必然是想用它来提供更好的体验，不应该禁用。\n2. 从开发的角度来说，字体缩放之后，页面会乱掉，根本原因在于页面的适应性不够，应该从代码层面去优化。\n3. 继续从开发的角度说，虽然理论上开发应该做好适配，但是对于文字突然被放大两倍，很多时候确实心有余而力不足。如果要做好，需要花费大量的时间和精力，并且需要设计和产品同学从设计上留出一些适配空间。\n4. 既然用户选择了用大字体来浏览页面，他就应该知道这个页面是被自己放大了，需要承担页面布局乱掉的结果。\n\n作为开发者，我内心是倾向于第4种声音的，但是从产品的角度考虑，这个锅不能丢给用户。另一方面，在有限时间中，又只能从大部分人的都觉得ok的视觉体验为标准来展开开发，时间充足的情况才有可能再对大字体另做适配方面的考虑（这可能吗？）。\n\n这也许是产品、设计、开发、老板都比较能接受的结果，可以类比国内大部分网站在无障碍浏览上的工作量，不完美，但又很无奈。\n\n## 参考资料\n\n- [如何定制手Q的Webview](http://wiki.open.qq.com/wiki/%E5%A6%82%E4%BD%95%E5%AE%9A%E5%88%B6%E6%89%8BQ%E7%9A%84Webview)\n- [微信sdk](http://qydev.weixin.qq.com/wiki/index.php?title=%E5%BE%AE%E4%BF%A1JS-SDK%E6%8E%A5%E5%8F%A3#.E9.99.84.E5.BD.953-.E6.89.80.E6.9C.89JS.E6.8E.A5.E5.8F.A3.E5.88.97.E8.A1.A8)\n- [禁用微信 webview 调整字体大小](https://zhuanlan.zhihu.com/p/21574121)\n\nTooBug对本文进行了审校。\n","slug":"2017-10-24-mobile-browser-font-size","published":1,"updated":"2017-12-01T08:50:00.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanokniy001yjxs1vczcoevu","content":"<h2 id=\"问题背景\"><a href=\"#问题背景\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h2><p>很多webview提供了调整页面字体大小的功能，例如手机QQ、微信、部分Android内置浏览器等。大部分浏览器调整字体只会导致字体显示大小发生改变，其他元素的大小不受影响。但对于结构稍微复杂一点的页面，字体大小的变动就足以导致页面布局乱掉，导致文本不居中、文字折行、布局混乱等问题。</p>\n<p><img src=\"/images/2017-10-24-mobile-browser-font-size/1.png\" alt=\"调整字体大小功能\"></p>\n<p>作为前端工程师，碰到页面乱掉的情况就会觉得很无辜了，明明是你自己放大的字体，放大了却还要我来承担排版乱掉的后果，多委屈啊。很久以前，在PC端，好歹我们还可以提示用户按CTRL + 0将页面的比例调整回来，现在在移动端，却很难阻止用户缩放字体大小。</p>\n<p>然而即使再委屈，当问题来了之后还是需要处理的，谁让我们是前端工程师呢？（笑）</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>由于并不是很清楚各个平台（浏览器）放大字体的机制，我分别咨询了我们 iOS 和 Android 的同事，得知在调整字体大小时时，2个客户端的处理方式不同。</p>\n<a id=\"more\"></a>\n<h3 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h3><p>iOS上需要调整 webview 的字体大小时，是通过给 body 设置 <code>-webkit-text-size-adjust</code> 属性实现的：</p>\n<p><img src=\"/images/2017-10-24-mobile-browser-font-size/2.png\" alt=\"iOS设置字体缩放代码\"></p>\n<p>既然这样，我们应该可以通过JS取到这个属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body = <span class=\"built_in\">document</span>.body;</span><br><span class=\"line\">alert(body.getAttribute(<span class=\"string\">'style'</span>));</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2017-10-24-mobile-browser-font-size/3.png\" alt=\"iOS获取样式\"></p>\n<p>图上可以看到，当页面文字被放大时，确实多了一个<code>-webkit-text-size-adjust</code>属性。</p>\n<h3 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h3><p>Android通过给 webview 设置字体的缩放来完成，具体的API是<code>setTextZoom(int)</code>。</p>\n<p><img src=\"/images/2017-10-24-mobile-browser-font-size/4.png\" alt=\"Android设置字体缩放代码\"></p>\n<p>我们通过一个demo页面来查看效果：</p>\n<p><img src=\"/images/2017-10-24-mobile-browser-font-size/5.jpg\" alt=\"Android设置字体缩放代码\"></p>\n<p>从图中可以看到，文字确实是被放大了。例如“文字大小10px”这一段文字被放大了两倍，随文字一同被放大的还有以<code>em</code>为单位的尺寸和<code>line-height</code>。</p>\n<p>于是很自然地想到，我们是否可以取到这些属性呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 取元素的fontSize</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.s10'</span>).style.fontSize;</span><br></pre></td></tr></table></figure>\n<p>结果很失望，取不到什么有用的信息。</p>\n<p>按iOS的方式，也取不到任何有用的样式，可见Android webview中并不是使用<code>-webkit-text-size-adjust</code>这个属性来放大文字的。</p>\n<p>一筹莫展之际，忽然想到是否应该取一下<code>computedStyle</code>？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.getComputedStyle(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.fs10'</span>),<span class=\"literal\">null</span>).getPropertyValue(<span class=\"string\">'font-size'</span>)</span><br></pre></td></tr></table></figure>\n<p>这次终于有结果了，“文字大小10px”这一段文字明明白白地被使用了<code>20px</code>的文字大小！</p>\n<p>至此，我们可以大概推测出 Android webview 放大文字的原理：在CSS解析之后，渲染之前，将所有的字体大小的值进行缩放，后面的排版和渲染都会直接使用缩放后的CSS值。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>针对iOS，调整字体大小本身只是改变<code>body</code>的css属性，因此可以通过覆盖样式来控制。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body &#123;</span><br><span class=\"line\">    -webkit-text-size-adjust: 100% !important;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Android因为改变的是字体的大小，所以可以考虑将字体大小在设置的时候进行等比例缩小。例如，一个文字希望以<code>10px</code>来进行渲染，当webview被放大两倍时，此时<code>font-size</code>会变为<code>20px</code>。因此我们可以在取到这个放大比例之后，对原样式进行等比缩小，比如将原文字大小设置为<code>5px</code>，渲染的时候就变成了<code>10px</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $dom = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.fs10'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> originFontSize = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> scaledFontSize = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">window</span>.getComputedStyle($dom, <span class=\"literal\">null</span>).getPropertyValue(<span class=\"string\">'font-size'</span>));</span><br><span class=\"line\"><span class=\"keyword\">var</span> scaleFactor = originFontSize / scaledFontSize;</span><br><span class=\"line\">$dom.style.fontSize = originFontSize * scaleFactor;</span><br></pre></td></tr></table></figure>\n<p>但是这样做仍然有几个问题：</p>\n<ol>\n<li>一次只能操作一个DOM元素，无法批量处理</li>\n<li>需要知道DOM元素原来设置的字体大小</li>\n</ol>\n<p>这几个问题并不如想象中的好解决。于是另辟蹊径，看看是否有一劳永逸的办法。脑海中很快冒出一个名词——<code>rem</code>！</p>\n<p>如果我们的页面字体大小都使用<code>rem</code>进行声明，那么我们就只需要在页面加载的时候根据缩放比例计算出<code>html</code>元素的字体大小即可！详见下方代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $dom = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">    $dom.style = <span class=\"string\">'font-size:10px;'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild($dom);</span><br><span class=\"line\">    <span class=\"comment\">// 计算出放大后的字体</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> scaledFontSize = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">window</span>.getComputedStyle($dom, <span class=\"literal\">null</span>).getPropertyValue(<span class=\"string\">'font-size'</span>));</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.removeChild($dom);</span><br><span class=\"line\">    <span class=\"comment\">// 计算原字体和放大后字体的比例</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> scaleFactor = <span class=\"number\">10</span> / scaledFontSize;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 取html元素的字体大小</span></span><br><span class=\"line\">    <span class=\"comment\">// 注意，这个大小也经过缩放了</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以下方计算的时候 *scaledFontSize是原来的html字体大小</span></span><br><span class=\"line\">    <span class=\"comment\">// 再次 *scaledFontSize才是我们要设置的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> originRootFontSize = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">window</span>.getComputedStyle(<span class=\"built_in\">document</span>.documentElement, <span class=\"literal\">null</span>).getPropertyValue(<span class=\"string\">'font-size'</span>));</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.documentElement.style.fontSize = originRootFontSize * scaleFactor * scaleFactor + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>因为这段代码中创建了一个元素，并放入了<code>document.body</code>中，所以不能放在<code>head</code>中运行。如果放在页尾运行的话，则有可能会产生闪烁的情况，因此最好的办法是将这段代码放在<code>&lt;body&gt;</code>开始的地方。</p>\n<blockquote>\n<p>除了在Android webview以外，以上代码在 Android 微信中实测也有效。</p>\n</blockquote>\n<h2 id=\"其它方案\"><a href=\"#其它方案\" class=\"headerlink\" title=\"其它方案\"></a>其它方案</h2><h3 id=\"Android微信\"><a href=\"#Android微信\" class=\"headerlink\" title=\"Android微信\"></a>Android微信</h3><p>在编写本文时，通过网上一些资料，发现在Android微信中，也可以借助<code>WeixinJSBridge</code>对象来阻止字体大小调整。实测也有效。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> WeixinJSBridge == <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> WeixinJSBridge.invoke == <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">        handleFontSize();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"WeixinJSBridgeReady\"</span>, handleFontSize, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleFontSize</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置网页字体为默认大小</span></span><br><span class=\"line\">        WeixinJSBridge.invoke(<span class=\"string\">'setFontSizeCallback'</span>, &#123; <span class=\"string\">'fontSize'</span> : <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 重写设置网页字体大小的事件</span></span><br><span class=\"line\">        WeixinJSBridge.on(<span class=\"string\">'menu:setfont'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            WeixinJSBridge.invoke(<span class=\"string\">'setFontSizeCallback'</span>, &#123; <span class=\"string\">'fontSize'</span> : <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;)();</span><br></pre></td></tr></table></figure>\n<h3 id=\"Android-QQ\"><a href=\"#Android-QQ\" class=\"headerlink\" title=\"Android QQ\"></a>Android QQ</h3><p>作为用户量庞大的APP之一，QQ也提供了禁止调整字体大小的方案，android qq中可以自定义webview显示的控件，通过在url中加入指定参数即可。见<a href=\"http://wiki.open.qq.com/wiki/%E5%A6%82%E4%BD%95%E5%AE%9A%E5%88%B6%E6%89%8BQ%E7%9A%84Webview\" target=\"_blank\" rel=\"noopener\">如何定制手Q的Webview</a>.</p>\n<p><img src=\"/images/2017-10-24-mobile-browser-font-size/6.png\" alt=\"手机QQ文档\"></p>\n<p>理论上，<a href=\"http://www.futu5.com/?_wv=128\" target=\"_blank\" rel=\"noopener\">http://www.futu5.com/?_wv=128</a>访问这个链接，功能菜单中不会出现调整字体大小的按钮。但是，但是，但是，在我实测过程中，所有的参数中，就只有【128隐藏字体项不生效】。不知道是QQ的bug还是有意为之，目前已提交反馈，但未收到回应。</p>\n<h2 id=\"声音和思考\"><a href=\"#声音和思考\" class=\"headerlink\" title=\"声音和思考\"></a>声音和思考</h2><p>在组内分享的时候，大家对于字体大小调整这个头疼的问题各自有不同的看法，大概有怎么几种声音：</p>\n<ol>\n<li>从产品的角度来说，微信、QQ等客户端既然提供调整字体的功能，必然是想用它来提供更好的体验，不应该禁用。</li>\n<li>从开发的角度来说，字体缩放之后，页面会乱掉，根本原因在于页面的适应性不够，应该从代码层面去优化。</li>\n<li>继续从开发的角度说，虽然理论上开发应该做好适配，但是对于文字突然被放大两倍，很多时候确实心有余而力不足。如果要做好，需要花费大量的时间和精力，并且需要设计和产品同学从设计上留出一些适配空间。</li>\n<li>既然用户选择了用大字体来浏览页面，他就应该知道这个页面是被自己放大了，需要承担页面布局乱掉的结果。</li>\n</ol>\n<p>作为开发者，我内心是倾向于第4种声音的，但是从产品的角度考虑，这个锅不能丢给用户。另一方面，在有限时间中，又只能从大部分人的都觉得ok的视觉体验为标准来展开开发，时间充足的情况才有可能再对大字体另做适配方面的考虑（这可能吗？）。</p>\n<p>这也许是产品、设计、开发、老板都比较能接受的结果，可以类比国内大部分网站在无障碍浏览上的工作量，不完美，但又很无奈。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://wiki.open.qq.com/wiki/%E5%A6%82%E4%BD%95%E5%AE%9A%E5%88%B6%E6%89%8BQ%E7%9A%84Webview\" target=\"_blank\" rel=\"noopener\">如何定制手Q的Webview</a></li>\n<li><a href=\"http://qydev.weixin.qq.com/wiki/index.php?title=%E5%BE%AE%E4%BF%A1JS-SDK%E6%8E%A5%E5%8F%A3#.E9.99.84.E5.BD.953-.E6.89.80.E6.9C.89JS.E6.8E.A5.E5.8F.A3.E5.88.97.E8.A1.A8\" target=\"_blank\" rel=\"noopener\">微信sdk</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/21574121\" target=\"_blank\" rel=\"noopener\">禁用微信 webview 调整字体大小</a></li>\n</ul>\n<p>TooBug对本文进行了审校。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"问题背景\"><a href=\"#问题背景\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h2><p>很多webview提供了调整页面字体大小的功能，例如手机QQ、微信、部分Android内置浏览器等。大部分浏览器调整字体只会导致字体显示大小发生改变，其他元素的大小不受影响。但对于结构稍微复杂一点的页面，字体大小的变动就足以导致页面布局乱掉，导致文本不居中、文字折行、布局混乱等问题。</p>\n<p><img src=\"/images/2017-10-24-mobile-browser-font-size/1.png\" alt=\"调整字体大小功能\"></p>\n<p>作为前端工程师，碰到页面乱掉的情况就会觉得很无辜了，明明是你自己放大的字体，放大了却还要我来承担排版乱掉的后果，多委屈啊。很久以前，在PC端，好歹我们还可以提示用户按CTRL + 0将页面的比例调整回来，现在在移动端，却很难阻止用户缩放字体大小。</p>\n<p>然而即使再委屈，当问题来了之后还是需要处理的，谁让我们是前端工程师呢？（笑）</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>由于并不是很清楚各个平台（浏览器）放大字体的机制，我分别咨询了我们 iOS 和 Android 的同事，得知在调整字体大小时时，2个客户端的处理方式不同。</p>","more":"<h3 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h3><p>iOS上需要调整 webview 的字体大小时，是通过给 body 设置 <code>-webkit-text-size-adjust</code> 属性实现的：</p>\n<p><img src=\"/images/2017-10-24-mobile-browser-font-size/2.png\" alt=\"iOS设置字体缩放代码\"></p>\n<p>既然这样，我们应该可以通过JS取到这个属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body = <span class=\"built_in\">document</span>.body;</span><br><span class=\"line\">alert(body.getAttribute(<span class=\"string\">'style'</span>));</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2017-10-24-mobile-browser-font-size/3.png\" alt=\"iOS获取样式\"></p>\n<p>图上可以看到，当页面文字被放大时，确实多了一个<code>-webkit-text-size-adjust</code>属性。</p>\n<h3 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h3><p>Android通过给 webview 设置字体的缩放来完成，具体的API是<code>setTextZoom(int)</code>。</p>\n<p><img src=\"/images/2017-10-24-mobile-browser-font-size/4.png\" alt=\"Android设置字体缩放代码\"></p>\n<p>我们通过一个demo页面来查看效果：</p>\n<p><img src=\"/images/2017-10-24-mobile-browser-font-size/5.jpg\" alt=\"Android设置字体缩放代码\"></p>\n<p>从图中可以看到，文字确实是被放大了。例如“文字大小10px”这一段文字被放大了两倍，随文字一同被放大的还有以<code>em</code>为单位的尺寸和<code>line-height</code>。</p>\n<p>于是很自然地想到，我们是否可以取到这些属性呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 取元素的fontSize</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.s10'</span>).style.fontSize;</span><br></pre></td></tr></table></figure>\n<p>结果很失望，取不到什么有用的信息。</p>\n<p>按iOS的方式，也取不到任何有用的样式，可见Android webview中并不是使用<code>-webkit-text-size-adjust</code>这个属性来放大文字的。</p>\n<p>一筹莫展之际，忽然想到是否应该取一下<code>computedStyle</code>？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.getComputedStyle(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.fs10'</span>),<span class=\"literal\">null</span>).getPropertyValue(<span class=\"string\">'font-size'</span>)</span><br></pre></td></tr></table></figure>\n<p>这次终于有结果了，“文字大小10px”这一段文字明明白白地被使用了<code>20px</code>的文字大小！</p>\n<p>至此，我们可以大概推测出 Android webview 放大文字的原理：在CSS解析之后，渲染之前，将所有的字体大小的值进行缩放，后面的排版和渲染都会直接使用缩放后的CSS值。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>针对iOS，调整字体大小本身只是改变<code>body</code>的css属性，因此可以通过覆盖样式来控制。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body &#123;</span><br><span class=\"line\">    -webkit-text-size-adjust: 100% !important;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Android因为改变的是字体的大小，所以可以考虑将字体大小在设置的时候进行等比例缩小。例如，一个文字希望以<code>10px</code>来进行渲染，当webview被放大两倍时，此时<code>font-size</code>会变为<code>20px</code>。因此我们可以在取到这个放大比例之后，对原样式进行等比缩小，比如将原文字大小设置为<code>5px</code>，渲染的时候就变成了<code>10px</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $dom = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.fs10'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> originFontSize = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> scaledFontSize = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">window</span>.getComputedStyle($dom, <span class=\"literal\">null</span>).getPropertyValue(<span class=\"string\">'font-size'</span>));</span><br><span class=\"line\"><span class=\"keyword\">var</span> scaleFactor = originFontSize / scaledFontSize;</span><br><span class=\"line\">$dom.style.fontSize = originFontSize * scaleFactor;</span><br></pre></td></tr></table></figure>\n<p>但是这样做仍然有几个问题：</p>\n<ol>\n<li>一次只能操作一个DOM元素，无法批量处理</li>\n<li>需要知道DOM元素原来设置的字体大小</li>\n</ol>\n<p>这几个问题并不如想象中的好解决。于是另辟蹊径，看看是否有一劳永逸的办法。脑海中很快冒出一个名词——<code>rem</code>！</p>\n<p>如果我们的页面字体大小都使用<code>rem</code>进行声明，那么我们就只需要在页面加载的时候根据缩放比例计算出<code>html</code>元素的字体大小即可！详见下方代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $dom = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">    $dom.style = <span class=\"string\">'font-size:10px;'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild($dom);</span><br><span class=\"line\">    <span class=\"comment\">// 计算出放大后的字体</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> scaledFontSize = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">window</span>.getComputedStyle($dom, <span class=\"literal\">null</span>).getPropertyValue(<span class=\"string\">'font-size'</span>));</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.removeChild($dom);</span><br><span class=\"line\">    <span class=\"comment\">// 计算原字体和放大后字体的比例</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> scaleFactor = <span class=\"number\">10</span> / scaledFontSize;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 取html元素的字体大小</span></span><br><span class=\"line\">    <span class=\"comment\">// 注意，这个大小也经过缩放了</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以下方计算的时候 *scaledFontSize是原来的html字体大小</span></span><br><span class=\"line\">    <span class=\"comment\">// 再次 *scaledFontSize才是我们要设置的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> originRootFontSize = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">window</span>.getComputedStyle(<span class=\"built_in\">document</span>.documentElement, <span class=\"literal\">null</span>).getPropertyValue(<span class=\"string\">'font-size'</span>));</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.documentElement.style.fontSize = originRootFontSize * scaleFactor * scaleFactor + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>因为这段代码中创建了一个元素，并放入了<code>document.body</code>中，所以不能放在<code>head</code>中运行。如果放在页尾运行的话，则有可能会产生闪烁的情况，因此最好的办法是将这段代码放在<code>&lt;body&gt;</code>开始的地方。</p>\n<blockquote>\n<p>除了在Android webview以外，以上代码在 Android 微信中实测也有效。</p>\n</blockquote>\n<h2 id=\"其它方案\"><a href=\"#其它方案\" class=\"headerlink\" title=\"其它方案\"></a>其它方案</h2><h3 id=\"Android微信\"><a href=\"#Android微信\" class=\"headerlink\" title=\"Android微信\"></a>Android微信</h3><p>在编写本文时，通过网上一些资料，发现在Android微信中，也可以借助<code>WeixinJSBridge</code>对象来阻止字体大小调整。实测也有效。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> WeixinJSBridge == <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> WeixinJSBridge.invoke == <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">        handleFontSize();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"WeixinJSBridgeReady\"</span>, handleFontSize, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleFontSize</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置网页字体为默认大小</span></span><br><span class=\"line\">        WeixinJSBridge.invoke(<span class=\"string\">'setFontSizeCallback'</span>, &#123; <span class=\"string\">'fontSize'</span> : <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 重写设置网页字体大小的事件</span></span><br><span class=\"line\">        WeixinJSBridge.on(<span class=\"string\">'menu:setfont'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            WeixinJSBridge.invoke(<span class=\"string\">'setFontSizeCallback'</span>, &#123; <span class=\"string\">'fontSize'</span> : <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;)();</span><br></pre></td></tr></table></figure>\n<h3 id=\"Android-QQ\"><a href=\"#Android-QQ\" class=\"headerlink\" title=\"Android QQ\"></a>Android QQ</h3><p>作为用户量庞大的APP之一，QQ也提供了禁止调整字体大小的方案，android qq中可以自定义webview显示的控件，通过在url中加入指定参数即可。见<a href=\"http://wiki.open.qq.com/wiki/%E5%A6%82%E4%BD%95%E5%AE%9A%E5%88%B6%E6%89%8BQ%E7%9A%84Webview\" target=\"_blank\" rel=\"noopener\">如何定制手Q的Webview</a>.</p>\n<p><img src=\"/images/2017-10-24-mobile-browser-font-size/6.png\" alt=\"手机QQ文档\"></p>\n<p>理论上，<a href=\"http://www.futu5.com/?_wv=128\" target=\"_blank\" rel=\"noopener\">http://www.futu5.com/?_wv=128</a>访问这个链接，功能菜单中不会出现调整字体大小的按钮。但是，但是，但是，在我实测过程中，所有的参数中，就只有【128隐藏字体项不生效】。不知道是QQ的bug还是有意为之，目前已提交反馈，但未收到回应。</p>\n<h2 id=\"声音和思考\"><a href=\"#声音和思考\" class=\"headerlink\" title=\"声音和思考\"></a>声音和思考</h2><p>在组内分享的时候，大家对于字体大小调整这个头疼的问题各自有不同的看法，大概有怎么几种声音：</p>\n<ol>\n<li>从产品的角度来说，微信、QQ等客户端既然提供调整字体的功能，必然是想用它来提供更好的体验，不应该禁用。</li>\n<li>从开发的角度来说，字体缩放之后，页面会乱掉，根本原因在于页面的适应性不够，应该从代码层面去优化。</li>\n<li>继续从开发的角度说，虽然理论上开发应该做好适配，但是对于文字突然被放大两倍，很多时候确实心有余而力不足。如果要做好，需要花费大量的时间和精力，并且需要设计和产品同学从设计上留出一些适配空间。</li>\n<li>既然用户选择了用大字体来浏览页面，他就应该知道这个页面是被自己放大了，需要承担页面布局乱掉的结果。</li>\n</ol>\n<p>作为开发者，我内心是倾向于第4种声音的，但是从产品的角度考虑，这个锅不能丢给用户。另一方面，在有限时间中，又只能从大部分人的都觉得ok的视觉体验为标准来展开开发，时间充足的情况才有可能再对大字体另做适配方面的考虑（这可能吗？）。</p>\n<p>这也许是产品、设计、开发、老板都比较能接受的结果，可以类比国内大部分网站在无障碍浏览上的工作量，不完美，但又很无奈。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://wiki.open.qq.com/wiki/%E5%A6%82%E4%BD%95%E5%AE%9A%E5%88%B6%E6%89%8BQ%E7%9A%84Webview\" target=\"_blank\" rel=\"noopener\">如何定制手Q的Webview</a></li>\n<li><a href=\"http://qydev.weixin.qq.com/wiki/index.php?title=%E5%BE%AE%E4%BF%A1JS-SDK%E6%8E%A5%E5%8F%A3#.E9.99.84.E5.BD.953-.E6.89.80.E6.9C.89JS.E6.8E.A5.E5.8F.A3.E5.88.97.E8.A1.A8\" target=\"_blank\" rel=\"noopener\">微信sdk</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/21574121\" target=\"_blank\" rel=\"noopener\">禁用微信 webview 调整字体大小</a></li>\n</ul>\n<p>TooBug对本文进行了审校。</p>"},{"title":"浮点数计算引发的血泪史——以此为戒","date":"2017-11-30T13:00:00.000Z","author":"Jin","_content":"\n最近遇到很头疼的一件事，比较2个浮点数的大小，可能想想应该很简单。不就一行代码的事吗？但是也就是因为一行代码引发了不可想象的后果。\n\n证券业务中会有新股认购这个模块，提供给客户进行认购即将上市的股票。新股认购中最主要的普通认购分为现金认购和融资认购。遇到的问题就出在融资认购上。\n\n融资认购的意思就是：认购股票总金额 = 一部分现金 + 一部分融资（说白了就是贷款）。\n\n来看问题：\n\n![float_error](/images/2017-11-30-javascript-float-fault/1130_07.jpg)\n\n上面本来融资认购200股股票总金额为11110.85港币，其中使用现金3044.78港币，使用融资8066.07港币。\n\n正常情况应该是正确的。但是程序却提示购买力不足。这就有问题了。\n\n> 并不是说上面的3个数相减不相等，而是可能是背后的其它浮点数计算逻辑导致。\n\n**这问题背后的根源就是JavaScript浮点数相减。**\n\n<!-- more -->\n\n实际的开发中，难免会进行浮点数进行计算和判断大小。然后通过条件`if`语句执行相关的操作。\n\n举个栗子，一个简单的比较2个浮点数的大小：\n\n```js\nfunction testAB(){\n  let a = 34.16;\n  let b = 34.16;\n\n  if( a === b ){\n    return console.log('a === b');\n  }\n  return console.log('a !== b');\n}\ntestAB();\n```\n\n上面的一直会执行`if`语句里面的console，输出`a === b`，这是确信无疑的。\n\n那下面这个，还能拍着胸脯说是相等的吗？\n\n```js\nfunction testAB(){\n  let a = 34.17;\n  let b = 34.16;\n\n  if( (a - 0.01) === b ){\n    return console.log('a === b');\n  }\n  return console.log('a !== b');\n}\ntestAB();\n```\n\n答案很显然，这里会输出`a !== b`。\n\n![float_error](/images/2017-11-30-javascript-float-fault/1130_02.jpg)\n\n## 为什么 34.17-0.01 !== 34.16？\n有时候就是这样，所想的和真正看到的完全是不一样的。难道JavaScript的数学是体育老师教的吗？然而并不是。\n\n问题还得从JavaScript语言本身找：\n\n* 第一，因为十进制浮点数在计算的时候都会被转换成二进制，但由于浮点数用二进制表达时是无穷的。所以2个无穷的数相加，得到的数也是无穷的。\n* 第二，IEEE 754标准的64位双精度浮点数的小数部分最多支持53位二进制位。意味着2个浮点数相加的结果只会保留53位二进制位，53位后面的都会被切掉。\n\n\n由于上面的2个原因，最终导致计算出来的结果被转换成十进制数的时候，其实是一个近似值（因为浮点数二进制53位以后的部分都被切掉了）。\n\n所以：\n\n```js\n34.17 - 0.01 !== 34.16;\n0.1 + 0.2 !== 0.3;\n```\n\n详细解释可查看 [这篇文章](http://www.css88.com/archives/7340)。\n\n\n## 解决浮点数问题\n问题知道了，现在要做的是正确的解决问题。\n\n\n首先想到的是将计算逻辑移到`if`语句之外，这看起里会和第一个正确的比较很类似。\n\n```js\nfunction testAB(){\n  let a = 34.17;\n  a = a - 0.01;\n  let b = 34.16;\n\n  if( a === b ){\n    return console.log('a === b');\n  }\n  return console.log('a !== b');\n}\ntestAB();\n```\n\n现实是残酷的，这是行不通的。这只能证明一点，精度的计算和位置无关。也就是说，与`a - 0.01` 表达式放置的位置无关。\n\n### 【方案1】toFixed方法\n\n这里考虑到只保留2位小数。所以使用`toFixed(2)`方法，该方法在必要时会进行四舍六入，然后转成字符串。调用完`toFixed`方法后，最后再将字符串转为Number类型（JavaScript里面浮点数也算Number类型）再比较。\n\n> 注意：这里发现`toFixed`并不一定都会四舍五入。\n\n![toFixed_error](/images/2017-11-30-javascript-float-fault/1130_03.jpg)\n\n```js\nfunction testAB(){\n  let a = 34.17;\n  a = a - 0.01;\n  let b = 34.16;\n\n  if( +(a.toFixed(2)) === b ){\n    return console.log('a === b');\n  }\n  return console.log('a !== b');\n}\ntestAB();\n```\n\n这确实得到了一正确结果。但是，说实话我对使用`toFixed`这个并不赞同。\n\n\n#### 题外话\n\n这里其实，还有一出戏。是这样的，一般数据库不会保存浮点数。都会把浮点数转换成整数保存。\n\n例如这个价格`200.67`这个值可能数据库会保存为`200670`。\n\n假如按上面的`toFixed(2)`方法取两位小数然后`*1000`进行保存，会得到正确的结果。\n\n```js\nlet price = 200.67;\nprice = +(price.toFixed(2)) * 1000;\n```\n\n但是，凡是总有例外。\n\n有图有真相：\n\n![toFixed](/images/2017-11-30-javascript-float-fault/1130_01.jpg)\n\n从此，脑瓜子一万头羊驼跑过。。。。。\n\n### 【方案二】 Number.EPSILON\n表示1和大于1的最小值（可表示为 Number）的差值。`Number.EPSILON`实际上是JavaScript能够表示的最小精度。误差如果小于这个值，就可以认为已经没有意义了，即不存在误差了。\n\n那就试试呗。\n\n这里 `Number.EPSILON = 2.220446049250313e-16`\n\n```js\nfunction testAB(){\n  let a = 34.17;\n  let b = 34.16;\n\n  if( a - 0.01 - b < Number.EPSILON ){\n    return console.log('a === b');\n  }\n  return console.log('a !== b');\n}\ntestAB();\n```\n\n发现输出的是`a !=== b`。不甘心调换位置试试。\n\n```js\nfunction testAB(){\n  let a = 34.17;\n  let b = 34.16;\n\n  if( b - (a - 0.01) < Number.EPSILON ){\n    return console.log('a === b');\n  }\n  return console.log('a !== b');\n}\ntestAB();\n```\n\n发现输出`a === b`。两种截然不同的结果。\n\n![EPSILON_1](/images/2017-11-30-javascript-float-fault/1130_04.jpg)\n![EPSILON_2](/images/2017-11-30-javascript-float-fault/1130_05.jpg)\n![EPSILON_3](/images/2017-11-30-javascript-float-fault/1130_06.jpg)\n\n\n结果1：`7.105427357601002e-15` 大于 `2.220446049250313e-16`。输出`a !== b`。\n\n结果2：`-7.105427357601002e-15` 小于 `2.220446049250313e-16`。输出`a === b`。\n\n看来还是还是精度不够。只能作罢。因为如果精度够，则可以使用`Math.abs`取整进行比较。\n\n### 【方案三】Math.round函数\n这个方法是会对浮点数进行四舍五入，保存为整数进行比较。对于保留2位小数的浮点数。只需要`*100`然后取整比较就可以。\n\n```js\nfunction testAB(){\n  let a = 34.17;\n  a = a - 0.01;\n  let b = 34.16;\n\n  if( Math.round(a * 100)  === Math.round(b * 100) ){\n    return console.log('a === b');\n  }\n  return console.log('a !== b');\n}\ntestAB();\n```\n\n可能会产生误解，例如存在的问题就是`Math.round(23.562 * 100) > Math.round(23.56)`，这显然是错误的。\n\n所以这里的前提条件就是必须保证比较的浮点数的位数要一样。\n\n依此类推，3位小数的可以`*1000`。\n\n推荐使用`Math.round`。\n\n## 总结\n切莫眼高手低，马失前蹄。\n\n\n作者：[Jin](https://github.com/Yi-love)","source":"_posts/2017-11-30-javascript-float-fault.md","raw":"---\ntitle: 浮点数计算引发的血泪史——以此为戒\ndate: 2017-11-30 21:00\ncategory: JavaScript\ntags: [number,float,JavaScript]\nauthor: Jin\n---\n\n最近遇到很头疼的一件事，比较2个浮点数的大小，可能想想应该很简单。不就一行代码的事吗？但是也就是因为一行代码引发了不可想象的后果。\n\n证券业务中会有新股认购这个模块，提供给客户进行认购即将上市的股票。新股认购中最主要的普通认购分为现金认购和融资认购。遇到的问题就出在融资认购上。\n\n融资认购的意思就是：认购股票总金额 = 一部分现金 + 一部分融资（说白了就是贷款）。\n\n来看问题：\n\n![float_error](/images/2017-11-30-javascript-float-fault/1130_07.jpg)\n\n上面本来融资认购200股股票总金额为11110.85港币，其中使用现金3044.78港币，使用融资8066.07港币。\n\n正常情况应该是正确的。但是程序却提示购买力不足。这就有问题了。\n\n> 并不是说上面的3个数相减不相等，而是可能是背后的其它浮点数计算逻辑导致。\n\n**这问题背后的根源就是JavaScript浮点数相减。**\n\n<!-- more -->\n\n实际的开发中，难免会进行浮点数进行计算和判断大小。然后通过条件`if`语句执行相关的操作。\n\n举个栗子，一个简单的比较2个浮点数的大小：\n\n```js\nfunction testAB(){\n  let a = 34.16;\n  let b = 34.16;\n\n  if( a === b ){\n    return console.log('a === b');\n  }\n  return console.log('a !== b');\n}\ntestAB();\n```\n\n上面的一直会执行`if`语句里面的console，输出`a === b`，这是确信无疑的。\n\n那下面这个，还能拍着胸脯说是相等的吗？\n\n```js\nfunction testAB(){\n  let a = 34.17;\n  let b = 34.16;\n\n  if( (a - 0.01) === b ){\n    return console.log('a === b');\n  }\n  return console.log('a !== b');\n}\ntestAB();\n```\n\n答案很显然，这里会输出`a !== b`。\n\n![float_error](/images/2017-11-30-javascript-float-fault/1130_02.jpg)\n\n## 为什么 34.17-0.01 !== 34.16？\n有时候就是这样，所想的和真正看到的完全是不一样的。难道JavaScript的数学是体育老师教的吗？然而并不是。\n\n问题还得从JavaScript语言本身找：\n\n* 第一，因为十进制浮点数在计算的时候都会被转换成二进制，但由于浮点数用二进制表达时是无穷的。所以2个无穷的数相加，得到的数也是无穷的。\n* 第二，IEEE 754标准的64位双精度浮点数的小数部分最多支持53位二进制位。意味着2个浮点数相加的结果只会保留53位二进制位，53位后面的都会被切掉。\n\n\n由于上面的2个原因，最终导致计算出来的结果被转换成十进制数的时候，其实是一个近似值（因为浮点数二进制53位以后的部分都被切掉了）。\n\n所以：\n\n```js\n34.17 - 0.01 !== 34.16;\n0.1 + 0.2 !== 0.3;\n```\n\n详细解释可查看 [这篇文章](http://www.css88.com/archives/7340)。\n\n\n## 解决浮点数问题\n问题知道了，现在要做的是正确的解决问题。\n\n\n首先想到的是将计算逻辑移到`if`语句之外，这看起里会和第一个正确的比较很类似。\n\n```js\nfunction testAB(){\n  let a = 34.17;\n  a = a - 0.01;\n  let b = 34.16;\n\n  if( a === b ){\n    return console.log('a === b');\n  }\n  return console.log('a !== b');\n}\ntestAB();\n```\n\n现实是残酷的，这是行不通的。这只能证明一点，精度的计算和位置无关。也就是说，与`a - 0.01` 表达式放置的位置无关。\n\n### 【方案1】toFixed方法\n\n这里考虑到只保留2位小数。所以使用`toFixed(2)`方法，该方法在必要时会进行四舍六入，然后转成字符串。调用完`toFixed`方法后，最后再将字符串转为Number类型（JavaScript里面浮点数也算Number类型）再比较。\n\n> 注意：这里发现`toFixed`并不一定都会四舍五入。\n\n![toFixed_error](/images/2017-11-30-javascript-float-fault/1130_03.jpg)\n\n```js\nfunction testAB(){\n  let a = 34.17;\n  a = a - 0.01;\n  let b = 34.16;\n\n  if( +(a.toFixed(2)) === b ){\n    return console.log('a === b');\n  }\n  return console.log('a !== b');\n}\ntestAB();\n```\n\n这确实得到了一正确结果。但是，说实话我对使用`toFixed`这个并不赞同。\n\n\n#### 题外话\n\n这里其实，还有一出戏。是这样的，一般数据库不会保存浮点数。都会把浮点数转换成整数保存。\n\n例如这个价格`200.67`这个值可能数据库会保存为`200670`。\n\n假如按上面的`toFixed(2)`方法取两位小数然后`*1000`进行保存，会得到正确的结果。\n\n```js\nlet price = 200.67;\nprice = +(price.toFixed(2)) * 1000;\n```\n\n但是，凡是总有例外。\n\n有图有真相：\n\n![toFixed](/images/2017-11-30-javascript-float-fault/1130_01.jpg)\n\n从此，脑瓜子一万头羊驼跑过。。。。。\n\n### 【方案二】 Number.EPSILON\n表示1和大于1的最小值（可表示为 Number）的差值。`Number.EPSILON`实际上是JavaScript能够表示的最小精度。误差如果小于这个值，就可以认为已经没有意义了，即不存在误差了。\n\n那就试试呗。\n\n这里 `Number.EPSILON = 2.220446049250313e-16`\n\n```js\nfunction testAB(){\n  let a = 34.17;\n  let b = 34.16;\n\n  if( a - 0.01 - b < Number.EPSILON ){\n    return console.log('a === b');\n  }\n  return console.log('a !== b');\n}\ntestAB();\n```\n\n发现输出的是`a !=== b`。不甘心调换位置试试。\n\n```js\nfunction testAB(){\n  let a = 34.17;\n  let b = 34.16;\n\n  if( b - (a - 0.01) < Number.EPSILON ){\n    return console.log('a === b');\n  }\n  return console.log('a !== b');\n}\ntestAB();\n```\n\n发现输出`a === b`。两种截然不同的结果。\n\n![EPSILON_1](/images/2017-11-30-javascript-float-fault/1130_04.jpg)\n![EPSILON_2](/images/2017-11-30-javascript-float-fault/1130_05.jpg)\n![EPSILON_3](/images/2017-11-30-javascript-float-fault/1130_06.jpg)\n\n\n结果1：`7.105427357601002e-15` 大于 `2.220446049250313e-16`。输出`a !== b`。\n\n结果2：`-7.105427357601002e-15` 小于 `2.220446049250313e-16`。输出`a === b`。\n\n看来还是还是精度不够。只能作罢。因为如果精度够，则可以使用`Math.abs`取整进行比较。\n\n### 【方案三】Math.round函数\n这个方法是会对浮点数进行四舍五入，保存为整数进行比较。对于保留2位小数的浮点数。只需要`*100`然后取整比较就可以。\n\n```js\nfunction testAB(){\n  let a = 34.17;\n  a = a - 0.01;\n  let b = 34.16;\n\n  if( Math.round(a * 100)  === Math.round(b * 100) ){\n    return console.log('a === b');\n  }\n  return console.log('a !== b');\n}\ntestAB();\n```\n\n可能会产生误解，例如存在的问题就是`Math.round(23.562 * 100) > Math.round(23.56)`，这显然是错误的。\n\n所以这里的前提条件就是必须保证比较的浮点数的位数要一样。\n\n依此类推，3位小数的可以`*1000`。\n\n推荐使用`Math.round`。\n\n## 总结\n切莫眼高手低，马失前蹄。\n\n\n作者：[Jin](https://github.com/Yi-love)","slug":"2017-11-30-javascript-float-fault","published":1,"updated":"2017-12-01T09:40:13.576Z","_id":"cjanoknj20022jxs117tvgvou","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近遇到很头疼的一件事，比较2个浮点数的大小，可能想想应该很简单。不就一行代码的事吗？但是也就是因为一行代码引发了不可想象的后果。</p>\n<p>证券业务中会有新股认购这个模块，提供给客户进行认购即将上市的股票。新股认购中最主要的普通认购分为现金认购和融资认购。遇到的问题就出在融资认购上。</p>\n<p>融资认购的意思就是：认购股票总金额 = 一部分现金 + 一部分融资（说白了就是贷款）。</p>\n<p>来看问题：</p>\n<p><img src=\"/images/2017-11-30-javascript-float-fault/1130_07.jpg\" alt=\"float_error\"></p>\n<p>上面本来融资认购200股股票总金额为11110.85港币，其中使用现金3044.78港币，使用融资8066.07港币。</p>\n<p>正常情况应该是正确的。但是程序却提示购买力不足。这就有问题了。</p>\n<blockquote>\n<p>并不是说上面的3个数相减不相等，而是可能是背后的其它浮点数计算逻辑导致。</p>\n</blockquote>\n<p><strong>这问题背后的根源就是JavaScript浮点数相减。</strong></p>\n<a id=\"more\"></a>\n<p>实际的开发中，难免会进行浮点数进行计算和判断大小。然后通过条件<code>if</code>语句执行相关的操作。</p>\n<p>举个栗子，一个简单的比较2个浮点数的大小：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testAB</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">34.16</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">34.16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>( a === b )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a === b'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a !== b'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">testAB();</span><br></pre></td></tr></table></figure>\n<p>上面的一直会执行<code>if</code>语句里面的console，输出<code>a === b</code>，这是确信无疑的。</p>\n<p>那下面这个，还能拍着胸脯说是相等的吗？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testAB</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">34.17</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">34.16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>( (a - <span class=\"number\">0.01</span>) === b )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a === b'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a !== b'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">testAB();</span><br></pre></td></tr></table></figure>\n<p>答案很显然，这里会输出<code>a !== b</code>。</p>\n<p><img src=\"/images/2017-11-30-javascript-float-fault/1130_02.jpg\" alt=\"float_error\"></p>\n<h2 id=\"为什么-34-17-0-01-34-16？\"><a href=\"#为什么-34-17-0-01-34-16？\" class=\"headerlink\" title=\"为什么 34.17-0.01 !== 34.16？\"></a>为什么 34.17-0.01 !== 34.16？</h2><p>有时候就是这样，所想的和真正看到的完全是不一样的。难道JavaScript的数学是体育老师教的吗？然而并不是。</p>\n<p>问题还得从JavaScript语言本身找：</p>\n<ul>\n<li>第一，因为十进制浮点数在计算的时候都会被转换成二进制，但由于浮点数用二进制表达时是无穷的。所以2个无穷的数相加，得到的数也是无穷的。</li>\n<li>第二，IEEE 754标准的64位双精度浮点数的小数部分最多支持53位二进制位。意味着2个浮点数相加的结果只会保留53位二进制位，53位后面的都会被切掉。</li>\n</ul>\n<p>由于上面的2个原因，最终导致计算出来的结果被转换成十进制数的时候，其实是一个近似值（因为浮点数二进制53位以后的部分都被切掉了）。</p>\n<p>所以：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">34.17</span> - <span class=\"number\">0.01</span> !== <span class=\"number\">34.16</span>;</span><br><span class=\"line\"><span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> !== <span class=\"number\">0.3</span>;</span><br></pre></td></tr></table></figure>\n<p>详细解释可查看 <a href=\"http://www.css88.com/archives/7340\" target=\"_blank\" rel=\"noopener\">这篇文章</a>。</p>\n<h2 id=\"解决浮点数问题\"><a href=\"#解决浮点数问题\" class=\"headerlink\" title=\"解决浮点数问题\"></a>解决浮点数问题</h2><p>问题知道了，现在要做的是正确的解决问题。</p>\n<p>首先想到的是将计算逻辑移到<code>if</code>语句之外，这看起里会和第一个正确的比较很类似。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testAB</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">34.17</span>;</span><br><span class=\"line\">  a = a - <span class=\"number\">0.01</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">34.16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>( a === b )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a === b'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a !== b'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">testAB();</span><br></pre></td></tr></table></figure>\n<p>现实是残酷的，这是行不通的。这只能证明一点，精度的计算和位置无关。也就是说，与<code>a - 0.01</code> 表达式放置的位置无关。</p>\n<h3 id=\"【方案1】toFixed方法\"><a href=\"#【方案1】toFixed方法\" class=\"headerlink\" title=\"【方案1】toFixed方法\"></a>【方案1】toFixed方法</h3><p>这里考虑到只保留2位小数。所以使用<code>toFixed(2)</code>方法，该方法在必要时会进行四舍六入，然后转成字符串。调用完<code>toFixed</code>方法后，最后再将字符串转为Number类型（JavaScript里面浮点数也算Number类型）再比较。</p>\n<blockquote>\n<p>注意：这里发现<code>toFixed</code>并不一定都会四舍五入。</p>\n</blockquote>\n<p><img src=\"/images/2017-11-30-javascript-float-fault/1130_03.jpg\" alt=\"toFixed_error\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testAB</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">34.17</span>;</span><br><span class=\"line\">  a = a - <span class=\"number\">0.01</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">34.16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>( +(a.toFixed(<span class=\"number\">2</span>)) === b )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a === b'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a !== b'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">testAB();</span><br></pre></td></tr></table></figure>\n<p>这确实得到了一正确结果。但是，说实话我对使用<code>toFixed</code>这个并不赞同。</p>\n<h4 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h4><p>这里其实，还有一出戏。是这样的，一般数据库不会保存浮点数。都会把浮点数转换成整数保存。</p>\n<p>例如这个价格<code>200.67</code>这个值可能数据库会保存为<code>200670</code>。</p>\n<p>假如按上面的<code>toFixed(2)</code>方法取两位小数然后<code>*1000</code>进行保存，会得到正确的结果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> price = <span class=\"number\">200.67</span>;</span><br><span class=\"line\">price = +(price.toFixed(<span class=\"number\">2</span>)) * <span class=\"number\">1000</span>;</span><br></pre></td></tr></table></figure>\n<p>但是，凡是总有例外。</p>\n<p>有图有真相：</p>\n<p><img src=\"/images/2017-11-30-javascript-float-fault/1130_01.jpg\" alt=\"toFixed\"></p>\n<p>从此，脑瓜子一万头羊驼跑过。。。。。</p>\n<h3 id=\"【方案二】-Number-EPSILON\"><a href=\"#【方案二】-Number-EPSILON\" class=\"headerlink\" title=\"【方案二】 Number.EPSILON\"></a>【方案二】 Number.EPSILON</h3><p>表示1和大于1的最小值（可表示为 Number）的差值。<code>Number.EPSILON</code>实际上是JavaScript能够表示的最小精度。误差如果小于这个值，就可以认为已经没有意义了，即不存在误差了。</p>\n<p>那就试试呗。</p>\n<p>这里 <code>Number.EPSILON = 2.220446049250313e-16</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testAB</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">34.17</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">34.16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>( a - <span class=\"number\">0.01</span> - b &lt; <span class=\"built_in\">Number</span>.EPSILON )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a === b'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a !== b'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">testAB();</span><br></pre></td></tr></table></figure>\n<p>发现输出的是<code>a !=== b</code>。不甘心调换位置试试。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testAB</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">34.17</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">34.16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>( b - (a - <span class=\"number\">0.01</span>) &lt; <span class=\"built_in\">Number</span>.EPSILON )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a === b'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a !== b'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">testAB();</span><br></pre></td></tr></table></figure>\n<p>发现输出<code>a === b</code>。两种截然不同的结果。</p>\n<p><img src=\"/images/2017-11-30-javascript-float-fault/1130_04.jpg\" alt=\"EPSILON_1\"><br><img src=\"/images/2017-11-30-javascript-float-fault/1130_05.jpg\" alt=\"EPSILON_2\"><br><img src=\"/images/2017-11-30-javascript-float-fault/1130_06.jpg\" alt=\"EPSILON_3\"></p>\n<p>结果1：<code>7.105427357601002e-15</code> 大于 <code>2.220446049250313e-16</code>。输出<code>a !== b</code>。</p>\n<p>结果2：<code>-7.105427357601002e-15</code> 小于 <code>2.220446049250313e-16</code>。输出<code>a === b</code>。</p>\n<p>看来还是还是精度不够。只能作罢。因为如果精度够，则可以使用<code>Math.abs</code>取整进行比较。</p>\n<h3 id=\"【方案三】Math-round函数\"><a href=\"#【方案三】Math-round函数\" class=\"headerlink\" title=\"【方案三】Math.round函数\"></a>【方案三】Math.round函数</h3><p>这个方法是会对浮点数进行四舍五入，保存为整数进行比较。对于保留2位小数的浮点数。只需要<code>*100</code>然后取整比较就可以。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testAB</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">34.17</span>;</span><br><span class=\"line\">  a = a - <span class=\"number\">0.01</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">34.16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>( <span class=\"built_in\">Math</span>.round(a * <span class=\"number\">100</span>)  === <span class=\"built_in\">Math</span>.round(b * <span class=\"number\">100</span>) )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a === b'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a !== b'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">testAB();</span><br></pre></td></tr></table></figure>\n<p>可能会产生误解，例如存在的问题就是<code>Math.round(23.562 * 100) &gt; Math.round(23.56)</code>，这显然是错误的。</p>\n<p>所以这里的前提条件就是必须保证比较的浮点数的位数要一样。</p>\n<p>依此类推，3位小数的可以<code>*1000</code>。</p>\n<p>推荐使用<code>Math.round</code>。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>切莫眼高手低，马失前蹄。</p>\n<p>作者：<a href=\"https://github.com/Yi-love\" target=\"_blank\" rel=\"noopener\">Jin</a></p>\n","site":{"data":{}},"excerpt":"<p>最近遇到很头疼的一件事，比较2个浮点数的大小，可能想想应该很简单。不就一行代码的事吗？但是也就是因为一行代码引发了不可想象的后果。</p>\n<p>证券业务中会有新股认购这个模块，提供给客户进行认购即将上市的股票。新股认购中最主要的普通认购分为现金认购和融资认购。遇到的问题就出在融资认购上。</p>\n<p>融资认购的意思就是：认购股票总金额 = 一部分现金 + 一部分融资（说白了就是贷款）。</p>\n<p>来看问题：</p>\n<p><img src=\"/images/2017-11-30-javascript-float-fault/1130_07.jpg\" alt=\"float_error\"></p>\n<p>上面本来融资认购200股股票总金额为11110.85港币，其中使用现金3044.78港币，使用融资8066.07港币。</p>\n<p>正常情况应该是正确的。但是程序却提示购买力不足。这就有问题了。</p>\n<blockquote>\n<p>并不是说上面的3个数相减不相等，而是可能是背后的其它浮点数计算逻辑导致。</p>\n</blockquote>\n<p><strong>这问题背后的根源就是JavaScript浮点数相减。</strong></p>","more":"<p>实际的开发中，难免会进行浮点数进行计算和判断大小。然后通过条件<code>if</code>语句执行相关的操作。</p>\n<p>举个栗子，一个简单的比较2个浮点数的大小：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testAB</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">34.16</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">34.16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>( a === b )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a === b'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a !== b'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">testAB();</span><br></pre></td></tr></table></figure>\n<p>上面的一直会执行<code>if</code>语句里面的console，输出<code>a === b</code>，这是确信无疑的。</p>\n<p>那下面这个，还能拍着胸脯说是相等的吗？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testAB</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">34.17</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">34.16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>( (a - <span class=\"number\">0.01</span>) === b )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a === b'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a !== b'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">testAB();</span><br></pre></td></tr></table></figure>\n<p>答案很显然，这里会输出<code>a !== b</code>。</p>\n<p><img src=\"/images/2017-11-30-javascript-float-fault/1130_02.jpg\" alt=\"float_error\"></p>\n<h2 id=\"为什么-34-17-0-01-34-16？\"><a href=\"#为什么-34-17-0-01-34-16？\" class=\"headerlink\" title=\"为什么 34.17-0.01 !== 34.16？\"></a>为什么 34.17-0.01 !== 34.16？</h2><p>有时候就是这样，所想的和真正看到的完全是不一样的。难道JavaScript的数学是体育老师教的吗？然而并不是。</p>\n<p>问题还得从JavaScript语言本身找：</p>\n<ul>\n<li>第一，因为十进制浮点数在计算的时候都会被转换成二进制，但由于浮点数用二进制表达时是无穷的。所以2个无穷的数相加，得到的数也是无穷的。</li>\n<li>第二，IEEE 754标准的64位双精度浮点数的小数部分最多支持53位二进制位。意味着2个浮点数相加的结果只会保留53位二进制位，53位后面的都会被切掉。</li>\n</ul>\n<p>由于上面的2个原因，最终导致计算出来的结果被转换成十进制数的时候，其实是一个近似值（因为浮点数二进制53位以后的部分都被切掉了）。</p>\n<p>所以：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">34.17</span> - <span class=\"number\">0.01</span> !== <span class=\"number\">34.16</span>;</span><br><span class=\"line\"><span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> !== <span class=\"number\">0.3</span>;</span><br></pre></td></tr></table></figure>\n<p>详细解释可查看 <a href=\"http://www.css88.com/archives/7340\" target=\"_blank\" rel=\"noopener\">这篇文章</a>。</p>\n<h2 id=\"解决浮点数问题\"><a href=\"#解决浮点数问题\" class=\"headerlink\" title=\"解决浮点数问题\"></a>解决浮点数问题</h2><p>问题知道了，现在要做的是正确的解决问题。</p>\n<p>首先想到的是将计算逻辑移到<code>if</code>语句之外，这看起里会和第一个正确的比较很类似。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testAB</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">34.17</span>;</span><br><span class=\"line\">  a = a - <span class=\"number\">0.01</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">34.16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>( a === b )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a === b'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a !== b'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">testAB();</span><br></pre></td></tr></table></figure>\n<p>现实是残酷的，这是行不通的。这只能证明一点，精度的计算和位置无关。也就是说，与<code>a - 0.01</code> 表达式放置的位置无关。</p>\n<h3 id=\"【方案1】toFixed方法\"><a href=\"#【方案1】toFixed方法\" class=\"headerlink\" title=\"【方案1】toFixed方法\"></a>【方案1】toFixed方法</h3><p>这里考虑到只保留2位小数。所以使用<code>toFixed(2)</code>方法，该方法在必要时会进行四舍六入，然后转成字符串。调用完<code>toFixed</code>方法后，最后再将字符串转为Number类型（JavaScript里面浮点数也算Number类型）再比较。</p>\n<blockquote>\n<p>注意：这里发现<code>toFixed</code>并不一定都会四舍五入。</p>\n</blockquote>\n<p><img src=\"/images/2017-11-30-javascript-float-fault/1130_03.jpg\" alt=\"toFixed_error\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testAB</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">34.17</span>;</span><br><span class=\"line\">  a = a - <span class=\"number\">0.01</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">34.16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>( +(a.toFixed(<span class=\"number\">2</span>)) === b )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a === b'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a !== b'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">testAB();</span><br></pre></td></tr></table></figure>\n<p>这确实得到了一正确结果。但是，说实话我对使用<code>toFixed</code>这个并不赞同。</p>\n<h4 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h4><p>这里其实，还有一出戏。是这样的，一般数据库不会保存浮点数。都会把浮点数转换成整数保存。</p>\n<p>例如这个价格<code>200.67</code>这个值可能数据库会保存为<code>200670</code>。</p>\n<p>假如按上面的<code>toFixed(2)</code>方法取两位小数然后<code>*1000</code>进行保存，会得到正确的结果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> price = <span class=\"number\">200.67</span>;</span><br><span class=\"line\">price = +(price.toFixed(<span class=\"number\">2</span>)) * <span class=\"number\">1000</span>;</span><br></pre></td></tr></table></figure>\n<p>但是，凡是总有例外。</p>\n<p>有图有真相：</p>\n<p><img src=\"/images/2017-11-30-javascript-float-fault/1130_01.jpg\" alt=\"toFixed\"></p>\n<p>从此，脑瓜子一万头羊驼跑过。。。。。</p>\n<h3 id=\"【方案二】-Number-EPSILON\"><a href=\"#【方案二】-Number-EPSILON\" class=\"headerlink\" title=\"【方案二】 Number.EPSILON\"></a>【方案二】 Number.EPSILON</h3><p>表示1和大于1的最小值（可表示为 Number）的差值。<code>Number.EPSILON</code>实际上是JavaScript能够表示的最小精度。误差如果小于这个值，就可以认为已经没有意义了，即不存在误差了。</p>\n<p>那就试试呗。</p>\n<p>这里 <code>Number.EPSILON = 2.220446049250313e-16</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testAB</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">34.17</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">34.16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>( a - <span class=\"number\">0.01</span> - b &lt; <span class=\"built_in\">Number</span>.EPSILON )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a === b'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a !== b'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">testAB();</span><br></pre></td></tr></table></figure>\n<p>发现输出的是<code>a !=== b</code>。不甘心调换位置试试。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testAB</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">34.17</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">34.16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>( b - (a - <span class=\"number\">0.01</span>) &lt; <span class=\"built_in\">Number</span>.EPSILON )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a === b'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a !== b'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">testAB();</span><br></pre></td></tr></table></figure>\n<p>发现输出<code>a === b</code>。两种截然不同的结果。</p>\n<p><img src=\"/images/2017-11-30-javascript-float-fault/1130_04.jpg\" alt=\"EPSILON_1\"><br><img src=\"/images/2017-11-30-javascript-float-fault/1130_05.jpg\" alt=\"EPSILON_2\"><br><img src=\"/images/2017-11-30-javascript-float-fault/1130_06.jpg\" alt=\"EPSILON_3\"></p>\n<p>结果1：<code>7.105427357601002e-15</code> 大于 <code>2.220446049250313e-16</code>。输出<code>a !== b</code>。</p>\n<p>结果2：<code>-7.105427357601002e-15</code> 小于 <code>2.220446049250313e-16</code>。输出<code>a === b</code>。</p>\n<p>看来还是还是精度不够。只能作罢。因为如果精度够，则可以使用<code>Math.abs</code>取整进行比较。</p>\n<h3 id=\"【方案三】Math-round函数\"><a href=\"#【方案三】Math-round函数\" class=\"headerlink\" title=\"【方案三】Math.round函数\"></a>【方案三】Math.round函数</h3><p>这个方法是会对浮点数进行四舍五入，保存为整数进行比较。对于保留2位小数的浮点数。只需要<code>*100</code>然后取整比较就可以。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testAB</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">34.17</span>;</span><br><span class=\"line\">  a = a - <span class=\"number\">0.01</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">34.16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>( <span class=\"built_in\">Math</span>.round(a * <span class=\"number\">100</span>)  === <span class=\"built_in\">Math</span>.round(b * <span class=\"number\">100</span>) )&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a === b'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'a !== b'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">testAB();</span><br></pre></td></tr></table></figure>\n<p>可能会产生误解，例如存在的问题就是<code>Math.round(23.562 * 100) &gt; Math.round(23.56)</code>，这显然是错误的。</p>\n<p>所以这里的前提条件就是必须保证比较的浮点数的位数要一样。</p>\n<p>依此类推，3位小数的可以<code>*1000</code>。</p>\n<p>推荐使用<code>Math.round</code>。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>切莫眼高手低，马失前蹄。</p>\n<p>作者：<a href=\"https://github.com/Yi-love\" target=\"_blank\" rel=\"noopener\">Jin</a></p>"},{"title":"富途证券WEB前端团队招募令","date":"2017-02-09T04:00:00.000Z","author":"Jin","_content":"\n腾讯系互联网券商——富途证券web前端团队招人啦！！！\n\n![富途证券-中国最佳互联网券商](/images/2017-invite/futu.jpg)\n\n## 公司简介\n\n富途证券是一家为投资者提供港股和美股交易服务的互联网券商，创始人为前腾讯第18号员工……\n\n“咔！咔！咔！” 小编，小编说重点。\n\n1. 腾讯系创业公司——靠谱 。（赞 赞 赞...）\n2. 互联网金融——热点。（hot~ hot~ hot~）\n3. B轮融资——不差钱。（money money money!!!）\n\n## 高级web前端工程师（深圳）\n> 单挑“boss”，怒刷装备，等你加入。\n\n职位描述：\n1. 参与前端技术选型、架构\n2. 完成各种网站项目需求\n3. 开发mobile web以及webapp\n4. 接入层（Node）\n\n职位要求：\n1. 能独立完成各种变态前端需求\n2. JavaScript基础扎实，功底深厚\n3. 如果你能撕产品+1分\n4. 能做后台+2分\n5. 玩懂前端工程+3分\n\ntoobug@futu5.com 等你来！\n<!-- more -->\n\n## 吹牛时间\n\n2016年，我们web前端团队在装逼路上已经初露锋芒，今年打算把你招过来，然后在这条装逼之路上继续装逼。\n\n![toobug](/images/2017-invite/toobug.jpg)\n这是我们的前端负责人暖男八哥（TooBug），原就职于腾讯，现在是我们富途证券web前端装逼之路上的带头大哥。不仅技术牛（小编提示：全栈工程师），可谓人人膜(gui)拜(tian)，而且在音乐造诣和摄影方面都是一把刀。\n\n![futu](/images/2017-invite/zb.jpg)\n\n\\>_\\> 说好的一起装逼一起飞呢，小编...（给我粗来小编，我保证不打你）。\n![futu](/images/2017-invite/pl.gif)\n\n小编也表示鸭梨很大，先去零食区黑一包辣条压压精。\n![futu](/images/2017-invite/lt.jpg)\n\n辣条好吃，小编快说点正经的。（怪我咯，我这不是造福大家吗？）\n\n富途web前端团队有17人。背后除了NB的大神还有许多的小鲜肉和mm相伴哦。那可是一道道迷人的风景线...\n\n欢呼声在哪里 “wa wa wa!!!” 。欢迎我们的小鲜肉和mm降临。\n![futu-pp](/images/2017-invite/pp.jpg)\n\n小伙伴们抢着要上镜，小编我鸭梨倍增啊。\n![futu-yl](/images/2017-invite/1-1.jpg)\n\n工作之余，我们还会举办分享会，美食节。分享会内容不限（小编偷偷告诉你：“现在主要是技术分享”）。\n![futu-fxh](/images/2017-invite/fxh.jpg)\n\n为了增进团队的感情，团结。每月一次的团建自然是少不了的，偶尔咱们也攒一攒，搞个大的。\n![futu-tb](/images/2017-invite/tb.jpg)\n\n公司零食随便吃（吃货，吃货，吃货...），据说夏天还每天有妹子给煮糖水喝（坏笑 你懂的）,听着就感觉暖暖的,么么哒。空闲之余还可以到美丽的图书角借阅图书来解工作之乏。\n![futu-tsj](/images/2017-invite/tsj.jpg)\n\n如果你爱运动，那更是非来不可了，咱大富途简直就是个运动公司。不仅有高大上的健身房，还会参加各种高大上的健身活动，什么毅行者（徒步100KM山路）啦，什么环香港自行车赛啦，什么马拉松啦……听说参加还有奖励，动不动老板一高兴就给台iPhone给个自行车什么的。至于什么篮球、足球、羽毛球、游泳协会？切，这种标配的东东，我都懒得说。\n![futu-gem](/images/2017-invite/gem.jpg)\n\n\n~~~~~~~~~~~~~~~美丽的分割线~~~~~~~~~~~~~~~~~~~~~~\n\nQA: “小编，小编，我有问题！！！！！！！！！！”\n小编：“等会，没空，先看图！”\n![futu-xf](/images/2017-invite/xf.png)\n\n![futu-xx](/images/2017-invite/cpmm.jpg)\n\n遇到这样的产品，改改需求你还有意见了？\n\n\n小编表示：“我们有一套成熟的项目管理机制，是不会随意更改的，这还得多谢项目经理GG。”\n\n小编等一下，鼻血不够了。\n![futu-xx](/images/2017-invite/xxd.png)\n\n~v~遇到问题，调Bug是这样的。爱我所爱 la la la ...\n![futu-xx](/images/2017-invite/xxx.jpg)\n妹子喜欢骑马，小编我只能割爱。。。\n\n![futu-wl](/images/2017-invite/wl.jpg)\n\n老司机快上车，我们都等着你呢。\n![futu-sc](/images/2017-invite/sc.jpg)\n\n*toobug@futu5.com* 等你来！\n","source":"_posts/2017-invite.md","raw":"---\ntitle: 富途证券WEB前端团队招募令\ndate: 2017-02-09 12:00\ncategory: 招聘\ntags: [web前端,招聘]\nauthor: Jin\n---\n\n腾讯系互联网券商——富途证券web前端团队招人啦！！！\n\n![富途证券-中国最佳互联网券商](/images/2017-invite/futu.jpg)\n\n## 公司简介\n\n富途证券是一家为投资者提供港股和美股交易服务的互联网券商，创始人为前腾讯第18号员工……\n\n“咔！咔！咔！” 小编，小编说重点。\n\n1. 腾讯系创业公司——靠谱 。（赞 赞 赞...）\n2. 互联网金融——热点。（hot~ hot~ hot~）\n3. B轮融资——不差钱。（money money money!!!）\n\n## 高级web前端工程师（深圳）\n> 单挑“boss”，怒刷装备，等你加入。\n\n职位描述：\n1. 参与前端技术选型、架构\n2. 完成各种网站项目需求\n3. 开发mobile web以及webapp\n4. 接入层（Node）\n\n职位要求：\n1. 能独立完成各种变态前端需求\n2. JavaScript基础扎实，功底深厚\n3. 如果你能撕产品+1分\n4. 能做后台+2分\n5. 玩懂前端工程+3分\n\ntoobug@futu5.com 等你来！\n<!-- more -->\n\n## 吹牛时间\n\n2016年，我们web前端团队在装逼路上已经初露锋芒，今年打算把你招过来，然后在这条装逼之路上继续装逼。\n\n![toobug](/images/2017-invite/toobug.jpg)\n这是我们的前端负责人暖男八哥（TooBug），原就职于腾讯，现在是我们富途证券web前端装逼之路上的带头大哥。不仅技术牛（小编提示：全栈工程师），可谓人人膜(gui)拜(tian)，而且在音乐造诣和摄影方面都是一把刀。\n\n![futu](/images/2017-invite/zb.jpg)\n\n\\>_\\> 说好的一起装逼一起飞呢，小编...（给我粗来小编，我保证不打你）。\n![futu](/images/2017-invite/pl.gif)\n\n小编也表示鸭梨很大，先去零食区黑一包辣条压压精。\n![futu](/images/2017-invite/lt.jpg)\n\n辣条好吃，小编快说点正经的。（怪我咯，我这不是造福大家吗？）\n\n富途web前端团队有17人。背后除了NB的大神还有许多的小鲜肉和mm相伴哦。那可是一道道迷人的风景线...\n\n欢呼声在哪里 “wa wa wa!!!” 。欢迎我们的小鲜肉和mm降临。\n![futu-pp](/images/2017-invite/pp.jpg)\n\n小伙伴们抢着要上镜，小编我鸭梨倍增啊。\n![futu-yl](/images/2017-invite/1-1.jpg)\n\n工作之余，我们还会举办分享会，美食节。分享会内容不限（小编偷偷告诉你：“现在主要是技术分享”）。\n![futu-fxh](/images/2017-invite/fxh.jpg)\n\n为了增进团队的感情，团结。每月一次的团建自然是少不了的，偶尔咱们也攒一攒，搞个大的。\n![futu-tb](/images/2017-invite/tb.jpg)\n\n公司零食随便吃（吃货，吃货，吃货...），据说夏天还每天有妹子给煮糖水喝（坏笑 你懂的）,听着就感觉暖暖的,么么哒。空闲之余还可以到美丽的图书角借阅图书来解工作之乏。\n![futu-tsj](/images/2017-invite/tsj.jpg)\n\n如果你爱运动，那更是非来不可了，咱大富途简直就是个运动公司。不仅有高大上的健身房，还会参加各种高大上的健身活动，什么毅行者（徒步100KM山路）啦，什么环香港自行车赛啦，什么马拉松啦……听说参加还有奖励，动不动老板一高兴就给台iPhone给个自行车什么的。至于什么篮球、足球、羽毛球、游泳协会？切，这种标配的东东，我都懒得说。\n![futu-gem](/images/2017-invite/gem.jpg)\n\n\n~~~~~~~~~~~~~~~美丽的分割线~~~~~~~~~~~~~~~~~~~~~~\n\nQA: “小编，小编，我有问题！！！！！！！！！！”\n小编：“等会，没空，先看图！”\n![futu-xf](/images/2017-invite/xf.png)\n\n![futu-xx](/images/2017-invite/cpmm.jpg)\n\n遇到这样的产品，改改需求你还有意见了？\n\n\n小编表示：“我们有一套成熟的项目管理机制，是不会随意更改的，这还得多谢项目经理GG。”\n\n小编等一下，鼻血不够了。\n![futu-xx](/images/2017-invite/xxd.png)\n\n~v~遇到问题，调Bug是这样的。爱我所爱 la la la ...\n![futu-xx](/images/2017-invite/xxx.jpg)\n妹子喜欢骑马，小编我只能割爱。。。\n\n![futu-wl](/images/2017-invite/wl.jpg)\n\n老司机快上车，我们都等着你呢。\n![futu-sc](/images/2017-invite/sc.jpg)\n\n*toobug@futu5.com* 等你来！\n","slug":"2017-invite","published":1,"updated":"2017-12-01T08:50:00.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknj50026jxs1vamwzwau","content":"<p>腾讯系互联网券商——富途证券web前端团队招人啦！！！</p>\n<p><img src=\"/images/2017-invite/futu.jpg\" alt=\"富途证券-中国最佳互联网券商\"></p>\n<h2 id=\"公司简介\"><a href=\"#公司简介\" class=\"headerlink\" title=\"公司简介\"></a>公司简介</h2><p>富途证券是一家为投资者提供港股和美股交易服务的互联网券商，创始人为前腾讯第18号员工……</p>\n<p>“咔！咔！咔！” 小编，小编说重点。</p>\n<ol>\n<li>腾讯系创业公司——靠谱 。（赞 赞 赞…）</li>\n<li>互联网金融——热点。（hot~ hot~ hot~）</li>\n<li>B轮融资——不差钱。（money money money!!!）</li>\n</ol>\n<h2 id=\"高级web前端工程师（深圳）\"><a href=\"#高级web前端工程师（深圳）\" class=\"headerlink\" title=\"高级web前端工程师（深圳）\"></a>高级web前端工程师（深圳）</h2><blockquote>\n<p>单挑“boss”，怒刷装备，等你加入。</p>\n</blockquote>\n<p>职位描述：</p>\n<ol>\n<li>参与前端技术选型、架构</li>\n<li>完成各种网站项目需求</li>\n<li>开发mobile web以及webapp</li>\n<li>接入层（Node）</li>\n</ol>\n<p>职位要求：</p>\n<ol>\n<li>能独立完成各种变态前端需求</li>\n<li>JavaScript基础扎实，功底深厚</li>\n<li>如果你能撕产品+1分</li>\n<li>能做后台+2分</li>\n<li>玩懂前端工程+3分</li>\n</ol>\n<p>toobug@futu5.com 等你来！<br><a id=\"more\"></a></p>\n<h2 id=\"吹牛时间\"><a href=\"#吹牛时间\" class=\"headerlink\" title=\"吹牛时间\"></a>吹牛时间</h2><p>2016年，我们web前端团队在装逼路上已经初露锋芒，今年打算把你招过来，然后在这条装逼之路上继续装逼。</p>\n<p><img src=\"/images/2017-invite/toobug.jpg\" alt=\"toobug\"><br>这是我们的前端负责人暖男八哥（TooBug），原就职于腾讯，现在是我们富途证券web前端装逼之路上的带头大哥。不仅技术牛（小编提示：全栈工程师），可谓人人膜(gui)拜(tian)，而且在音乐造诣和摄影方面都是一把刀。</p>\n<p><img src=\"/images/2017-invite/zb.jpg\" alt=\"futu\"></p>\n<p>>_> 说好的一起装逼一起飞呢，小编…（给我粗来小编，我保证不打你）。<br><img src=\"/images/2017-invite/pl.gif\" alt=\"futu\"></p>\n<p>小编也表示鸭梨很大，先去零食区黑一包辣条压压精。<br><img src=\"/images/2017-invite/lt.jpg\" alt=\"futu\"></p>\n<p>辣条好吃，小编快说点正经的。（怪我咯，我这不是造福大家吗？）</p>\n<p>富途web前端团队有17人。背后除了NB的大神还有许多的小鲜肉和mm相伴哦。那可是一道道迷人的风景线…</p>\n<p>欢呼声在哪里 “wa wa wa!!!” 。欢迎我们的小鲜肉和mm降临。<br><img src=\"/images/2017-invite/pp.jpg\" alt=\"futu-pp\"></p>\n<p>小伙伴们抢着要上镜，小编我鸭梨倍增啊。<br><img src=\"/images/2017-invite/1-1.jpg\" alt=\"futu-yl\"></p>\n<p>工作之余，我们还会举办分享会，美食节。分享会内容不限（小编偷偷告诉你：“现在主要是技术分享”）。<br><img src=\"/images/2017-invite/fxh.jpg\" alt=\"futu-fxh\"></p>\n<p>为了增进团队的感情，团结。每月一次的团建自然是少不了的，偶尔咱们也攒一攒，搞个大的。<br><img src=\"/images/2017-invite/tb.jpg\" alt=\"futu-tb\"></p>\n<p>公司零食随便吃（吃货，吃货，吃货…），据说夏天还每天有妹子给煮糖水喝（坏笑 你懂的）,听着就感觉暖暖的,么么哒。空闲之余还可以到美丽的图书角借阅图书来解工作之乏。<br><img src=\"/images/2017-invite/tsj.jpg\" alt=\"futu-tsj\"></p>\n<p>如果你爱运动，那更是非来不可了，咱大富途简直就是个运动公司。不仅有高大上的健身房，还会参加各种高大上的健身活动，什么毅行者（徒步100KM山路）啦，什么环香港自行车赛啦，什么马拉松啦……听说参加还有奖励，动不动老板一高兴就给台iPhone给个自行车什么的。至于什么篮球、足球、羽毛球、游泳协会？切，这种标配的东东，我都懒得说。<br><img src=\"/images/2017-invite/gem.jpg\" alt=\"futu-gem\"></p>\n<p><del>~</del><del>~</del><del>~</del>美丽的分割线<del>~</del><del>~</del><del>~</del><del>~</del>~~</p>\n<p>QA: “小编，小编，我有问题！！！！！！！！！！”<br>小编：“等会，没空，先看图！”<br><img src=\"/images/2017-invite/xf.png\" alt=\"futu-xf\"></p>\n<p><img src=\"/images/2017-invite/cpmm.jpg\" alt=\"futu-xx\"></p>\n<p>遇到这样的产品，改改需求你还有意见了？</p>\n<p>小编表示：“我们有一套成熟的项目管理机制，是不会随意更改的，这还得多谢项目经理GG。”</p>\n<p>小编等一下，鼻血不够了。<br><img src=\"/images/2017-invite/xxd.png\" alt=\"futu-xx\"></p>\n<p>~v~遇到问题，调Bug是这样的。爱我所爱 la la la …<br><img src=\"/images/2017-invite/xxx.jpg\" alt=\"futu-xx\"><br>妹子喜欢骑马，小编我只能割爱。。。</p>\n<p><img src=\"/images/2017-invite/wl.jpg\" alt=\"futu-wl\"></p>\n<p>老司机快上车，我们都等着你呢。<br><img src=\"/images/2017-invite/sc.jpg\" alt=\"futu-sc\"></p>\n<p><em>toobug@futu5.com</em> 等你来！</p>\n","site":{"data":{}},"excerpt":"<p>腾讯系互联网券商——富途证券web前端团队招人啦！！！</p>\n<p><img src=\"/images/2017-invite/futu.jpg\" alt=\"富途证券-中国最佳互联网券商\"></p>\n<h2 id=\"公司简介\"><a href=\"#公司简介\" class=\"headerlink\" title=\"公司简介\"></a>公司简介</h2><p>富途证券是一家为投资者提供港股和美股交易服务的互联网券商，创始人为前腾讯第18号员工……</p>\n<p>“咔！咔！咔！” 小编，小编说重点。</p>\n<ol>\n<li>腾讯系创业公司——靠谱 。（赞 赞 赞…）</li>\n<li>互联网金融——热点。（hot~ hot~ hot~）</li>\n<li>B轮融资——不差钱。（money money money!!!）</li>\n</ol>\n<h2 id=\"高级web前端工程师（深圳）\"><a href=\"#高级web前端工程师（深圳）\" class=\"headerlink\" title=\"高级web前端工程师（深圳）\"></a>高级web前端工程师（深圳）</h2><blockquote>\n<p>单挑“boss”，怒刷装备，等你加入。</p>\n</blockquote>\n<p>职位描述：</p>\n<ol>\n<li>参与前端技术选型、架构</li>\n<li>完成各种网站项目需求</li>\n<li>开发mobile web以及webapp</li>\n<li>接入层（Node）</li>\n</ol>\n<p>职位要求：</p>\n<ol>\n<li>能独立完成各种变态前端需求</li>\n<li>JavaScript基础扎实，功底深厚</li>\n<li>如果你能撕产品+1分</li>\n<li>能做后台+2分</li>\n<li>玩懂前端工程+3分</li>\n</ol>\n<p>toobug@futu5.com 等你来！<br>","more":"</p>\n<h2 id=\"吹牛时间\"><a href=\"#吹牛时间\" class=\"headerlink\" title=\"吹牛时间\"></a>吹牛时间</h2><p>2016年，我们web前端团队在装逼路上已经初露锋芒，今年打算把你招过来，然后在这条装逼之路上继续装逼。</p>\n<p><img src=\"/images/2017-invite/toobug.jpg\" alt=\"toobug\"><br>这是我们的前端负责人暖男八哥（TooBug），原就职于腾讯，现在是我们富途证券web前端装逼之路上的带头大哥。不仅技术牛（小编提示：全栈工程师），可谓人人膜(gui)拜(tian)，而且在音乐造诣和摄影方面都是一把刀。</p>\n<p><img src=\"/images/2017-invite/zb.jpg\" alt=\"futu\"></p>\n<p>>_> 说好的一起装逼一起飞呢，小编…（给我粗来小编，我保证不打你）。<br><img src=\"/images/2017-invite/pl.gif\" alt=\"futu\"></p>\n<p>小编也表示鸭梨很大，先去零食区黑一包辣条压压精。<br><img src=\"/images/2017-invite/lt.jpg\" alt=\"futu\"></p>\n<p>辣条好吃，小编快说点正经的。（怪我咯，我这不是造福大家吗？）</p>\n<p>富途web前端团队有17人。背后除了NB的大神还有许多的小鲜肉和mm相伴哦。那可是一道道迷人的风景线…</p>\n<p>欢呼声在哪里 “wa wa wa!!!” 。欢迎我们的小鲜肉和mm降临。<br><img src=\"/images/2017-invite/pp.jpg\" alt=\"futu-pp\"></p>\n<p>小伙伴们抢着要上镜，小编我鸭梨倍增啊。<br><img src=\"/images/2017-invite/1-1.jpg\" alt=\"futu-yl\"></p>\n<p>工作之余，我们还会举办分享会，美食节。分享会内容不限（小编偷偷告诉你：“现在主要是技术分享”）。<br><img src=\"/images/2017-invite/fxh.jpg\" alt=\"futu-fxh\"></p>\n<p>为了增进团队的感情，团结。每月一次的团建自然是少不了的，偶尔咱们也攒一攒，搞个大的。<br><img src=\"/images/2017-invite/tb.jpg\" alt=\"futu-tb\"></p>\n<p>公司零食随便吃（吃货，吃货，吃货…），据说夏天还每天有妹子给煮糖水喝（坏笑 你懂的）,听着就感觉暖暖的,么么哒。空闲之余还可以到美丽的图书角借阅图书来解工作之乏。<br><img src=\"/images/2017-invite/tsj.jpg\" alt=\"futu-tsj\"></p>\n<p>如果你爱运动，那更是非来不可了，咱大富途简直就是个运动公司。不仅有高大上的健身房，还会参加各种高大上的健身活动，什么毅行者（徒步100KM山路）啦，什么环香港自行车赛啦，什么马拉松啦……听说参加还有奖励，动不动老板一高兴就给台iPhone给个自行车什么的。至于什么篮球、足球、羽毛球、游泳协会？切，这种标配的东东，我都懒得说。<br><img src=\"/images/2017-invite/gem.jpg\" alt=\"futu-gem\"></p>\n<p><del>~</del><del>~</del><del>~</del>美丽的分割线<del>~</del><del>~</del><del>~</del><del>~</del>~~</p>\n<p>QA: “小编，小编，我有问题！！！！！！！！！！”<br>小编：“等会，没空，先看图！”<br><img src=\"/images/2017-invite/xf.png\" alt=\"futu-xf\"></p>\n<p><img src=\"/images/2017-invite/cpmm.jpg\" alt=\"futu-xx\"></p>\n<p>遇到这样的产品，改改需求你还有意见了？</p>\n<p>小编表示：“我们有一套成熟的项目管理机制，是不会随意更改的，这还得多谢项目经理GG。”</p>\n<p>小编等一下，鼻血不够了。<br><img src=\"/images/2017-invite/xxd.png\" alt=\"futu-xx\"></p>\n<p>~v~遇到问题，调Bug是这样的。爱我所爱 la la la …<br><img src=\"/images/2017-invite/xxx.jpg\" alt=\"futu-xx\"><br>妹子喜欢骑马，小编我只能割爱。。。</p>\n<p><img src=\"/images/2017-invite/wl.jpg\" alt=\"futu-wl\"></p>\n<p>老司机快上车，我们都等着你呢。<br><img src=\"/images/2017-invite/sc.jpg\" alt=\"futu-sc\"></p>\n<p><em>toobug@futu5.com</em> 等你来！</p>"},{"title":"如何使用web录制视频","date":"2016-09-25T04:41:00.000Z","author":"TooBug","_content":"\n最近在某个需求的评审会上，产品同学脑洞大开，提出了**使用web录制视频**的想法。并兴致勃勃地说“看，XXX网站可以调用摄像头，还能聊天呢！”本着负（Zhuang）责（Bi）的原则，我们也对该方案做了认真的预研。大致结论：\n\n1. 非实时录制时（文件上传框），兼容性相对较好，且API和性能稳定\n2. 实时录制视频在Chrome for Android中可行，其它机型和浏览器均不可使用。考虑到相关标准仍处于不稳定状态，不建议在产品中使用\n3. 微信有非公开接口可以调用实时视频录制（微证券使用）\n\n详细方案如下：\n\n<!--more-->\n\n## 方案一：使用文件上传框\n\n文件上传框`<input type=\"file\">`是前端同学非常熟悉的一个HTML控件，它的主要作用是用来上传文件。而在移动端，这个文件上传框被赋予了更多的使命，除了可以选择文件上传之外，还可以调用摄像头来拍摄照片或者视频并上传。\n\n具体的使用方式：\n\n```html\n<input type=\"file\" accept=\"video/*\"/>\n```\n\n或者\n\n```html\n<input type=\"file\" accept=\"video/mp4,video/x-m4v,video/*\"/>\n```\n\n这两种写法的区别在于对不同机型来说兼容性可能略有区别，但是具体的情况未做一一测试总结。经过初步测试，该方案可以在以下环境中运行：\n\n- Android 4.4+\n- iOS 6.0+\n- 微信webview\n- Chrome for Android\n\n> 注：该兼容性中介我们简单测试一部分机器后的结论，不做任何保证。事实上我们也碰到一部分Android机器是例外。下文兼容性列表同理。\n\n该方案API简单易用，且功能由浏览器或webview原生实现，性能比较稳定。\n\n\n该方案缺点：非实时录制视频，无法确定用户是录制的还是选取的已有的视频文件。\n\n相关demo <http://codepen.io/TooBug/embed/RRZQxr/>\n\n## 方案二：视频录制\n\n要使用web录制视频，需要两个相关API，一个用于调用摄像头，一个用于录制。调用摄像头后会产生一个视频流，然后调用录制API将这个视频流压缩和保存。\n\n其中调用摄像头的API叫作`getUserMedia()`，以前属于`navigator`对象（Chrome 21-49），后来规范修改，现在属于`MediaDevices`（Chrome 49+）。该API还负责提示用户授权。\n\n视频流叫作`MediaStream`。拿到`MediaStream`后，可配合`ObjectURL`，产生一个虚拟URL，供浏览器`video`标签调用，实现视频回放（回显）。\n\n用于录制视频的API叫作`MediaRecorder`。该API在Chrome 49+可用。\n\n该方案兼容性：\n\n- Chrome 49+\n- Firefox 29+\n- Chrome for Android\n\n相关Demo地址：<https://simpl.info/mediarecorder/>\n\n## 方案三：WebRTC视频流远程录制\n\nWebRTC是指实现web实时通信的一系列规范，一般可以通俗地理解为“P2P视频聊天”。实现这个功能依赖于上方说的摄像头调用API `getUserMedia()`取到`MediaStream`，同时还依赖一个P2P网络连接和传输的API来实现视频流数据的传输，这个API叫作`RTCPeerConnection`。\n\n在实际运作时，需要服务额外处理两个浏览器在P2P通信之前的Session建立相关的逻辑：\n\n![WebRTC实际原理图](/images/capture-video-on-web/1.png)\n\n同时，还需要服务端支持来完成浏览器在NAT等复杂网络环境中的通信“打洞”需求：\n\n![WebRTC实际原理图](/images/capture-video-on-web/2.png)\n\n使用该方案录制视频的原理是通过服务端模拟一个浏览器（Peer），实现相关视频流接收解码协议以及`RTCPeerConnection`协议。\n\nSession管理的服务端和打洞的服务端实现和维护比较麻烦，但有例可循，而模拟Peer的部分则实现过于复杂，因此，虽然该方案理论上可行，且浏览器兼容性稍好，但仍然认为该方案在实际操作中不可行。\n\n这个方案的兼容性\n\n- Firefox 17+\n- Chrome 21+\n- Edge 12+\n- Chrome for Android\n\n## 方案四：截图上传\n\n该方案原理：在使用`getUserMedia()`获取视频流之后，将该视频流定时投映到一张2d画布中（`canvas`），然后将画布中的画面提取成图片数据（`base64`）。\n\n该方案原理比较简单，兼容性\n\n- Firefox 17+\n- Chrome 21+\n- Edge 12+\n- Chrome for Android\n\n但同时也有明显缺陷：\n- 无法获取声音数据，只能获取到图片数据\n- 需要上传后由后台转换成视频\n- 帧数多时图片可能较大，造成性能问题（比如崩溃）\n- 帧数多时图片可能较大，造成网络传输慢\n\n## 相关文档\n\n- [MDN上的navigator.getUserMedia文档](https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator/getUserMedia)\n- [MDN上的MediaDevices.getUserMedia文档](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n- [MDN上的MediaStream文档](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\n- [MDN上的MediaRecorder文档](https://developer.mozilla.org/zh-CN/docs/Web/API/MediaRecorder)\n- [W3C Media Capture and Streams规范（发布候选状态）](https://www.w3.org/TR/mediacapture-streams/)\n- [W3C MediaRecording规范（Working Draft草稿状态）](https://w3c.github.io/mediacapture-record/MediaRecorder.html)\n- [W3C webrtc规范（Working Draft草稿状态）](http://w3c.github.io/webrtc-pc/)\n- [webrtc官方网站](https://webrtc.github.io)\n- [教程：webrtc入门](https://codelabs.developers.google.com/codelabs/webrtc-web/)\n- [文章：真实世界中的webrtc](http://www.html5rocks.com/en/tutorials/webrtc/infrastructure/)\n","source":"_posts/capture-video-on-web.md","raw":"---\ntitle: 如何使用web录制视频\ndate: 2016-09-25 12:41\ntags: [Video,WebRTC]\ncategory: 技术预研\nauthor: TooBug\n---\n\n最近在某个需求的评审会上，产品同学脑洞大开，提出了**使用web录制视频**的想法。并兴致勃勃地说“看，XXX网站可以调用摄像头，还能聊天呢！”本着负（Zhuang）责（Bi）的原则，我们也对该方案做了认真的预研。大致结论：\n\n1. 非实时录制时（文件上传框），兼容性相对较好，且API和性能稳定\n2. 实时录制视频在Chrome for Android中可行，其它机型和浏览器均不可使用。考虑到相关标准仍处于不稳定状态，不建议在产品中使用\n3. 微信有非公开接口可以调用实时视频录制（微证券使用）\n\n详细方案如下：\n\n<!--more-->\n\n## 方案一：使用文件上传框\n\n文件上传框`<input type=\"file\">`是前端同学非常熟悉的一个HTML控件，它的主要作用是用来上传文件。而在移动端，这个文件上传框被赋予了更多的使命，除了可以选择文件上传之外，还可以调用摄像头来拍摄照片或者视频并上传。\n\n具体的使用方式：\n\n```html\n<input type=\"file\" accept=\"video/*\"/>\n```\n\n或者\n\n```html\n<input type=\"file\" accept=\"video/mp4,video/x-m4v,video/*\"/>\n```\n\n这两种写法的区别在于对不同机型来说兼容性可能略有区别，但是具体的情况未做一一测试总结。经过初步测试，该方案可以在以下环境中运行：\n\n- Android 4.4+\n- iOS 6.0+\n- 微信webview\n- Chrome for Android\n\n> 注：该兼容性中介我们简单测试一部分机器后的结论，不做任何保证。事实上我们也碰到一部分Android机器是例外。下文兼容性列表同理。\n\n该方案API简单易用，且功能由浏览器或webview原生实现，性能比较稳定。\n\n\n该方案缺点：非实时录制视频，无法确定用户是录制的还是选取的已有的视频文件。\n\n相关demo <http://codepen.io/TooBug/embed/RRZQxr/>\n\n## 方案二：视频录制\n\n要使用web录制视频，需要两个相关API，一个用于调用摄像头，一个用于录制。调用摄像头后会产生一个视频流，然后调用录制API将这个视频流压缩和保存。\n\n其中调用摄像头的API叫作`getUserMedia()`，以前属于`navigator`对象（Chrome 21-49），后来规范修改，现在属于`MediaDevices`（Chrome 49+）。该API还负责提示用户授权。\n\n视频流叫作`MediaStream`。拿到`MediaStream`后，可配合`ObjectURL`，产生一个虚拟URL，供浏览器`video`标签调用，实现视频回放（回显）。\n\n用于录制视频的API叫作`MediaRecorder`。该API在Chrome 49+可用。\n\n该方案兼容性：\n\n- Chrome 49+\n- Firefox 29+\n- Chrome for Android\n\n相关Demo地址：<https://simpl.info/mediarecorder/>\n\n## 方案三：WebRTC视频流远程录制\n\nWebRTC是指实现web实时通信的一系列规范，一般可以通俗地理解为“P2P视频聊天”。实现这个功能依赖于上方说的摄像头调用API `getUserMedia()`取到`MediaStream`，同时还依赖一个P2P网络连接和传输的API来实现视频流数据的传输，这个API叫作`RTCPeerConnection`。\n\n在实际运作时，需要服务额外处理两个浏览器在P2P通信之前的Session建立相关的逻辑：\n\n![WebRTC实际原理图](/images/capture-video-on-web/1.png)\n\n同时，还需要服务端支持来完成浏览器在NAT等复杂网络环境中的通信“打洞”需求：\n\n![WebRTC实际原理图](/images/capture-video-on-web/2.png)\n\n使用该方案录制视频的原理是通过服务端模拟一个浏览器（Peer），实现相关视频流接收解码协议以及`RTCPeerConnection`协议。\n\nSession管理的服务端和打洞的服务端实现和维护比较麻烦，但有例可循，而模拟Peer的部分则实现过于复杂，因此，虽然该方案理论上可行，且浏览器兼容性稍好，但仍然认为该方案在实际操作中不可行。\n\n这个方案的兼容性\n\n- Firefox 17+\n- Chrome 21+\n- Edge 12+\n- Chrome for Android\n\n## 方案四：截图上传\n\n该方案原理：在使用`getUserMedia()`获取视频流之后，将该视频流定时投映到一张2d画布中（`canvas`），然后将画布中的画面提取成图片数据（`base64`）。\n\n该方案原理比较简单，兼容性\n\n- Firefox 17+\n- Chrome 21+\n- Edge 12+\n- Chrome for Android\n\n但同时也有明显缺陷：\n- 无法获取声音数据，只能获取到图片数据\n- 需要上传后由后台转换成视频\n- 帧数多时图片可能较大，造成性能问题（比如崩溃）\n- 帧数多时图片可能较大，造成网络传输慢\n\n## 相关文档\n\n- [MDN上的navigator.getUserMedia文档](https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator/getUserMedia)\n- [MDN上的MediaDevices.getUserMedia文档](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n- [MDN上的MediaStream文档](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\n- [MDN上的MediaRecorder文档](https://developer.mozilla.org/zh-CN/docs/Web/API/MediaRecorder)\n- [W3C Media Capture and Streams规范（发布候选状态）](https://www.w3.org/TR/mediacapture-streams/)\n- [W3C MediaRecording规范（Working Draft草稿状态）](https://w3c.github.io/mediacapture-record/MediaRecorder.html)\n- [W3C webrtc规范（Working Draft草稿状态）](http://w3c.github.io/webrtc-pc/)\n- [webrtc官方网站](https://webrtc.github.io)\n- [教程：webrtc入门](https://codelabs.developers.google.com/codelabs/webrtc-web/)\n- [文章：真实世界中的webrtc](http://www.html5rocks.com/en/tutorials/webrtc/infrastructure/)\n","slug":"capture-video-on-web","published":1,"updated":"2017-12-01T08:50:00.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknj7002ajxs101pie3y7","content":"<p>最近在某个需求的评审会上，产品同学脑洞大开，提出了<strong>使用web录制视频</strong>的想法。并兴致勃勃地说“看，XXX网站可以调用摄像头，还能聊天呢！”本着负（Zhuang）责（Bi）的原则，我们也对该方案做了认真的预研。大致结论：</p>\n<ol>\n<li>非实时录制时（文件上传框），兼容性相对较好，且API和性能稳定</li>\n<li>实时录制视频在Chrome for Android中可行，其它机型和浏览器均不可使用。考虑到相关标准仍处于不稳定状态，不建议在产品中使用</li>\n<li>微信有非公开接口可以调用实时视频录制（微证券使用）</li>\n</ol>\n<p>详细方案如下：</p>\n<a id=\"more\"></a>\n<h2 id=\"方案一：使用文件上传框\"><a href=\"#方案一：使用文件上传框\" class=\"headerlink\" title=\"方案一：使用文件上传框\"></a>方案一：使用文件上传框</h2><p>文件上传框<code>&lt;input type=&quot;file&quot;&gt;</code>是前端同学非常熟悉的一个HTML控件，它的主要作用是用来上传文件。而在移动端，这个文件上传框被赋予了更多的使命，除了可以选择文件上传之外，还可以调用摄像头来拍摄照片或者视频并上传。</p>\n<p>具体的使用方式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"video/*\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"video/mp4,video/x-m4v,video/*\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这两种写法的区别在于对不同机型来说兼容性可能略有区别，但是具体的情况未做一一测试总结。经过初步测试，该方案可以在以下环境中运行：</p>\n<ul>\n<li>Android 4.4+</li>\n<li>iOS 6.0+</li>\n<li>微信webview</li>\n<li>Chrome for Android</li>\n</ul>\n<blockquote>\n<p>注：该兼容性中介我们简单测试一部分机器后的结论，不做任何保证。事实上我们也碰到一部分Android机器是例外。下文兼容性列表同理。</p>\n</blockquote>\n<p>该方案API简单易用，且功能由浏览器或webview原生实现，性能比较稳定。</p>\n<p>该方案缺点：非实时录制视频，无法确定用户是录制的还是选取的已有的视频文件。</p>\n<p>相关demo <a href=\"http://codepen.io/TooBug/embed/RRZQxr/\" target=\"_blank\" rel=\"noopener\">http://codepen.io/TooBug/embed/RRZQxr/</a></p>\n<h2 id=\"方案二：视频录制\"><a href=\"#方案二：视频录制\" class=\"headerlink\" title=\"方案二：视频录制\"></a>方案二：视频录制</h2><p>要使用web录制视频，需要两个相关API，一个用于调用摄像头，一个用于录制。调用摄像头后会产生一个视频流，然后调用录制API将这个视频流压缩和保存。</p>\n<p>其中调用摄像头的API叫作<code>getUserMedia()</code>，以前属于<code>navigator</code>对象（Chrome 21-49），后来规范修改，现在属于<code>MediaDevices</code>（Chrome 49+）。该API还负责提示用户授权。</p>\n<p>视频流叫作<code>MediaStream</code>。拿到<code>MediaStream</code>后，可配合<code>ObjectURL</code>，产生一个虚拟URL，供浏览器<code>video</code>标签调用，实现视频回放（回显）。</p>\n<p>用于录制视频的API叫作<code>MediaRecorder</code>。该API在Chrome 49+可用。</p>\n<p>该方案兼容性：</p>\n<ul>\n<li>Chrome 49+</li>\n<li>Firefox 29+</li>\n<li>Chrome for Android</li>\n</ul>\n<p>相关Demo地址：<a href=\"https://simpl.info/mediarecorder/\" target=\"_blank\" rel=\"noopener\">https://simpl.info/mediarecorder/</a></p>\n<h2 id=\"方案三：WebRTC视频流远程录制\"><a href=\"#方案三：WebRTC视频流远程录制\" class=\"headerlink\" title=\"方案三：WebRTC视频流远程录制\"></a>方案三：WebRTC视频流远程录制</h2><p>WebRTC是指实现web实时通信的一系列规范，一般可以通俗地理解为“P2P视频聊天”。实现这个功能依赖于上方说的摄像头调用API <code>getUserMedia()</code>取到<code>MediaStream</code>，同时还依赖一个P2P网络连接和传输的API来实现视频流数据的传输，这个API叫作<code>RTCPeerConnection</code>。</p>\n<p>在实际运作时，需要服务额外处理两个浏览器在P2P通信之前的Session建立相关的逻辑：</p>\n<p><img src=\"/images/capture-video-on-web/1.png\" alt=\"WebRTC实际原理图\"></p>\n<p>同时，还需要服务端支持来完成浏览器在NAT等复杂网络环境中的通信“打洞”需求：</p>\n<p><img src=\"/images/capture-video-on-web/2.png\" alt=\"WebRTC实际原理图\"></p>\n<p>使用该方案录制视频的原理是通过服务端模拟一个浏览器（Peer），实现相关视频流接收解码协议以及<code>RTCPeerConnection</code>协议。</p>\n<p>Session管理的服务端和打洞的服务端实现和维护比较麻烦，但有例可循，而模拟Peer的部分则实现过于复杂，因此，虽然该方案理论上可行，且浏览器兼容性稍好，但仍然认为该方案在实际操作中不可行。</p>\n<p>这个方案的兼容性</p>\n<ul>\n<li>Firefox 17+</li>\n<li>Chrome 21+</li>\n<li>Edge 12+</li>\n<li>Chrome for Android</li>\n</ul>\n<h2 id=\"方案四：截图上传\"><a href=\"#方案四：截图上传\" class=\"headerlink\" title=\"方案四：截图上传\"></a>方案四：截图上传</h2><p>该方案原理：在使用<code>getUserMedia()</code>获取视频流之后，将该视频流定时投映到一张2d画布中（<code>canvas</code>），然后将画布中的画面提取成图片数据（<code>base64</code>）。</p>\n<p>该方案原理比较简单，兼容性</p>\n<ul>\n<li>Firefox 17+</li>\n<li>Chrome 21+</li>\n<li>Edge 12+</li>\n<li>Chrome for Android</li>\n</ul>\n<p>但同时也有明显缺陷：</p>\n<ul>\n<li>无法获取声音数据，只能获取到图片数据</li>\n<li>需要上传后由后台转换成视频</li>\n<li>帧数多时图片可能较大，造成性能问题（比如崩溃）</li>\n<li>帧数多时图片可能较大，造成网络传输慢</li>\n</ul>\n<h2 id=\"相关文档\"><a href=\"#相关文档\" class=\"headerlink\" title=\"相关文档\"></a>相关文档</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator/getUserMedia\" target=\"_blank\" rel=\"noopener\">MDN上的navigator.getUserMedia文档</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\" target=\"_blank\" rel=\"noopener\">MDN上的MediaDevices.getUserMedia文档</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaStream\" target=\"_blank\" rel=\"noopener\">MDN上的MediaStream文档</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MediaRecorder\" target=\"_blank\" rel=\"noopener\">MDN上的MediaRecorder文档</a></li>\n<li><a href=\"https://www.w3.org/TR/mediacapture-streams/\" target=\"_blank\" rel=\"noopener\">W3C Media Capture and Streams规范（发布候选状态）</a></li>\n<li><a href=\"https://w3c.github.io/mediacapture-record/MediaRecorder.html\" target=\"_blank\" rel=\"noopener\">W3C MediaRecording规范（Working Draft草稿状态）</a></li>\n<li><a href=\"http://w3c.github.io/webrtc-pc/\" target=\"_blank\" rel=\"noopener\">W3C webrtc规范（Working Draft草稿状态）</a></li>\n<li><a href=\"https://webrtc.github.io\" target=\"_blank\" rel=\"noopener\">webrtc官方网站</a></li>\n<li><a href=\"https://codelabs.developers.google.com/codelabs/webrtc-web/\" target=\"_blank\" rel=\"noopener\">教程：webrtc入门</a></li>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/webrtc/infrastructure/\" target=\"_blank\" rel=\"noopener\">文章：真实世界中的webrtc</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>最近在某个需求的评审会上，产品同学脑洞大开，提出了<strong>使用web录制视频</strong>的想法。并兴致勃勃地说“看，XXX网站可以调用摄像头，还能聊天呢！”本着负（Zhuang）责（Bi）的原则，我们也对该方案做了认真的预研。大致结论：</p>\n<ol>\n<li>非实时录制时（文件上传框），兼容性相对较好，且API和性能稳定</li>\n<li>实时录制视频在Chrome for Android中可行，其它机型和浏览器均不可使用。考虑到相关标准仍处于不稳定状态，不建议在产品中使用</li>\n<li>微信有非公开接口可以调用实时视频录制（微证券使用）</li>\n</ol>\n<p>详细方案如下：</p>","more":"<h2 id=\"方案一：使用文件上传框\"><a href=\"#方案一：使用文件上传框\" class=\"headerlink\" title=\"方案一：使用文件上传框\"></a>方案一：使用文件上传框</h2><p>文件上传框<code>&lt;input type=&quot;file&quot;&gt;</code>是前端同学非常熟悉的一个HTML控件，它的主要作用是用来上传文件。而在移动端，这个文件上传框被赋予了更多的使命，除了可以选择文件上传之外，还可以调用摄像头来拍摄照片或者视频并上传。</p>\n<p>具体的使用方式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"video/*\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"video/mp4,video/x-m4v,video/*\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这两种写法的区别在于对不同机型来说兼容性可能略有区别，但是具体的情况未做一一测试总结。经过初步测试，该方案可以在以下环境中运行：</p>\n<ul>\n<li>Android 4.4+</li>\n<li>iOS 6.0+</li>\n<li>微信webview</li>\n<li>Chrome for Android</li>\n</ul>\n<blockquote>\n<p>注：该兼容性中介我们简单测试一部分机器后的结论，不做任何保证。事实上我们也碰到一部分Android机器是例外。下文兼容性列表同理。</p>\n</blockquote>\n<p>该方案API简单易用，且功能由浏览器或webview原生实现，性能比较稳定。</p>\n<p>该方案缺点：非实时录制视频，无法确定用户是录制的还是选取的已有的视频文件。</p>\n<p>相关demo <a href=\"http://codepen.io/TooBug/embed/RRZQxr/\" target=\"_blank\" rel=\"noopener\">http://codepen.io/TooBug/embed/RRZQxr/</a></p>\n<h2 id=\"方案二：视频录制\"><a href=\"#方案二：视频录制\" class=\"headerlink\" title=\"方案二：视频录制\"></a>方案二：视频录制</h2><p>要使用web录制视频，需要两个相关API，一个用于调用摄像头，一个用于录制。调用摄像头后会产生一个视频流，然后调用录制API将这个视频流压缩和保存。</p>\n<p>其中调用摄像头的API叫作<code>getUserMedia()</code>，以前属于<code>navigator</code>对象（Chrome 21-49），后来规范修改，现在属于<code>MediaDevices</code>（Chrome 49+）。该API还负责提示用户授权。</p>\n<p>视频流叫作<code>MediaStream</code>。拿到<code>MediaStream</code>后，可配合<code>ObjectURL</code>，产生一个虚拟URL，供浏览器<code>video</code>标签调用，实现视频回放（回显）。</p>\n<p>用于录制视频的API叫作<code>MediaRecorder</code>。该API在Chrome 49+可用。</p>\n<p>该方案兼容性：</p>\n<ul>\n<li>Chrome 49+</li>\n<li>Firefox 29+</li>\n<li>Chrome for Android</li>\n</ul>\n<p>相关Demo地址：<a href=\"https://simpl.info/mediarecorder/\" target=\"_blank\" rel=\"noopener\">https://simpl.info/mediarecorder/</a></p>\n<h2 id=\"方案三：WebRTC视频流远程录制\"><a href=\"#方案三：WebRTC视频流远程录制\" class=\"headerlink\" title=\"方案三：WebRTC视频流远程录制\"></a>方案三：WebRTC视频流远程录制</h2><p>WebRTC是指实现web实时通信的一系列规范，一般可以通俗地理解为“P2P视频聊天”。实现这个功能依赖于上方说的摄像头调用API <code>getUserMedia()</code>取到<code>MediaStream</code>，同时还依赖一个P2P网络连接和传输的API来实现视频流数据的传输，这个API叫作<code>RTCPeerConnection</code>。</p>\n<p>在实际运作时，需要服务额外处理两个浏览器在P2P通信之前的Session建立相关的逻辑：</p>\n<p><img src=\"/images/capture-video-on-web/1.png\" alt=\"WebRTC实际原理图\"></p>\n<p>同时，还需要服务端支持来完成浏览器在NAT等复杂网络环境中的通信“打洞”需求：</p>\n<p><img src=\"/images/capture-video-on-web/2.png\" alt=\"WebRTC实际原理图\"></p>\n<p>使用该方案录制视频的原理是通过服务端模拟一个浏览器（Peer），实现相关视频流接收解码协议以及<code>RTCPeerConnection</code>协议。</p>\n<p>Session管理的服务端和打洞的服务端实现和维护比较麻烦，但有例可循，而模拟Peer的部分则实现过于复杂，因此，虽然该方案理论上可行，且浏览器兼容性稍好，但仍然认为该方案在实际操作中不可行。</p>\n<p>这个方案的兼容性</p>\n<ul>\n<li>Firefox 17+</li>\n<li>Chrome 21+</li>\n<li>Edge 12+</li>\n<li>Chrome for Android</li>\n</ul>\n<h2 id=\"方案四：截图上传\"><a href=\"#方案四：截图上传\" class=\"headerlink\" title=\"方案四：截图上传\"></a>方案四：截图上传</h2><p>该方案原理：在使用<code>getUserMedia()</code>获取视频流之后，将该视频流定时投映到一张2d画布中（<code>canvas</code>），然后将画布中的画面提取成图片数据（<code>base64</code>）。</p>\n<p>该方案原理比较简单，兼容性</p>\n<ul>\n<li>Firefox 17+</li>\n<li>Chrome 21+</li>\n<li>Edge 12+</li>\n<li>Chrome for Android</li>\n</ul>\n<p>但同时也有明显缺陷：</p>\n<ul>\n<li>无法获取声音数据，只能获取到图片数据</li>\n<li>需要上传后由后台转换成视频</li>\n<li>帧数多时图片可能较大，造成性能问题（比如崩溃）</li>\n<li>帧数多时图片可能较大，造成网络传输慢</li>\n</ul>\n<h2 id=\"相关文档\"><a href=\"#相关文档\" class=\"headerlink\" title=\"相关文档\"></a>相关文档</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator/getUserMedia\" target=\"_blank\" rel=\"noopener\">MDN上的navigator.getUserMedia文档</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\" target=\"_blank\" rel=\"noopener\">MDN上的MediaDevices.getUserMedia文档</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaStream\" target=\"_blank\" rel=\"noopener\">MDN上的MediaStream文档</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MediaRecorder\" target=\"_blank\" rel=\"noopener\">MDN上的MediaRecorder文档</a></li>\n<li><a href=\"https://www.w3.org/TR/mediacapture-streams/\" target=\"_blank\" rel=\"noopener\">W3C Media Capture and Streams规范（发布候选状态）</a></li>\n<li><a href=\"https://w3c.github.io/mediacapture-record/MediaRecorder.html\" target=\"_blank\" rel=\"noopener\">W3C MediaRecording规范（Working Draft草稿状态）</a></li>\n<li><a href=\"http://w3c.github.io/webrtc-pc/\" target=\"_blank\" rel=\"noopener\">W3C webrtc规范（Working Draft草稿状态）</a></li>\n<li><a href=\"https://webrtc.github.io\" target=\"_blank\" rel=\"noopener\">webrtc官方网站</a></li>\n<li><a href=\"https://codelabs.developers.google.com/codelabs/webrtc-web/\" target=\"_blank\" rel=\"noopener\">教程：webrtc入门</a></li>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/webrtc/infrastructure/\" target=\"_blank\" rel=\"noopener\">文章：真实世界中的webrtc</a></li>\n</ul>"},{"title":"DNS 请求报文详解","date":"2016-11-16T10:00:00.000Z","author":"Jin","_content":"\n## DNS\nDNS【域名系统：（英文：Domain Name System，缩写：DNS）】是互联网的一项服务。 它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。 DNS使用TCP和UDP端口53。\n\n## 白话版\n就是客户端（例如：浏览器）传入的网站域名，到DNS列表中找到对应的ip返回给客户端，然后客户端根据ip就可以找到对应的服务器，就可以向服务器发送请求了。\n\n说的在直接点：DNS目的就是把对应服务器IP给客户端。最后客户端与服务器通信就没DNS什么事了。\n\n<!--more-->\n\n## DNS 报文格式\nDNS报文格式，不论是请求报文，还是DNS服务器返回的应答报文，都使用统一的格式。\n\n*   `Header` 报文头\n*   `Question` 查询的问题\n*   `Answer`   应答\n*   `Authority` 授权应答\n*   `Additional` 附加信息\n\n``` \n  DNS format\n\n  +--+--+--+--+--+--+--+\n  |        Header      |\n  +--+--+--+--+--+--+--+\n  |      Question      |\n  +--+--+--+--+--+--+--+\n  |      Answer        |\n  +--+--+--+--+--+--+--+\n  |      Authority     |\n  +--+--+--+--+--+--+--+\n  |      Additional    |\n  +--+--+--+--+--+--+--+\n```\n\n\n### Header 报文头\n\n*   `ID`:  `2`个字节(`16bit`)，标识字段，客户端会解析服务器返回的DNS应答报文，获取`ID`值与请求报文设置的`ID`值做比较，如果相同，则认为是同一个DNS会话。\n*   `FLAGS`: `2`个字节(`16bit`)的标志字段。包含以下属性:\n    *   `QR`: `0`表示查询报文，`1`表示响应报文;\n    *   `opcode`: 通常值为`0`（标准查询），其他值为`1`（反向查询）和`2`（服务器状态请求）,`[3,15]`保留值;\n    *   `AA`: 表示授权回答（authoritative answer）-- 这个比特位在应答的时候才有意义，指出给出应答的服务器是查询域名的授权解析服务器;\n    *   `TC`: 表示可截断的（truncated）--用来指出报文比允许的长度还要长，导致被截断;\n    *   `RD`: 表示期望递归(Recursion Desired) -- 这个比特位被请求设置，应答的时候使用的相同的值返回。如果设置了RD，就建议域名服务器进行递归解析，递归查询的支持是可选的;\n    *   `RA`: 表示支持递归(Recursion Available) --  这个比特位在应答中设置或取消，用来代表服务器是否支持递归查询;\n    *   `Z` : 保留值，暂未使用;\n    *   `RCODE`: 应答码(Response code) - 这4个比特位在应答报文中设置，代表的含义如下:\n        *   `0` : 没有错误。\n        *   `1` : 报文格式错误(Format error) - 服务器不能理解请求的报文;\n        *   `2` : 服务器失败(Server failure) - 因为服务器的原因导致没办法处理这个请求;\n        *   `3` : 名字错误(Name Error) - 只有对授权域名解析服务器有意义，指出解析的域名不存在;\n        *   `4` : 没有实现(Not Implemented) - 域名服务器不支持查询类型;\n        *   `5` : 拒绝(Refused) - 服务器由于设置的策略拒绝给出应答.比如，服务器不希望对某些请求者给出应答，或者服务器不希望进行某些操作（比如区域传送zone transfer）;\n        *   `[6,15]` : 保留值，暂未使用。\n*   `QDCOUNT`: 无符号`16bit`整数表示报文请求段中的问题记录数。\n*   `ANCOUNT`: 无符号`16bit`整数表示报文回答段中的回答记录数。\n*   `NSCOUNT`: 无符号`16bit`整数表示报文授权段中的授权记录数。\n*   `ARCOUNT`: 无符号`16bit`整数表示报文附加段中的附加记录数。\n\n```\n  Header format\n\n    0  1  2  3  4  5  6  7  0  1  2  3  4  5  6  7\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                      ID                       |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |QR|  opcode   |AA|TC|RD|RA|   Z    |   RCODE   |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    QDCOUNT                    |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    ANCOUNT                    |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    NSCOUNT                    |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    ARCOUNT                    |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n```\n\n\n### Question 查询字段\n\n*   `QNAME`  无符号`8bit`为单位长度不限表示查询名(广泛的说就是：域名).\n*   `QTYPE`  无符号`16bit`整数表示查询的协议类型.\n*   `QCLASS` 无符号`16bit`整数表示查询的类,比如，`IN`代表Internet.\n\n```\n  Question format\n\n    0  1  2  3  4  5  6  7  0  1  2  3  4  5  6  7\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                     ...                       |\n  |                    QNAME                      |\n  |                     ...                       |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    QTYPE                      |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    QCLASS                     |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n```\n\n### Answer/Authority/Additional\n这3个字段的格式都是一样的。\n\n*   `NAME` 资源记录包含的域名.\n*   `TYPE` 表示`DNS`协议的类型.\n*   `CLASS` 表示RDATA的类.\n*   `TTL` 4字节无符号整数表示资源记录可以缓存的时间。0代表只能被传输，但是不能被缓存。\n*   `RDLENGTH` 2个字节无符号整数表示RDATA的长度\n*   `RDATA` 不定长字符串来表示记录，格式根TYPE和CLASS有关。比如，TYPE是A，CLASS 是 IN，那么RDATA就是一个4个字节的ARPA网络地址。\n\n```\n  Answer/Authority/Additional format\n\n    0  1  2  3  4  5  6  7  0  1  2  3  4  5  6  7\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    NAME                       |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    TYPE                       |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    CLASS                      |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    TTL                        |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    RDLENGTH                   |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    RDATA                      |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\n```\n\n## DNS请求报文解析\n光说不做假把式。那如何对DNS请求报文进行解析呢。\n先来看一下一个DNS请求报文：\n\n```\n  6dca 0100 0001 0000 0000 0000 0377 7777\n  0561 7070 6c65 0363 6f6d 0000 0100 01 \n```\n\n这是一个`Buffer`实例，看完后是不是一脸懵B，别紧张，先看解析后`console.log`大概的样子，是不是世界瞬间变美好了。\n\n下面是一个请求查询`www.apple.com`网站ip的DNS请求报文。\n\n```\n  //Header\n  ID:  <Buffer 6d ca>\n  FLAG:  QR:  0 opcode:  0 AA:  0 TC:  0 RD:  1\n  RA:  0 zero:  0 recode:  0\n  QDCOUNT:  <Buffer 00 01> ANCOUNT:  <Buffer 00 00> NSCOUNT:  <Buffer 00 00> ARCOUNT:  <Buffer 00 00>\n  \n  //QUESTION\n  QNAME:  <Buffer 03 77 77 77 05 61 70 70 6c 65 03 63 6f 6d 00> QTYPE:  <Buffer 00 01> QCLASS:  <Buffer 00 01>\n  \n  QUESTION STRING:  www.apple.com \n```\n\n请求报文解析分为2个小块：\n\n*   `Header`报文头解析\n*   `QUESTION`查询问题解析\n\n### Header 报文头解析\n对Header部分进行解析。\n\n先确定一下每个字段的大小：\n\n```\n  ID: 2 字节\n  QR: 1 bit\n  opcode: 4bit\n  AA: 1bit\n  TC: 1bit\n  RD: 1bit\n  RA: 1bit\n  Z : 3bit\n  RCODE: 4bit\n  QDCOUNT: 2 字节\n  ANCOUNT: 2 字节\n  NSCOUNT: 2 字节\n  ARCOUNT: 2 字节\n```\n\n共12个字节。\n\n假如我们抛开第`[3,4]`个字节，其实很容易就可以把header解析，但是单位为`bit`的就需要对`buffer`实例的值进行位运算操作了。\n\n所以以下参数的值可以直接从`buffer`中获取：\n\n```js\n  var header = {};\n\n  header.id = buf.slice(0,2);\n  header.qdcount = buf.slice(4,6);\n  header.ancount = buf.slice(6,8);\n  header.nscount = buf.slice(8,10);\n  header.arcount = buf.slice(10, 12);\n```\n\n难点就是如何获取第`[3,4]`的值，首先需要把`buffer`实例对应的字节转成`2`进制字符串然后转换为数值，然后按参数的长度计算最后的结果。\n\n第一步，将`buffer`转换为2进制字符串然后转换为数值(假设dns报文是`buf`)：\n\n```js\n  //对第3个字节转成`2`进制字符串然后转换为数值\n  var b = buf.slice(2,3).toString('binary', 0, 1).charCodeAt(0);\n```\n\n第2步，进行数据切割：\n\n首先需要理解下面这个函数，功能无非就是提取从`offset`开始，长度为`length`数字位，通过位运算转换为`Integer`类型的数然后返回。\n\n说直白一点，就是把你需要的那一段2进制数据转换为`Integer`类型，并返回。\n\n```js\n  var bitSlice = function(b, offset, length) {\n      return (b >>> (7-(offset+length-1))) & ~(0xff << length);\n  };\n```\n\n> 注意这里因为只考虑一个字节 === `8bit`，所以可以写成`(7-(offset+length-1))` 和 `0xff << length`。假如不是一个字节，那么可能需要改变一下里面的数字`7`和`0xff`的值。\n\ndemo走起：\n\n```js\n  'use strict';\n\n  var buf = Buffer.from([0x2d]);\n  var b = buf.toString('binary' , 0,1).charCodeAt(0);\n\n  console.log(bitSlice(b , 0, 1));//0\n  console.log(bitSlice(b , 1, 1));//0\n  console.log(bitSlice(b , 2, 1));//1\n  console.log(bitSlice(b , 3, 1));//0\n  console.log(bitSlice(b , 4, 1));//1\n  console.log(bitSlice(b , 5, 1));//1\n  console.log(bitSlice(b , 6, 1));//0\n  console.log(bitSlice(b , 7, 1));//1\n  console.log(bitSlice(b , 5, 3));//5  === 0000 0101\n\n  /**\n   * 16进制：0x2d\n   * 10进制：45\n   * 2进制： 0010 1101\n   *\n   * (45,0,1)：45>>>7 & ~(0xff<<1) \n   *    45>>>7 = 0000 0000\n   *    (0xff<<1)  = 0000 0000 0000 0000 0000 0001 1111 1110   510\n   *    ~(0xff<<1) = 1111 1111 1111 1111 1111 1110 0000 0001   -511 = -((0xff<<1)+1)\n   *\n   *      0000 0000 0000 0000 0000 0000 0000 0000  === 45>>>7\n   *    & 1111 1111 1111 1111 1111 1110 0000 0001  === ~(0xff<<1)\n   *      ----------------------------------------\n   *      0000 0000 0000 0000 0000 0000 0000 0000 = 0\n   *\n   * (45,2,1)：45>>>5 & ~(0xff<<1) \n   *    45>>>5 = 0000 0001\n   *    (0xff<<1)  = 0000 0000 0000 0000 0000 0001 1111 1110   510\n   *    ~(0xff<<1) = 1111 1111 1111 1111 1111 1110 0000 0001   -511 = -((0xff<<1)+1)\n   *\n   *      0000 0000 0000 0000 0000 0000 0000 0001  === 45>>>5\n   *    & 1111 1111 1111 1111 1111 1110 0000 0001  === ~(0xff<<1)\n   *      ----------------------------------------\n   *      0000 0000 0000 0000 0000 0000 0000 0001 = 1\n   */\n```\n\n理解了上面的函数的作用之后就可以真正的使用这个函数取DNS报文Header的第`[3,4]`字节中的值。\n\n信手拈来：\n\n```js\n  //第3个字节\n  var b = buf.slice(2,3).toString('binary', 0, 1).charCodeAt(0);\n  header.qr = bitSlice(b,0,1);\n  header.opcode = bitSlice(b,1,4);\n  header.aa = bitSlice(b,5,1);\n  header.tc = bitSlice(b,6,1);\n  header.rd = bitSlice(b,7,1);\n  \n  //第4个字节\n  b = buf.slice(3,4).toString('binary', 0, 1).charCodeAt(0);\n  header.ra = bitSlice(b,0,1);\n  header.z = bitSlice(b,1,3);\n  header.rcode = bitSlice(b,4,4);\n```\n\n### QUESTION 查询字段解析\n主要包括了查询域名，协议类型及类别。\n\n这3个参数`QTYPE`和`QCLASS`是固定`2`字节，`QNAME`是不固定的。\n\n\n所以取数据的时候需要注意，因为`QUESTION`信息是跟随在`Header`之后，所以要从第`12`个字节往后取：\n\n```js\nvar question = {};\n  question.qname = buf.slice(12, buf.length-4);\n  question.qtype = buf.slice(buf.length-4, buf.length-2);\n  question.qclass = buf.slice(buf.length-2, buf.length);\n```\n\n`qname`使用的是`len+data`混合编码，以`0x00`结尾。每个字符串都以长度开始，然后后面接内容。`qname`长度必须以`8`字节为单位。\n\n例如`www.apple.com`(注意：中间的`.`是解析的时候自己添加上去的)，它的`buffer`实例表示为：\n\n```\n  03 77 77 77 05 61 70 70 6c 65 03 63 6f 6d 00\n  //约等于\n  3www5apple3com\n```\n\n也就是第一位表示的是长度，后面跟随相同长度的数据，依此类推。\n\n```js\n  var domainify = function(qname) {\n    var parts = [];\n\n    for (var i = 0; i < qname.length && qname[i];) {\n      var len = qname[i] , offset = i+1;//获取每一块域名长度\n\n      parts.push(qname.slice(offset,offset+len).toString());//获取每一块域名\n\n      i = offset+len;\n    }\n\n    return parts.join('.');//拼凑成完整域名\n  };\n```\n\n\n`qtype`协议类型. [查看详情](https://nodejs.org/dist/latest-v6.x/docs/api/dns.html#dns_dns_resolve_hostname_rrtype_callback)\n\n协议类型对应的列表：\n\n| 值 | 协议类型 | 描述 |\n| --- | --- | --- |\n| 1 | A | IPv4地址 |\n| 2 | NS | 名字服务器 |\n| 5 | CNAME | 规范名称定义主机的正式名字的别名 |\n| 6 | SOA | 开始授权标记一个区的开始 |\n| 11 | WKS | 熟知服务定义主机提供的网络服务 |\n| 12 | PTR | 指针把IP地址转化为域名 |\n| 13 | HINFO | 主机信息给出主机使用的硬件和操作系统的表述 |\n| 15 | MX | 邮件交换把邮件改变路由送到邮件服务器 |\n| 28 | AAAA | IPv6地址 |\n| 252 | AXFR | 传送整个区的请求 |\n| 255 | ANY | 对所有记录的请求 |\n\n`qclass`通常为1，指Internet数据.\n\n\n### 应用场景--dns请求代理\n将以下代码保存为`.js`文件，然后使用`Node.js`执行，使用相同局域网内的机器配置DNS到这台机器即可。\n\n以下代码仅供参考：\n\n```js\n  'use strict';\n\n  const dgram = require('dgram');\n  const dns = require('dns');\n  const fs = require('fs');\n  const server = dgram.createSocket('udp4');\n\n  var bitSlice = function(b, offset, length) {\n      return (b >>> (7-(offset+length-1))) & ~(0xff << length);\n  };\n\n  var domainify = function(qname) {\n      var parts = [];\n\n      for (var i = 0; i < qname.length && qname[i];) {\n          var length = qname[i];\n          var offset = i+1;\n\n          parts.push(qname.slice(offset,offset+length).toString());\n\n          i = offset+length;\n      }\n\n      return parts.join('.');\n  };\n\n  var parse = function(buf) {\n      var header = {};\n      var question = {};\n      var b = buf.slice(2,3).toString('binary', 0, 1).charCodeAt(0);\n      console.log('b：',b,buf.slice(2,3));\n      header.id = buf.slice(0,2);\n      header.qr = bitSlice(b,0,1);\n      header.opcode = bitSlice(b,1,4);\n      header.aa = bitSlice(b,5,1);\n      header.tc = bitSlice(b,6,1);\n      header.rd = bitSlice(b,7,1);\n\n      b = buf.slice(3,4).toString('binary', 0, 1).charCodeAt(0);\n\n      header.ra = bitSlice(b,0,1);\n      header.z = bitSlice(b,1,3);\n      header.rcode = bitSlice(b,4,4);\n\n      header.qdcount = buf.slice(4,6);\n      header.ancount = buf.slice(6,8);\n      header.nscount = buf.slice(8,10);\n      header.arcount = buf.slice(10, 12);\n\n      question.qname = buf.slice(12, buf.length-4);\n      question.qtype = buf.slice(buf.length-4, buf.length-2);\n      question.qclass = buf.slice(buf.length-2, buf.length);\n\n      return {header:header, question:question};\n  };\n\n  server.on('error' , (err)=>{\n      console.log(`server error: ${err.stack}`);\n  });\n\n  server.on('message' , (msg , rinfo)=>{\n      //fs.writeFile('dns.json' ,msg, {flag:'w',endcoding:'utf-8'} ,(err)=>{\n      //    console.log(err);\n      //});\n      var query = parse(msg);\n      console.log('标识ID: ' ,query.header.id);\n      console.log('标识FLAG: ' , 'QR: ',query.header.qr , 'opcode: ',query.header.opcode , 'AA: ',query.header.aa , 'TC: ',query.header.tc,'RD: ',query.header.rd);\n      \n      console.log('RA: ',query.header.ra , 'zero: ',query.header.z , 'recode: ',query.header.rcode);\n\n      console.log('QDCOUNT: ',query.header.qdcount , 'ANCOUNT: ' , query.header.ancount, 'NSCOUNT: ' , query.header.nscount,'ARCOUNT: ',query.header.arcount);\n          \n      console.log('QNAME: ',query.question.qname , 'QTYPE: ', query.question.qtype ,'QCLASS: ' , query.question.qclass);\n\n      console.log('QUESTION STRING: ' ,domainify(query.question.qname));\n\n      server.close();\n  });\n\n  server.on('listening' , ()=>{\n      var address = server.address();\n      console.log(`server listening ${address.address}:${address.port}`);\n  });\n\n  server.bind({port:53,address:'8.8.8.8'});//address需要指定到你要用于进行代理的机器ip\n\n```\n\n下一篇： [DNS 响应报文详解](/posts/dns-response)\n\n### 参考资料\n\n[http://docstore.mik.ua/orelly/networking_2ndEd/dns/appa_02.htm](http://docstore.mik.ua/orelly/networking_2ndEd/dns/appa_02.htm)\n\n[http://www.comptechdoc.org/independent/networking/terms/dns-message-format.html](http://www.comptechdoc.org/independent/networking/terms/dns-message-format.html)\n\n[http://www.iprotocolsec.com/2012/01/13/%E4%BD%BF%E7%94%A8wireshark%E5%AD%A6%E4%B9%A0dns%E5%8D%8F%E8%AE%AE%E5%8F%8Adns%E6%AC%BA%E9%AA%97%E5%8E%9F%E7%90%86/](http://www.iprotocolsec.com/2012/01/13/%E4%BD%BF%E7%94%A8wireshark%E5%AD%A6%E4%B9%A0dns%E5%8D%8F%E8%AE%AE%E5%8F%8Adns%E6%AC%BA%E9%AA%97%E5%8E%9F%E7%90%86/)","source":"_posts/dns-request.md","raw":"---\ntitle: DNS 请求报文详解\ndate: 2016-11-16 18:00\ncategory: Node.js\ntags: [dns,dgram,JavaScript]\nauthor: Jin\n---\n\n## DNS\nDNS【域名系统：（英文：Domain Name System，缩写：DNS）】是互联网的一项服务。 它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。 DNS使用TCP和UDP端口53。\n\n## 白话版\n就是客户端（例如：浏览器）传入的网站域名，到DNS列表中找到对应的ip返回给客户端，然后客户端根据ip就可以找到对应的服务器，就可以向服务器发送请求了。\n\n说的在直接点：DNS目的就是把对应服务器IP给客户端。最后客户端与服务器通信就没DNS什么事了。\n\n<!--more-->\n\n## DNS 报文格式\nDNS报文格式，不论是请求报文，还是DNS服务器返回的应答报文，都使用统一的格式。\n\n*   `Header` 报文头\n*   `Question` 查询的问题\n*   `Answer`   应答\n*   `Authority` 授权应答\n*   `Additional` 附加信息\n\n``` \n  DNS format\n\n  +--+--+--+--+--+--+--+\n  |        Header      |\n  +--+--+--+--+--+--+--+\n  |      Question      |\n  +--+--+--+--+--+--+--+\n  |      Answer        |\n  +--+--+--+--+--+--+--+\n  |      Authority     |\n  +--+--+--+--+--+--+--+\n  |      Additional    |\n  +--+--+--+--+--+--+--+\n```\n\n\n### Header 报文头\n\n*   `ID`:  `2`个字节(`16bit`)，标识字段，客户端会解析服务器返回的DNS应答报文，获取`ID`值与请求报文设置的`ID`值做比较，如果相同，则认为是同一个DNS会话。\n*   `FLAGS`: `2`个字节(`16bit`)的标志字段。包含以下属性:\n    *   `QR`: `0`表示查询报文，`1`表示响应报文;\n    *   `opcode`: 通常值为`0`（标准查询），其他值为`1`（反向查询）和`2`（服务器状态请求）,`[3,15]`保留值;\n    *   `AA`: 表示授权回答（authoritative answer）-- 这个比特位在应答的时候才有意义，指出给出应答的服务器是查询域名的授权解析服务器;\n    *   `TC`: 表示可截断的（truncated）--用来指出报文比允许的长度还要长，导致被截断;\n    *   `RD`: 表示期望递归(Recursion Desired) -- 这个比特位被请求设置，应答的时候使用的相同的值返回。如果设置了RD，就建议域名服务器进行递归解析，递归查询的支持是可选的;\n    *   `RA`: 表示支持递归(Recursion Available) --  这个比特位在应答中设置或取消，用来代表服务器是否支持递归查询;\n    *   `Z` : 保留值，暂未使用;\n    *   `RCODE`: 应答码(Response code) - 这4个比特位在应答报文中设置，代表的含义如下:\n        *   `0` : 没有错误。\n        *   `1` : 报文格式错误(Format error) - 服务器不能理解请求的报文;\n        *   `2` : 服务器失败(Server failure) - 因为服务器的原因导致没办法处理这个请求;\n        *   `3` : 名字错误(Name Error) - 只有对授权域名解析服务器有意义，指出解析的域名不存在;\n        *   `4` : 没有实现(Not Implemented) - 域名服务器不支持查询类型;\n        *   `5` : 拒绝(Refused) - 服务器由于设置的策略拒绝给出应答.比如，服务器不希望对某些请求者给出应答，或者服务器不希望进行某些操作（比如区域传送zone transfer）;\n        *   `[6,15]` : 保留值，暂未使用。\n*   `QDCOUNT`: 无符号`16bit`整数表示报文请求段中的问题记录数。\n*   `ANCOUNT`: 无符号`16bit`整数表示报文回答段中的回答记录数。\n*   `NSCOUNT`: 无符号`16bit`整数表示报文授权段中的授权记录数。\n*   `ARCOUNT`: 无符号`16bit`整数表示报文附加段中的附加记录数。\n\n```\n  Header format\n\n    0  1  2  3  4  5  6  7  0  1  2  3  4  5  6  7\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                      ID                       |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |QR|  opcode   |AA|TC|RD|RA|   Z    |   RCODE   |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    QDCOUNT                    |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    ANCOUNT                    |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    NSCOUNT                    |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    ARCOUNT                    |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n```\n\n\n### Question 查询字段\n\n*   `QNAME`  无符号`8bit`为单位长度不限表示查询名(广泛的说就是：域名).\n*   `QTYPE`  无符号`16bit`整数表示查询的协议类型.\n*   `QCLASS` 无符号`16bit`整数表示查询的类,比如，`IN`代表Internet.\n\n```\n  Question format\n\n    0  1  2  3  4  5  6  7  0  1  2  3  4  5  6  7\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                     ...                       |\n  |                    QNAME                      |\n  |                     ...                       |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    QTYPE                      |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    QCLASS                     |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n```\n\n### Answer/Authority/Additional\n这3个字段的格式都是一样的。\n\n*   `NAME` 资源记录包含的域名.\n*   `TYPE` 表示`DNS`协议的类型.\n*   `CLASS` 表示RDATA的类.\n*   `TTL` 4字节无符号整数表示资源记录可以缓存的时间。0代表只能被传输，但是不能被缓存。\n*   `RDLENGTH` 2个字节无符号整数表示RDATA的长度\n*   `RDATA` 不定长字符串来表示记录，格式根TYPE和CLASS有关。比如，TYPE是A，CLASS 是 IN，那么RDATA就是一个4个字节的ARPA网络地址。\n\n```\n  Answer/Authority/Additional format\n\n    0  1  2  3  4  5  6  7  0  1  2  3  4  5  6  7\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    NAME                       |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    TYPE                       |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    CLASS                      |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    TTL                        |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    RDLENGTH                   |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    RDATA                      |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\n```\n\n## DNS请求报文解析\n光说不做假把式。那如何对DNS请求报文进行解析呢。\n先来看一下一个DNS请求报文：\n\n```\n  6dca 0100 0001 0000 0000 0000 0377 7777\n  0561 7070 6c65 0363 6f6d 0000 0100 01 \n```\n\n这是一个`Buffer`实例，看完后是不是一脸懵B，别紧张，先看解析后`console.log`大概的样子，是不是世界瞬间变美好了。\n\n下面是一个请求查询`www.apple.com`网站ip的DNS请求报文。\n\n```\n  //Header\n  ID:  <Buffer 6d ca>\n  FLAG:  QR:  0 opcode:  0 AA:  0 TC:  0 RD:  1\n  RA:  0 zero:  0 recode:  0\n  QDCOUNT:  <Buffer 00 01> ANCOUNT:  <Buffer 00 00> NSCOUNT:  <Buffer 00 00> ARCOUNT:  <Buffer 00 00>\n  \n  //QUESTION\n  QNAME:  <Buffer 03 77 77 77 05 61 70 70 6c 65 03 63 6f 6d 00> QTYPE:  <Buffer 00 01> QCLASS:  <Buffer 00 01>\n  \n  QUESTION STRING:  www.apple.com \n```\n\n请求报文解析分为2个小块：\n\n*   `Header`报文头解析\n*   `QUESTION`查询问题解析\n\n### Header 报文头解析\n对Header部分进行解析。\n\n先确定一下每个字段的大小：\n\n```\n  ID: 2 字节\n  QR: 1 bit\n  opcode: 4bit\n  AA: 1bit\n  TC: 1bit\n  RD: 1bit\n  RA: 1bit\n  Z : 3bit\n  RCODE: 4bit\n  QDCOUNT: 2 字节\n  ANCOUNT: 2 字节\n  NSCOUNT: 2 字节\n  ARCOUNT: 2 字节\n```\n\n共12个字节。\n\n假如我们抛开第`[3,4]`个字节，其实很容易就可以把header解析，但是单位为`bit`的就需要对`buffer`实例的值进行位运算操作了。\n\n所以以下参数的值可以直接从`buffer`中获取：\n\n```js\n  var header = {};\n\n  header.id = buf.slice(0,2);\n  header.qdcount = buf.slice(4,6);\n  header.ancount = buf.slice(6,8);\n  header.nscount = buf.slice(8,10);\n  header.arcount = buf.slice(10, 12);\n```\n\n难点就是如何获取第`[3,4]`的值，首先需要把`buffer`实例对应的字节转成`2`进制字符串然后转换为数值，然后按参数的长度计算最后的结果。\n\n第一步，将`buffer`转换为2进制字符串然后转换为数值(假设dns报文是`buf`)：\n\n```js\n  //对第3个字节转成`2`进制字符串然后转换为数值\n  var b = buf.slice(2,3).toString('binary', 0, 1).charCodeAt(0);\n```\n\n第2步，进行数据切割：\n\n首先需要理解下面这个函数，功能无非就是提取从`offset`开始，长度为`length`数字位，通过位运算转换为`Integer`类型的数然后返回。\n\n说直白一点，就是把你需要的那一段2进制数据转换为`Integer`类型，并返回。\n\n```js\n  var bitSlice = function(b, offset, length) {\n      return (b >>> (7-(offset+length-1))) & ~(0xff << length);\n  };\n```\n\n> 注意这里因为只考虑一个字节 === `8bit`，所以可以写成`(7-(offset+length-1))` 和 `0xff << length`。假如不是一个字节，那么可能需要改变一下里面的数字`7`和`0xff`的值。\n\ndemo走起：\n\n```js\n  'use strict';\n\n  var buf = Buffer.from([0x2d]);\n  var b = buf.toString('binary' , 0,1).charCodeAt(0);\n\n  console.log(bitSlice(b , 0, 1));//0\n  console.log(bitSlice(b , 1, 1));//0\n  console.log(bitSlice(b , 2, 1));//1\n  console.log(bitSlice(b , 3, 1));//0\n  console.log(bitSlice(b , 4, 1));//1\n  console.log(bitSlice(b , 5, 1));//1\n  console.log(bitSlice(b , 6, 1));//0\n  console.log(bitSlice(b , 7, 1));//1\n  console.log(bitSlice(b , 5, 3));//5  === 0000 0101\n\n  /**\n   * 16进制：0x2d\n   * 10进制：45\n   * 2进制： 0010 1101\n   *\n   * (45,0,1)：45>>>7 & ~(0xff<<1) \n   *    45>>>7 = 0000 0000\n   *    (0xff<<1)  = 0000 0000 0000 0000 0000 0001 1111 1110   510\n   *    ~(0xff<<1) = 1111 1111 1111 1111 1111 1110 0000 0001   -511 = -((0xff<<1)+1)\n   *\n   *      0000 0000 0000 0000 0000 0000 0000 0000  === 45>>>7\n   *    & 1111 1111 1111 1111 1111 1110 0000 0001  === ~(0xff<<1)\n   *      ----------------------------------------\n   *      0000 0000 0000 0000 0000 0000 0000 0000 = 0\n   *\n   * (45,2,1)：45>>>5 & ~(0xff<<1) \n   *    45>>>5 = 0000 0001\n   *    (0xff<<1)  = 0000 0000 0000 0000 0000 0001 1111 1110   510\n   *    ~(0xff<<1) = 1111 1111 1111 1111 1111 1110 0000 0001   -511 = -((0xff<<1)+1)\n   *\n   *      0000 0000 0000 0000 0000 0000 0000 0001  === 45>>>5\n   *    & 1111 1111 1111 1111 1111 1110 0000 0001  === ~(0xff<<1)\n   *      ----------------------------------------\n   *      0000 0000 0000 0000 0000 0000 0000 0001 = 1\n   */\n```\n\n理解了上面的函数的作用之后就可以真正的使用这个函数取DNS报文Header的第`[3,4]`字节中的值。\n\n信手拈来：\n\n```js\n  //第3个字节\n  var b = buf.slice(2,3).toString('binary', 0, 1).charCodeAt(0);\n  header.qr = bitSlice(b,0,1);\n  header.opcode = bitSlice(b,1,4);\n  header.aa = bitSlice(b,5,1);\n  header.tc = bitSlice(b,6,1);\n  header.rd = bitSlice(b,7,1);\n  \n  //第4个字节\n  b = buf.slice(3,4).toString('binary', 0, 1).charCodeAt(0);\n  header.ra = bitSlice(b,0,1);\n  header.z = bitSlice(b,1,3);\n  header.rcode = bitSlice(b,4,4);\n```\n\n### QUESTION 查询字段解析\n主要包括了查询域名，协议类型及类别。\n\n这3个参数`QTYPE`和`QCLASS`是固定`2`字节，`QNAME`是不固定的。\n\n\n所以取数据的时候需要注意，因为`QUESTION`信息是跟随在`Header`之后，所以要从第`12`个字节往后取：\n\n```js\nvar question = {};\n  question.qname = buf.slice(12, buf.length-4);\n  question.qtype = buf.slice(buf.length-4, buf.length-2);\n  question.qclass = buf.slice(buf.length-2, buf.length);\n```\n\n`qname`使用的是`len+data`混合编码，以`0x00`结尾。每个字符串都以长度开始，然后后面接内容。`qname`长度必须以`8`字节为单位。\n\n例如`www.apple.com`(注意：中间的`.`是解析的时候自己添加上去的)，它的`buffer`实例表示为：\n\n```\n  03 77 77 77 05 61 70 70 6c 65 03 63 6f 6d 00\n  //约等于\n  3www5apple3com\n```\n\n也就是第一位表示的是长度，后面跟随相同长度的数据，依此类推。\n\n```js\n  var domainify = function(qname) {\n    var parts = [];\n\n    for (var i = 0; i < qname.length && qname[i];) {\n      var len = qname[i] , offset = i+1;//获取每一块域名长度\n\n      parts.push(qname.slice(offset,offset+len).toString());//获取每一块域名\n\n      i = offset+len;\n    }\n\n    return parts.join('.');//拼凑成完整域名\n  };\n```\n\n\n`qtype`协议类型. [查看详情](https://nodejs.org/dist/latest-v6.x/docs/api/dns.html#dns_dns_resolve_hostname_rrtype_callback)\n\n协议类型对应的列表：\n\n| 值 | 协议类型 | 描述 |\n| --- | --- | --- |\n| 1 | A | IPv4地址 |\n| 2 | NS | 名字服务器 |\n| 5 | CNAME | 规范名称定义主机的正式名字的别名 |\n| 6 | SOA | 开始授权标记一个区的开始 |\n| 11 | WKS | 熟知服务定义主机提供的网络服务 |\n| 12 | PTR | 指针把IP地址转化为域名 |\n| 13 | HINFO | 主机信息给出主机使用的硬件和操作系统的表述 |\n| 15 | MX | 邮件交换把邮件改变路由送到邮件服务器 |\n| 28 | AAAA | IPv6地址 |\n| 252 | AXFR | 传送整个区的请求 |\n| 255 | ANY | 对所有记录的请求 |\n\n`qclass`通常为1，指Internet数据.\n\n\n### 应用场景--dns请求代理\n将以下代码保存为`.js`文件，然后使用`Node.js`执行，使用相同局域网内的机器配置DNS到这台机器即可。\n\n以下代码仅供参考：\n\n```js\n  'use strict';\n\n  const dgram = require('dgram');\n  const dns = require('dns');\n  const fs = require('fs');\n  const server = dgram.createSocket('udp4');\n\n  var bitSlice = function(b, offset, length) {\n      return (b >>> (7-(offset+length-1))) & ~(0xff << length);\n  };\n\n  var domainify = function(qname) {\n      var parts = [];\n\n      for (var i = 0; i < qname.length && qname[i];) {\n          var length = qname[i];\n          var offset = i+1;\n\n          parts.push(qname.slice(offset,offset+length).toString());\n\n          i = offset+length;\n      }\n\n      return parts.join('.');\n  };\n\n  var parse = function(buf) {\n      var header = {};\n      var question = {};\n      var b = buf.slice(2,3).toString('binary', 0, 1).charCodeAt(0);\n      console.log('b：',b,buf.slice(2,3));\n      header.id = buf.slice(0,2);\n      header.qr = bitSlice(b,0,1);\n      header.opcode = bitSlice(b,1,4);\n      header.aa = bitSlice(b,5,1);\n      header.tc = bitSlice(b,6,1);\n      header.rd = bitSlice(b,7,1);\n\n      b = buf.slice(3,4).toString('binary', 0, 1).charCodeAt(0);\n\n      header.ra = bitSlice(b,0,1);\n      header.z = bitSlice(b,1,3);\n      header.rcode = bitSlice(b,4,4);\n\n      header.qdcount = buf.slice(4,6);\n      header.ancount = buf.slice(6,8);\n      header.nscount = buf.slice(8,10);\n      header.arcount = buf.slice(10, 12);\n\n      question.qname = buf.slice(12, buf.length-4);\n      question.qtype = buf.slice(buf.length-4, buf.length-2);\n      question.qclass = buf.slice(buf.length-2, buf.length);\n\n      return {header:header, question:question};\n  };\n\n  server.on('error' , (err)=>{\n      console.log(`server error: ${err.stack}`);\n  });\n\n  server.on('message' , (msg , rinfo)=>{\n      //fs.writeFile('dns.json' ,msg, {flag:'w',endcoding:'utf-8'} ,(err)=>{\n      //    console.log(err);\n      //});\n      var query = parse(msg);\n      console.log('标识ID: ' ,query.header.id);\n      console.log('标识FLAG: ' , 'QR: ',query.header.qr , 'opcode: ',query.header.opcode , 'AA: ',query.header.aa , 'TC: ',query.header.tc,'RD: ',query.header.rd);\n      \n      console.log('RA: ',query.header.ra , 'zero: ',query.header.z , 'recode: ',query.header.rcode);\n\n      console.log('QDCOUNT: ',query.header.qdcount , 'ANCOUNT: ' , query.header.ancount, 'NSCOUNT: ' , query.header.nscount,'ARCOUNT: ',query.header.arcount);\n          \n      console.log('QNAME: ',query.question.qname , 'QTYPE: ', query.question.qtype ,'QCLASS: ' , query.question.qclass);\n\n      console.log('QUESTION STRING: ' ,domainify(query.question.qname));\n\n      server.close();\n  });\n\n  server.on('listening' , ()=>{\n      var address = server.address();\n      console.log(`server listening ${address.address}:${address.port}`);\n  });\n\n  server.bind({port:53,address:'8.8.8.8'});//address需要指定到你要用于进行代理的机器ip\n\n```\n\n下一篇： [DNS 响应报文详解](/posts/dns-response)\n\n### 参考资料\n\n[http://docstore.mik.ua/orelly/networking_2ndEd/dns/appa_02.htm](http://docstore.mik.ua/orelly/networking_2ndEd/dns/appa_02.htm)\n\n[http://www.comptechdoc.org/independent/networking/terms/dns-message-format.html](http://www.comptechdoc.org/independent/networking/terms/dns-message-format.html)\n\n[http://www.iprotocolsec.com/2012/01/13/%E4%BD%BF%E7%94%A8wireshark%E5%AD%A6%E4%B9%A0dns%E5%8D%8F%E8%AE%AE%E5%8F%8Adns%E6%AC%BA%E9%AA%97%E5%8E%9F%E7%90%86/](http://www.iprotocolsec.com/2012/01/13/%E4%BD%BF%E7%94%A8wireshark%E5%AD%A6%E4%B9%A0dns%E5%8D%8F%E8%AE%AE%E5%8F%8Adns%E6%AC%BA%E9%AA%97%E5%8E%9F%E7%90%86/)","slug":"dns-request","published":1,"updated":"2017-12-01T08:50:00.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknjb002djxs12gepo554","content":"<h2 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h2><p>DNS【域名系统：（英文：Domain Name System，缩写：DNS）】是互联网的一项服务。 它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。 DNS使用TCP和UDP端口53。</p>\n<h2 id=\"白话版\"><a href=\"#白话版\" class=\"headerlink\" title=\"白话版\"></a>白话版</h2><p>就是客户端（例如：浏览器）传入的网站域名，到DNS列表中找到对应的ip返回给客户端，然后客户端根据ip就可以找到对应的服务器，就可以向服务器发送请求了。</p>\n<p>说的在直接点：DNS目的就是把对应服务器IP给客户端。最后客户端与服务器通信就没DNS什么事了。</p>\n<a id=\"more\"></a>\n<h2 id=\"DNS-报文格式\"><a href=\"#DNS-报文格式\" class=\"headerlink\" title=\"DNS 报文格式\"></a>DNS 报文格式</h2><p>DNS报文格式，不论是请求报文，还是DNS服务器返回的应答报文，都使用统一的格式。</p>\n<ul>\n<li><code>Header</code> 报文头</li>\n<li><code>Question</code> 查询的问题</li>\n<li><code>Answer</code>   应答</li>\n<li><code>Authority</code> 授权应答</li>\n<li><code>Additional</code> 附加信息</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DNS format</span><br><span class=\"line\"></span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br><span class=\"line\">|        Header      |</span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br><span class=\"line\">|      Question      |</span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br><span class=\"line\">|      Answer        |</span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br><span class=\"line\">|      Authority     |</span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br><span class=\"line\">|      Additional    |</span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br></pre></td></tr></table></figure>\n<h3 id=\"Header-报文头\"><a href=\"#Header-报文头\" class=\"headerlink\" title=\"Header 报文头\"></a>Header 报文头</h3><ul>\n<li><code>ID</code>:  <code>2</code>个字节(<code>16bit</code>)，标识字段，客户端会解析服务器返回的DNS应答报文，获取<code>ID</code>值与请求报文设置的<code>ID</code>值做比较，如果相同，则认为是同一个DNS会话。</li>\n<li><code>FLAGS</code>: <code>2</code>个字节(<code>16bit</code>)的标志字段。包含以下属性:<ul>\n<li><code>QR</code>: <code>0</code>表示查询报文，<code>1</code>表示响应报文;</li>\n<li><code>opcode</code>: 通常值为<code>0</code>（标准查询），其他值为<code>1</code>（反向查询）和<code>2</code>（服务器状态请求）,<code>[3,15]</code>保留值;</li>\n<li><code>AA</code>: 表示授权回答（authoritative answer）– 这个比特位在应答的时候才有意义，指出给出应答的服务器是查询域名的授权解析服务器;</li>\n<li><code>TC</code>: 表示可截断的（truncated）–用来指出报文比允许的长度还要长，导致被截断;</li>\n<li><code>RD</code>: 表示期望递归(Recursion Desired) – 这个比特位被请求设置，应答的时候使用的相同的值返回。如果设置了RD，就建议域名服务器进行递归解析，递归查询的支持是可选的;</li>\n<li><code>RA</code>: 表示支持递归(Recursion Available) –  这个比特位在应答中设置或取消，用来代表服务器是否支持递归查询;</li>\n<li><code>Z</code> : 保留值，暂未使用;</li>\n<li><code>RCODE</code>: 应答码(Response code) - 这4个比特位在应答报文中设置，代表的含义如下:<ul>\n<li><code>0</code> : 没有错误。</li>\n<li><code>1</code> : 报文格式错误(Format error) - 服务器不能理解请求的报文;</li>\n<li><code>2</code> : 服务器失败(Server failure) - 因为服务器的原因导致没办法处理这个请求;</li>\n<li><code>3</code> : 名字错误(Name Error) - 只有对授权域名解析服务器有意义，指出解析的域名不存在;</li>\n<li><code>4</code> : 没有实现(Not Implemented) - 域名服务器不支持查询类型;</li>\n<li><code>5</code> : 拒绝(Refused) - 服务器由于设置的策略拒绝给出应答.比如，服务器不希望对某些请求者给出应答，或者服务器不希望进行某些操作（比如区域传送zone transfer）;</li>\n<li><code>[6,15]</code> : 保留值，暂未使用。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>QDCOUNT</code>: 无符号<code>16bit</code>整数表示报文请求段中的问题记录数。</li>\n<li><code>ANCOUNT</code>: 无符号<code>16bit</code>整数表示报文回答段中的回答记录数。</li>\n<li><code>NSCOUNT</code>: 无符号<code>16bit</code>整数表示报文授权段中的授权记录数。</li>\n<li><code>ARCOUNT</code>: 无符号<code>16bit</code>整数表示报文附加段中的附加记录数。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Header format</span><br><span class=\"line\"></span><br><span class=\"line\">  0  1  2  3  4  5  6  7  0  1  2  3  4  5  6  7</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                      ID                       |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|QR|  opcode   |AA|TC|RD|RA|   Z    |   RCODE   |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    QDCOUNT                    |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    ANCOUNT                    |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    NSCOUNT                    |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    ARCOUNT                    |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br></pre></td></tr></table></figure>\n<h3 id=\"Question-查询字段\"><a href=\"#Question-查询字段\" class=\"headerlink\" title=\"Question 查询字段\"></a>Question 查询字段</h3><ul>\n<li><code>QNAME</code>  无符号<code>8bit</code>为单位长度不限表示查询名(广泛的说就是：域名).</li>\n<li><code>QTYPE</code>  无符号<code>16bit</code>整数表示查询的协议类型.</li>\n<li><code>QCLASS</code> 无符号<code>16bit</code>整数表示查询的类,比如，<code>IN</code>代表Internet.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Question format</span><br><span class=\"line\"></span><br><span class=\"line\">  0  1  2  3  4  5  6  7  0  1  2  3  4  5  6  7</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                     ...                       |</span><br><span class=\"line\">|                    QNAME                      |</span><br><span class=\"line\">|                     ...                       |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    QTYPE                      |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    QCLASS                     |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br></pre></td></tr></table></figure>\n<h3 id=\"Answer-Authority-Additional\"><a href=\"#Answer-Authority-Additional\" class=\"headerlink\" title=\"Answer/Authority/Additional\"></a>Answer/Authority/Additional</h3><p>这3个字段的格式都是一样的。</p>\n<ul>\n<li><code>NAME</code> 资源记录包含的域名.</li>\n<li><code>TYPE</code> 表示<code>DNS</code>协议的类型.</li>\n<li><code>CLASS</code> 表示RDATA的类.</li>\n<li><code>TTL</code> 4字节无符号整数表示资源记录可以缓存的时间。0代表只能被传输，但是不能被缓存。</li>\n<li><code>RDLENGTH</code> 2个字节无符号整数表示RDATA的长度</li>\n<li><code>RDATA</code> 不定长字符串来表示记录，格式根TYPE和CLASS有关。比如，TYPE是A，CLASS 是 IN，那么RDATA就是一个4个字节的ARPA网络地址。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Answer/Authority/Additional format</span><br><span class=\"line\"></span><br><span class=\"line\">  0  1  2  3  4  5  6  7  0  1  2  3  4  5  6  7</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    NAME                       |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    TYPE                       |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    CLASS                      |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    TTL                        |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    RDLENGTH                   |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    RDATA                      |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br></pre></td></tr></table></figure>\n<h2 id=\"DNS请求报文解析\"><a href=\"#DNS请求报文解析\" class=\"headerlink\" title=\"DNS请求报文解析\"></a>DNS请求报文解析</h2><p>光说不做假把式。那如何对DNS请求报文进行解析呢。<br>先来看一下一个DNS请求报文：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6dca 0100 0001 0000 0000 0000 0377 7777</span><br><span class=\"line\">0561 7070 6c65 0363 6f6d 0000 0100 01</span><br></pre></td></tr></table></figure>\n<p>这是一个<code>Buffer</code>实例，看完后是不是一脸懵B，别紧张，先看解析后<code>console.log</code>大概的样子，是不是世界瞬间变美好了。</p>\n<p>下面是一个请求查询<code>www.apple.com</code>网站ip的DNS请求报文。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Header</span><br><span class=\"line\">ID:  &lt;Buffer 6d ca&gt;</span><br><span class=\"line\">FLAG:  QR:  0 opcode:  0 AA:  0 TC:  0 RD:  1</span><br><span class=\"line\">RA:  0 zero:  0 recode:  0</span><br><span class=\"line\">QDCOUNT:  &lt;Buffer 00 01&gt; ANCOUNT:  &lt;Buffer 00 00&gt; NSCOUNT:  &lt;Buffer 00 00&gt; ARCOUNT:  &lt;Buffer 00 00&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//QUESTION</span><br><span class=\"line\">QNAME:  &lt;Buffer 03 77 77 77 05 61 70 70 6c 65 03 63 6f 6d 00&gt; QTYPE:  &lt;Buffer 00 01&gt; QCLASS:  &lt;Buffer 00 01&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">QUESTION STRING:  www.apple.com</span><br></pre></td></tr></table></figure>\n<p>请求报文解析分为2个小块：</p>\n<ul>\n<li><code>Header</code>报文头解析</li>\n<li><code>QUESTION</code>查询问题解析</li>\n</ul>\n<h3 id=\"Header-报文头解析\"><a href=\"#Header-报文头解析\" class=\"headerlink\" title=\"Header 报文头解析\"></a>Header 报文头解析</h3><p>对Header部分进行解析。</p>\n<p>先确定一下每个字段的大小：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ID: 2 字节</span><br><span class=\"line\">QR: 1 bit</span><br><span class=\"line\">opcode: 4bit</span><br><span class=\"line\">AA: 1bit</span><br><span class=\"line\">TC: 1bit</span><br><span class=\"line\">RD: 1bit</span><br><span class=\"line\">RA: 1bit</span><br><span class=\"line\">Z : 3bit</span><br><span class=\"line\">RCODE: 4bit</span><br><span class=\"line\">QDCOUNT: 2 字节</span><br><span class=\"line\">ANCOUNT: 2 字节</span><br><span class=\"line\">NSCOUNT: 2 字节</span><br><span class=\"line\">ARCOUNT: 2 字节</span><br></pre></td></tr></table></figure>\n<p>共12个字节。</p>\n<p>假如我们抛开第<code>[3,4]</code>个字节，其实很容易就可以把header解析，但是单位为<code>bit</code>的就需要对<code>buffer</code>实例的值进行位运算操作了。</p>\n<p>所以以下参数的值可以直接从<code>buffer</code>中获取：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> header = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">header.id = buf.slice(<span class=\"number\">0</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">header.qdcount = buf.slice(<span class=\"number\">4</span>,<span class=\"number\">6</span>);</span><br><span class=\"line\">header.ancount = buf.slice(<span class=\"number\">6</span>,<span class=\"number\">8</span>);</span><br><span class=\"line\">header.nscount = buf.slice(<span class=\"number\">8</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">header.arcount = buf.slice(<span class=\"number\">10</span>, <span class=\"number\">12</span>);</span><br></pre></td></tr></table></figure>\n<p>难点就是如何获取第<code>[3,4]</code>的值，首先需要把<code>buffer</code>实例对应的字节转成<code>2</code>进制字符串然后转换为数值，然后按参数的长度计算最后的结果。</p>\n<p>第一步，将<code>buffer</code>转换为2进制字符串然后转换为数值(假设dns报文是<code>buf</code>)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对第3个字节转成`2`进制字符串然后转换为数值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = buf.slice(<span class=\"number\">2</span>,<span class=\"number\">3</span>).toString(<span class=\"string\">'binary'</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>).charCodeAt(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p>第2步，进行数据切割：</p>\n<p>首先需要理解下面这个函数，功能无非就是提取从<code>offset</code>开始，长度为<code>length</code>数字位，通过位运算转换为<code>Integer</code>类型的数然后返回。</p>\n<p>说直白一点，就是把你需要的那一段2进制数据转换为<code>Integer</code>类型，并返回。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bitSlice = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b, offset, length</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (b &gt;&gt;&gt; (<span class=\"number\">7</span>-(offset+length<span class=\"number\">-1</span>))) &amp; ~(<span class=\"number\">0xff</span> &lt;&lt; length);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意这里因为只考虑一个字节 === <code>8bit</code>，所以可以写成<code>(7-(offset+length-1))</code> 和 <code>0xff &lt;&lt; length</code>。假如不是一个字节，那么可能需要改变一下里面的数字<code>7</code>和<code>0xff</code>的值。</p>\n</blockquote>\n<p>demo走起：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> buf = Buffer.from([<span class=\"number\">0x2d</span>]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = buf.toString(<span class=\"string\">'binary'</span> , <span class=\"number\">0</span>,<span class=\"number\">1</span>).charCodeAt(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bitSlice(b , <span class=\"number\">0</span>, <span class=\"number\">1</span>));<span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bitSlice(b , <span class=\"number\">1</span>, <span class=\"number\">1</span>));<span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bitSlice(b , <span class=\"number\">2</span>, <span class=\"number\">1</span>));<span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bitSlice(b , <span class=\"number\">3</span>, <span class=\"number\">1</span>));<span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bitSlice(b , <span class=\"number\">4</span>, <span class=\"number\">1</span>));<span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bitSlice(b , <span class=\"number\">5</span>, <span class=\"number\">1</span>));<span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bitSlice(b , <span class=\"number\">6</span>, <span class=\"number\">1</span>));<span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bitSlice(b , <span class=\"number\">7</span>, <span class=\"number\">1</span>));<span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bitSlice(b , <span class=\"number\">5</span>, <span class=\"number\">3</span>));<span class=\"comment\">//5  === 0000 0101</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 16进制：0x2d</span></span><br><span class=\"line\"><span class=\"comment\"> * 10进制：45</span></span><br><span class=\"line\"><span class=\"comment\"> * 2进制： 0010 1101</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * (45,0,1)：45&gt;&gt;&gt;7 &amp; ~(0xff&lt;&lt;1) </span></span><br><span class=\"line\"><span class=\"comment\"> *    45&gt;&gt;&gt;7 = 0000 0000</span></span><br><span class=\"line\"><span class=\"comment\"> *    (0xff&lt;&lt;1)  = 0000 0000 0000 0000 0000 0001 1111 1110   510</span></span><br><span class=\"line\"><span class=\"comment\"> *    ~(0xff&lt;&lt;1) = 1111 1111 1111 1111 1111 1110 0000 0001   -511 = -((0xff&lt;&lt;1)+1)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *      0000 0000 0000 0000 0000 0000 0000 0000  === 45&gt;&gt;&gt;7</span></span><br><span class=\"line\"><span class=\"comment\"> *    &amp; 1111 1111 1111 1111 1111 1110 0000 0001  === ~(0xff&lt;&lt;1)</span></span><br><span class=\"line\"><span class=\"comment\"> *      ----------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"> *      0000 0000 0000 0000 0000 0000 0000 0000 = 0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * (45,2,1)：45&gt;&gt;&gt;5 &amp; ~(0xff&lt;&lt;1) </span></span><br><span class=\"line\"><span class=\"comment\"> *    45&gt;&gt;&gt;5 = 0000 0001</span></span><br><span class=\"line\"><span class=\"comment\"> *    (0xff&lt;&lt;1)  = 0000 0000 0000 0000 0000 0001 1111 1110   510</span></span><br><span class=\"line\"><span class=\"comment\"> *    ~(0xff&lt;&lt;1) = 1111 1111 1111 1111 1111 1110 0000 0001   -511 = -((0xff&lt;&lt;1)+1)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *      0000 0000 0000 0000 0000 0000 0000 0001  === 45&gt;&gt;&gt;5</span></span><br><span class=\"line\"><span class=\"comment\"> *    &amp; 1111 1111 1111 1111 1111 1110 0000 0001  === ~(0xff&lt;&lt;1)</span></span><br><span class=\"line\"><span class=\"comment\"> *      ----------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"> *      0000 0000 0000 0000 0000 0000 0000 0001 = 1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p>理解了上面的函数的作用之后就可以真正的使用这个函数取DNS报文Header的第<code>[3,4]</code>字节中的值。</p>\n<p>信手拈来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第3个字节</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = buf.slice(<span class=\"number\">2</span>,<span class=\"number\">3</span>).toString(<span class=\"string\">'binary'</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>).charCodeAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">header.qr = bitSlice(b,<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">header.opcode = bitSlice(b,<span class=\"number\">1</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">header.aa = bitSlice(b,<span class=\"number\">5</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">header.tc = bitSlice(b,<span class=\"number\">6</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">header.rd = bitSlice(b,<span class=\"number\">7</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第4个字节</span></span><br><span class=\"line\">b = buf.slice(<span class=\"number\">3</span>,<span class=\"number\">4</span>).toString(<span class=\"string\">'binary'</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>).charCodeAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">header.ra = bitSlice(b,<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">header.z = bitSlice(b,<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">header.rcode = bitSlice(b,<span class=\"number\">4</span>,<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"QUESTION-查询字段解析\"><a href=\"#QUESTION-查询字段解析\" class=\"headerlink\" title=\"QUESTION 查询字段解析\"></a>QUESTION 查询字段解析</h3><p>主要包括了查询域名，协议类型及类别。</p>\n<p>这3个参数<code>QTYPE</code>和<code>QCLASS</code>是固定<code>2</code>字节，<code>QNAME</code>是不固定的。</p>\n<p>所以取数据的时候需要注意，因为<code>QUESTION</code>信息是跟随在<code>Header</code>之后，所以要从第<code>12</code>个字节往后取：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> question = &#123;&#125;;</span><br><span class=\"line\">  question.qname = buf.slice(<span class=\"number\">12</span>, buf.length<span class=\"number\">-4</span>);</span><br><span class=\"line\">  question.qtype = buf.slice(buf.length<span class=\"number\">-4</span>, buf.length<span class=\"number\">-2</span>);</span><br><span class=\"line\">  question.qclass = buf.slice(buf.length<span class=\"number\">-2</span>, buf.length);</span><br></pre></td></tr></table></figure>\n<p><code>qname</code>使用的是<code>len+data</code>混合编码，以<code>0x00</code>结尾。每个字符串都以长度开始，然后后面接内容。<code>qname</code>长度必须以<code>8</code>字节为单位。</p>\n<p>例如<code>www.apple.com</code>(注意：中间的<code>.</code>是解析的时候自己添加上去的)，它的<code>buffer</code>实例表示为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">03 77 77 77 05 61 70 70 6c 65 03 63 6f 6d 00</span><br><span class=\"line\">//约等于</span><br><span class=\"line\">3www5apple3com</span><br></pre></td></tr></table></figure>\n<p>也就是第一位表示的是长度，后面跟随相同长度的数据，依此类推。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> domainify = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">qname</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> parts = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; qname.length &amp;&amp; qname[i];) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = qname[i] , offset = i+<span class=\"number\">1</span>;<span class=\"comment\">//获取每一块域名长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    parts.push(qname.slice(offset,offset+len).toString());<span class=\"comment\">//获取每一块域名</span></span><br><span class=\"line\"></span><br><span class=\"line\">    i = offset+len;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> parts.join(<span class=\"string\">'.'</span>);<span class=\"comment\">//拼凑成完整域名</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>qtype</code>协议类型. <a href=\"https://nodejs.org/dist/latest-v6.x/docs/api/dns.html#dns_dns_resolve_hostname_rrtype_callback\" target=\"_blank\" rel=\"noopener\">查看详情</a></p>\n<p>协议类型对应的列表：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>协议类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>A</td>\n<td>IPv4地址</td>\n</tr>\n<tr>\n<td>2</td>\n<td>NS</td>\n<td>名字服务器</td>\n</tr>\n<tr>\n<td>5</td>\n<td>CNAME</td>\n<td>规范名称定义主机的正式名字的别名</td>\n</tr>\n<tr>\n<td>6</td>\n<td>SOA</td>\n<td>开始授权标记一个区的开始</td>\n</tr>\n<tr>\n<td>11</td>\n<td>WKS</td>\n<td>熟知服务定义主机提供的网络服务</td>\n</tr>\n<tr>\n<td>12</td>\n<td>PTR</td>\n<td>指针把IP地址转化为域名</td>\n</tr>\n<tr>\n<td>13</td>\n<td>HINFO</td>\n<td>主机信息给出主机使用的硬件和操作系统的表述</td>\n</tr>\n<tr>\n<td>15</td>\n<td>MX</td>\n<td>邮件交换把邮件改变路由送到邮件服务器</td>\n</tr>\n<tr>\n<td>28</td>\n<td>AAAA</td>\n<td>IPv6地址</td>\n</tr>\n<tr>\n<td>252</td>\n<td>AXFR</td>\n<td>传送整个区的请求</td>\n</tr>\n<tr>\n<td>255</td>\n<td>ANY</td>\n<td>对所有记录的请求</td>\n</tr>\n</tbody>\n</table>\n<p><code>qclass</code>通常为1，指Internet数据.</p>\n<h3 id=\"应用场景–dns请求代理\"><a href=\"#应用场景–dns请求代理\" class=\"headerlink\" title=\"应用场景–dns请求代理\"></a>应用场景–dns请求代理</h3><p>将以下代码保存为<code>.js</code>文件，然后使用<code>Node.js</code>执行，使用相同局域网内的机器配置DNS到这台机器即可。</p>\n<p>以下代码仅供参考：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dgram = <span class=\"built_in\">require</span>(<span class=\"string\">'dgram'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> dns = <span class=\"built_in\">require</span>(<span class=\"string\">'dns'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = dgram.createSocket(<span class=\"string\">'udp4'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bitSlice = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b, offset, length</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (b &gt;&gt;&gt; (<span class=\"number\">7</span>-(offset+length<span class=\"number\">-1</span>))) &amp; ~(<span class=\"number\">0xff</span> &lt;&lt; length);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> domainify = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">qname</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> parts = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; qname.length &amp;&amp; qname[i];) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> length = qname[i];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> offset = i+<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        parts.push(qname.slice(offset,offset+length).toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        i = offset+length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> parts.join(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> parse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">buf</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> header = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> question = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = buf.slice(<span class=\"number\">2</span>,<span class=\"number\">3</span>).toString(<span class=\"string\">'binary'</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>).charCodeAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'b：'</span>,b,buf.slice(<span class=\"number\">2</span>,<span class=\"number\">3</span>));</span><br><span class=\"line\">    header.id = buf.slice(<span class=\"number\">0</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">    header.qr = bitSlice(b,<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    header.opcode = bitSlice(b,<span class=\"number\">1</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">    header.aa = bitSlice(b,<span class=\"number\">5</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    header.tc = bitSlice(b,<span class=\"number\">6</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    header.rd = bitSlice(b,<span class=\"number\">7</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    b = buf.slice(<span class=\"number\">3</span>,<span class=\"number\">4</span>).toString(<span class=\"string\">'binary'</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>).charCodeAt(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    header.ra = bitSlice(b,<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    header.z = bitSlice(b,<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">    header.rcode = bitSlice(b,<span class=\"number\">4</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    header.qdcount = buf.slice(<span class=\"number\">4</span>,<span class=\"number\">6</span>);</span><br><span class=\"line\">    header.ancount = buf.slice(<span class=\"number\">6</span>,<span class=\"number\">8</span>);</span><br><span class=\"line\">    header.nscount = buf.slice(<span class=\"number\">8</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">    header.arcount = buf.slice(<span class=\"number\">10</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    question.qname = buf.slice(<span class=\"number\">12</span>, buf.length<span class=\"number\">-4</span>);</span><br><span class=\"line\">    question.qtype = buf.slice(buf.length<span class=\"number\">-4</span>, buf.length<span class=\"number\">-2</span>);</span><br><span class=\"line\">    question.qclass = buf.slice(buf.length<span class=\"number\">-2</span>, buf.length);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">header</span>:header, <span class=\"attr\">question</span>:question&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">'error'</span> , (err)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`server error: <span class=\"subst\">$&#123;err.stack&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">'message'</span> , (msg , rinfo)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">//fs.writeFile('dns.json' ,msg, &#123;flag:'w',endcoding:'utf-8'&#125; ,(err)=&gt;&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//    console.log(err);</span></span><br><span class=\"line\">    <span class=\"comment\">//&#125;);</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> query = parse(msg);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'标识ID: '</span> ,query.header.id);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'标识FLAG: '</span> , <span class=\"string\">'QR: '</span>,query.header.qr , <span class=\"string\">'opcode: '</span>,query.header.opcode , <span class=\"string\">'AA: '</span>,query.header.aa , <span class=\"string\">'TC: '</span>,query.header.tc,<span class=\"string\">'RD: '</span>,query.header.rd);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'RA: '</span>,query.header.ra , <span class=\"string\">'zero: '</span>,query.header.z , <span class=\"string\">'recode: '</span>,query.header.rcode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'QDCOUNT: '</span>,query.header.qdcount , <span class=\"string\">'ANCOUNT: '</span> , query.header.ancount, <span class=\"string\">'NSCOUNT: '</span> , query.header.nscount,<span class=\"string\">'ARCOUNT: '</span>,query.header.arcount);</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'QNAME: '</span>,query.question.qname , <span class=\"string\">'QTYPE: '</span>, query.question.qtype ,<span class=\"string\">'QCLASS: '</span> , query.question.qclass);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'QUESTION STRING: '</span> ,domainify(query.question.qname));</span><br><span class=\"line\"></span><br><span class=\"line\">    server.close();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">'listening'</span> , ()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> address = server.address();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`server listening <span class=\"subst\">$&#123;address.address&#125;</span>:<span class=\"subst\">$&#123;address.port&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.bind(&#123;<span class=\"attr\">port</span>:<span class=\"number\">53</span>,<span class=\"attr\">address</span>:<span class=\"string\">'8.8.8.8'</span>&#125;);<span class=\"comment\">//address需要指定到你要用于进行代理的机器ip</span></span><br></pre></td></tr></table></figure>\n<p>下一篇： <a href=\"/posts/dns-response\">DNS 响应报文详解</a></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"http://docstore.mik.ua/orelly/networking_2ndEd/dns/appa_02.htm\" target=\"_blank\" rel=\"noopener\">http://docstore.mik.ua/orelly/networking_2ndEd/dns/appa_02.htm</a></p>\n<p><a href=\"http://www.comptechdoc.org/independent/networking/terms/dns-message-format.html\" target=\"_blank\" rel=\"noopener\">http://www.comptechdoc.org/independent/networking/terms/dns-message-format.html</a></p>\n<p><a href=\"http://www.iprotocolsec.com/2012/01/13/%E4%BD%BF%E7%94%A8wireshark%E5%AD%A6%E4%B9%A0dns%E5%8D%8F%E8%AE%AE%E5%8F%8Adns%E6%AC%BA%E9%AA%97%E5%8E%9F%E7%90%86/\" target=\"_blank\" rel=\"noopener\">http://www.iprotocolsec.com/2012/01/13/%E4%BD%BF%E7%94%A8wireshark%E5%AD%A6%E4%B9%A0dns%E5%8D%8F%E8%AE%AE%E5%8F%8Adns%E6%AC%BA%E9%AA%97%E5%8E%9F%E7%90%86/</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h2><p>DNS【域名系统：（英文：Domain Name System，缩写：DNS）】是互联网的一项服务。 它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。 DNS使用TCP和UDP端口53。</p>\n<h2 id=\"白话版\"><a href=\"#白话版\" class=\"headerlink\" title=\"白话版\"></a>白话版</h2><p>就是客户端（例如：浏览器）传入的网站域名，到DNS列表中找到对应的ip返回给客户端，然后客户端根据ip就可以找到对应的服务器，就可以向服务器发送请求了。</p>\n<p>说的在直接点：DNS目的就是把对应服务器IP给客户端。最后客户端与服务器通信就没DNS什么事了。</p>","more":"<h2 id=\"DNS-报文格式\"><a href=\"#DNS-报文格式\" class=\"headerlink\" title=\"DNS 报文格式\"></a>DNS 报文格式</h2><p>DNS报文格式，不论是请求报文，还是DNS服务器返回的应答报文，都使用统一的格式。</p>\n<ul>\n<li><code>Header</code> 报文头</li>\n<li><code>Question</code> 查询的问题</li>\n<li><code>Answer</code>   应答</li>\n<li><code>Authority</code> 授权应答</li>\n<li><code>Additional</code> 附加信息</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DNS format</span><br><span class=\"line\"></span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br><span class=\"line\">|        Header      |</span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br><span class=\"line\">|      Question      |</span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br><span class=\"line\">|      Answer        |</span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br><span class=\"line\">|      Authority     |</span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br><span class=\"line\">|      Additional    |</span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br></pre></td></tr></table></figure>\n<h3 id=\"Header-报文头\"><a href=\"#Header-报文头\" class=\"headerlink\" title=\"Header 报文头\"></a>Header 报文头</h3><ul>\n<li><code>ID</code>:  <code>2</code>个字节(<code>16bit</code>)，标识字段，客户端会解析服务器返回的DNS应答报文，获取<code>ID</code>值与请求报文设置的<code>ID</code>值做比较，如果相同，则认为是同一个DNS会话。</li>\n<li><code>FLAGS</code>: <code>2</code>个字节(<code>16bit</code>)的标志字段。包含以下属性:<ul>\n<li><code>QR</code>: <code>0</code>表示查询报文，<code>1</code>表示响应报文;</li>\n<li><code>opcode</code>: 通常值为<code>0</code>（标准查询），其他值为<code>1</code>（反向查询）和<code>2</code>（服务器状态请求）,<code>[3,15]</code>保留值;</li>\n<li><code>AA</code>: 表示授权回答（authoritative answer）– 这个比特位在应答的时候才有意义，指出给出应答的服务器是查询域名的授权解析服务器;</li>\n<li><code>TC</code>: 表示可截断的（truncated）–用来指出报文比允许的长度还要长，导致被截断;</li>\n<li><code>RD</code>: 表示期望递归(Recursion Desired) – 这个比特位被请求设置，应答的时候使用的相同的值返回。如果设置了RD，就建议域名服务器进行递归解析，递归查询的支持是可选的;</li>\n<li><code>RA</code>: 表示支持递归(Recursion Available) –  这个比特位在应答中设置或取消，用来代表服务器是否支持递归查询;</li>\n<li><code>Z</code> : 保留值，暂未使用;</li>\n<li><code>RCODE</code>: 应答码(Response code) - 这4个比特位在应答报文中设置，代表的含义如下:<ul>\n<li><code>0</code> : 没有错误。</li>\n<li><code>1</code> : 报文格式错误(Format error) - 服务器不能理解请求的报文;</li>\n<li><code>2</code> : 服务器失败(Server failure) - 因为服务器的原因导致没办法处理这个请求;</li>\n<li><code>3</code> : 名字错误(Name Error) - 只有对授权域名解析服务器有意义，指出解析的域名不存在;</li>\n<li><code>4</code> : 没有实现(Not Implemented) - 域名服务器不支持查询类型;</li>\n<li><code>5</code> : 拒绝(Refused) - 服务器由于设置的策略拒绝给出应答.比如，服务器不希望对某些请求者给出应答，或者服务器不希望进行某些操作（比如区域传送zone transfer）;</li>\n<li><code>[6,15]</code> : 保留值，暂未使用。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>QDCOUNT</code>: 无符号<code>16bit</code>整数表示报文请求段中的问题记录数。</li>\n<li><code>ANCOUNT</code>: 无符号<code>16bit</code>整数表示报文回答段中的回答记录数。</li>\n<li><code>NSCOUNT</code>: 无符号<code>16bit</code>整数表示报文授权段中的授权记录数。</li>\n<li><code>ARCOUNT</code>: 无符号<code>16bit</code>整数表示报文附加段中的附加记录数。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Header format</span><br><span class=\"line\"></span><br><span class=\"line\">  0  1  2  3  4  5  6  7  0  1  2  3  4  5  6  7</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                      ID                       |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|QR|  opcode   |AA|TC|RD|RA|   Z    |   RCODE   |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    QDCOUNT                    |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    ANCOUNT                    |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    NSCOUNT                    |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    ARCOUNT                    |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br></pre></td></tr></table></figure>\n<h3 id=\"Question-查询字段\"><a href=\"#Question-查询字段\" class=\"headerlink\" title=\"Question 查询字段\"></a>Question 查询字段</h3><ul>\n<li><code>QNAME</code>  无符号<code>8bit</code>为单位长度不限表示查询名(广泛的说就是：域名).</li>\n<li><code>QTYPE</code>  无符号<code>16bit</code>整数表示查询的协议类型.</li>\n<li><code>QCLASS</code> 无符号<code>16bit</code>整数表示查询的类,比如，<code>IN</code>代表Internet.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Question format</span><br><span class=\"line\"></span><br><span class=\"line\">  0  1  2  3  4  5  6  7  0  1  2  3  4  5  6  7</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                     ...                       |</span><br><span class=\"line\">|                    QNAME                      |</span><br><span class=\"line\">|                     ...                       |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    QTYPE                      |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    QCLASS                     |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br></pre></td></tr></table></figure>\n<h3 id=\"Answer-Authority-Additional\"><a href=\"#Answer-Authority-Additional\" class=\"headerlink\" title=\"Answer/Authority/Additional\"></a>Answer/Authority/Additional</h3><p>这3个字段的格式都是一样的。</p>\n<ul>\n<li><code>NAME</code> 资源记录包含的域名.</li>\n<li><code>TYPE</code> 表示<code>DNS</code>协议的类型.</li>\n<li><code>CLASS</code> 表示RDATA的类.</li>\n<li><code>TTL</code> 4字节无符号整数表示资源记录可以缓存的时间。0代表只能被传输，但是不能被缓存。</li>\n<li><code>RDLENGTH</code> 2个字节无符号整数表示RDATA的长度</li>\n<li><code>RDATA</code> 不定长字符串来表示记录，格式根TYPE和CLASS有关。比如，TYPE是A，CLASS 是 IN，那么RDATA就是一个4个字节的ARPA网络地址。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Answer/Authority/Additional format</span><br><span class=\"line\"></span><br><span class=\"line\">  0  1  2  3  4  5  6  7  0  1  2  3  4  5  6  7</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    NAME                       |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    TYPE                       |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    CLASS                      |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    TTL                        |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    RDLENGTH                   |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    RDATA                      |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br></pre></td></tr></table></figure>\n<h2 id=\"DNS请求报文解析\"><a href=\"#DNS请求报文解析\" class=\"headerlink\" title=\"DNS请求报文解析\"></a>DNS请求报文解析</h2><p>光说不做假把式。那如何对DNS请求报文进行解析呢。<br>先来看一下一个DNS请求报文：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6dca 0100 0001 0000 0000 0000 0377 7777</span><br><span class=\"line\">0561 7070 6c65 0363 6f6d 0000 0100 01</span><br></pre></td></tr></table></figure>\n<p>这是一个<code>Buffer</code>实例，看完后是不是一脸懵B，别紧张，先看解析后<code>console.log</code>大概的样子，是不是世界瞬间变美好了。</p>\n<p>下面是一个请求查询<code>www.apple.com</code>网站ip的DNS请求报文。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Header</span><br><span class=\"line\">ID:  &lt;Buffer 6d ca&gt;</span><br><span class=\"line\">FLAG:  QR:  0 opcode:  0 AA:  0 TC:  0 RD:  1</span><br><span class=\"line\">RA:  0 zero:  0 recode:  0</span><br><span class=\"line\">QDCOUNT:  &lt;Buffer 00 01&gt; ANCOUNT:  &lt;Buffer 00 00&gt; NSCOUNT:  &lt;Buffer 00 00&gt; ARCOUNT:  &lt;Buffer 00 00&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//QUESTION</span><br><span class=\"line\">QNAME:  &lt;Buffer 03 77 77 77 05 61 70 70 6c 65 03 63 6f 6d 00&gt; QTYPE:  &lt;Buffer 00 01&gt; QCLASS:  &lt;Buffer 00 01&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">QUESTION STRING:  www.apple.com</span><br></pre></td></tr></table></figure>\n<p>请求报文解析分为2个小块：</p>\n<ul>\n<li><code>Header</code>报文头解析</li>\n<li><code>QUESTION</code>查询问题解析</li>\n</ul>\n<h3 id=\"Header-报文头解析\"><a href=\"#Header-报文头解析\" class=\"headerlink\" title=\"Header 报文头解析\"></a>Header 报文头解析</h3><p>对Header部分进行解析。</p>\n<p>先确定一下每个字段的大小：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ID: 2 字节</span><br><span class=\"line\">QR: 1 bit</span><br><span class=\"line\">opcode: 4bit</span><br><span class=\"line\">AA: 1bit</span><br><span class=\"line\">TC: 1bit</span><br><span class=\"line\">RD: 1bit</span><br><span class=\"line\">RA: 1bit</span><br><span class=\"line\">Z : 3bit</span><br><span class=\"line\">RCODE: 4bit</span><br><span class=\"line\">QDCOUNT: 2 字节</span><br><span class=\"line\">ANCOUNT: 2 字节</span><br><span class=\"line\">NSCOUNT: 2 字节</span><br><span class=\"line\">ARCOUNT: 2 字节</span><br></pre></td></tr></table></figure>\n<p>共12个字节。</p>\n<p>假如我们抛开第<code>[3,4]</code>个字节，其实很容易就可以把header解析，但是单位为<code>bit</code>的就需要对<code>buffer</code>实例的值进行位运算操作了。</p>\n<p>所以以下参数的值可以直接从<code>buffer</code>中获取：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> header = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">header.id = buf.slice(<span class=\"number\">0</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">header.qdcount = buf.slice(<span class=\"number\">4</span>,<span class=\"number\">6</span>);</span><br><span class=\"line\">header.ancount = buf.slice(<span class=\"number\">6</span>,<span class=\"number\">8</span>);</span><br><span class=\"line\">header.nscount = buf.slice(<span class=\"number\">8</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">header.arcount = buf.slice(<span class=\"number\">10</span>, <span class=\"number\">12</span>);</span><br></pre></td></tr></table></figure>\n<p>难点就是如何获取第<code>[3,4]</code>的值，首先需要把<code>buffer</code>实例对应的字节转成<code>2</code>进制字符串然后转换为数值，然后按参数的长度计算最后的结果。</p>\n<p>第一步，将<code>buffer</code>转换为2进制字符串然后转换为数值(假设dns报文是<code>buf</code>)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对第3个字节转成`2`进制字符串然后转换为数值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = buf.slice(<span class=\"number\">2</span>,<span class=\"number\">3</span>).toString(<span class=\"string\">'binary'</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>).charCodeAt(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p>第2步，进行数据切割：</p>\n<p>首先需要理解下面这个函数，功能无非就是提取从<code>offset</code>开始，长度为<code>length</code>数字位，通过位运算转换为<code>Integer</code>类型的数然后返回。</p>\n<p>说直白一点，就是把你需要的那一段2进制数据转换为<code>Integer</code>类型，并返回。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bitSlice = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b, offset, length</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (b &gt;&gt;&gt; (<span class=\"number\">7</span>-(offset+length<span class=\"number\">-1</span>))) &amp; ~(<span class=\"number\">0xff</span> &lt;&lt; length);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意这里因为只考虑一个字节 === <code>8bit</code>，所以可以写成<code>(7-(offset+length-1))</code> 和 <code>0xff &lt;&lt; length</code>。假如不是一个字节，那么可能需要改变一下里面的数字<code>7</code>和<code>0xff</code>的值。</p>\n</blockquote>\n<p>demo走起：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> buf = Buffer.from([<span class=\"number\">0x2d</span>]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = buf.toString(<span class=\"string\">'binary'</span> , <span class=\"number\">0</span>,<span class=\"number\">1</span>).charCodeAt(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bitSlice(b , <span class=\"number\">0</span>, <span class=\"number\">1</span>));<span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bitSlice(b , <span class=\"number\">1</span>, <span class=\"number\">1</span>));<span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bitSlice(b , <span class=\"number\">2</span>, <span class=\"number\">1</span>));<span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bitSlice(b , <span class=\"number\">3</span>, <span class=\"number\">1</span>));<span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bitSlice(b , <span class=\"number\">4</span>, <span class=\"number\">1</span>));<span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bitSlice(b , <span class=\"number\">5</span>, <span class=\"number\">1</span>));<span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bitSlice(b , <span class=\"number\">6</span>, <span class=\"number\">1</span>));<span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bitSlice(b , <span class=\"number\">7</span>, <span class=\"number\">1</span>));<span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bitSlice(b , <span class=\"number\">5</span>, <span class=\"number\">3</span>));<span class=\"comment\">//5  === 0000 0101</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 16进制：0x2d</span></span><br><span class=\"line\"><span class=\"comment\"> * 10进制：45</span></span><br><span class=\"line\"><span class=\"comment\"> * 2进制： 0010 1101</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * (45,0,1)：45&gt;&gt;&gt;7 &amp; ~(0xff&lt;&lt;1) </span></span><br><span class=\"line\"><span class=\"comment\"> *    45&gt;&gt;&gt;7 = 0000 0000</span></span><br><span class=\"line\"><span class=\"comment\"> *    (0xff&lt;&lt;1)  = 0000 0000 0000 0000 0000 0001 1111 1110   510</span></span><br><span class=\"line\"><span class=\"comment\"> *    ~(0xff&lt;&lt;1) = 1111 1111 1111 1111 1111 1110 0000 0001   -511 = -((0xff&lt;&lt;1)+1)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *      0000 0000 0000 0000 0000 0000 0000 0000  === 45&gt;&gt;&gt;7</span></span><br><span class=\"line\"><span class=\"comment\"> *    &amp; 1111 1111 1111 1111 1111 1110 0000 0001  === ~(0xff&lt;&lt;1)</span></span><br><span class=\"line\"><span class=\"comment\"> *      ----------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"> *      0000 0000 0000 0000 0000 0000 0000 0000 = 0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * (45,2,1)：45&gt;&gt;&gt;5 &amp; ~(0xff&lt;&lt;1) </span></span><br><span class=\"line\"><span class=\"comment\"> *    45&gt;&gt;&gt;5 = 0000 0001</span></span><br><span class=\"line\"><span class=\"comment\"> *    (0xff&lt;&lt;1)  = 0000 0000 0000 0000 0000 0001 1111 1110   510</span></span><br><span class=\"line\"><span class=\"comment\"> *    ~(0xff&lt;&lt;1) = 1111 1111 1111 1111 1111 1110 0000 0001   -511 = -((0xff&lt;&lt;1)+1)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *      0000 0000 0000 0000 0000 0000 0000 0001  === 45&gt;&gt;&gt;5</span></span><br><span class=\"line\"><span class=\"comment\"> *    &amp; 1111 1111 1111 1111 1111 1110 0000 0001  === ~(0xff&lt;&lt;1)</span></span><br><span class=\"line\"><span class=\"comment\"> *      ----------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"> *      0000 0000 0000 0000 0000 0000 0000 0001 = 1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p>理解了上面的函数的作用之后就可以真正的使用这个函数取DNS报文Header的第<code>[3,4]</code>字节中的值。</p>\n<p>信手拈来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第3个字节</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = buf.slice(<span class=\"number\">2</span>,<span class=\"number\">3</span>).toString(<span class=\"string\">'binary'</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>).charCodeAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">header.qr = bitSlice(b,<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">header.opcode = bitSlice(b,<span class=\"number\">1</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">header.aa = bitSlice(b,<span class=\"number\">5</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">header.tc = bitSlice(b,<span class=\"number\">6</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">header.rd = bitSlice(b,<span class=\"number\">7</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第4个字节</span></span><br><span class=\"line\">b = buf.slice(<span class=\"number\">3</span>,<span class=\"number\">4</span>).toString(<span class=\"string\">'binary'</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>).charCodeAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">header.ra = bitSlice(b,<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">header.z = bitSlice(b,<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">header.rcode = bitSlice(b,<span class=\"number\">4</span>,<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"QUESTION-查询字段解析\"><a href=\"#QUESTION-查询字段解析\" class=\"headerlink\" title=\"QUESTION 查询字段解析\"></a>QUESTION 查询字段解析</h3><p>主要包括了查询域名，协议类型及类别。</p>\n<p>这3个参数<code>QTYPE</code>和<code>QCLASS</code>是固定<code>2</code>字节，<code>QNAME</code>是不固定的。</p>\n<p>所以取数据的时候需要注意，因为<code>QUESTION</code>信息是跟随在<code>Header</code>之后，所以要从第<code>12</code>个字节往后取：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> question = &#123;&#125;;</span><br><span class=\"line\">  question.qname = buf.slice(<span class=\"number\">12</span>, buf.length<span class=\"number\">-4</span>);</span><br><span class=\"line\">  question.qtype = buf.slice(buf.length<span class=\"number\">-4</span>, buf.length<span class=\"number\">-2</span>);</span><br><span class=\"line\">  question.qclass = buf.slice(buf.length<span class=\"number\">-2</span>, buf.length);</span><br></pre></td></tr></table></figure>\n<p><code>qname</code>使用的是<code>len+data</code>混合编码，以<code>0x00</code>结尾。每个字符串都以长度开始，然后后面接内容。<code>qname</code>长度必须以<code>8</code>字节为单位。</p>\n<p>例如<code>www.apple.com</code>(注意：中间的<code>.</code>是解析的时候自己添加上去的)，它的<code>buffer</code>实例表示为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">03 77 77 77 05 61 70 70 6c 65 03 63 6f 6d 00</span><br><span class=\"line\">//约等于</span><br><span class=\"line\">3www5apple3com</span><br></pre></td></tr></table></figure>\n<p>也就是第一位表示的是长度，后面跟随相同长度的数据，依此类推。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> domainify = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">qname</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> parts = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; qname.length &amp;&amp; qname[i];) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = qname[i] , offset = i+<span class=\"number\">1</span>;<span class=\"comment\">//获取每一块域名长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    parts.push(qname.slice(offset,offset+len).toString());<span class=\"comment\">//获取每一块域名</span></span><br><span class=\"line\"></span><br><span class=\"line\">    i = offset+len;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> parts.join(<span class=\"string\">'.'</span>);<span class=\"comment\">//拼凑成完整域名</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>qtype</code>协议类型. <a href=\"https://nodejs.org/dist/latest-v6.x/docs/api/dns.html#dns_dns_resolve_hostname_rrtype_callback\" target=\"_blank\" rel=\"noopener\">查看详情</a></p>\n<p>协议类型对应的列表：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>协议类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>A</td>\n<td>IPv4地址</td>\n</tr>\n<tr>\n<td>2</td>\n<td>NS</td>\n<td>名字服务器</td>\n</tr>\n<tr>\n<td>5</td>\n<td>CNAME</td>\n<td>规范名称定义主机的正式名字的别名</td>\n</tr>\n<tr>\n<td>6</td>\n<td>SOA</td>\n<td>开始授权标记一个区的开始</td>\n</tr>\n<tr>\n<td>11</td>\n<td>WKS</td>\n<td>熟知服务定义主机提供的网络服务</td>\n</tr>\n<tr>\n<td>12</td>\n<td>PTR</td>\n<td>指针把IP地址转化为域名</td>\n</tr>\n<tr>\n<td>13</td>\n<td>HINFO</td>\n<td>主机信息给出主机使用的硬件和操作系统的表述</td>\n</tr>\n<tr>\n<td>15</td>\n<td>MX</td>\n<td>邮件交换把邮件改变路由送到邮件服务器</td>\n</tr>\n<tr>\n<td>28</td>\n<td>AAAA</td>\n<td>IPv6地址</td>\n</tr>\n<tr>\n<td>252</td>\n<td>AXFR</td>\n<td>传送整个区的请求</td>\n</tr>\n<tr>\n<td>255</td>\n<td>ANY</td>\n<td>对所有记录的请求</td>\n</tr>\n</tbody>\n</table>\n<p><code>qclass</code>通常为1，指Internet数据.</p>\n<h3 id=\"应用场景–dns请求代理\"><a href=\"#应用场景–dns请求代理\" class=\"headerlink\" title=\"应用场景–dns请求代理\"></a>应用场景–dns请求代理</h3><p>将以下代码保存为<code>.js</code>文件，然后使用<code>Node.js</code>执行，使用相同局域网内的机器配置DNS到这台机器即可。</p>\n<p>以下代码仅供参考：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dgram = <span class=\"built_in\">require</span>(<span class=\"string\">'dgram'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> dns = <span class=\"built_in\">require</span>(<span class=\"string\">'dns'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> server = dgram.createSocket(<span class=\"string\">'udp4'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bitSlice = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b, offset, length</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (b &gt;&gt;&gt; (<span class=\"number\">7</span>-(offset+length<span class=\"number\">-1</span>))) &amp; ~(<span class=\"number\">0xff</span> &lt;&lt; length);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> domainify = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">qname</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> parts = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; qname.length &amp;&amp; qname[i];) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> length = qname[i];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> offset = i+<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        parts.push(qname.slice(offset,offset+length).toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        i = offset+length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> parts.join(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> parse = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">buf</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> header = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> question = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = buf.slice(<span class=\"number\">2</span>,<span class=\"number\">3</span>).toString(<span class=\"string\">'binary'</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>).charCodeAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'b：'</span>,b,buf.slice(<span class=\"number\">2</span>,<span class=\"number\">3</span>));</span><br><span class=\"line\">    header.id = buf.slice(<span class=\"number\">0</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">    header.qr = bitSlice(b,<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    header.opcode = bitSlice(b,<span class=\"number\">1</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">    header.aa = bitSlice(b,<span class=\"number\">5</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    header.tc = bitSlice(b,<span class=\"number\">6</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    header.rd = bitSlice(b,<span class=\"number\">7</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    b = buf.slice(<span class=\"number\">3</span>,<span class=\"number\">4</span>).toString(<span class=\"string\">'binary'</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>).charCodeAt(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    header.ra = bitSlice(b,<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    header.z = bitSlice(b,<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">    header.rcode = bitSlice(b,<span class=\"number\">4</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    header.qdcount = buf.slice(<span class=\"number\">4</span>,<span class=\"number\">6</span>);</span><br><span class=\"line\">    header.ancount = buf.slice(<span class=\"number\">6</span>,<span class=\"number\">8</span>);</span><br><span class=\"line\">    header.nscount = buf.slice(<span class=\"number\">8</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">    header.arcount = buf.slice(<span class=\"number\">10</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    question.qname = buf.slice(<span class=\"number\">12</span>, buf.length<span class=\"number\">-4</span>);</span><br><span class=\"line\">    question.qtype = buf.slice(buf.length<span class=\"number\">-4</span>, buf.length<span class=\"number\">-2</span>);</span><br><span class=\"line\">    question.qclass = buf.slice(buf.length<span class=\"number\">-2</span>, buf.length);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">header</span>:header, <span class=\"attr\">question</span>:question&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">'error'</span> , (err)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`server error: <span class=\"subst\">$&#123;err.stack&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">'message'</span> , (msg , rinfo)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">//fs.writeFile('dns.json' ,msg, &#123;flag:'w',endcoding:'utf-8'&#125; ,(err)=&gt;&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//    console.log(err);</span></span><br><span class=\"line\">    <span class=\"comment\">//&#125;);</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> query = parse(msg);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'标识ID: '</span> ,query.header.id);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'标识FLAG: '</span> , <span class=\"string\">'QR: '</span>,query.header.qr , <span class=\"string\">'opcode: '</span>,query.header.opcode , <span class=\"string\">'AA: '</span>,query.header.aa , <span class=\"string\">'TC: '</span>,query.header.tc,<span class=\"string\">'RD: '</span>,query.header.rd);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'RA: '</span>,query.header.ra , <span class=\"string\">'zero: '</span>,query.header.z , <span class=\"string\">'recode: '</span>,query.header.rcode);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'QDCOUNT: '</span>,query.header.qdcount , <span class=\"string\">'ANCOUNT: '</span> , query.header.ancount, <span class=\"string\">'NSCOUNT: '</span> , query.header.nscount,<span class=\"string\">'ARCOUNT: '</span>,query.header.arcount);</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'QNAME: '</span>,query.question.qname , <span class=\"string\">'QTYPE: '</span>, query.question.qtype ,<span class=\"string\">'QCLASS: '</span> , query.question.qclass);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'QUESTION STRING: '</span> ,domainify(query.question.qname));</span><br><span class=\"line\"></span><br><span class=\"line\">    server.close();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">'listening'</span> , ()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> address = server.address();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`server listening <span class=\"subst\">$&#123;address.address&#125;</span>:<span class=\"subst\">$&#123;address.port&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.bind(&#123;<span class=\"attr\">port</span>:<span class=\"number\">53</span>,<span class=\"attr\">address</span>:<span class=\"string\">'8.8.8.8'</span>&#125;);<span class=\"comment\">//address需要指定到你要用于进行代理的机器ip</span></span><br></pre></td></tr></table></figure>\n<p>下一篇： <a href=\"/posts/dns-response\">DNS 响应报文详解</a></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"http://docstore.mik.ua/orelly/networking_2ndEd/dns/appa_02.htm\" target=\"_blank\" rel=\"noopener\">http://docstore.mik.ua/orelly/networking_2ndEd/dns/appa_02.htm</a></p>\n<p><a href=\"http://www.comptechdoc.org/independent/networking/terms/dns-message-format.html\" target=\"_blank\" rel=\"noopener\">http://www.comptechdoc.org/independent/networking/terms/dns-message-format.html</a></p>\n<p><a href=\"http://www.iprotocolsec.com/2012/01/13/%E4%BD%BF%E7%94%A8wireshark%E5%AD%A6%E4%B9%A0dns%E5%8D%8F%E8%AE%AE%E5%8F%8Adns%E6%AC%BA%E9%AA%97%E5%8E%9F%E7%90%86/\" target=\"_blank\" rel=\"noopener\">http://www.iprotocolsec.com/2012/01/13/%E4%BD%BF%E7%94%A8wireshark%E5%AD%A6%E4%B9%A0dns%E5%8D%8F%E8%AE%AE%E5%8F%8Adns%E6%AC%BA%E9%AA%97%E5%8E%9F%E7%90%86/</a></p>"},{"title":"DNS 响应报文详解","date":"2016-11-18T10:00:00.000Z","author":"Jin","_content":"\n上一篇我已经解释了DNS请求报文怎么解析,不会的自己坐飞机([飞机入口](https://futu.im/posts/dns-request/))。这一篇主要从DNS服务器的角度来解释，如何自己创建响应报文返回给客户端。\n\n<!-- more -->\n\n就这个命题，可以罗列出DNS服务器在创建`response`响应报文时需要解决的问题。\n\n*  dns数据报类型`Buffer`?                               \n*  Node.js中Buffer如何创建?  \n*  正常情况我们操作的字符串和数字等是否可以转换为`Buffer`?\n*  `Buffer`是否可以创建`response`响应报文指定类型的参数值?\n*  `response`响应报文与`request`请求报文的异同?\n\n说到这，你是不是已经察觉到。既然`dns`请求和`dns`响应都做了，那是不是自己动手写一个dns代理服务器也可以信手拈来呢。\n\n答案是: `Yes`。\n\n那然我们继续完成这最后一步，`response`响应报文的创建。\n\n## DNS响应报文格式\n\n`response`响应报文和`request`请求报文格式相同。不同的地方是参数的值不同。\n\n## response参数详解\n*   `Header` 报文头\n*   `Question` 查询的问题\n*   `Answer`   应答\n*   `Authority` 授权应答\n*   `Additional` 附加信息\n\n``` \n  DNS format\n\n  +--+--+--+--+--+--+--+\n  |        Header      |\n  +--+--+--+--+--+--+--+\n  |      Question      |\n  +--+--+--+--+--+--+--+\n  |      Answer        |\n  +--+--+--+--+--+--+--+\n  |      Authority     |\n  +--+--+--+--+--+--+--+\n  |      Additional    |\n  +--+--+--+--+--+--+--+\n```\n\n### Header报文头\n\n属性说明：\n\n* 客户端请求ID是为了保证收到DNS服务器返回报文时能正确知道是哪一个请求的响应报文。所以一个完整的DNS请求和响应，里面`request`和`response`的`ID`\n必须保持一致。\n*  `header.qr = 1`，表示响应报文\n*  `header.ancount`,这个牵涉到应答记录条目，所以要根据应答字段`Answer`计算。\n\n```js\n  var response = {};\n  var header = response.header = {};\n\n  header.id = request.header.id;//id相同，视为一个dns请求\n  \n  header.qr = 1;    //响应报文\n  header.opcode = 0;//标准查询\n  header.rd = 1;\n  header.ra = 0;\n  \n  header.z = 0;\n  header.rcode = 0;//没有错误\n\n  header.qdcount = 1;\n  header.nscount = 0;\n  header.arcount = 0;\n  header.ancount = 1;//这里answer为一个，所以设置为1.如果有多个answer那么就要考虑多个answer\n```\n\n### Question 请求数据\n将请求数据原样返回。\n\n```js\n  var question = response.question = {};\n  question.qname = request.question.qname;\n  question.qtype = request.question.qtype;\n  question.qclass = request.question.qclass;\n```\n\n### Answer应答报文数据\n这个部分的内容就是dns服务器要返回的数据报。\n\n`RDDATA`为数据字段。\n\n`name`为域名，长度不固定。\n\n格式：\n\n```\n  Answer format\n\n    0  1  2  3  4  5  6  7  0  1  2  3  4  5  6  7\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    NAME                       |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    TYPE                       |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    CLASS                      |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    TTL                        |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    RDLENGTH                   |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    RDATA                      |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\n```\n\n```js\n  var answer = {};\n\n  answer.name = request.question.qname;\n  answer.type = 1;\n  answer.class = 1;\n  answer.ttl = ttl || 1;//报文有效跳数\n  answer.rdlength = 4;\n  answer.rdata = rdata;//数据记录\n```\n\n`rdata`存放的是`ip`地址,ip必须经过转换客户端才能识别：\n\n```js\n  var numify = function(ip) {\n      ip = ip.split('.').map(function(n) {\n          return parseInt(n, 10);\n      });\n\n      var result = 0;\n      var base = 1;\n\n      for (var i = ip.length-1; i >= 0; i--) {\n          result += ip[i]*base;\n          base *= 256;\n      }\n      return result;\n  };\n```\n\n`rdata`是`4`字节，`ip`地址从`.`处切开后是由4段数字组成，每段数据不会超过`2^8 === 256`---一个字节(`8bit`),那`rdata`的4个字节刚好可以存放下一个`ip`地址。\n那现在的问题是怎么把ip地址数据存进4个字节里面，而又要保证客户端能够识别。很简单按字节存，按字节取就行了。`4`字节刚好是一个`32bit`整数的长度。\n\n所以上面计算`result`的`for(...)`循环就是把ip存进`rdata`的一种方式。\n\n其实你也可以使用以下方式计算`result`:\n\n```js\n  result = ip[0]*(1<<24) + ip[1]*(1<<16) + ip[2]*(1<<8) + ip[3];\n```\n\n### Authority/Additional 数据\n自己处理的请求没有授权应答和附加数据。\n\n\n## Buffer类型响应报文\n得到了想要的一切响应数据之后，下一步就是将这些数据转换为客户端可以解析的`Buffer`类型。\n\n那这一步的工作正好与`request`请求报文解析的工作恰好相反。报上面的数据一一拼凑为`response`响应报文格式数据。\n\n### Buffer长度确定\n返回一段`Buffer`报文，总得先创建一定长度的`Buffer`。\n\n根据字段分析，除了`Question.qname`字段和`Answer.name`字段是长度不固定的，其它的字段都是可以计算出来。\n\n通过带入数据可以得到需要创建的`Buffer`的大小。\n\n```\n  len = Header + Question + Answer\n      = 12 + (Question.qname.length+4) + (Answer.name.length + 14)\n      = 30 + Question.qname.length + Answer.name.length\n```\n\n确定需要创建的`Buffer`实例的长度为`30 + Question.qname.length + Answer.name.length`后，就可以进行参数转换了。\n\n### Buffer实例参数转换\n`response`数据大概分为了3中类别：\n\n* 普通完整字节类别\n* 需要按位拼接成一个字节的类别\n* 无符号整数类别\n\n#### 普通完整字节类别\n这种往往是最好处理的了，直接`copy`过来就可以了。\n\n使用`buf.copy(target[, targetStart[, sourceStart[, sourceEnd]]])`函数进行拷贝.\n\n例如拷贝`header.id`:\n\n```js\n  header.id.copy(buf,0,0,2);\n```\n\n通过这种方式即可将其它参数进行一一转换。\n\n#### 需要按位拼接成一个字节的类别\n这种主要数针对`Header`的第`[3,4]`个字节。应为这2个字节的数据是按位的长度区分，现在需要拼凑成完整字节。\n\n首先需要确定的是字节长度，以及默认值，然后确定位操作符。\n\n`1byte = 8bit`\n\n默认值为：`0 = 0x00`\n\n操作符：\n\n```\n  &: 不行,因为任何数&0 == 0\n  |: ok ,任何数 | 0 都等于这个数\n```\n\n通过`|`可以得到想要的结果：\n\n```js\n  buf[2] = 0x00 | header.qr << 7 | header.opcode << 3 | header.aa << 2 | header.tc << 1 | header.rd;\n  buf[3] = 0x00 | header.ra << 7 | header.z << 4 | header.rcode;\n```\n\n#### 无符号整数类别\n假如你看过`Buffer`的api或使用`Buffer`创建过`buf`无符号整数，那么这个问题就可以很容易解决了。\n\n`buf.writeUInt16BE(value, offset[, noAssert])`和`buf.writeUInt32BE(value, offset[, noAssert])`，一看就知道一个是创建`16`位，一个是`32`位。\n\n```js\n buf.writeUInt16BE(header.ancount, 6);\n buf.writeUInt32BE(answer.rdata, len-4);\n```\n\n## 应用场景\n除了`Answer`数据的`ttl`报文有效跳数和`rdata`，需要真的从其它地方获取过来。其它数据基本可以通过计算或从`request`中得到。\n\n封装成函数的话，只需要传入`(request,ttl,rdata)`就可以了。\n\n以下代码仅供参考：\n\n```js\n  var responseBuffer = function(response){\n      var buf = Buffer.alloc(30+response.question.qname.length +response.answer.name.length) ,\n          offset = response.question.qname.length;\n\n      response.header.id.copy(buf,0,0,2);\n\n      buf[2] = 0x00 | response.header.qr << 7 | response.header.opcode << 3 | response.header.aa << 2 | response.header.tc << 1 | response.header.rd;\n      buf[3] = 0x00 | response.header.ra << 7 | response.header.z << 4 | response.header.rcode;\n\n      buf.writeUInt16BE(response.header.qdcount, 4);\n      buf.writeUInt16BE(response.header.ancount, 6);\n      buf.writeUInt16BE(response.header.nscount, 8);\n      buf.writeUInt16BE(response.header.arcount, 10);\n\n      response.question.qname.copy(buf,12);\n      response.question.qtype.copy(buf,12+offset,0,2);\n      response.question.qclass.copy(buf,14+offset,0,2);\n\n      offset += 16;\n      response.answer.name.copy(buf,offset);\n\n      offset += response.answer.name.length;\n      buf.writeUInt16BE(response.answer.type , offset);\n      buf.writeUInt16BE(response.answer.class , offset+2);\n      buf.writeUInt32BE(response.answer.ttl , offset+4);\n      buf.writeUInt16BE(response.answer.rdlength , offset+8);\n      buf.writeUInt32BE(response.answer.rdata , offset+10);\n\n      return buf;\n  };\n\n  var response = function(request , ttl , rdata){\n      var response = {};\n      response.header = {};\n      response.question = {};\n      response.answer = resolve(request.question.qname , ttl , rdata);\n\n      response.header.id = request.header.id;\n\n      response.header.qr = 1;\n      response.header.opcode = 0;\n      response.header.aa = 0;\n      response.header.tc = 0;\n      response.header.rd = 1;\n      response.header.ra = 0;\n      response.header.z = 0;\n      response.header.rcode = 0;\n      response.header.qdcount = 1;\n      response.header.ancount = 1;\n      response.header.nscount = 0;\n      response.header.arcount = 0;\n\n      response.question.qname = request.question.qname;\n      response.question.qtype = request.question.qtype;\n      response.question.qclass = request.question.qclass;\n\n      return responseBuffer(response);\n\n  };\n  var resolve = function(qname , ttl , rdata){\n      var answer = {};\n\n      answer.name = qname;\n      answer.type = 1;\n      answer.class = 1;\n      answer.ttl = ttl;\n      answer.rdlength = 4;\n      answer.rdata = rdata;\n\n      return answer;\n  };\n```\n\n上一篇： [DNS 请求报文详解](/posts/dns-request)\n\n## 参考资料\n\n[https://github.com/mafintosh/dnsjack](https://github.com/mafintosh/dnsjack)","source":"_posts/dns-response.md","raw":"---\ntitle: DNS 响应报文详解\ndate: 2016-11-18 18:00\ncategory: Node.js\ntags: [dns,dgram,JavaScript]\nauthor: Jin\n---\n\n上一篇我已经解释了DNS请求报文怎么解析,不会的自己坐飞机([飞机入口](https://futu.im/posts/dns-request/))。这一篇主要从DNS服务器的角度来解释，如何自己创建响应报文返回给客户端。\n\n<!-- more -->\n\n就这个命题，可以罗列出DNS服务器在创建`response`响应报文时需要解决的问题。\n\n*  dns数据报类型`Buffer`?                               \n*  Node.js中Buffer如何创建?  \n*  正常情况我们操作的字符串和数字等是否可以转换为`Buffer`?\n*  `Buffer`是否可以创建`response`响应报文指定类型的参数值?\n*  `response`响应报文与`request`请求报文的异同?\n\n说到这，你是不是已经察觉到。既然`dns`请求和`dns`响应都做了，那是不是自己动手写一个dns代理服务器也可以信手拈来呢。\n\n答案是: `Yes`。\n\n那然我们继续完成这最后一步，`response`响应报文的创建。\n\n## DNS响应报文格式\n\n`response`响应报文和`request`请求报文格式相同。不同的地方是参数的值不同。\n\n## response参数详解\n*   `Header` 报文头\n*   `Question` 查询的问题\n*   `Answer`   应答\n*   `Authority` 授权应答\n*   `Additional` 附加信息\n\n``` \n  DNS format\n\n  +--+--+--+--+--+--+--+\n  |        Header      |\n  +--+--+--+--+--+--+--+\n  |      Question      |\n  +--+--+--+--+--+--+--+\n  |      Answer        |\n  +--+--+--+--+--+--+--+\n  |      Authority     |\n  +--+--+--+--+--+--+--+\n  |      Additional    |\n  +--+--+--+--+--+--+--+\n```\n\n### Header报文头\n\n属性说明：\n\n* 客户端请求ID是为了保证收到DNS服务器返回报文时能正确知道是哪一个请求的响应报文。所以一个完整的DNS请求和响应，里面`request`和`response`的`ID`\n必须保持一致。\n*  `header.qr = 1`，表示响应报文\n*  `header.ancount`,这个牵涉到应答记录条目，所以要根据应答字段`Answer`计算。\n\n```js\n  var response = {};\n  var header = response.header = {};\n\n  header.id = request.header.id;//id相同，视为一个dns请求\n  \n  header.qr = 1;    //响应报文\n  header.opcode = 0;//标准查询\n  header.rd = 1;\n  header.ra = 0;\n  \n  header.z = 0;\n  header.rcode = 0;//没有错误\n\n  header.qdcount = 1;\n  header.nscount = 0;\n  header.arcount = 0;\n  header.ancount = 1;//这里answer为一个，所以设置为1.如果有多个answer那么就要考虑多个answer\n```\n\n### Question 请求数据\n将请求数据原样返回。\n\n```js\n  var question = response.question = {};\n  question.qname = request.question.qname;\n  question.qtype = request.question.qtype;\n  question.qclass = request.question.qclass;\n```\n\n### Answer应答报文数据\n这个部分的内容就是dns服务器要返回的数据报。\n\n`RDDATA`为数据字段。\n\n`name`为域名，长度不固定。\n\n格式：\n\n```\n  Answer format\n\n    0  1  2  3  4  5  6  7  0  1  2  3  4  5  6  7\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    NAME                       |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    TYPE                       |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    CLASS                      |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    TTL                        |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    RDLENGTH                   |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n  |                    RDATA                      |\n  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\n```\n\n```js\n  var answer = {};\n\n  answer.name = request.question.qname;\n  answer.type = 1;\n  answer.class = 1;\n  answer.ttl = ttl || 1;//报文有效跳数\n  answer.rdlength = 4;\n  answer.rdata = rdata;//数据记录\n```\n\n`rdata`存放的是`ip`地址,ip必须经过转换客户端才能识别：\n\n```js\n  var numify = function(ip) {\n      ip = ip.split('.').map(function(n) {\n          return parseInt(n, 10);\n      });\n\n      var result = 0;\n      var base = 1;\n\n      for (var i = ip.length-1; i >= 0; i--) {\n          result += ip[i]*base;\n          base *= 256;\n      }\n      return result;\n  };\n```\n\n`rdata`是`4`字节，`ip`地址从`.`处切开后是由4段数字组成，每段数据不会超过`2^8 === 256`---一个字节(`8bit`),那`rdata`的4个字节刚好可以存放下一个`ip`地址。\n那现在的问题是怎么把ip地址数据存进4个字节里面，而又要保证客户端能够识别。很简单按字节存，按字节取就行了。`4`字节刚好是一个`32bit`整数的长度。\n\n所以上面计算`result`的`for(...)`循环就是把ip存进`rdata`的一种方式。\n\n其实你也可以使用以下方式计算`result`:\n\n```js\n  result = ip[0]*(1<<24) + ip[1]*(1<<16) + ip[2]*(1<<8) + ip[3];\n```\n\n### Authority/Additional 数据\n自己处理的请求没有授权应答和附加数据。\n\n\n## Buffer类型响应报文\n得到了想要的一切响应数据之后，下一步就是将这些数据转换为客户端可以解析的`Buffer`类型。\n\n那这一步的工作正好与`request`请求报文解析的工作恰好相反。报上面的数据一一拼凑为`response`响应报文格式数据。\n\n### Buffer长度确定\n返回一段`Buffer`报文，总得先创建一定长度的`Buffer`。\n\n根据字段分析，除了`Question.qname`字段和`Answer.name`字段是长度不固定的，其它的字段都是可以计算出来。\n\n通过带入数据可以得到需要创建的`Buffer`的大小。\n\n```\n  len = Header + Question + Answer\n      = 12 + (Question.qname.length+4) + (Answer.name.length + 14)\n      = 30 + Question.qname.length + Answer.name.length\n```\n\n确定需要创建的`Buffer`实例的长度为`30 + Question.qname.length + Answer.name.length`后，就可以进行参数转换了。\n\n### Buffer实例参数转换\n`response`数据大概分为了3中类别：\n\n* 普通完整字节类别\n* 需要按位拼接成一个字节的类别\n* 无符号整数类别\n\n#### 普通完整字节类别\n这种往往是最好处理的了，直接`copy`过来就可以了。\n\n使用`buf.copy(target[, targetStart[, sourceStart[, sourceEnd]]])`函数进行拷贝.\n\n例如拷贝`header.id`:\n\n```js\n  header.id.copy(buf,0,0,2);\n```\n\n通过这种方式即可将其它参数进行一一转换。\n\n#### 需要按位拼接成一个字节的类别\n这种主要数针对`Header`的第`[3,4]`个字节。应为这2个字节的数据是按位的长度区分，现在需要拼凑成完整字节。\n\n首先需要确定的是字节长度，以及默认值，然后确定位操作符。\n\n`1byte = 8bit`\n\n默认值为：`0 = 0x00`\n\n操作符：\n\n```\n  &: 不行,因为任何数&0 == 0\n  |: ok ,任何数 | 0 都等于这个数\n```\n\n通过`|`可以得到想要的结果：\n\n```js\n  buf[2] = 0x00 | header.qr << 7 | header.opcode << 3 | header.aa << 2 | header.tc << 1 | header.rd;\n  buf[3] = 0x00 | header.ra << 7 | header.z << 4 | header.rcode;\n```\n\n#### 无符号整数类别\n假如你看过`Buffer`的api或使用`Buffer`创建过`buf`无符号整数，那么这个问题就可以很容易解决了。\n\n`buf.writeUInt16BE(value, offset[, noAssert])`和`buf.writeUInt32BE(value, offset[, noAssert])`，一看就知道一个是创建`16`位，一个是`32`位。\n\n```js\n buf.writeUInt16BE(header.ancount, 6);\n buf.writeUInt32BE(answer.rdata, len-4);\n```\n\n## 应用场景\n除了`Answer`数据的`ttl`报文有效跳数和`rdata`，需要真的从其它地方获取过来。其它数据基本可以通过计算或从`request`中得到。\n\n封装成函数的话，只需要传入`(request,ttl,rdata)`就可以了。\n\n以下代码仅供参考：\n\n```js\n  var responseBuffer = function(response){\n      var buf = Buffer.alloc(30+response.question.qname.length +response.answer.name.length) ,\n          offset = response.question.qname.length;\n\n      response.header.id.copy(buf,0,0,2);\n\n      buf[2] = 0x00 | response.header.qr << 7 | response.header.opcode << 3 | response.header.aa << 2 | response.header.tc << 1 | response.header.rd;\n      buf[3] = 0x00 | response.header.ra << 7 | response.header.z << 4 | response.header.rcode;\n\n      buf.writeUInt16BE(response.header.qdcount, 4);\n      buf.writeUInt16BE(response.header.ancount, 6);\n      buf.writeUInt16BE(response.header.nscount, 8);\n      buf.writeUInt16BE(response.header.arcount, 10);\n\n      response.question.qname.copy(buf,12);\n      response.question.qtype.copy(buf,12+offset,0,2);\n      response.question.qclass.copy(buf,14+offset,0,2);\n\n      offset += 16;\n      response.answer.name.copy(buf,offset);\n\n      offset += response.answer.name.length;\n      buf.writeUInt16BE(response.answer.type , offset);\n      buf.writeUInt16BE(response.answer.class , offset+2);\n      buf.writeUInt32BE(response.answer.ttl , offset+4);\n      buf.writeUInt16BE(response.answer.rdlength , offset+8);\n      buf.writeUInt32BE(response.answer.rdata , offset+10);\n\n      return buf;\n  };\n\n  var response = function(request , ttl , rdata){\n      var response = {};\n      response.header = {};\n      response.question = {};\n      response.answer = resolve(request.question.qname , ttl , rdata);\n\n      response.header.id = request.header.id;\n\n      response.header.qr = 1;\n      response.header.opcode = 0;\n      response.header.aa = 0;\n      response.header.tc = 0;\n      response.header.rd = 1;\n      response.header.ra = 0;\n      response.header.z = 0;\n      response.header.rcode = 0;\n      response.header.qdcount = 1;\n      response.header.ancount = 1;\n      response.header.nscount = 0;\n      response.header.arcount = 0;\n\n      response.question.qname = request.question.qname;\n      response.question.qtype = request.question.qtype;\n      response.question.qclass = request.question.qclass;\n\n      return responseBuffer(response);\n\n  };\n  var resolve = function(qname , ttl , rdata){\n      var answer = {};\n\n      answer.name = qname;\n      answer.type = 1;\n      answer.class = 1;\n      answer.ttl = ttl;\n      answer.rdlength = 4;\n      answer.rdata = rdata;\n\n      return answer;\n  };\n```\n\n上一篇： [DNS 请求报文详解](/posts/dns-request)\n\n## 参考资料\n\n[https://github.com/mafintosh/dnsjack](https://github.com/mafintosh/dnsjack)","slug":"dns-response","published":1,"updated":"2017-12-01T08:50:00.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknje002gjxs1jbquikm2","content":"<p>上一篇我已经解释了DNS请求报文怎么解析,不会的自己坐飞机(<a href=\"https://futu.im/posts/dns-request/\">飞机入口</a>)。这一篇主要从DNS服务器的角度来解释，如何自己创建响应报文返回给客户端。</p>\n<a id=\"more\"></a>\n<p>就这个命题，可以罗列出DNS服务器在创建<code>response</code>响应报文时需要解决的问题。</p>\n<ul>\n<li>dns数据报类型<code>Buffer</code>?                               </li>\n<li>Node.js中Buffer如何创建?  </li>\n<li>正常情况我们操作的字符串和数字等是否可以转换为<code>Buffer</code>?</li>\n<li><code>Buffer</code>是否可以创建<code>response</code>响应报文指定类型的参数值?</li>\n<li><code>response</code>响应报文与<code>request</code>请求报文的异同?</li>\n</ul>\n<p>说到这，你是不是已经察觉到。既然<code>dns</code>请求和<code>dns</code>响应都做了，那是不是自己动手写一个dns代理服务器也可以信手拈来呢。</p>\n<p>答案是: <code>Yes</code>。</p>\n<p>那然我们继续完成这最后一步，<code>response</code>响应报文的创建。</p>\n<h2 id=\"DNS响应报文格式\"><a href=\"#DNS响应报文格式\" class=\"headerlink\" title=\"DNS响应报文格式\"></a>DNS响应报文格式</h2><p><code>response</code>响应报文和<code>request</code>请求报文格式相同。不同的地方是参数的值不同。</p>\n<h2 id=\"response参数详解\"><a href=\"#response参数详解\" class=\"headerlink\" title=\"response参数详解\"></a>response参数详解</h2><ul>\n<li><code>Header</code> 报文头</li>\n<li><code>Question</code> 查询的问题</li>\n<li><code>Answer</code>   应答</li>\n<li><code>Authority</code> 授权应答</li>\n<li><code>Additional</code> 附加信息</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DNS format</span><br><span class=\"line\"></span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br><span class=\"line\">|        Header      |</span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br><span class=\"line\">|      Question      |</span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br><span class=\"line\">|      Answer        |</span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br><span class=\"line\">|      Authority     |</span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br><span class=\"line\">|      Additional    |</span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br></pre></td></tr></table></figure>\n<h3 id=\"Header报文头\"><a href=\"#Header报文头\" class=\"headerlink\" title=\"Header报文头\"></a>Header报文头</h3><p>属性说明：</p>\n<ul>\n<li>客户端请求ID是为了保证收到DNS服务器返回报文时能正确知道是哪一个请求的响应报文。所以一个完整的DNS请求和响应，里面<code>request</code>和<code>response</code>的<code>ID</code><br>必须保持一致。</li>\n<li><code>header.qr = 1</code>，表示响应报文</li>\n<li><code>header.ancount</code>,这个牵涉到应答记录条目，所以要根据应答字段<code>Answer</code>计算。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> response = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> header = response.header = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">header.id = request.header.id;<span class=\"comment\">//id相同，视为一个dns请求</span></span><br><span class=\"line\"></span><br><span class=\"line\">header.qr = <span class=\"number\">1</span>;    <span class=\"comment\">//响应报文</span></span><br><span class=\"line\">header.opcode = <span class=\"number\">0</span>;<span class=\"comment\">//标准查询</span></span><br><span class=\"line\">header.rd = <span class=\"number\">1</span>;</span><br><span class=\"line\">header.ra = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">header.z = <span class=\"number\">0</span>;</span><br><span class=\"line\">header.rcode = <span class=\"number\">0</span>;<span class=\"comment\">//没有错误</span></span><br><span class=\"line\"></span><br><span class=\"line\">header.qdcount = <span class=\"number\">1</span>;</span><br><span class=\"line\">header.nscount = <span class=\"number\">0</span>;</span><br><span class=\"line\">header.arcount = <span class=\"number\">0</span>;</span><br><span class=\"line\">header.ancount = <span class=\"number\">1</span>;<span class=\"comment\">//这里answer为一个，所以设置为1.如果有多个answer那么就要考虑多个answer</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Question-请求数据\"><a href=\"#Question-请求数据\" class=\"headerlink\" title=\"Question 请求数据\"></a>Question 请求数据</h3><p>将请求数据原样返回。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> question = response.question = &#123;&#125;;</span><br><span class=\"line\">question.qname = request.question.qname;</span><br><span class=\"line\">question.qtype = request.question.qtype;</span><br><span class=\"line\">question.qclass = request.question.qclass;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Answer应答报文数据\"><a href=\"#Answer应答报文数据\" class=\"headerlink\" title=\"Answer应答报文数据\"></a>Answer应答报文数据</h3><p>这个部分的内容就是dns服务器要返回的数据报。</p>\n<p><code>RDDATA</code>为数据字段。</p>\n<p><code>name</code>为域名，长度不固定。</p>\n<p>格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Answer format</span><br><span class=\"line\"></span><br><span class=\"line\">  0  1  2  3  4  5  6  7  0  1  2  3  4  5  6  7</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    NAME                       |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    TYPE                       |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    CLASS                      |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    TTL                        |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    RDLENGTH                   |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    RDATA                      |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> answer = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">answer.name = request.question.qname;</span><br><span class=\"line\">answer.type = <span class=\"number\">1</span>;</span><br><span class=\"line\">answer.class = <span class=\"number\">1</span>;</span><br><span class=\"line\">answer.ttl = ttl || <span class=\"number\">1</span>;<span class=\"comment\">//报文有效跳数</span></span><br><span class=\"line\">answer.rdlength = <span class=\"number\">4</span>;</span><br><span class=\"line\">answer.rdata = rdata;<span class=\"comment\">//数据记录</span></span><br></pre></td></tr></table></figure>\n<p><code>rdata</code>存放的是<code>ip</code>地址,ip必须经过转换客户端才能识别：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numify = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ip</span>) </span>&#123;</span><br><span class=\"line\">    ip = ip.split(<span class=\"string\">'.'</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(n, <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> base = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = ip.length<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        result += ip[i]*base;</span><br><span class=\"line\">        base *= <span class=\"number\">256</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>rdata</code>是<code>4</code>字节，<code>ip</code>地址从<code>.</code>处切开后是由4段数字组成，每段数据不会超过<code>2^8 === 256</code>—一个字节(<code>8bit</code>),那<code>rdata</code>的4个字节刚好可以存放下一个<code>ip</code>地址。<br>那现在的问题是怎么把ip地址数据存进4个字节里面，而又要保证客户端能够识别。很简单按字节存，按字节取就行了。<code>4</code>字节刚好是一个<code>32bit</code>整数的长度。</p>\n<p>所以上面计算<code>result</code>的<code>for(...)</code>循环就是把ip存进<code>rdata</code>的一种方式。</p>\n<p>其实你也可以使用以下方式计算<code>result</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = ip[<span class=\"number\">0</span>]*(<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">24</span>) + ip[<span class=\"number\">1</span>]*(<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">16</span>) + ip[<span class=\"number\">2</span>]*(<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">8</span>) + ip[<span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n<h3 id=\"Authority-Additional-数据\"><a href=\"#Authority-Additional-数据\" class=\"headerlink\" title=\"Authority/Additional 数据\"></a>Authority/Additional 数据</h3><p>自己处理的请求没有授权应答和附加数据。</p>\n<h2 id=\"Buffer类型响应报文\"><a href=\"#Buffer类型响应报文\" class=\"headerlink\" title=\"Buffer类型响应报文\"></a>Buffer类型响应报文</h2><p>得到了想要的一切响应数据之后，下一步就是将这些数据转换为客户端可以解析的<code>Buffer</code>类型。</p>\n<p>那这一步的工作正好与<code>request</code>请求报文解析的工作恰好相反。报上面的数据一一拼凑为<code>response</code>响应报文格式数据。</p>\n<h3 id=\"Buffer长度确定\"><a href=\"#Buffer长度确定\" class=\"headerlink\" title=\"Buffer长度确定\"></a>Buffer长度确定</h3><p>返回一段<code>Buffer</code>报文，总得先创建一定长度的<code>Buffer</code>。</p>\n<p>根据字段分析，除了<code>Question.qname</code>字段和<code>Answer.name</code>字段是长度不固定的，其它的字段都是可以计算出来。</p>\n<p>通过带入数据可以得到需要创建的<code>Buffer</code>的大小。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">len = Header + Question + Answer</span><br><span class=\"line\">    = 12 + (Question.qname.length+4) + (Answer.name.length + 14)</span><br><span class=\"line\">    = 30 + Question.qname.length + Answer.name.length</span><br></pre></td></tr></table></figure>\n<p>确定需要创建的<code>Buffer</code>实例的长度为<code>30 + Question.qname.length + Answer.name.length</code>后，就可以进行参数转换了。</p>\n<h3 id=\"Buffer实例参数转换\"><a href=\"#Buffer实例参数转换\" class=\"headerlink\" title=\"Buffer实例参数转换\"></a>Buffer实例参数转换</h3><p><code>response</code>数据大概分为了3中类别：</p>\n<ul>\n<li>普通完整字节类别</li>\n<li>需要按位拼接成一个字节的类别</li>\n<li>无符号整数类别</li>\n</ul>\n<h4 id=\"普通完整字节类别\"><a href=\"#普通完整字节类别\" class=\"headerlink\" title=\"普通完整字节类别\"></a>普通完整字节类别</h4><p>这种往往是最好处理的了，直接<code>copy</code>过来就可以了。</p>\n<p>使用<code>buf.copy(target[, targetStart[, sourceStart[, sourceEnd]]])</code>函数进行拷贝.</p>\n<p>例如拷贝<code>header.id</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header.id.copy(buf,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>通过这种方式即可将其它参数进行一一转换。</p>\n<h4 id=\"需要按位拼接成一个字节的类别\"><a href=\"#需要按位拼接成一个字节的类别\" class=\"headerlink\" title=\"需要按位拼接成一个字节的类别\"></a>需要按位拼接成一个字节的类别</h4><p>这种主要数针对<code>Header</code>的第<code>[3,4]</code>个字节。应为这2个字节的数据是按位的长度区分，现在需要拼凑成完整字节。</p>\n<p>首先需要确定的是字节长度，以及默认值，然后确定位操作符。</p>\n<p><code>1byte = 8bit</code></p>\n<p>默认值为：<code>0 = 0x00</code></p>\n<p>操作符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;: 不行,因为任何数&amp;0 == 0</span><br><span class=\"line\">|: ok ,任何数 | 0 都等于这个数</span><br></pre></td></tr></table></figure>\n<p>通过<code>|</code>可以得到想要的结果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buf[<span class=\"number\">2</span>] = <span class=\"number\">0x00</span> | header.qr &lt;&lt; <span class=\"number\">7</span> | header.opcode &lt;&lt; <span class=\"number\">3</span> | header.aa &lt;&lt; <span class=\"number\">2</span> | header.tc &lt;&lt; <span class=\"number\">1</span> | header.rd;</span><br><span class=\"line\">buf[<span class=\"number\">3</span>] = <span class=\"number\">0x00</span> | header.ra &lt;&lt; <span class=\"number\">7</span> | header.z &lt;&lt; <span class=\"number\">4</span> | header.rcode;</span><br></pre></td></tr></table></figure>\n<h4 id=\"无符号整数类别\"><a href=\"#无符号整数类别\" class=\"headerlink\" title=\"无符号整数类别\"></a>无符号整数类别</h4><p>假如你看过<code>Buffer</code>的api或使用<code>Buffer</code>创建过<code>buf</code>无符号整数，那么这个问题就可以很容易解决了。</p>\n<p><code>buf.writeUInt16BE(value, offset[, noAssert])</code>和<code>buf.writeUInt32BE(value, offset[, noAssert])</code>，一看就知道一个是创建<code>16</code>位，一个是<code>32</code>位。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buf.writeUInt16BE(header.ancount, <span class=\"number\">6</span>);</span><br><span class=\"line\">buf.writeUInt32BE(answer.rdata, len<span class=\"number\">-4</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>除了<code>Answer</code>数据的<code>ttl</code>报文有效跳数和<code>rdata</code>，需要真的从其它地方获取过来。其它数据基本可以通过计算或从<code>request</code>中得到。</p>\n<p>封装成函数的话，只需要传入<code>(request,ttl,rdata)</code>就可以了。</p>\n<p>以下代码仅供参考：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> responseBuffer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> buf = Buffer.alloc(<span class=\"number\">30</span>+response.question.qname.length +response.answer.name.length) ,</span><br><span class=\"line\">        offset = response.question.qname.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    response.header.id.copy(buf,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    buf[<span class=\"number\">2</span>] = <span class=\"number\">0x00</span> | response.header.qr &lt;&lt; <span class=\"number\">7</span> | response.header.opcode &lt;&lt; <span class=\"number\">3</span> | response.header.aa &lt;&lt; <span class=\"number\">2</span> | response.header.tc &lt;&lt; <span class=\"number\">1</span> | response.header.rd;</span><br><span class=\"line\">    buf[<span class=\"number\">3</span>] = <span class=\"number\">0x00</span> | response.header.ra &lt;&lt; <span class=\"number\">7</span> | response.header.z &lt;&lt; <span class=\"number\">4</span> | response.header.rcode;</span><br><span class=\"line\"></span><br><span class=\"line\">    buf.writeUInt16BE(response.header.qdcount, <span class=\"number\">4</span>);</span><br><span class=\"line\">    buf.writeUInt16BE(response.header.ancount, <span class=\"number\">6</span>);</span><br><span class=\"line\">    buf.writeUInt16BE(response.header.nscount, <span class=\"number\">8</span>);</span><br><span class=\"line\">    buf.writeUInt16BE(response.header.arcount, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    response.question.qname.copy(buf,<span class=\"number\">12</span>);</span><br><span class=\"line\">    response.question.qtype.copy(buf,<span class=\"number\">12</span>+offset,<span class=\"number\">0</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">    response.question.qclass.copy(buf,<span class=\"number\">14</span>+offset,<span class=\"number\">0</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    offset += <span class=\"number\">16</span>;</span><br><span class=\"line\">    response.answer.name.copy(buf,offset);</span><br><span class=\"line\"></span><br><span class=\"line\">    offset += response.answer.name.length;</span><br><span class=\"line\">    buf.writeUInt16BE(response.answer.type , offset);</span><br><span class=\"line\">    buf.writeUInt16BE(response.answer.class , offset+<span class=\"number\">2</span>);</span><br><span class=\"line\">    buf.writeUInt32BE(response.answer.ttl , offset+<span class=\"number\">4</span>);</span><br><span class=\"line\">    buf.writeUInt16BE(response.answer.rdlength , offset+<span class=\"number\">8</span>);</span><br><span class=\"line\">    buf.writeUInt32BE(response.answer.rdata , offset+<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> buf;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> response = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request , ttl , rdata</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> response = &#123;&#125;;</span><br><span class=\"line\">    response.header = &#123;&#125;;</span><br><span class=\"line\">    response.question = &#123;&#125;;</span><br><span class=\"line\">    response.answer = resolve(request.question.qname , ttl , rdata);</span><br><span class=\"line\"></span><br><span class=\"line\">    response.header.id = request.header.id;</span><br><span class=\"line\"></span><br><span class=\"line\">    response.header.qr = <span class=\"number\">1</span>;</span><br><span class=\"line\">    response.header.opcode = <span class=\"number\">0</span>;</span><br><span class=\"line\">    response.header.aa = <span class=\"number\">0</span>;</span><br><span class=\"line\">    response.header.tc = <span class=\"number\">0</span>;</span><br><span class=\"line\">    response.header.rd = <span class=\"number\">1</span>;</span><br><span class=\"line\">    response.header.ra = <span class=\"number\">0</span>;</span><br><span class=\"line\">    response.header.z = <span class=\"number\">0</span>;</span><br><span class=\"line\">    response.header.rcode = <span class=\"number\">0</span>;</span><br><span class=\"line\">    response.header.qdcount = <span class=\"number\">1</span>;</span><br><span class=\"line\">    response.header.ancount = <span class=\"number\">1</span>;</span><br><span class=\"line\">    response.header.nscount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    response.header.arcount = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    response.question.qname = request.question.qname;</span><br><span class=\"line\">    response.question.qtype = request.question.qtype;</span><br><span class=\"line\">    response.question.qclass = request.question.qclass;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> responseBuffer(response);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">qname , ttl , rdata</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> answer = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    answer.name = qname;</span><br><span class=\"line\">    answer.type = <span class=\"number\">1</span>;</span><br><span class=\"line\">    answer.class = <span class=\"number\">1</span>;</span><br><span class=\"line\">    answer.ttl = ttl;</span><br><span class=\"line\">    answer.rdlength = <span class=\"number\">4</span>;</span><br><span class=\"line\">    answer.rdata = rdata;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上一篇： <a href=\"/posts/dns-request\">DNS 请求报文详解</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://github.com/mafintosh/dnsjack\" target=\"_blank\" rel=\"noopener\">https://github.com/mafintosh/dnsjack</a></p>\n","site":{"data":{}},"excerpt":"<p>上一篇我已经解释了DNS请求报文怎么解析,不会的自己坐飞机(<a href=\"https://futu.im/posts/dns-request/\">飞机入口</a>)。这一篇主要从DNS服务器的角度来解释，如何自己创建响应报文返回给客户端。</p>","more":"<p>就这个命题，可以罗列出DNS服务器在创建<code>response</code>响应报文时需要解决的问题。</p>\n<ul>\n<li>dns数据报类型<code>Buffer</code>?                               </li>\n<li>Node.js中Buffer如何创建?  </li>\n<li>正常情况我们操作的字符串和数字等是否可以转换为<code>Buffer</code>?</li>\n<li><code>Buffer</code>是否可以创建<code>response</code>响应报文指定类型的参数值?</li>\n<li><code>response</code>响应报文与<code>request</code>请求报文的异同?</li>\n</ul>\n<p>说到这，你是不是已经察觉到。既然<code>dns</code>请求和<code>dns</code>响应都做了，那是不是自己动手写一个dns代理服务器也可以信手拈来呢。</p>\n<p>答案是: <code>Yes</code>。</p>\n<p>那然我们继续完成这最后一步，<code>response</code>响应报文的创建。</p>\n<h2 id=\"DNS响应报文格式\"><a href=\"#DNS响应报文格式\" class=\"headerlink\" title=\"DNS响应报文格式\"></a>DNS响应报文格式</h2><p><code>response</code>响应报文和<code>request</code>请求报文格式相同。不同的地方是参数的值不同。</p>\n<h2 id=\"response参数详解\"><a href=\"#response参数详解\" class=\"headerlink\" title=\"response参数详解\"></a>response参数详解</h2><ul>\n<li><code>Header</code> 报文头</li>\n<li><code>Question</code> 查询的问题</li>\n<li><code>Answer</code>   应答</li>\n<li><code>Authority</code> 授权应答</li>\n<li><code>Additional</code> 附加信息</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DNS format</span><br><span class=\"line\"></span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br><span class=\"line\">|        Header      |</span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br><span class=\"line\">|      Question      |</span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br><span class=\"line\">|      Answer        |</span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br><span class=\"line\">|      Authority     |</span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br><span class=\"line\">|      Additional    |</span><br><span class=\"line\">+--+--+--+--+--+--+--+</span><br></pre></td></tr></table></figure>\n<h3 id=\"Header报文头\"><a href=\"#Header报文头\" class=\"headerlink\" title=\"Header报文头\"></a>Header报文头</h3><p>属性说明：</p>\n<ul>\n<li>客户端请求ID是为了保证收到DNS服务器返回报文时能正确知道是哪一个请求的响应报文。所以一个完整的DNS请求和响应，里面<code>request</code>和<code>response</code>的<code>ID</code><br>必须保持一致。</li>\n<li><code>header.qr = 1</code>，表示响应报文</li>\n<li><code>header.ancount</code>,这个牵涉到应答记录条目，所以要根据应答字段<code>Answer</code>计算。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> response = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> header = response.header = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">header.id = request.header.id;<span class=\"comment\">//id相同，视为一个dns请求</span></span><br><span class=\"line\"></span><br><span class=\"line\">header.qr = <span class=\"number\">1</span>;    <span class=\"comment\">//响应报文</span></span><br><span class=\"line\">header.opcode = <span class=\"number\">0</span>;<span class=\"comment\">//标准查询</span></span><br><span class=\"line\">header.rd = <span class=\"number\">1</span>;</span><br><span class=\"line\">header.ra = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">header.z = <span class=\"number\">0</span>;</span><br><span class=\"line\">header.rcode = <span class=\"number\">0</span>;<span class=\"comment\">//没有错误</span></span><br><span class=\"line\"></span><br><span class=\"line\">header.qdcount = <span class=\"number\">1</span>;</span><br><span class=\"line\">header.nscount = <span class=\"number\">0</span>;</span><br><span class=\"line\">header.arcount = <span class=\"number\">0</span>;</span><br><span class=\"line\">header.ancount = <span class=\"number\">1</span>;<span class=\"comment\">//这里answer为一个，所以设置为1.如果有多个answer那么就要考虑多个answer</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Question-请求数据\"><a href=\"#Question-请求数据\" class=\"headerlink\" title=\"Question 请求数据\"></a>Question 请求数据</h3><p>将请求数据原样返回。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> question = response.question = &#123;&#125;;</span><br><span class=\"line\">question.qname = request.question.qname;</span><br><span class=\"line\">question.qtype = request.question.qtype;</span><br><span class=\"line\">question.qclass = request.question.qclass;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Answer应答报文数据\"><a href=\"#Answer应答报文数据\" class=\"headerlink\" title=\"Answer应答报文数据\"></a>Answer应答报文数据</h3><p>这个部分的内容就是dns服务器要返回的数据报。</p>\n<p><code>RDDATA</code>为数据字段。</p>\n<p><code>name</code>为域名，长度不固定。</p>\n<p>格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Answer format</span><br><span class=\"line\"></span><br><span class=\"line\">  0  1  2  3  4  5  6  7  0  1  2  3  4  5  6  7</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    NAME                       |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    TYPE                       |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    CLASS                      |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    TTL                        |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    RDLENGTH                   |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class=\"line\">|                    RDATA                      |</span><br><span class=\"line\">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> answer = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">answer.name = request.question.qname;</span><br><span class=\"line\">answer.type = <span class=\"number\">1</span>;</span><br><span class=\"line\">answer.class = <span class=\"number\">1</span>;</span><br><span class=\"line\">answer.ttl = ttl || <span class=\"number\">1</span>;<span class=\"comment\">//报文有效跳数</span></span><br><span class=\"line\">answer.rdlength = <span class=\"number\">4</span>;</span><br><span class=\"line\">answer.rdata = rdata;<span class=\"comment\">//数据记录</span></span><br></pre></td></tr></table></figure>\n<p><code>rdata</code>存放的是<code>ip</code>地址,ip必须经过转换客户端才能识别：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numify = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ip</span>) </span>&#123;</span><br><span class=\"line\">    ip = ip.split(<span class=\"string\">'.'</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(n, <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> base = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = ip.length<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        result += ip[i]*base;</span><br><span class=\"line\">        base *= <span class=\"number\">256</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>rdata</code>是<code>4</code>字节，<code>ip</code>地址从<code>.</code>处切开后是由4段数字组成，每段数据不会超过<code>2^8 === 256</code>—一个字节(<code>8bit</code>),那<code>rdata</code>的4个字节刚好可以存放下一个<code>ip</code>地址。<br>那现在的问题是怎么把ip地址数据存进4个字节里面，而又要保证客户端能够识别。很简单按字节存，按字节取就行了。<code>4</code>字节刚好是一个<code>32bit</code>整数的长度。</p>\n<p>所以上面计算<code>result</code>的<code>for(...)</code>循环就是把ip存进<code>rdata</code>的一种方式。</p>\n<p>其实你也可以使用以下方式计算<code>result</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = ip[<span class=\"number\">0</span>]*(<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">24</span>) + ip[<span class=\"number\">1</span>]*(<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">16</span>) + ip[<span class=\"number\">2</span>]*(<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">8</span>) + ip[<span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n<h3 id=\"Authority-Additional-数据\"><a href=\"#Authority-Additional-数据\" class=\"headerlink\" title=\"Authority/Additional 数据\"></a>Authority/Additional 数据</h3><p>自己处理的请求没有授权应答和附加数据。</p>\n<h2 id=\"Buffer类型响应报文\"><a href=\"#Buffer类型响应报文\" class=\"headerlink\" title=\"Buffer类型响应报文\"></a>Buffer类型响应报文</h2><p>得到了想要的一切响应数据之后，下一步就是将这些数据转换为客户端可以解析的<code>Buffer</code>类型。</p>\n<p>那这一步的工作正好与<code>request</code>请求报文解析的工作恰好相反。报上面的数据一一拼凑为<code>response</code>响应报文格式数据。</p>\n<h3 id=\"Buffer长度确定\"><a href=\"#Buffer长度确定\" class=\"headerlink\" title=\"Buffer长度确定\"></a>Buffer长度确定</h3><p>返回一段<code>Buffer</code>报文，总得先创建一定长度的<code>Buffer</code>。</p>\n<p>根据字段分析，除了<code>Question.qname</code>字段和<code>Answer.name</code>字段是长度不固定的，其它的字段都是可以计算出来。</p>\n<p>通过带入数据可以得到需要创建的<code>Buffer</code>的大小。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">len = Header + Question + Answer</span><br><span class=\"line\">    = 12 + (Question.qname.length+4) + (Answer.name.length + 14)</span><br><span class=\"line\">    = 30 + Question.qname.length + Answer.name.length</span><br></pre></td></tr></table></figure>\n<p>确定需要创建的<code>Buffer</code>实例的长度为<code>30 + Question.qname.length + Answer.name.length</code>后，就可以进行参数转换了。</p>\n<h3 id=\"Buffer实例参数转换\"><a href=\"#Buffer实例参数转换\" class=\"headerlink\" title=\"Buffer实例参数转换\"></a>Buffer实例参数转换</h3><p><code>response</code>数据大概分为了3中类别：</p>\n<ul>\n<li>普通完整字节类别</li>\n<li>需要按位拼接成一个字节的类别</li>\n<li>无符号整数类别</li>\n</ul>\n<h4 id=\"普通完整字节类别\"><a href=\"#普通完整字节类别\" class=\"headerlink\" title=\"普通完整字节类别\"></a>普通完整字节类别</h4><p>这种往往是最好处理的了，直接<code>copy</code>过来就可以了。</p>\n<p>使用<code>buf.copy(target[, targetStart[, sourceStart[, sourceEnd]]])</code>函数进行拷贝.</p>\n<p>例如拷贝<code>header.id</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header.id.copy(buf,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>通过这种方式即可将其它参数进行一一转换。</p>\n<h4 id=\"需要按位拼接成一个字节的类别\"><a href=\"#需要按位拼接成一个字节的类别\" class=\"headerlink\" title=\"需要按位拼接成一个字节的类别\"></a>需要按位拼接成一个字节的类别</h4><p>这种主要数针对<code>Header</code>的第<code>[3,4]</code>个字节。应为这2个字节的数据是按位的长度区分，现在需要拼凑成完整字节。</p>\n<p>首先需要确定的是字节长度，以及默认值，然后确定位操作符。</p>\n<p><code>1byte = 8bit</code></p>\n<p>默认值为：<code>0 = 0x00</code></p>\n<p>操作符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;: 不行,因为任何数&amp;0 == 0</span><br><span class=\"line\">|: ok ,任何数 | 0 都等于这个数</span><br></pre></td></tr></table></figure>\n<p>通过<code>|</code>可以得到想要的结果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buf[<span class=\"number\">2</span>] = <span class=\"number\">0x00</span> | header.qr &lt;&lt; <span class=\"number\">7</span> | header.opcode &lt;&lt; <span class=\"number\">3</span> | header.aa &lt;&lt; <span class=\"number\">2</span> | header.tc &lt;&lt; <span class=\"number\">1</span> | header.rd;</span><br><span class=\"line\">buf[<span class=\"number\">3</span>] = <span class=\"number\">0x00</span> | header.ra &lt;&lt; <span class=\"number\">7</span> | header.z &lt;&lt; <span class=\"number\">4</span> | header.rcode;</span><br></pre></td></tr></table></figure>\n<h4 id=\"无符号整数类别\"><a href=\"#无符号整数类别\" class=\"headerlink\" title=\"无符号整数类别\"></a>无符号整数类别</h4><p>假如你看过<code>Buffer</code>的api或使用<code>Buffer</code>创建过<code>buf</code>无符号整数，那么这个问题就可以很容易解决了。</p>\n<p><code>buf.writeUInt16BE(value, offset[, noAssert])</code>和<code>buf.writeUInt32BE(value, offset[, noAssert])</code>，一看就知道一个是创建<code>16</code>位，一个是<code>32</code>位。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buf.writeUInt16BE(header.ancount, <span class=\"number\">6</span>);</span><br><span class=\"line\">buf.writeUInt32BE(answer.rdata, len<span class=\"number\">-4</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>除了<code>Answer</code>数据的<code>ttl</code>报文有效跳数和<code>rdata</code>，需要真的从其它地方获取过来。其它数据基本可以通过计算或从<code>request</code>中得到。</p>\n<p>封装成函数的话，只需要传入<code>(request,ttl,rdata)</code>就可以了。</p>\n<p>以下代码仅供参考：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> responseBuffer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> buf = Buffer.alloc(<span class=\"number\">30</span>+response.question.qname.length +response.answer.name.length) ,</span><br><span class=\"line\">        offset = response.question.qname.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    response.header.id.copy(buf,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    buf[<span class=\"number\">2</span>] = <span class=\"number\">0x00</span> | response.header.qr &lt;&lt; <span class=\"number\">7</span> | response.header.opcode &lt;&lt; <span class=\"number\">3</span> | response.header.aa &lt;&lt; <span class=\"number\">2</span> | response.header.tc &lt;&lt; <span class=\"number\">1</span> | response.header.rd;</span><br><span class=\"line\">    buf[<span class=\"number\">3</span>] = <span class=\"number\">0x00</span> | response.header.ra &lt;&lt; <span class=\"number\">7</span> | response.header.z &lt;&lt; <span class=\"number\">4</span> | response.header.rcode;</span><br><span class=\"line\"></span><br><span class=\"line\">    buf.writeUInt16BE(response.header.qdcount, <span class=\"number\">4</span>);</span><br><span class=\"line\">    buf.writeUInt16BE(response.header.ancount, <span class=\"number\">6</span>);</span><br><span class=\"line\">    buf.writeUInt16BE(response.header.nscount, <span class=\"number\">8</span>);</span><br><span class=\"line\">    buf.writeUInt16BE(response.header.arcount, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    response.question.qname.copy(buf,<span class=\"number\">12</span>);</span><br><span class=\"line\">    response.question.qtype.copy(buf,<span class=\"number\">12</span>+offset,<span class=\"number\">0</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">    response.question.qclass.copy(buf,<span class=\"number\">14</span>+offset,<span class=\"number\">0</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    offset += <span class=\"number\">16</span>;</span><br><span class=\"line\">    response.answer.name.copy(buf,offset);</span><br><span class=\"line\"></span><br><span class=\"line\">    offset += response.answer.name.length;</span><br><span class=\"line\">    buf.writeUInt16BE(response.answer.type , offset);</span><br><span class=\"line\">    buf.writeUInt16BE(response.answer.class , offset+<span class=\"number\">2</span>);</span><br><span class=\"line\">    buf.writeUInt32BE(response.answer.ttl , offset+<span class=\"number\">4</span>);</span><br><span class=\"line\">    buf.writeUInt16BE(response.answer.rdlength , offset+<span class=\"number\">8</span>);</span><br><span class=\"line\">    buf.writeUInt32BE(response.answer.rdata , offset+<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> buf;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> response = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request , ttl , rdata</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> response = &#123;&#125;;</span><br><span class=\"line\">    response.header = &#123;&#125;;</span><br><span class=\"line\">    response.question = &#123;&#125;;</span><br><span class=\"line\">    response.answer = resolve(request.question.qname , ttl , rdata);</span><br><span class=\"line\"></span><br><span class=\"line\">    response.header.id = request.header.id;</span><br><span class=\"line\"></span><br><span class=\"line\">    response.header.qr = <span class=\"number\">1</span>;</span><br><span class=\"line\">    response.header.opcode = <span class=\"number\">0</span>;</span><br><span class=\"line\">    response.header.aa = <span class=\"number\">0</span>;</span><br><span class=\"line\">    response.header.tc = <span class=\"number\">0</span>;</span><br><span class=\"line\">    response.header.rd = <span class=\"number\">1</span>;</span><br><span class=\"line\">    response.header.ra = <span class=\"number\">0</span>;</span><br><span class=\"line\">    response.header.z = <span class=\"number\">0</span>;</span><br><span class=\"line\">    response.header.rcode = <span class=\"number\">0</span>;</span><br><span class=\"line\">    response.header.qdcount = <span class=\"number\">1</span>;</span><br><span class=\"line\">    response.header.ancount = <span class=\"number\">1</span>;</span><br><span class=\"line\">    response.header.nscount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    response.header.arcount = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    response.question.qname = request.question.qname;</span><br><span class=\"line\">    response.question.qtype = request.question.qtype;</span><br><span class=\"line\">    response.question.qclass = request.question.qclass;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> responseBuffer(response);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">qname , ttl , rdata</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> answer = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    answer.name = qname;</span><br><span class=\"line\">    answer.type = <span class=\"number\">1</span>;</span><br><span class=\"line\">    answer.class = <span class=\"number\">1</span>;</span><br><span class=\"line\">    answer.ttl = ttl;</span><br><span class=\"line\">    answer.rdlength = <span class=\"number\">4</span>;</span><br><span class=\"line\">    answer.rdata = rdata;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上一篇： <a href=\"/posts/dns-request\">DNS 请求报文详解</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://github.com/mafintosh/dnsjack\" target=\"_blank\" rel=\"noopener\">https://github.com/mafintosh/dnsjack</a></p>"},{"title":"如何搭建Express和Mongoose","date":"2016-09-18T05:56:00.000Z","author":"Elly","_content":"\n## 一、Express\n\n### express是什么\n\n \texpress是一个高度包容，快速，极简的nodeJs应用程序框架。\n\n<!--more-->\n\n### 如何快速启动Express\n\n1、全局安装express-generator：\n     \n    $npm i express-generator -g --registry=https://registry.npm.taobao.org\n\n2、创建名为myapp应用程序：\n    \n    $express myapp\n\n3、进入到myapp：\n    \n    $cd myapp\n\n4、安装依赖：\n    \n     $npm install\n\n5、启动程序：\n    \n     $DEBUG=myapp:* npm start\n\n     \n### express generator生成的目录结构\n\n![image](/images/expressMongoose/expressjade.png)\n\n\n### 将jade改成ejs\n\n通过express generator生成的项目，是用jade模板引擎，但是我觉得`jade`可读性比较差，且很难去适应`jade`写法，所以我用了ejs\n\n- 修改方法如下：\n\t\n\t1、npm下载ejs-locals(在根目录下执行以下命令)：\n\t\n\t\t$npm i ejs-locals —save\n\t\n\t2、修改`app.js`3处地方\n\t\n\t![image](/images/expressMongoose/ejsdemo.png)\n\t\n\t3、将`views`目录下`.jade`结尾的文件修改成`.ejs`结尾\n\t\n\t![image](/images/expressMongoose/expressejs.png)\n\t\n\t4、重新启动\n\t\n\t\t$DEBUG=myapp:* npm start\n\t\t\n- Note：监听端口是3000，所以本地访问http://127.0.0.1:3000/\n\n\n\n\t\n## 二、Mongoose\n\n\tmongodb是一个对象模型工具，Mongoose是针对mongodb操作的一个对象模型库，它封装了mongodb增删改查的一些方法。\n\t\n### Mongoose（Schema,Model,Entity）\n- Schema：数据结构描述。\n\n```js\n\t// 创建Schema\n\tvar formSchema = new mongoose.Schema({\n\t\ttitle: String,\n\t\tcontent: String,\n\t\tname: String,\n\t\tage: Number,\n\t\treqRes: Number\n\t});\n```\n\n- Model：数据实体的封装。\n\n```js\nvar formModel = mongoose.model('form', formSchema);\n```\n\n- Entity: 是实体，对应一条数据。\n\n### 如何连接数据库\n1、安装mongodb：\n\t\n\t$brew install mongodb\n\t\n2、进入myapp：\n\t\n\t$cd myapp\n\t\n3、安装mongoose：\n\t\n\t$npm i mongoose —save\n\t\n4、创建modules文件夹：\n\t\n\t$mkdir modules\n\t\n5、进入modules：\n\n\t$cd modules\n\t\n6.创建form_collections.js: \n\t\n\t$touch form_collections.js\n\t\n### form_collections.js如何实现数据库连接\n\n![image](/images/expressMongoose/collectionfile.png)\n\n```js\n\n\t// 链接数据库\n\tvar mongoose = require('mongoose');\n\tmongoose.connect('mongodb://localhost/test');\n\tvar db = mongoose.connection;\n\tdb.on('error', console.error.bind(console, '链接错误'));\n\tdb.once('open', function() {\n\t\tconsole.log('MongoDB连接成功！');\n\t});\n\t\n\t// 创建Schema\n\tvar formSchema = new mongoose.Schema({\n\t\ttitle: String,\n\t\tcontent: String,\n\t\tname: String,\n\t\tage: Number,\n\t\treqRes: Number\n\t});\n\t// 创建Model\n\tvar formModel = mongoose.model('form', formSchema);\n\t\n\tmodule.exports = formModel;\n\n\n```\n\n### 在routes/index.js中引入form_collections.js\n![image](/images/expressMongoose/index.png) \n![image](/images/expressMongoose/indexdemo.png)\n\n### 启动mongodb\n\n\t$sudo mongod --dbpath=/Users/ellyliang/Downloads/myapp/data\n\t\n- Note:连接数据库之后，要先启动mongodb之后，再启动express。\n\n### mongoose的增删改查(额外的补充的信息)\n\n- 1 .find()： 查找，读取信息\n- 2 .create()： 增加信息\n- 3 .update()： 更新信息\n- 4 .remove()： 删除信息\n\n\n## 三、结束语\n\n以上是我的分享总结整理，如果你还是不太懂我写的是什么，可以去coding上边把我的项目拉下来,然后跑起来看看就好了。我的例子项目里边写了mongoose的增删该查的方法，希望能帮助到你。\n\n[Coding上的项目](https://coding.net/u/useLess/p/expressMongodb/git)\n\n如何启动：\n\t\n\t$DEBUG=expressMongodb:* npm start\n\t\n\t$sudo mongod --dbpath=/存放项目的目录结构/expressMongodb/data\n\n\n\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\n","source":"_posts/express-and-mongoose.md","raw":"---\ntitle: 如何搭建Express和Mongoose\ndate: 2016-09-18 13:56\ntags: [Express,Mongodb,mongoose]\ncategory: Node.js\nauthor: Elly\n---\n\n## 一、Express\n\n### express是什么\n\n \texpress是一个高度包容，快速，极简的nodeJs应用程序框架。\n\n<!--more-->\n\n### 如何快速启动Express\n\n1、全局安装express-generator：\n     \n    $npm i express-generator -g --registry=https://registry.npm.taobao.org\n\n2、创建名为myapp应用程序：\n    \n    $express myapp\n\n3、进入到myapp：\n    \n    $cd myapp\n\n4、安装依赖：\n    \n     $npm install\n\n5、启动程序：\n    \n     $DEBUG=myapp:* npm start\n\n     \n### express generator生成的目录结构\n\n![image](/images/expressMongoose/expressjade.png)\n\n\n### 将jade改成ejs\n\n通过express generator生成的项目，是用jade模板引擎，但是我觉得`jade`可读性比较差，且很难去适应`jade`写法，所以我用了ejs\n\n- 修改方法如下：\n\t\n\t1、npm下载ejs-locals(在根目录下执行以下命令)：\n\t\n\t\t$npm i ejs-locals —save\n\t\n\t2、修改`app.js`3处地方\n\t\n\t![image](/images/expressMongoose/ejsdemo.png)\n\t\n\t3、将`views`目录下`.jade`结尾的文件修改成`.ejs`结尾\n\t\n\t![image](/images/expressMongoose/expressejs.png)\n\t\n\t4、重新启动\n\t\n\t\t$DEBUG=myapp:* npm start\n\t\t\n- Note：监听端口是3000，所以本地访问http://127.0.0.1:3000/\n\n\n\n\t\n## 二、Mongoose\n\n\tmongodb是一个对象模型工具，Mongoose是针对mongodb操作的一个对象模型库，它封装了mongodb增删改查的一些方法。\n\t\n### Mongoose（Schema,Model,Entity）\n- Schema：数据结构描述。\n\n```js\n\t// 创建Schema\n\tvar formSchema = new mongoose.Schema({\n\t\ttitle: String,\n\t\tcontent: String,\n\t\tname: String,\n\t\tage: Number,\n\t\treqRes: Number\n\t});\n```\n\n- Model：数据实体的封装。\n\n```js\nvar formModel = mongoose.model('form', formSchema);\n```\n\n- Entity: 是实体，对应一条数据。\n\n### 如何连接数据库\n1、安装mongodb：\n\t\n\t$brew install mongodb\n\t\n2、进入myapp：\n\t\n\t$cd myapp\n\t\n3、安装mongoose：\n\t\n\t$npm i mongoose —save\n\t\n4、创建modules文件夹：\n\t\n\t$mkdir modules\n\t\n5、进入modules：\n\n\t$cd modules\n\t\n6.创建form_collections.js: \n\t\n\t$touch form_collections.js\n\t\n### form_collections.js如何实现数据库连接\n\n![image](/images/expressMongoose/collectionfile.png)\n\n```js\n\n\t// 链接数据库\n\tvar mongoose = require('mongoose');\n\tmongoose.connect('mongodb://localhost/test');\n\tvar db = mongoose.connection;\n\tdb.on('error', console.error.bind(console, '链接错误'));\n\tdb.once('open', function() {\n\t\tconsole.log('MongoDB连接成功！');\n\t});\n\t\n\t// 创建Schema\n\tvar formSchema = new mongoose.Schema({\n\t\ttitle: String,\n\t\tcontent: String,\n\t\tname: String,\n\t\tage: Number,\n\t\treqRes: Number\n\t});\n\t// 创建Model\n\tvar formModel = mongoose.model('form', formSchema);\n\t\n\tmodule.exports = formModel;\n\n\n```\n\n### 在routes/index.js中引入form_collections.js\n![image](/images/expressMongoose/index.png) \n![image](/images/expressMongoose/indexdemo.png)\n\n### 启动mongodb\n\n\t$sudo mongod --dbpath=/Users/ellyliang/Downloads/myapp/data\n\t\n- Note:连接数据库之后，要先启动mongodb之后，再启动express。\n\n### mongoose的增删改查(额外的补充的信息)\n\n- 1 .find()： 查找，读取信息\n- 2 .create()： 增加信息\n- 3 .update()： 更新信息\n- 4 .remove()： 删除信息\n\n\n## 三、结束语\n\n以上是我的分享总结整理，如果你还是不太懂我写的是什么，可以去coding上边把我的项目拉下来,然后跑起来看看就好了。我的例子项目里边写了mongoose的增删该查的方法，希望能帮助到你。\n\n[Coding上的项目](https://coding.net/u/useLess/p/expressMongodb/git)\n\n如何启动：\n\t\n\t$DEBUG=expressMongodb:* npm start\n\t\n\t$sudo mongod --dbpath=/存放项目的目录结构/expressMongodb/data\n\n\n\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\n","slug":"express-and-mongoose","published":1,"updated":"2017-12-01T08:50:00.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknjm002jjxs157mhe4ph","content":"<h2 id=\"一、Express\"><a href=\"#一、Express\" class=\"headerlink\" title=\"一、Express\"></a>一、Express</h2><h3 id=\"express是什么\"><a href=\"#express是什么\" class=\"headerlink\" title=\"express是什么\"></a>express是什么</h3><pre><code>express是一个高度包容，快速，极简的nodeJs应用程序框架。\n</code></pre><a id=\"more\"></a>\n<h3 id=\"如何快速启动Express\"><a href=\"#如何快速启动Express\" class=\"headerlink\" title=\"如何快速启动Express\"></a>如何快速启动Express</h3><p>1、全局安装express-generator：</p>\n<pre><code>$npm i express-generator -g --registry=https://registry.npm.taobao.org\n</code></pre><p>2、创建名为myapp应用程序：</p>\n<pre><code>$express myapp\n</code></pre><p>3、进入到myapp：</p>\n<pre><code>$cd myapp\n</code></pre><p>4、安装依赖：</p>\n<pre><code>$npm install\n</code></pre><p>5、启动程序：</p>\n<pre><code>$DEBUG=myapp:* npm start\n</code></pre><h3 id=\"express-generator生成的目录结构\"><a href=\"#express-generator生成的目录结构\" class=\"headerlink\" title=\"express generator生成的目录结构\"></a>express generator生成的目录结构</h3><p><img src=\"/images/expressMongoose/expressjade.png\" alt=\"image\"></p>\n<h3 id=\"将jade改成ejs\"><a href=\"#将jade改成ejs\" class=\"headerlink\" title=\"将jade改成ejs\"></a>将jade改成ejs</h3><p>通过express generator生成的项目，是用jade模板引擎，但是我觉得<code>jade</code>可读性比较差，且很难去适应<code>jade</code>写法，所以我用了ejs</p>\n<ul>\n<li><p>修改方法如下：</p>\n<p>  1、npm下载ejs-locals(在根目录下执行以下命令)：</p>\n<pre><code>$npm i ejs-locals —save\n</code></pre><p>  2、修改<code>app.js</code>3处地方</p>\n<p>  <img src=\"/images/expressMongoose/ejsdemo.png\" alt=\"image\"></p>\n<p>  3、将<code>views</code>目录下<code>.jade</code>结尾的文件修改成<code>.ejs</code>结尾</p>\n<p>  <img src=\"/images/expressMongoose/expressejs.png\" alt=\"image\"></p>\n<p>  4、重新启动</p>\n<pre><code>$DEBUG=myapp:* npm start\n</code></pre></li>\n<li><p>Note：监听端口是3000，所以本地访问<a href=\"http://127.0.0.1:3000/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3000/</a></p>\n</li>\n</ul>\n<h2 id=\"二、Mongoose\"><a href=\"#二、Mongoose\" class=\"headerlink\" title=\"二、Mongoose\"></a>二、Mongoose</h2><pre><code>mongodb是一个对象模型工具，Mongoose是针对mongodb操作的一个对象模型库，它封装了mongodb增删改查的一些方法。\n</code></pre><h3 id=\"Mongoose（Schema-Model-Entity）\"><a href=\"#Mongoose（Schema-Model-Entity）\" class=\"headerlink\" title=\"Mongoose（Schema,Model,Entity）\"></a>Mongoose（Schema,Model,Entity）</h3><ul>\n<li>Schema：数据结构描述。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建Schema</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> formSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">\ttitle: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">\tcontent: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">\tname: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">\tage: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">\treqRes: <span class=\"built_in\">Number</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Model：数据实体的封装。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> formModel = mongoose.model(<span class=\"string\">'form'</span>, formSchema);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Entity: 是实体，对应一条数据。</li>\n</ul>\n<h3 id=\"如何连接数据库\"><a href=\"#如何连接数据库\" class=\"headerlink\" title=\"如何连接数据库\"></a>如何连接数据库</h3><p>1、安装mongodb：</p>\n<pre><code>$brew install mongodb\n</code></pre><p>2、进入myapp：</p>\n<pre><code>$cd myapp\n</code></pre><p>3、安装mongoose：</p>\n<pre><code>$npm i mongoose —save\n</code></pre><p>4、创建modules文件夹：</p>\n<pre><code>$mkdir modules\n</code></pre><p>5、进入modules：</p>\n<pre><code>$cd modules\n</code></pre><p>6.创建form_collections.js: </p>\n<pre><code>$touch form_collections.js\n</code></pre><h3 id=\"form-collections-js如何实现数据库连接\"><a href=\"#form-collections-js如何实现数据库连接\" class=\"headerlink\" title=\"form_collections.js如何实现数据库连接\"></a>form_collections.js如何实现数据库连接</h3><p><img src=\"/images/expressMongoose/collectionfile.png\" alt=\"image\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 链接数据库</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/test'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> db = mongoose.connection;</span><br><span class=\"line\">db.on(<span class=\"string\">'error'</span>, <span class=\"built_in\">console</span>.error.bind(<span class=\"built_in\">console</span>, <span class=\"string\">'链接错误'</span>));</span><br><span class=\"line\">db.once(<span class=\"string\">'open'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'MongoDB连接成功！'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建Schema</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> formSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">\ttitle: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">\tcontent: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">\tname: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">\tage: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">\treqRes: <span class=\"built_in\">Number</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 创建Model</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> formModel = mongoose.model(<span class=\"string\">'form'</span>, formSchema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = formModel;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在routes-index-js中引入form-collections-js\"><a href=\"#在routes-index-js中引入form-collections-js\" class=\"headerlink\" title=\"在routes/index.js中引入form_collections.js\"></a>在routes/index.js中引入form_collections.js</h3><p><img src=\"/images/expressMongoose/index.png\" alt=\"image\"><br><img src=\"/images/expressMongoose/indexdemo.png\" alt=\"image\"></p>\n<h3 id=\"启动mongodb\"><a href=\"#启动mongodb\" class=\"headerlink\" title=\"启动mongodb\"></a>启动mongodb</h3><pre><code>$sudo mongod --dbpath=/Users/ellyliang/Downloads/myapp/data\n</code></pre><ul>\n<li>Note:连接数据库之后，要先启动mongodb之后，再启动express。</li>\n</ul>\n<h3 id=\"mongoose的增删改查-额外的补充的信息\"><a href=\"#mongoose的增删改查-额外的补充的信息\" class=\"headerlink\" title=\"mongoose的增删改查(额外的补充的信息)\"></a>mongoose的增删改查(额外的补充的信息)</h3><ul>\n<li>1 .find()： 查找，读取信息</li>\n<li>2 .create()： 增加信息</li>\n<li>3 .update()： 更新信息</li>\n<li>4 .remove()： 删除信息</li>\n</ul>\n<h2 id=\"三、结束语\"><a href=\"#三、结束语\" class=\"headerlink\" title=\"三、结束语\"></a>三、结束语</h2><p>以上是我的分享总结整理，如果你还是不太懂我写的是什么，可以去coding上边把我的项目拉下来,然后跑起来看看就好了。我的例子项目里边写了mongoose的增删该查的方法，希望能帮助到你。</p>\n<p><a href=\"https://coding.net/u/useLess/p/expressMongodb/git\" target=\"_blank\" rel=\"noopener\">Coding上的项目</a></p>\n<p>如何启动：</p>\n<pre><code>$DEBUG=expressMongodb:* npm start\n\n$sudo mongod --dbpath=/存放项目的目录结构/expressMongodb/data\n</code></pre>","site":{"data":{}},"excerpt":"<h2 id=\"一、Express\"><a href=\"#一、Express\" class=\"headerlink\" title=\"一、Express\"></a>一、Express</h2><h3 id=\"express是什么\"><a href=\"#express是什么\" class=\"headerlink\" title=\"express是什么\"></a>express是什么</h3><pre><code>express是一个高度包容，快速，极简的nodeJs应用程序框架。\n</code></pre>","more":"<h3 id=\"如何快速启动Express\"><a href=\"#如何快速启动Express\" class=\"headerlink\" title=\"如何快速启动Express\"></a>如何快速启动Express</h3><p>1、全局安装express-generator：</p>\n<pre><code>$npm i express-generator -g --registry=https://registry.npm.taobao.org\n</code></pre><p>2、创建名为myapp应用程序：</p>\n<pre><code>$express myapp\n</code></pre><p>3、进入到myapp：</p>\n<pre><code>$cd myapp\n</code></pre><p>4、安装依赖：</p>\n<pre><code>$npm install\n</code></pre><p>5、启动程序：</p>\n<pre><code>$DEBUG=myapp:* npm start\n</code></pre><h3 id=\"express-generator生成的目录结构\"><a href=\"#express-generator生成的目录结构\" class=\"headerlink\" title=\"express generator生成的目录结构\"></a>express generator生成的目录结构</h3><p><img src=\"/images/expressMongoose/expressjade.png\" alt=\"image\"></p>\n<h3 id=\"将jade改成ejs\"><a href=\"#将jade改成ejs\" class=\"headerlink\" title=\"将jade改成ejs\"></a>将jade改成ejs</h3><p>通过express generator生成的项目，是用jade模板引擎，但是我觉得<code>jade</code>可读性比较差，且很难去适应<code>jade</code>写法，所以我用了ejs</p>\n<ul>\n<li><p>修改方法如下：</p>\n<p>  1、npm下载ejs-locals(在根目录下执行以下命令)：</p>\n<pre><code>$npm i ejs-locals —save\n</code></pre><p>  2、修改<code>app.js</code>3处地方</p>\n<p>  <img src=\"/images/expressMongoose/ejsdemo.png\" alt=\"image\"></p>\n<p>  3、将<code>views</code>目录下<code>.jade</code>结尾的文件修改成<code>.ejs</code>结尾</p>\n<p>  <img src=\"/images/expressMongoose/expressejs.png\" alt=\"image\"></p>\n<p>  4、重新启动</p>\n<pre><code>$DEBUG=myapp:* npm start\n</code></pre></li>\n<li><p>Note：监听端口是3000，所以本地访问<a href=\"http://127.0.0.1:3000/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3000/</a></p>\n</li>\n</ul>\n<h2 id=\"二、Mongoose\"><a href=\"#二、Mongoose\" class=\"headerlink\" title=\"二、Mongoose\"></a>二、Mongoose</h2><pre><code>mongodb是一个对象模型工具，Mongoose是针对mongodb操作的一个对象模型库，它封装了mongodb增删改查的一些方法。\n</code></pre><h3 id=\"Mongoose（Schema-Model-Entity）\"><a href=\"#Mongoose（Schema-Model-Entity）\" class=\"headerlink\" title=\"Mongoose（Schema,Model,Entity）\"></a>Mongoose（Schema,Model,Entity）</h3><ul>\n<li>Schema：数据结构描述。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建Schema</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> formSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">\ttitle: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">\tcontent: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">\tname: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">\tage: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">\treqRes: <span class=\"built_in\">Number</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Model：数据实体的封装。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> formModel = mongoose.model(<span class=\"string\">'form'</span>, formSchema);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Entity: 是实体，对应一条数据。</li>\n</ul>\n<h3 id=\"如何连接数据库\"><a href=\"#如何连接数据库\" class=\"headerlink\" title=\"如何连接数据库\"></a>如何连接数据库</h3><p>1、安装mongodb：</p>\n<pre><code>$brew install mongodb\n</code></pre><p>2、进入myapp：</p>\n<pre><code>$cd myapp\n</code></pre><p>3、安装mongoose：</p>\n<pre><code>$npm i mongoose —save\n</code></pre><p>4、创建modules文件夹：</p>\n<pre><code>$mkdir modules\n</code></pre><p>5、进入modules：</p>\n<pre><code>$cd modules\n</code></pre><p>6.创建form_collections.js: </p>\n<pre><code>$touch form_collections.js\n</code></pre><h3 id=\"form-collections-js如何实现数据库连接\"><a href=\"#form-collections-js如何实现数据库连接\" class=\"headerlink\" title=\"form_collections.js如何实现数据库连接\"></a>form_collections.js如何实现数据库连接</h3><p><img src=\"/images/expressMongoose/collectionfile.png\" alt=\"image\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 链接数据库</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/test'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> db = mongoose.connection;</span><br><span class=\"line\">db.on(<span class=\"string\">'error'</span>, <span class=\"built_in\">console</span>.error.bind(<span class=\"built_in\">console</span>, <span class=\"string\">'链接错误'</span>));</span><br><span class=\"line\">db.once(<span class=\"string\">'open'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'MongoDB连接成功！'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建Schema</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> formSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">\ttitle: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">\tcontent: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">\tname: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">\tage: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">\treqRes: <span class=\"built_in\">Number</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 创建Model</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> formModel = mongoose.model(<span class=\"string\">'form'</span>, formSchema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = formModel;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在routes-index-js中引入form-collections-js\"><a href=\"#在routes-index-js中引入form-collections-js\" class=\"headerlink\" title=\"在routes/index.js中引入form_collections.js\"></a>在routes/index.js中引入form_collections.js</h3><p><img src=\"/images/expressMongoose/index.png\" alt=\"image\"><br><img src=\"/images/expressMongoose/indexdemo.png\" alt=\"image\"></p>\n<h3 id=\"启动mongodb\"><a href=\"#启动mongodb\" class=\"headerlink\" title=\"启动mongodb\"></a>启动mongodb</h3><pre><code>$sudo mongod --dbpath=/Users/ellyliang/Downloads/myapp/data\n</code></pre><ul>\n<li>Note:连接数据库之后，要先启动mongodb之后，再启动express。</li>\n</ul>\n<h3 id=\"mongoose的增删改查-额外的补充的信息\"><a href=\"#mongoose的增删改查-额外的补充的信息\" class=\"headerlink\" title=\"mongoose的增删改查(额外的补充的信息)\"></a>mongoose的增删改查(额外的补充的信息)</h3><ul>\n<li>1 .find()： 查找，读取信息</li>\n<li>2 .create()： 增加信息</li>\n<li>3 .update()： 更新信息</li>\n<li>4 .remove()： 删除信息</li>\n</ul>\n<h2 id=\"三、结束语\"><a href=\"#三、结束语\" class=\"headerlink\" title=\"三、结束语\"></a>三、结束语</h2><p>以上是我的分享总结整理，如果你还是不太懂我写的是什么，可以去coding上边把我的项目拉下来,然后跑起来看看就好了。我的例子项目里边写了mongoose的增删该查的方法，希望能帮助到你。</p>\n<p><a href=\"https://coding.net/u/useLess/p/expressMongodb/git\" target=\"_blank\" rel=\"noopener\">Coding上的项目</a></p>\n<p>如何启动：</p>\n<pre><code>$DEBUG=expressMongodb:* npm start\n\n$sudo mongod --dbpath=/存放项目的目录结构/expressMongodb/data\n</code></pre>"},{"title":"分享会直播首趴之不能把天聊死","date":"2016-10-31T04:00:00.000Z","author":"Diandian","_content":"\n所谓分享是快乐的前提。作为富途FE团队的GG&MM们，为何如此欢乐祥和，最重要的是我们有着一种高贵的品质，那就是sharing精神。我们懂得快乐生活，快乐工作，而快乐的源泉有很多，最快乐莫过于技术分享。\n\n打从入职以来，每周都有分享，然而我们的分享会直播是从今天开始的，所以今天应该也是一个灰常值得纪念的一天。然而，我不会在此分享太多技术性的东西，仅仅是记录一下下而已。so,那么进入正题。\n\n<!--more-->\n\n哎呀，忘记了，我们规定的分享时间是每周四，然而昨天会议室被后端抢占来做分享，你也知道啦，大家学习积极性这么高，每天的会议室都是预定的满满的。（此处有我们的会议室预定小助手雪兴的声音：怪我咯##&&@@ 黑人问号表情）\n\n说好的正题呢，来了来了，首先要提到的是我们的管家八哥同学，如果不出意外总是会第一个出现在会议室，自我享受的敲着代码候起。今天是linda同学分享KOA的基础与应用，每次都是乖乖女的linda姐姐必须早早来到美交所会议室，准备好PPT，端庄的坐好等大家来听分享。恩，真乖。\n\n其实每次分享，必定是不可能满足所有人的知识库，有些人已是该知识点的身经百战者，有些人还是小白，还有些只是了解一丢丢，所以听者的状态必然会有不同。八哥一直在埋头做自己的事情，这并不代表他没有在听，偶尔抬头看一眼，多线程运作。elly最近忙于项目，但依然是那个好奇者，敲代码与学习并不耽误，哎，多线程脑子多好，好羡慕。光头强nick最近被项目bug逼的头顶更亮了。其实最认真的就是雪兴妹子了，喜欢问为什么的妹子都是好学宝宝。\n\nlinda姐姐分享完之后就是八哥的补充，也就是所谓的再聊五毛钱的。说到KOA必然会提到TJ大神，吧啦吧啦八卦模式开始，然后就说到promise，然后就是广告时间，说说[Generator](https://www.toobug.net/article/learning_es6_generator.html)吧啦吧啦……感兴趣的同学可以打开链接学习下。然后就说到目前的前端工作计划，然后就有了分享会直播这一说，然后就产生了本口水文。\n\n八哥五毛钱的分享完之后就过去两个小时了，真的不是吹牛哦，我们可是认真在分享的呢。最后按照惯例，还是会问下大家有木有想说的。\n\n是的，光头强nick哥哥终于按捺不住，最近做项目中被测试提bug最闹心的一点就是原生select框在不同浏览器、不同设备下的样式不一致问题。（严肃脸）这确实是目前FE团队、产品团队和设计团队最近提上日程的一个问题，解决ing。用原生还是自定义必然又是一场激烈的争论和大战，前提是宝宝我要先整理一份‘select框的白皮书’（#😭#我会抓紧时间整理完的#😭#），毕竟我们开发要去PK产品设计，需要拿些数据和事实来说话。所以nick同学的这个问题，会上是讨论不出答案的，只能把天聊死了。\n\n所以习惯于发散思维，不把天聊死的分享会over了，我的直播也结束了，此次没有拍照片，静待下一次的图文并茂。\n（此处应该有掌声）\n另：直播初试水，欢迎大波意见涌来！\n","source":"_posts/fontend-share-01.md","raw":"---\ntitle: 分享会直播首趴之不能把天聊死\ndate: 2016-10-31 12:00\ntags: [FE,Share,Gossip]\ncategory: 分享会直播\nauthor: Diandian\n---\n\n所谓分享是快乐的前提。作为富途FE团队的GG&MM们，为何如此欢乐祥和，最重要的是我们有着一种高贵的品质，那就是sharing精神。我们懂得快乐生活，快乐工作，而快乐的源泉有很多，最快乐莫过于技术分享。\n\n打从入职以来，每周都有分享，然而我们的分享会直播是从今天开始的，所以今天应该也是一个灰常值得纪念的一天。然而，我不会在此分享太多技术性的东西，仅仅是记录一下下而已。so,那么进入正题。\n\n<!--more-->\n\n哎呀，忘记了，我们规定的分享时间是每周四，然而昨天会议室被后端抢占来做分享，你也知道啦，大家学习积极性这么高，每天的会议室都是预定的满满的。（此处有我们的会议室预定小助手雪兴的声音：怪我咯##&&@@ 黑人问号表情）\n\n说好的正题呢，来了来了，首先要提到的是我们的管家八哥同学，如果不出意外总是会第一个出现在会议室，自我享受的敲着代码候起。今天是linda同学分享KOA的基础与应用，每次都是乖乖女的linda姐姐必须早早来到美交所会议室，准备好PPT，端庄的坐好等大家来听分享。恩，真乖。\n\n其实每次分享，必定是不可能满足所有人的知识库，有些人已是该知识点的身经百战者，有些人还是小白，还有些只是了解一丢丢，所以听者的状态必然会有不同。八哥一直在埋头做自己的事情，这并不代表他没有在听，偶尔抬头看一眼，多线程运作。elly最近忙于项目，但依然是那个好奇者，敲代码与学习并不耽误，哎，多线程脑子多好，好羡慕。光头强nick最近被项目bug逼的头顶更亮了。其实最认真的就是雪兴妹子了，喜欢问为什么的妹子都是好学宝宝。\n\nlinda姐姐分享完之后就是八哥的补充，也就是所谓的再聊五毛钱的。说到KOA必然会提到TJ大神，吧啦吧啦八卦模式开始，然后就说到promise，然后就是广告时间，说说[Generator](https://www.toobug.net/article/learning_es6_generator.html)吧啦吧啦……感兴趣的同学可以打开链接学习下。然后就说到目前的前端工作计划，然后就有了分享会直播这一说，然后就产生了本口水文。\n\n八哥五毛钱的分享完之后就过去两个小时了，真的不是吹牛哦，我们可是认真在分享的呢。最后按照惯例，还是会问下大家有木有想说的。\n\n是的，光头强nick哥哥终于按捺不住，最近做项目中被测试提bug最闹心的一点就是原生select框在不同浏览器、不同设备下的样式不一致问题。（严肃脸）这确实是目前FE团队、产品团队和设计团队最近提上日程的一个问题，解决ing。用原生还是自定义必然又是一场激烈的争论和大战，前提是宝宝我要先整理一份‘select框的白皮书’（#😭#我会抓紧时间整理完的#😭#），毕竟我们开发要去PK产品设计，需要拿些数据和事实来说话。所以nick同学的这个问题，会上是讨论不出答案的，只能把天聊死了。\n\n所以习惯于发散思维，不把天聊死的分享会over了，我的直播也结束了，此次没有拍照片，静待下一次的图文并茂。\n（此处应该有掌声）\n另：直播初试水，欢迎大波意见涌来！\n","slug":"fontend-share-01","published":1,"updated":"2017-12-01T08:50:00.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknjp002mjxs1fntkg0sx","content":"<p>所谓分享是快乐的前提。作为富途FE团队的GG&amp;MM们，为何如此欢乐祥和，最重要的是我们有着一种高贵的品质，那就是sharing精神。我们懂得快乐生活，快乐工作，而快乐的源泉有很多，最快乐莫过于技术分享。</p>\n<p>打从入职以来，每周都有分享，然而我们的分享会直播是从今天开始的，所以今天应该也是一个灰常值得纪念的一天。然而，我不会在此分享太多技术性的东西，仅仅是记录一下下而已。so,那么进入正题。</p>\n<a id=\"more\"></a>\n<p>哎呀，忘记了，我们规定的分享时间是每周四，然而昨天会议室被后端抢占来做分享，你也知道啦，大家学习积极性这么高，每天的会议室都是预定的满满的。（此处有我们的会议室预定小助手雪兴的声音：怪我咯##&amp;&amp;@@ 黑人问号表情）</p>\n<p>说好的正题呢，来了来了，首先要提到的是我们的管家八哥同学，如果不出意外总是会第一个出现在会议室，自我享受的敲着代码候起。今天是linda同学分享KOA的基础与应用，每次都是乖乖女的linda姐姐必须早早来到美交所会议室，准备好PPT，端庄的坐好等大家来听分享。恩，真乖。</p>\n<p>其实每次分享，必定是不可能满足所有人的知识库，有些人已是该知识点的身经百战者，有些人还是小白，还有些只是了解一丢丢，所以听者的状态必然会有不同。八哥一直在埋头做自己的事情，这并不代表他没有在听，偶尔抬头看一眼，多线程运作。elly最近忙于项目，但依然是那个好奇者，敲代码与学习并不耽误，哎，多线程脑子多好，好羡慕。光头强nick最近被项目bug逼的头顶更亮了。其实最认真的就是雪兴妹子了，喜欢问为什么的妹子都是好学宝宝。</p>\n<p>linda姐姐分享完之后就是八哥的补充，也就是所谓的再聊五毛钱的。说到KOA必然会提到TJ大神，吧啦吧啦八卦模式开始，然后就说到promise，然后就是广告时间，说说<a href=\"https://www.toobug.net/article/learning_es6_generator.html\" target=\"_blank\" rel=\"noopener\">Generator</a>吧啦吧啦……感兴趣的同学可以打开链接学习下。然后就说到目前的前端工作计划，然后就有了分享会直播这一说，然后就产生了本口水文。</p>\n<p>八哥五毛钱的分享完之后就过去两个小时了，真的不是吹牛哦，我们可是认真在分享的呢。最后按照惯例，还是会问下大家有木有想说的。</p>\n<p>是的，光头强nick哥哥终于按捺不住，最近做项目中被测试提bug最闹心的一点就是原生select框在不同浏览器、不同设备下的样式不一致问题。（严肃脸）这确实是目前FE团队、产品团队和设计团队最近提上日程的一个问题，解决ing。用原生还是自定义必然又是一场激烈的争论和大战，前提是宝宝我要先整理一份‘select框的白皮书’（#😭#我会抓紧时间整理完的#😭#），毕竟我们开发要去PK产品设计，需要拿些数据和事实来说话。所以nick同学的这个问题，会上是讨论不出答案的，只能把天聊死了。</p>\n<p>所以习惯于发散思维，不把天聊死的分享会over了，我的直播也结束了，此次没有拍照片，静待下一次的图文并茂。<br>（此处应该有掌声）<br>另：直播初试水，欢迎大波意见涌来！</p>\n","site":{"data":{}},"excerpt":"<p>所谓分享是快乐的前提。作为富途FE团队的GG&amp;MM们，为何如此欢乐祥和，最重要的是我们有着一种高贵的品质，那就是sharing精神。我们懂得快乐生活，快乐工作，而快乐的源泉有很多，最快乐莫过于技术分享。</p>\n<p>打从入职以来，每周都有分享，然而我们的分享会直播是从今天开始的，所以今天应该也是一个灰常值得纪念的一天。然而，我不会在此分享太多技术性的东西，仅仅是记录一下下而已。so,那么进入正题。</p>","more":"<p>哎呀，忘记了，我们规定的分享时间是每周四，然而昨天会议室被后端抢占来做分享，你也知道啦，大家学习积极性这么高，每天的会议室都是预定的满满的。（此处有我们的会议室预定小助手雪兴的声音：怪我咯##&amp;&amp;@@ 黑人问号表情）</p>\n<p>说好的正题呢，来了来了，首先要提到的是我们的管家八哥同学，如果不出意外总是会第一个出现在会议室，自我享受的敲着代码候起。今天是linda同学分享KOA的基础与应用，每次都是乖乖女的linda姐姐必须早早来到美交所会议室，准备好PPT，端庄的坐好等大家来听分享。恩，真乖。</p>\n<p>其实每次分享，必定是不可能满足所有人的知识库，有些人已是该知识点的身经百战者，有些人还是小白，还有些只是了解一丢丢，所以听者的状态必然会有不同。八哥一直在埋头做自己的事情，这并不代表他没有在听，偶尔抬头看一眼，多线程运作。elly最近忙于项目，但依然是那个好奇者，敲代码与学习并不耽误，哎，多线程脑子多好，好羡慕。光头强nick最近被项目bug逼的头顶更亮了。其实最认真的就是雪兴妹子了，喜欢问为什么的妹子都是好学宝宝。</p>\n<p>linda姐姐分享完之后就是八哥的补充，也就是所谓的再聊五毛钱的。说到KOA必然会提到TJ大神，吧啦吧啦八卦模式开始，然后就说到promise，然后就是广告时间，说说<a href=\"https://www.toobug.net/article/learning_es6_generator.html\" target=\"_blank\" rel=\"noopener\">Generator</a>吧啦吧啦……感兴趣的同学可以打开链接学习下。然后就说到目前的前端工作计划，然后就有了分享会直播这一说，然后就产生了本口水文。</p>\n<p>八哥五毛钱的分享完之后就过去两个小时了，真的不是吹牛哦，我们可是认真在分享的呢。最后按照惯例，还是会问下大家有木有想说的。</p>\n<p>是的，光头强nick哥哥终于按捺不住，最近做项目中被测试提bug最闹心的一点就是原生select框在不同浏览器、不同设备下的样式不一致问题。（严肃脸）这确实是目前FE团队、产品团队和设计团队最近提上日程的一个问题，解决ing。用原生还是自定义必然又是一场激烈的争论和大战，前提是宝宝我要先整理一份‘select框的白皮书’（#😭#我会抓紧时间整理完的#😭#），毕竟我们开发要去PK产品设计，需要拿些数据和事实来说话。所以nick同学的这个问题，会上是讨论不出答案的，只能把天聊死了。</p>\n<p>所以习惯于发散思维，不把天聊死的分享会over了，我的直播也结束了，此次没有拍照片，静待下一次的图文并茂。<br>（此处应该有掌声）<br>另：直播初试水，欢迎大波意见涌来！</p>"},{"title":"分享会直播第二弹之仓促的分享","date":"2016-11-04T09:00:00.000Z","author":"Cynthia","_content":"\n直播？？录播？？在上一篇的首趴中有单纯的童鞋评论求直播地址，想说，当各位在看到本文时，就是在看直播啦，（被骗了？不怪我...） 所以说改名字为录播吧，哈哈。鉴于与上篇标题保持一致，所以还是叫直播吧...\n\n看过上篇直播的童鞋都知道我们的分享时间是周四的，但为啥这次还是周五呢？？因为本次分享者nick叔叔档期太满，周四没空，所以就改到了周五了~什么时候分享不重要，重要的是有分享!!\n\n<!--more-->\n\n前有jin哥哥分享react，后有nick叔叔分享vue.js，妈妈再也不怕我不知道流行的JS框架啦~ 在分享前，nick叔叔声明这次分享准备得有点仓促（嗯，没错，这是自谦）。nick叔叔在这一个半小时中用ppt+图+代码示例+示例演示，“详细”（绝对没有反义）地给我们分享了vue的数据绑定，过滤器，指令，插件，生命周期等等，内容之丰富，让本宝宝消化得好蓝廋。哦，对了，本次分享的问题宝宝不是本宝宝，而是由Allen宝宝与AlanZhang宝宝担任，我们都是在认真听的...\n\n插播一张现场图\n![vue分享现场](/images/share/2-1.jpg)\n\n按国际惯例，在分享者分享完之后，应该有管家八哥补充，再聊五毛钱的，但八哥说最近缺钱，所以就不聊了（我们下次贴上八哥的支付宝二维码，欢迎打赏！！）所以最后本次分享在隔壁老王家的萌萌哒的孩子的萌照下结束啦~nick叔叔终于可以回家逗女儿啦（感动脸）","source":"_posts/fontend-share-02.md","raw":"---\ntitle: 分享会直播第二弹之仓促的分享\ndate: 2016-11-04 17:00\ntags: [FE,Share,Gossip]\ncategory: 分享会直播\nauthor: Cynthia\n---\n\n直播？？录播？？在上一篇的首趴中有单纯的童鞋评论求直播地址，想说，当各位在看到本文时，就是在看直播啦，（被骗了？不怪我...） 所以说改名字为录播吧，哈哈。鉴于与上篇标题保持一致，所以还是叫直播吧...\n\n看过上篇直播的童鞋都知道我们的分享时间是周四的，但为啥这次还是周五呢？？因为本次分享者nick叔叔档期太满，周四没空，所以就改到了周五了~什么时候分享不重要，重要的是有分享!!\n\n<!--more-->\n\n前有jin哥哥分享react，后有nick叔叔分享vue.js，妈妈再也不怕我不知道流行的JS框架啦~ 在分享前，nick叔叔声明这次分享准备得有点仓促（嗯，没错，这是自谦）。nick叔叔在这一个半小时中用ppt+图+代码示例+示例演示，“详细”（绝对没有反义）地给我们分享了vue的数据绑定，过滤器，指令，插件，生命周期等等，内容之丰富，让本宝宝消化得好蓝廋。哦，对了，本次分享的问题宝宝不是本宝宝，而是由Allen宝宝与AlanZhang宝宝担任，我们都是在认真听的...\n\n插播一张现场图\n![vue分享现场](/images/share/2-1.jpg)\n\n按国际惯例，在分享者分享完之后，应该有管家八哥补充，再聊五毛钱的，但八哥说最近缺钱，所以就不聊了（我们下次贴上八哥的支付宝二维码，欢迎打赏！！）所以最后本次分享在隔壁老王家的萌萌哒的孩子的萌照下结束啦~nick叔叔终于可以回家逗女儿啦（感动脸）","slug":"fontend-share-02","published":1,"updated":"2017-12-01T08:50:00.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknjq002pjxs1iti2ofyn","content":"<p>直播？？录播？？在上一篇的首趴中有单纯的童鞋评论求直播地址，想说，当各位在看到本文时，就是在看直播啦，（被骗了？不怪我…） 所以说改名字为录播吧，哈哈。鉴于与上篇标题保持一致，所以还是叫直播吧…</p>\n<p>看过上篇直播的童鞋都知道我们的分享时间是周四的，但为啥这次还是周五呢？？因为本次分享者nick叔叔档期太满，周四没空，所以就改到了周五了~什么时候分享不重要，重要的是有分享!!</p>\n<a id=\"more\"></a>\n<p>前有jin哥哥分享react，后有nick叔叔分享vue.js，妈妈再也不怕我不知道流行的JS框架啦~ 在分享前，nick叔叔声明这次分享准备得有点仓促（嗯，没错，这是自谦）。nick叔叔在这一个半小时中用ppt+图+代码示例+示例演示，“详细”（绝对没有反义）地给我们分享了vue的数据绑定，过滤器，指令，插件，生命周期等等，内容之丰富，让本宝宝消化得好蓝廋。哦，对了，本次分享的问题宝宝不是本宝宝，而是由Allen宝宝与AlanZhang宝宝担任，我们都是在认真听的…</p>\n<p>插播一张现场图<br><img src=\"/images/share/2-1.jpg\" alt=\"vue分享现场\"></p>\n<p>按国际惯例，在分享者分享完之后，应该有管家八哥补充，再聊五毛钱的，但八哥说最近缺钱，所以就不聊了（我们下次贴上八哥的支付宝二维码，欢迎打赏！！）所以最后本次分享在隔壁老王家的萌萌哒的孩子的萌照下结束啦~nick叔叔终于可以回家逗女儿啦（感动脸）</p>\n","site":{"data":{}},"excerpt":"<p>直播？？录播？？在上一篇的首趴中有单纯的童鞋评论求直播地址，想说，当各位在看到本文时，就是在看直播啦，（被骗了？不怪我…） 所以说改名字为录播吧，哈哈。鉴于与上篇标题保持一致，所以还是叫直播吧…</p>\n<p>看过上篇直播的童鞋都知道我们的分享时间是周四的，但为啥这次还是周五呢？？因为本次分享者nick叔叔档期太满，周四没空，所以就改到了周五了~什么时候分享不重要，重要的是有分享!!</p>","more":"<p>前有jin哥哥分享react，后有nick叔叔分享vue.js，妈妈再也不怕我不知道流行的JS框架啦~ 在分享前，nick叔叔声明这次分享准备得有点仓促（嗯，没错，这是自谦）。nick叔叔在这一个半小时中用ppt+图+代码示例+示例演示，“详细”（绝对没有反义）地给我们分享了vue的数据绑定，过滤器，指令，插件，生命周期等等，内容之丰富，让本宝宝消化得好蓝廋。哦，对了，本次分享的问题宝宝不是本宝宝，而是由Allen宝宝与AlanZhang宝宝担任，我们都是在认真听的…</p>\n<p>插播一张现场图<br><img src=\"/images/share/2-1.jpg\" alt=\"vue分享现场\"></p>\n<p>按国际惯例，在分享者分享完之后，应该有管家八哥补充，再聊五毛钱的，但八哥说最近缺钱，所以就不聊了（我们下次贴上八哥的支付宝二维码，欢迎打赏！！）所以最后本次分享在隔壁老王家的萌萌哒的孩子的萌照下结束啦~nick叔叔终于可以回家逗女儿啦（感动脸）</p>"},{"title":"分享会直播之双十一狂欢勿忘学习","date":"2016-11-11T09:00:00.000Z","author":"Diandian","_content":"\n![图片](/images/share/2-1.png)\n\n<!--more-->\n\n居然又选在了这样一个特殊的日子里前端分享，由于小编上周身体比较蓝瘦香菇，所以就错过了上周的分享，深感遗憾。\n\n当然，说好的图文并茂，所以前方高能，做好欣赏准备。\n\n今天分享的主题是gulp，讲师是号称总能找到漂亮女朋友的allen小帅哥。\n\n![图片](/images/share/2-2.png)\n\n听的灰常认真的cp小伙伴。\n\n![图片](/images/share/2-3.png)\n\n😯坐在两妹子中间的幸福小朋友。\n\n\n![图片](/images/share/2-4.png)\n\n我们都是很开放的，不会那么拘束着咱们自己人，所以，你怎么坐都行，即使葛优躺。\n\n\n![图片](/images/share/2-5.png)\n\n\n因为迟到被罚站的同学。\n\n\n![图片](/images/share/2-6.png)\n\n最后晒出妹子们俏丽的倩影。\n\n![图片](/images/share/2-7.png)\n\n由于会议室小助手雪兴妹子的再次失误，只能订到这个小会议室，所以咱们只能坐着躺着站着罚站听，这丝毫不会影响大家听和讨论的乐趣。\n\n双十一耶，下班早点回家，单身的多敲代码，有对象的多买买买。\n\n\n","source":"_posts/fontend-share-03.md","raw":"---\ntitle: 分享会直播之双十一狂欢勿忘学习\ndate: 2016-11-11 17:00\ntags: [FE,Share,Gossip]\ncategory: 分享会直播\nauthor: Diandian\n---\n\n![图片](/images/share/2-1.png)\n\n<!--more-->\n\n居然又选在了这样一个特殊的日子里前端分享，由于小编上周身体比较蓝瘦香菇，所以就错过了上周的分享，深感遗憾。\n\n当然，说好的图文并茂，所以前方高能，做好欣赏准备。\n\n今天分享的主题是gulp，讲师是号称总能找到漂亮女朋友的allen小帅哥。\n\n![图片](/images/share/2-2.png)\n\n听的灰常认真的cp小伙伴。\n\n![图片](/images/share/2-3.png)\n\n😯坐在两妹子中间的幸福小朋友。\n\n\n![图片](/images/share/2-4.png)\n\n我们都是很开放的，不会那么拘束着咱们自己人，所以，你怎么坐都行，即使葛优躺。\n\n\n![图片](/images/share/2-5.png)\n\n\n因为迟到被罚站的同学。\n\n\n![图片](/images/share/2-6.png)\n\n最后晒出妹子们俏丽的倩影。\n\n![图片](/images/share/2-7.png)\n\n由于会议室小助手雪兴妹子的再次失误，只能订到这个小会议室，所以咱们只能坐着躺着站着罚站听，这丝毫不会影响大家听和讨论的乐趣。\n\n双十一耶，下班早点回家，单身的多敲代码，有对象的多买买买。\n\n\n","slug":"fontend-share-03","published":1,"updated":"2017-12-01T08:50:00.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknjs002ujxs1f2u5q0rm","content":"<p><img src=\"/images/share/2-1.png\" alt=\"图片\"></p>\n<a id=\"more\"></a>\n<p>居然又选在了这样一个特殊的日子里前端分享，由于小编上周身体比较蓝瘦香菇，所以就错过了上周的分享，深感遗憾。</p>\n<p>当然，说好的图文并茂，所以前方高能，做好欣赏准备。</p>\n<p>今天分享的主题是gulp，讲师是号称总能找到漂亮女朋友的allen小帅哥。</p>\n<p><img src=\"/images/share/2-2.png\" alt=\"图片\"></p>\n<p>听的灰常认真的cp小伙伴。</p>\n<p><img src=\"/images/share/2-3.png\" alt=\"图片\"></p>\n<p>😯坐在两妹子中间的幸福小朋友。</p>\n<p><img src=\"/images/share/2-4.png\" alt=\"图片\"></p>\n<p>我们都是很开放的，不会那么拘束着咱们自己人，所以，你怎么坐都行，即使葛优躺。</p>\n<p><img src=\"/images/share/2-5.png\" alt=\"图片\"></p>\n<p>因为迟到被罚站的同学。</p>\n<p><img src=\"/images/share/2-6.png\" alt=\"图片\"></p>\n<p>最后晒出妹子们俏丽的倩影。</p>\n<p><img src=\"/images/share/2-7.png\" alt=\"图片\"></p>\n<p>由于会议室小助手雪兴妹子的再次失误，只能订到这个小会议室，所以咱们只能坐着躺着站着罚站听，这丝毫不会影响大家听和讨论的乐趣。</p>\n<p>双十一耶，下班早点回家，单身的多敲代码，有对象的多买买买。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/share/2-1.png\" alt=\"图片\"></p>","more":"<p>居然又选在了这样一个特殊的日子里前端分享，由于小编上周身体比较蓝瘦香菇，所以就错过了上周的分享，深感遗憾。</p>\n<p>当然，说好的图文并茂，所以前方高能，做好欣赏准备。</p>\n<p>今天分享的主题是gulp，讲师是号称总能找到漂亮女朋友的allen小帅哥。</p>\n<p><img src=\"/images/share/2-2.png\" alt=\"图片\"></p>\n<p>听的灰常认真的cp小伙伴。</p>\n<p><img src=\"/images/share/2-3.png\" alt=\"图片\"></p>\n<p>😯坐在两妹子中间的幸福小朋友。</p>\n<p><img src=\"/images/share/2-4.png\" alt=\"图片\"></p>\n<p>我们都是很开放的，不会那么拘束着咱们自己人，所以，你怎么坐都行，即使葛优躺。</p>\n<p><img src=\"/images/share/2-5.png\" alt=\"图片\"></p>\n<p>因为迟到被罚站的同学。</p>\n<p><img src=\"/images/share/2-6.png\" alt=\"图片\"></p>\n<p>最后晒出妹子们俏丽的倩影。</p>\n<p><img src=\"/images/share/2-7.png\" alt=\"图片\"></p>\n<p>由于会议室小助手雪兴妹子的再次失误，只能订到这个小会议室，所以咱们只能坐着躺着站着罚站听，这丝毫不会影响大家听和讨论的乐趣。</p>\n<p>双十一耶，下班早点回家，单身的多敲代码，有对象的多买买买。</p>"},{"title":"记一次分享的收获","date":"2016-11-17T09:00:00.000Z","author":"Young","_content":"\n在写这段文字之前，我不断的和自己说，下次不要装逼了，下次不要装逼了，下次不要装逼了......（懂的自然懂）\n\n<!--more-->\n\n好了重要的话说三遍，下面开始试图回忆一周前的分享会并补上会议内容以及自己一点点的感受和总结。\n\n上次八哥主要分享了他在构建“富途在线开户”项目中的一些总结，比如尝试在实际生产环境中使用ES2015、使用Webpack资源管理、小结Angular的某些机制等。\n\n除了羡慕八哥有能自己独立负责一个项目的机会和实力以外其实我也没什么好说的......就酱。\n\n能看到这的人，还是要送点真正的干货的，推荐一部电影《七月与安生》，这也是为啥大半夜睡不着，无事可干总结上周分享会的原因了......\n\n其实好电影就和技术分享会类似，不一定要什么地方都完美，其实只要有那么一点地方能让观众思考给他一种眼前一亮的感觉，我相信大家绝不会吝啬掌声与欢呼。\n\n而上周技术分享会给我眼前一亮的是关于网页在线签名可以通过滑动的快慢来控制字体的粗细这个思路，很久以前我自己在做类似效果时根本就没考虑过这个方案，另外八哥说这个效果很简单，但是我觉得真正要做好，其实挺难，在线签名实现出真正签名的效果不是件简单的事情，有时间去挑战一下。\n\n电影《七月与安生》给我眼前一亮的地方绝壁不是两个美女争着睡一个帅哥，而在于这部电影比较了两种生活方式，一种我“梦寐以求”，一种我“深恶痛绝”，不知道是其它电影里边很少有这种对比呢，还是我很少看电影了，总之对比很强烈......\n\n以上就是上周分享会总结的全部内容了，祝大家好梦并祝我自己晚安。","source":"_posts/fontend-share-04.md","raw":"---\ntitle: 记一次分享的收获\ndate: 2016-11-17 17:00\ntags: [FE,Share,Gossip]\ncategory: 分享会直播\nauthor: Young\n---\n\n在写这段文字之前，我不断的和自己说，下次不要装逼了，下次不要装逼了，下次不要装逼了......（懂的自然懂）\n\n<!--more-->\n\n好了重要的话说三遍，下面开始试图回忆一周前的分享会并补上会议内容以及自己一点点的感受和总结。\n\n上次八哥主要分享了他在构建“富途在线开户”项目中的一些总结，比如尝试在实际生产环境中使用ES2015、使用Webpack资源管理、小结Angular的某些机制等。\n\n除了羡慕八哥有能自己独立负责一个项目的机会和实力以外其实我也没什么好说的......就酱。\n\n能看到这的人，还是要送点真正的干货的，推荐一部电影《七月与安生》，这也是为啥大半夜睡不着，无事可干总结上周分享会的原因了......\n\n其实好电影就和技术分享会类似，不一定要什么地方都完美，其实只要有那么一点地方能让观众思考给他一种眼前一亮的感觉，我相信大家绝不会吝啬掌声与欢呼。\n\n而上周技术分享会给我眼前一亮的是关于网页在线签名可以通过滑动的快慢来控制字体的粗细这个思路，很久以前我自己在做类似效果时根本就没考虑过这个方案，另外八哥说这个效果很简单，但是我觉得真正要做好，其实挺难，在线签名实现出真正签名的效果不是件简单的事情，有时间去挑战一下。\n\n电影《七月与安生》给我眼前一亮的地方绝壁不是两个美女争着睡一个帅哥，而在于这部电影比较了两种生活方式，一种我“梦寐以求”，一种我“深恶痛绝”，不知道是其它电影里边很少有这种对比呢，还是我很少看电影了，总之对比很强烈......\n\n以上就是上周分享会总结的全部内容了，祝大家好梦并祝我自己晚安。","slug":"fontend-share-04","published":1,"updated":"2017-12-01T08:50:00.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknju002xjxs1gdobxuso","content":"<p>在写这段文字之前，我不断的和自己说，下次不要装逼了，下次不要装逼了，下次不要装逼了……（懂的自然懂）</p>\n<a id=\"more\"></a>\n<p>好了重要的话说三遍，下面开始试图回忆一周前的分享会并补上会议内容以及自己一点点的感受和总结。</p>\n<p>上次八哥主要分享了他在构建“富途在线开户”项目中的一些总结，比如尝试在实际生产环境中使用ES2015、使用Webpack资源管理、小结Angular的某些机制等。</p>\n<p>除了羡慕八哥有能自己独立负责一个项目的机会和实力以外其实我也没什么好说的……就酱。</p>\n<p>能看到这的人，还是要送点真正的干货的，推荐一部电影《七月与安生》，这也是为啥大半夜睡不着，无事可干总结上周分享会的原因了……</p>\n<p>其实好电影就和技术分享会类似，不一定要什么地方都完美，其实只要有那么一点地方能让观众思考给他一种眼前一亮的感觉，我相信大家绝不会吝啬掌声与欢呼。</p>\n<p>而上周技术分享会给我眼前一亮的是关于网页在线签名可以通过滑动的快慢来控制字体的粗细这个思路，很久以前我自己在做类似效果时根本就没考虑过这个方案，另外八哥说这个效果很简单，但是我觉得真正要做好，其实挺难，在线签名实现出真正签名的效果不是件简单的事情，有时间去挑战一下。</p>\n<p>电影《七月与安生》给我眼前一亮的地方绝壁不是两个美女争着睡一个帅哥，而在于这部电影比较了两种生活方式，一种我“梦寐以求”，一种我“深恶痛绝”，不知道是其它电影里边很少有这种对比呢，还是我很少看电影了，总之对比很强烈……</p>\n<p>以上就是上周分享会总结的全部内容了，祝大家好梦并祝我自己晚安。</p>\n","site":{"data":{}},"excerpt":"<p>在写这段文字之前，我不断的和自己说，下次不要装逼了，下次不要装逼了，下次不要装逼了……（懂的自然懂）</p>","more":"<p>好了重要的话说三遍，下面开始试图回忆一周前的分享会并补上会议内容以及自己一点点的感受和总结。</p>\n<p>上次八哥主要分享了他在构建“富途在线开户”项目中的一些总结，比如尝试在实际生产环境中使用ES2015、使用Webpack资源管理、小结Angular的某些机制等。</p>\n<p>除了羡慕八哥有能自己独立负责一个项目的机会和实力以外其实我也没什么好说的……就酱。</p>\n<p>能看到这的人，还是要送点真正的干货的，推荐一部电影《七月与安生》，这也是为啥大半夜睡不着，无事可干总结上周分享会的原因了……</p>\n<p>其实好电影就和技术分享会类似，不一定要什么地方都完美，其实只要有那么一点地方能让观众思考给他一种眼前一亮的感觉，我相信大家绝不会吝啬掌声与欢呼。</p>\n<p>而上周技术分享会给我眼前一亮的是关于网页在线签名可以通过滑动的快慢来控制字体的粗细这个思路，很久以前我自己在做类似效果时根本就没考虑过这个方案，另外八哥说这个效果很简单，但是我觉得真正要做好，其实挺难，在线签名实现出真正签名的效果不是件简单的事情，有时间去挑战一下。</p>\n<p>电影《七月与安生》给我眼前一亮的地方绝壁不是两个美女争着睡一个帅哥，而在于这部电影比较了两种生活方式，一种我“梦寐以求”，一种我“深恶痛绝”，不知道是其它电影里边很少有这种对比呢，还是我很少看电影了，总之对比很强烈……</p>\n<p>以上就是上周分享会总结的全部内容了，祝大家好梦并祝我自己晚安。</p>"},{"title":"分享美食季","date":"2016-11-24T09:00:00.000Z","author":"Diandian","_content":"\n又是一周的分享，是不是听起来会有些干嚼技术的感觉，如果你这么认为的话，那你就错了，哈哈😆\n\n冬天到了，动物们都要储粮冬眠，程序猿同学们难道就只能储技术过冬吗？那多可怜，八哥为了让大家多长点肉肉，所以决定以后不定期给大家定制不同美食来吃，so我们叫它分享美食季，不只是分享技术，还有美食哦~~吃货们，看过来！！本期是肉食动物的狂欢，鸡吃起来！！\n\n<!--more-->\n\n![图片](/images/share/5-1.png)\n\n![图片](/images/share/5-6.png)\n\n![图片](/images/share/5-7.png)\n\n必须的分享前要先吃一顿的，你懂得，😈，瞧大家吃的多开森~~\n\n![图片](/images/share/5-2.png)\n\n吃完了，该进入正题了，本周是我们的认真小伙阿伦同学分享AngularJs[详情](https://github.com/AlanZhang001/angularjs/blob/master/Angularjs%20%E5%88%86%E4%BA%AB.md)。讲真，他真的准备很久的嘞，昨天都还改ppt到11点的嘞，早上就紧张的跟我说：怎么办我好紧张。我问他你紧张啥，你要跟谁告白了还是谁跟你告白了，他翻我一个白眼说：下午我要分享~~(⊙o⊙)…很紧张吗？\n\n哈哈，不过从他紧张的脸上我看到了认真负责和重视的态度和精神，灰常值得表扬的。（此处应有掌声）\n\n上图让大家看下咱们这个认真小伙。\n\n![图片](/images/share/5-3.png)\n\n![图片](/images/share/5-4.png)\n\n![图片](/images/share/5-8.png)\n\n![图片](/images/share/5-9.png)\n\n怎么样，没骗大家，认真的态度最美丽。\n\n希望大家都要向他学习哦，我们不仅要分享技术，也要分享吃的，这样才能愉快的玩耍呢，哈哈😁~~\n\n![图片](/images/share/5-5.gif)\n","source":"_posts/fontend-share-05.md","raw":"---\ntitle: 分享美食季\ndate: 2016-11-24 17:00\ntags: [FE,Share,Gossip]\ncategory: 分享会直播\nauthor: Diandian\n---\n\n又是一周的分享，是不是听起来会有些干嚼技术的感觉，如果你这么认为的话，那你就错了，哈哈😆\n\n冬天到了，动物们都要储粮冬眠，程序猿同学们难道就只能储技术过冬吗？那多可怜，八哥为了让大家多长点肉肉，所以决定以后不定期给大家定制不同美食来吃，so我们叫它分享美食季，不只是分享技术，还有美食哦~~吃货们，看过来！！本期是肉食动物的狂欢，鸡吃起来！！\n\n<!--more-->\n\n![图片](/images/share/5-1.png)\n\n![图片](/images/share/5-6.png)\n\n![图片](/images/share/5-7.png)\n\n必须的分享前要先吃一顿的，你懂得，😈，瞧大家吃的多开森~~\n\n![图片](/images/share/5-2.png)\n\n吃完了，该进入正题了，本周是我们的认真小伙阿伦同学分享AngularJs[详情](https://github.com/AlanZhang001/angularjs/blob/master/Angularjs%20%E5%88%86%E4%BA%AB.md)。讲真，他真的准备很久的嘞，昨天都还改ppt到11点的嘞，早上就紧张的跟我说：怎么办我好紧张。我问他你紧张啥，你要跟谁告白了还是谁跟你告白了，他翻我一个白眼说：下午我要分享~~(⊙o⊙)…很紧张吗？\n\n哈哈，不过从他紧张的脸上我看到了认真负责和重视的态度和精神，灰常值得表扬的。（此处应有掌声）\n\n上图让大家看下咱们这个认真小伙。\n\n![图片](/images/share/5-3.png)\n\n![图片](/images/share/5-4.png)\n\n![图片](/images/share/5-8.png)\n\n![图片](/images/share/5-9.png)\n\n怎么样，没骗大家，认真的态度最美丽。\n\n希望大家都要向他学习哦，我们不仅要分享技术，也要分享吃的，这样才能愉快的玩耍呢，哈哈😁~~\n\n![图片](/images/share/5-5.gif)\n","slug":"fontend-share-05","published":1,"updated":"2017-12-01T08:50:00.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknjv0031jxs14v4zkvwz","content":"<p>又是一周的分享，是不是听起来会有些干嚼技术的感觉，如果你这么认为的话，那你就错了，哈哈😆</p>\n<p>冬天到了，动物们都要储粮冬眠，程序猿同学们难道就只能储技术过冬吗？那多可怜，八哥为了让大家多长点肉肉，所以决定以后不定期给大家定制不同美食来吃，so我们叫它分享美食季，不只是分享技术，还有美食哦~~吃货们，看过来！！本期是肉食动物的狂欢，鸡吃起来！！</p>\n<a id=\"more\"></a>\n<p><img src=\"/images/share/5-1.png\" alt=\"图片\"></p>\n<p><img src=\"/images/share/5-6.png\" alt=\"图片\"></p>\n<p><img src=\"/images/share/5-7.png\" alt=\"图片\"></p>\n<p>必须的分享前要先吃一顿的，你懂得，😈，瞧大家吃的多开森~~</p>\n<p><img src=\"/images/share/5-2.png\" alt=\"图片\"></p>\n<p>吃完了，该进入正题了，本周是我们的认真小伙阿伦同学分享AngularJs<a href=\"https://github.com/AlanZhang001/angularjs/blob/master/Angularjs%20%E5%88%86%E4%BA%AB.md\" target=\"_blank\" rel=\"noopener\">详情</a>。讲真，他真的准备很久的嘞，昨天都还改ppt到11点的嘞，早上就紧张的跟我说：怎么办我好紧张。我问他你紧张啥，你要跟谁告白了还是谁跟你告白了，他翻我一个白眼说：下午我要分享~~(⊙o⊙)…很紧张吗？</p>\n<p>哈哈，不过从他紧张的脸上我看到了认真负责和重视的态度和精神，灰常值得表扬的。（此处应有掌声）</p>\n<p>上图让大家看下咱们这个认真小伙。</p>\n<p><img src=\"/images/share/5-3.png\" alt=\"图片\"></p>\n<p><img src=\"/images/share/5-4.png\" alt=\"图片\"></p>\n<p><img src=\"/images/share/5-8.png\" alt=\"图片\"></p>\n<p><img src=\"/images/share/5-9.png\" alt=\"图片\"></p>\n<p>怎么样，没骗大家，认真的态度最美丽。</p>\n<p>希望大家都要向他学习哦，我们不仅要分享技术，也要分享吃的，这样才能愉快的玩耍呢，哈哈😁~~</p>\n<p><img src=\"/images/share/5-5.gif\" alt=\"图片\"></p>\n","site":{"data":{}},"excerpt":"<p>又是一周的分享，是不是听起来会有些干嚼技术的感觉，如果你这么认为的话，那你就错了，哈哈😆</p>\n<p>冬天到了，动物们都要储粮冬眠，程序猿同学们难道就只能储技术过冬吗？那多可怜，八哥为了让大家多长点肉肉，所以决定以后不定期给大家定制不同美食来吃，so我们叫它分享美食季，不只是分享技术，还有美食哦~~吃货们，看过来！！本期是肉食动物的狂欢，鸡吃起来！！</p>","more":"<p><img src=\"/images/share/5-1.png\" alt=\"图片\"></p>\n<p><img src=\"/images/share/5-6.png\" alt=\"图片\"></p>\n<p><img src=\"/images/share/5-7.png\" alt=\"图片\"></p>\n<p>必须的分享前要先吃一顿的，你懂得，😈，瞧大家吃的多开森~~</p>\n<p><img src=\"/images/share/5-2.png\" alt=\"图片\"></p>\n<p>吃完了，该进入正题了，本周是我们的认真小伙阿伦同学分享AngularJs<a href=\"https://github.com/AlanZhang001/angularjs/blob/master/Angularjs%20%E5%88%86%E4%BA%AB.md\" target=\"_blank\" rel=\"noopener\">详情</a>。讲真，他真的准备很久的嘞，昨天都还改ppt到11点的嘞，早上就紧张的跟我说：怎么办我好紧张。我问他你紧张啥，你要跟谁告白了还是谁跟你告白了，他翻我一个白眼说：下午我要分享~~(⊙o⊙)…很紧张吗？</p>\n<p>哈哈，不过从他紧张的脸上我看到了认真负责和重视的态度和精神，灰常值得表扬的。（此处应有掌声）</p>\n<p>上图让大家看下咱们这个认真小伙。</p>\n<p><img src=\"/images/share/5-3.png\" alt=\"图片\"></p>\n<p><img src=\"/images/share/5-4.png\" alt=\"图片\"></p>\n<p><img src=\"/images/share/5-8.png\" alt=\"图片\"></p>\n<p><img src=\"/images/share/5-9.png\" alt=\"图片\"></p>\n<p>怎么样，没骗大家，认真的态度最美丽。</p>\n<p>希望大家都要向他学习哦，我们不仅要分享技术，也要分享吃的，这样才能愉快的玩耍呢，哈哈😁~~</p>\n<p><img src=\"/images/share/5-5.gif\" alt=\"图片\"></p>"},{"title":"分享美食季2-披萨季","date":"2016-12-01T09:00:00.000Z","author":"Diandian","_content":"\n好激动，好兴奋，又是一周的分享（吃货期盼的日子）。本周吃什么呢？已经被惯坏的前端小哥们可能没有好吃的都开始闹脾气了。于是，八哥决定采取上一季的意见，来个披萨宴~~~吼吼~~废话说一堆，看客们又吃不到，不过即使吃不到，也会有美食图给你们大饱眼福哒~请看！\n\n<!--more-->\n\n看着让人垂涎欲滴的浏览披萨和烤鸡披萨(ˇˍˇ) 隔着屏幕都能闻到香味吧😁\n\n![图片](/images/share/6-1.png)\n\n当然光吃披萨怎么能够，还有烤串呀，薯片啊，鸡翅啊，冰镇可乐呀~肉肉😄\n\n![图片](/images/share/6-2.png)\n\n恩，隔着屏幕看着大家吃的样子就知道真哒好吃呢~\n\n![图片](/images/share/6-3.png)\n\n![图片](/images/share/6-4.png)\n\n呀，光顾着吃去了，分享呢，分享呢！本周的分享是canvas主题，小编的水水的分享，哎，大家还是很给面子的，分享15分钟，吃五分钟，鼓掌五分钟，讲五分钟~~哈哈😄开玩笑的啦(*^__^*) 嘻嘻…不过感谢八哥的升华，才让分享收获满满😁\n\n![图片](/images/share/6-5.png)\n\n酒足饭饱听分享，大家都很认真的嘞~总之，能学到东西，能有启发才是最重要滴~\n\n最后乱入一张富途FE哥哥们工作的福利，总有可爱FE妹妹们陪在身边~~单身狗们别羡慕，快到碗里来吧✋\n\n(图片被FE妹子给删了，哈哈)\n","source":"_posts/fontend-share-06.md","raw":"---\ntitle: 分享美食季2-披萨季\ndate: 2016-12-01 17:00\ntags: [FE,Share,Gossip]\ncategory: 分享会直播\nauthor: Diandian\n---\n\n好激动，好兴奋，又是一周的分享（吃货期盼的日子）。本周吃什么呢？已经被惯坏的前端小哥们可能没有好吃的都开始闹脾气了。于是，八哥决定采取上一季的意见，来个披萨宴~~~吼吼~~废话说一堆，看客们又吃不到，不过即使吃不到，也会有美食图给你们大饱眼福哒~请看！\n\n<!--more-->\n\n看着让人垂涎欲滴的浏览披萨和烤鸡披萨(ˇˍˇ) 隔着屏幕都能闻到香味吧😁\n\n![图片](/images/share/6-1.png)\n\n当然光吃披萨怎么能够，还有烤串呀，薯片啊，鸡翅啊，冰镇可乐呀~肉肉😄\n\n![图片](/images/share/6-2.png)\n\n恩，隔着屏幕看着大家吃的样子就知道真哒好吃呢~\n\n![图片](/images/share/6-3.png)\n\n![图片](/images/share/6-4.png)\n\n呀，光顾着吃去了，分享呢，分享呢！本周的分享是canvas主题，小编的水水的分享，哎，大家还是很给面子的，分享15分钟，吃五分钟，鼓掌五分钟，讲五分钟~~哈哈😄开玩笑的啦(*^__^*) 嘻嘻…不过感谢八哥的升华，才让分享收获满满😁\n\n![图片](/images/share/6-5.png)\n\n酒足饭饱听分享，大家都很认真的嘞~总之，能学到东西，能有启发才是最重要滴~\n\n最后乱入一张富途FE哥哥们工作的福利，总有可爱FE妹妹们陪在身边~~单身狗们别羡慕，快到碗里来吧✋\n\n(图片被FE妹子给删了，哈哈)\n","slug":"fontend-share-06","published":1,"updated":"2017-12-01T08:50:00.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknjx0035jxs104kvs5m1","content":"<p>好激动，好兴奋，又是一周的分享（吃货期盼的日子）。本周吃什么呢？已经被惯坏的前端小哥们可能没有好吃的都开始闹脾气了。于是，八哥决定采取上一季的意见，来个披萨宴<del>~吼吼</del>废话说一堆，看客们又吃不到，不过即使吃不到，也会有美食图给你们大饱眼福哒~请看！</p>\n<a id=\"more\"></a>\n<p>看着让人垂涎欲滴的浏览披萨和烤鸡披萨(ˇˍˇ) 隔着屏幕都能闻到香味吧😁</p>\n<p><img src=\"/images/share/6-1.png\" alt=\"图片\"></p>\n<p>当然光吃披萨怎么能够，还有烤串呀，薯片啊，鸡翅啊，冰镇可乐呀~肉肉😄</p>\n<p><img src=\"/images/share/6-2.png\" alt=\"图片\"></p>\n<p>恩，隔着屏幕看着大家吃的样子就知道真哒好吃呢~</p>\n<p><img src=\"/images/share/6-3.png\" alt=\"图片\"></p>\n<p><img src=\"/images/share/6-4.png\" alt=\"图片\"></p>\n<p>呀，光顾着吃去了，分享呢，分享呢！本周的分享是canvas主题，小编的水水的分享，哎，大家还是很给面子的，分享15分钟，吃五分钟，鼓掌五分钟，讲五分钟~~哈哈😄开玩笑的啦(<em>^__^</em>) 嘻嘻…不过感谢八哥的升华，才让分享收获满满😁</p>\n<p><img src=\"/images/share/6-5.png\" alt=\"图片\"></p>\n<p>酒足饭饱听分享，大家都很认真的嘞~总之，能学到东西，能有启发才是最重要滴~</p>\n<p>最后乱入一张富途FE哥哥们工作的福利，总有可爱FE妹妹们陪在身边~~单身狗们别羡慕，快到碗里来吧✋</p>\n<p>(图片被FE妹子给删了，哈哈)</p>\n","site":{"data":{}},"excerpt":"<p>好激动，好兴奋，又是一周的分享（吃货期盼的日子）。本周吃什么呢？已经被惯坏的前端小哥们可能没有好吃的都开始闹脾气了。于是，八哥决定采取上一季的意见，来个披萨宴<del>~吼吼</del>废话说一堆，看客们又吃不到，不过即使吃不到，也会有美食图给你们大饱眼福哒~请看！</p>","more":"<p>看着让人垂涎欲滴的浏览披萨和烤鸡披萨(ˇˍˇ) 隔着屏幕都能闻到香味吧😁</p>\n<p><img src=\"/images/share/6-1.png\" alt=\"图片\"></p>\n<p>当然光吃披萨怎么能够，还有烤串呀，薯片啊，鸡翅啊，冰镇可乐呀~肉肉😄</p>\n<p><img src=\"/images/share/6-2.png\" alt=\"图片\"></p>\n<p>恩，隔着屏幕看着大家吃的样子就知道真哒好吃呢~</p>\n<p><img src=\"/images/share/6-3.png\" alt=\"图片\"></p>\n<p><img src=\"/images/share/6-4.png\" alt=\"图片\"></p>\n<p>呀，光顾着吃去了，分享呢，分享呢！本周的分享是canvas主题，小编的水水的分享，哎，大家还是很给面子的，分享15分钟，吃五分钟，鼓掌五分钟，讲五分钟~~哈哈😄开玩笑的啦(<em>^__^</em>) 嘻嘻…不过感谢八哥的升华，才让分享收获满满😁</p>\n<p><img src=\"/images/share/6-5.png\" alt=\"图片\"></p>\n<p>酒足饭饱听分享，大家都很认真的嘞~总之，能学到东西，能有启发才是最重要滴~</p>\n<p>最后乱入一张富途FE哥哥们工作的福利，总有可爱FE妹妹们陪在身边~~单身狗们别羡慕，快到碗里来吧✋</p>\n<p>(图片被FE妹子给删了，哈哈)</p>"},{"title":"分享会直播第七弹之迟到的幸福","date":"2016-12-08T06:30:00.000Z","author":"AlanZhang","_content":"\n最近，总是在感慨时光流转飞快，转眼加入富途已经整整六个月，也很庆幸能加入这样一个温（dou）暖（bi）的团队中。早上上班，从地铁站步行到公司的路上，心情特别好，十二月的深圳，暖冬只是让我添了件薄外套，早上的微风吹在脸上，清新而又不失温暖；抬头，一小撮的白云躺在远处角落的蓝蓝天空，无所事事悠悠荡荡。一天的工作在美好的心情中开始了......（客官，别走，马上就是分享的内容）\n\n<!--more-->\n\n一如既往的周四，技（ming）术（tian）分（zhou）享（wu）的下午也多了很多期待，本周是Toobug的分享，选择了非常合适的两点半开始，毕竟大家刚刚休息好，精（hun）神（hun）充（yu）足（shui）。小编十（cha）分（dian）准（chi）时（dao）的抢到了第一排的位置，献上看我Toobug帅照。\n\n![图片](/images/share/7-1.jpg)\n\n这次的分享主题是**数据驱动的web前端开发**，看题目就知道是干货慢慢，开始前八哥说这次分享主要偏理论，代码会比较少，上午太忙没定披萨，PPT也没准备，比较粗糙（反正小编每次都十分膜拜八哥的PPT风格，简约而不简单）。\n\n注：内容来自PPT\n![图片](/images/share/7-2.png)\n![图片](/images/share/7-6.png)\n\n分享以todolist应用为例，讲解如何从主动获取数据并渲染页面的模式转变为 操作数据、以数据驱动页面渲染的方式，联想到vue的实现方式就不难理解，让开发者更多的去注意数据的操作，同时加快了开发效率；\n\n非数据驱动![图片](/images/share/7-7.png)\n\n数据驱动![图片](/images/share/7-8.png)\n\n分享会进行到一半，大家都聚（xin）精（sheng）会（bu）神（ding）的听着，忽然后面出现什么动静，回头，原来是jin同学为了感谢大家为他review代码（找到bug）偷偷定了披萨。\n\n![图片](/images/share/7-3.jpg)\n![图片](/images/share/7-4.jpg)\n\n这幸福来的太突然，感觉美食是从天而降的，吃完这顿，顿时感觉干劲十足，小编回去要赶紧帮jin同学“review代码”去。\n\n（刚讲到哪里了，继续，敲黑板，这是重点啊，同学们！）\n核心知识是Obejct.defineProperty方法，为对象的属性设置set，get方法；虚拟dom，在数据驱动页面渲染时提高效率...\n\n本次分享大概就这样，每次分享，都能有很珍贵的收获，也让小编察觉到自己与大家的差距，还有好多东西需要去学习，也十分感谢大家这段时间的帮助，希望能继续大家共同进步！\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/fontend-share-07.md","raw":"---\ntitle: 分享会直播第七弹之迟到的幸福\ndate: 2016-12-08 14:30\ntags: [FE,Share,Gossip]\ncategory: 分享会直播\nauthor: AlanZhang\n---\n\n最近，总是在感慨时光流转飞快，转眼加入富途已经整整六个月，也很庆幸能加入这样一个温（dou）暖（bi）的团队中。早上上班，从地铁站步行到公司的路上，心情特别好，十二月的深圳，暖冬只是让我添了件薄外套，早上的微风吹在脸上，清新而又不失温暖；抬头，一小撮的白云躺在远处角落的蓝蓝天空，无所事事悠悠荡荡。一天的工作在美好的心情中开始了......（客官，别走，马上就是分享的内容）\n\n<!--more-->\n\n一如既往的周四，技（ming）术（tian）分（zhou）享（wu）的下午也多了很多期待，本周是Toobug的分享，选择了非常合适的两点半开始，毕竟大家刚刚休息好，精（hun）神（hun）充（yu）足（shui）。小编十（cha）分（dian）准（chi）时（dao）的抢到了第一排的位置，献上看我Toobug帅照。\n\n![图片](/images/share/7-1.jpg)\n\n这次的分享主题是**数据驱动的web前端开发**，看题目就知道是干货慢慢，开始前八哥说这次分享主要偏理论，代码会比较少，上午太忙没定披萨，PPT也没准备，比较粗糙（反正小编每次都十分膜拜八哥的PPT风格，简约而不简单）。\n\n注：内容来自PPT\n![图片](/images/share/7-2.png)\n![图片](/images/share/7-6.png)\n\n分享以todolist应用为例，讲解如何从主动获取数据并渲染页面的模式转变为 操作数据、以数据驱动页面渲染的方式，联想到vue的实现方式就不难理解，让开发者更多的去注意数据的操作，同时加快了开发效率；\n\n非数据驱动![图片](/images/share/7-7.png)\n\n数据驱动![图片](/images/share/7-8.png)\n\n分享会进行到一半，大家都聚（xin）精（sheng）会（bu）神（ding）的听着，忽然后面出现什么动静，回头，原来是jin同学为了感谢大家为他review代码（找到bug）偷偷定了披萨。\n\n![图片](/images/share/7-3.jpg)\n![图片](/images/share/7-4.jpg)\n\n这幸福来的太突然，感觉美食是从天而降的，吃完这顿，顿时感觉干劲十足，小编回去要赶紧帮jin同学“review代码”去。\n\n（刚讲到哪里了，继续，敲黑板，这是重点啊，同学们！）\n核心知识是Obejct.defineProperty方法，为对象的属性设置set，get方法；虚拟dom，在数据驱动页面渲染时提高效率...\n\n本次分享大概就这样，每次分享，都能有很珍贵的收获，也让小编察觉到自己与大家的差距，还有好多东西需要去学习，也十分感谢大家这段时间的帮助，希望能继续大家共同进步！\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"fontend-share-07","published":1,"updated":"2017-12-01T08:50:00.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknk10039jxs1q4kxyjqj","content":"<p>最近，总是在感慨时光流转飞快，转眼加入富途已经整整六个月，也很庆幸能加入这样一个温（dou）暖（bi）的团队中。早上上班，从地铁站步行到公司的路上，心情特别好，十二月的深圳，暖冬只是让我添了件薄外套，早上的微风吹在脸上，清新而又不失温暖；抬头，一小撮的白云躺在远处角落的蓝蓝天空，无所事事悠悠荡荡。一天的工作在美好的心情中开始了……（客官，别走，马上就是分享的内容）</p>\n<a id=\"more\"></a>\n<p>一如既往的周四，技（ming）术（tian）分（zhou）享（wu）的下午也多了很多期待，本周是Toobug的分享，选择了非常合适的两点半开始，毕竟大家刚刚休息好，精（hun）神（hun）充（yu）足（shui）。小编十（cha）分（dian）准（chi）时（dao）的抢到了第一排的位置，献上看我Toobug帅照。</p>\n<p><img src=\"/images/share/7-1.jpg\" alt=\"图片\"></p>\n<p>这次的分享主题是<strong>数据驱动的web前端开发</strong>，看题目就知道是干货慢慢，开始前八哥说这次分享主要偏理论，代码会比较少，上午太忙没定披萨，PPT也没准备，比较粗糙（反正小编每次都十分膜拜八哥的PPT风格，简约而不简单）。</p>\n<p>注：内容来自PPT<br><img src=\"/images/share/7-2.png\" alt=\"图片\"><br><img src=\"/images/share/7-6.png\" alt=\"图片\"></p>\n<p>分享以todolist应用为例，讲解如何从主动获取数据并渲染页面的模式转变为 操作数据、以数据驱动页面渲染的方式，联想到vue的实现方式就不难理解，让开发者更多的去注意数据的操作，同时加快了开发效率；</p>\n<p>非数据驱动<img src=\"/images/share/7-7.png\" alt=\"图片\"></p>\n<p>数据驱动<img src=\"/images/share/7-8.png\" alt=\"图片\"></p>\n<p>分享会进行到一半，大家都聚（xin）精（sheng）会（bu）神（ding）的听着，忽然后面出现什么动静，回头，原来是jin同学为了感谢大家为他review代码（找到bug）偷偷定了披萨。</p>\n<p><img src=\"/images/share/7-3.jpg\" alt=\"图片\"><br><img src=\"/images/share/7-4.jpg\" alt=\"图片\"></p>\n<p>这幸福来的太突然，感觉美食是从天而降的，吃完这顿，顿时感觉干劲十足，小编回去要赶紧帮jin同学“review代码”去。</p>\n<p>（刚讲到哪里了，继续，敲黑板，这是重点啊，同学们！）<br>核心知识是Obejct.defineProperty方法，为对象的属性设置set，get方法；虚拟dom，在数据驱动页面渲染时提高效率…</p>\n<p>本次分享大概就这样，每次分享，都能有很珍贵的收获，也让小编察觉到自己与大家的差距，还有好多东西需要去学习，也十分感谢大家这段时间的帮助，希望能继续大家共同进步！</p>\n","site":{"data":{}},"excerpt":"<p>最近，总是在感慨时光流转飞快，转眼加入富途已经整整六个月，也很庆幸能加入这样一个温（dou）暖（bi）的团队中。早上上班，从地铁站步行到公司的路上，心情特别好，十二月的深圳，暖冬只是让我添了件薄外套，早上的微风吹在脸上，清新而又不失温暖；抬头，一小撮的白云躺在远处角落的蓝蓝天空，无所事事悠悠荡荡。一天的工作在美好的心情中开始了……（客官，别走，马上就是分享的内容）</p>","more":"<p>一如既往的周四，技（ming）术（tian）分（zhou）享（wu）的下午也多了很多期待，本周是Toobug的分享，选择了非常合适的两点半开始，毕竟大家刚刚休息好，精（hun）神（hun）充（yu）足（shui）。小编十（cha）分（dian）准（chi）时（dao）的抢到了第一排的位置，献上看我Toobug帅照。</p>\n<p><img src=\"/images/share/7-1.jpg\" alt=\"图片\"></p>\n<p>这次的分享主题是<strong>数据驱动的web前端开发</strong>，看题目就知道是干货慢慢，开始前八哥说这次分享主要偏理论，代码会比较少，上午太忙没定披萨，PPT也没准备，比较粗糙（反正小编每次都十分膜拜八哥的PPT风格，简约而不简单）。</p>\n<p>注：内容来自PPT<br><img src=\"/images/share/7-2.png\" alt=\"图片\"><br><img src=\"/images/share/7-6.png\" alt=\"图片\"></p>\n<p>分享以todolist应用为例，讲解如何从主动获取数据并渲染页面的模式转变为 操作数据、以数据驱动页面渲染的方式，联想到vue的实现方式就不难理解，让开发者更多的去注意数据的操作，同时加快了开发效率；</p>\n<p>非数据驱动<img src=\"/images/share/7-7.png\" alt=\"图片\"></p>\n<p>数据驱动<img src=\"/images/share/7-8.png\" alt=\"图片\"></p>\n<p>分享会进行到一半，大家都聚（xin）精（sheng）会（bu）神（ding）的听着，忽然后面出现什么动静，回头，原来是jin同学为了感谢大家为他review代码（找到bug）偷偷定了披萨。</p>\n<p><img src=\"/images/share/7-3.jpg\" alt=\"图片\"><br><img src=\"/images/share/7-4.jpg\" alt=\"图片\"></p>\n<p>这幸福来的太突然，感觉美食是从天而降的，吃完这顿，顿时感觉干劲十足，小编回去要赶紧帮jin同学“review代码”去。</p>\n<p>（刚讲到哪里了，继续，敲黑板，这是重点啊，同学们！）<br>核心知识是Obejct.defineProperty方法，为对象的属性设置set，get方法；虚拟dom，在数据驱动页面渲染时提高效率…</p>\n<p>本次分享大概就这样，每次分享，都能有很珍贵的收获，也让小编察觉到自己与大家的差距，还有好多东西需要去学习，也十分感谢大家这段时间的帮助，希望能继续大家共同进步！</p>"},{"title":"分享会直播第八弹之天哥与css的故事","date":"2016-12-19T09:20:00.000Z","author":"Allen","_content":"\n很高兴能在富途前端前行的道路上留下自己的足迹。好吧，画风还是变回来。等了好久终于等到了我们日天哥的分享， 天哥可是我们富途的重构大神，他与CSS打交道的时间比我的工作年限还长。来，直接上干货。\n\n<!--more-->\n\n先瞻仰下我们天哥的尊容。\n\n![图片](/images/share/8-1.jpg)\n\n这次分享的主题是CSS使用技巧分享。天哥属于那中实战派，这么多年累积起来的精华部分挑了一些比较常用使用的部分作为分享内容。\n\n![图片](/images/share/8-3.png)\n\n原谅我的无知，我一直以为chrome最小只能显示12px。\n\n![图片](/images/share/8-4.png)\n\n这个对齐的超好用，谁用谁知道。\n\n![图片](/images/share/8-5.png)\n\n这个pointer-events也非常实用，相信大家都有碰到过类似场景。\n\n![图片](/images/share/8-6.png)\n\n总之，听天哥讲这些经验之谈，我觉得是收货满满， 当然分享会还是少不了福利， 大家吃的开心，听的也很开心。\n富途前端组的牛人（不单指技术）还是蛮多的，三人行，必有我师。我也学到了不少，有机会能身处这样一个团队值得庆幸和自豪。\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/fontend-share-08.md","raw":"---\ntitle: 分享会直播第八弹之天哥与css的故事\ndate: 2016-12-19 17:20\ntags: [FE,Share,Gossip]\ncategory: 分享会直播\nauthor: Allen\n---\n\n很高兴能在富途前端前行的道路上留下自己的足迹。好吧，画风还是变回来。等了好久终于等到了我们日天哥的分享， 天哥可是我们富途的重构大神，他与CSS打交道的时间比我的工作年限还长。来，直接上干货。\n\n<!--more-->\n\n先瞻仰下我们天哥的尊容。\n\n![图片](/images/share/8-1.jpg)\n\n这次分享的主题是CSS使用技巧分享。天哥属于那中实战派，这么多年累积起来的精华部分挑了一些比较常用使用的部分作为分享内容。\n\n![图片](/images/share/8-3.png)\n\n原谅我的无知，我一直以为chrome最小只能显示12px。\n\n![图片](/images/share/8-4.png)\n\n这个对齐的超好用，谁用谁知道。\n\n![图片](/images/share/8-5.png)\n\n这个pointer-events也非常实用，相信大家都有碰到过类似场景。\n\n![图片](/images/share/8-6.png)\n\n总之，听天哥讲这些经验之谈，我觉得是收货满满， 当然分享会还是少不了福利， 大家吃的开心，听的也很开心。\n富途前端组的牛人（不单指技术）还是蛮多的，三人行，必有我师。我也学到了不少，有机会能身处这样一个团队值得庆幸和自豪。\n\n\n\n\n\n\n\n\n\n\n\n","slug":"fontend-share-08","published":1,"updated":"2017-12-01T08:50:00.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknk3003bjxs10u9q29mo","content":"<p>很高兴能在富途前端前行的道路上留下自己的足迹。好吧，画风还是变回来。等了好久终于等到了我们日天哥的分享， 天哥可是我们富途的重构大神，他与CSS打交道的时间比我的工作年限还长。来，直接上干货。</p>\n<a id=\"more\"></a>\n<p>先瞻仰下我们天哥的尊容。</p>\n<p><img src=\"/images/share/8-1.jpg\" alt=\"图片\"></p>\n<p>这次分享的主题是CSS使用技巧分享。天哥属于那中实战派，这么多年累积起来的精华部分挑了一些比较常用使用的部分作为分享内容。</p>\n<p><img src=\"/images/share/8-3.png\" alt=\"图片\"></p>\n<p>原谅我的无知，我一直以为chrome最小只能显示12px。</p>\n<p><img src=\"/images/share/8-4.png\" alt=\"图片\"></p>\n<p>这个对齐的超好用，谁用谁知道。</p>\n<p><img src=\"/images/share/8-5.png\" alt=\"图片\"></p>\n<p>这个pointer-events也非常实用，相信大家都有碰到过类似场景。</p>\n<p><img src=\"/images/share/8-6.png\" alt=\"图片\"></p>\n<p>总之，听天哥讲这些经验之谈，我觉得是收货满满， 当然分享会还是少不了福利， 大家吃的开心，听的也很开心。<br>富途前端组的牛人（不单指技术）还是蛮多的，三人行，必有我师。我也学到了不少，有机会能身处这样一个团队值得庆幸和自豪。</p>\n","site":{"data":{}},"excerpt":"<p>很高兴能在富途前端前行的道路上留下自己的足迹。好吧，画风还是变回来。等了好久终于等到了我们日天哥的分享， 天哥可是我们富途的重构大神，他与CSS打交道的时间比我的工作年限还长。来，直接上干货。</p>","more":"<p>先瞻仰下我们天哥的尊容。</p>\n<p><img src=\"/images/share/8-1.jpg\" alt=\"图片\"></p>\n<p>这次分享的主题是CSS使用技巧分享。天哥属于那中实战派，这么多年累积起来的精华部分挑了一些比较常用使用的部分作为分享内容。</p>\n<p><img src=\"/images/share/8-3.png\" alt=\"图片\"></p>\n<p>原谅我的无知，我一直以为chrome最小只能显示12px。</p>\n<p><img src=\"/images/share/8-4.png\" alt=\"图片\"></p>\n<p>这个对齐的超好用，谁用谁知道。</p>\n<p><img src=\"/images/share/8-5.png\" alt=\"图片\"></p>\n<p>这个pointer-events也非常实用，相信大家都有碰到过类似场景。</p>\n<p><img src=\"/images/share/8-6.png\" alt=\"图片\"></p>\n<p>总之，听天哥讲这些经验之谈，我觉得是收货满满， 当然分享会还是少不了福利， 大家吃的开心，听的也很开心。<br>富途前端组的牛人（不单指技术）还是蛮多的，三人行，必有我师。我也学到了不少，有机会能身处这样一个团队值得庆幸和自豪。</p>"},{"title":"分享会直播第九弹之tcp协议","date":"2016-12-22T08:00:00.000Z","author":"Coco","_content":"\n\n作为一个很（bu）业（chen）余（zhi）的小编，对于我已无可救药的拖延症首先向大家，更是向这次提供分享的young哥表示深深的歉意。废话就不多说了，让我们来观赏一下young哥的飒爽英姿。\n\n<!--more-->\n\n![图片](/images/share/9-1.jpg)\n\n这次分享的主题是tcp协议，说到tcp协议，大家首先想到的肯定是其“三次握手”和“四次挥手”的连接建立和断开机制。为使大家深刻理解为什么建立连接要三次，断开要四次，young哥将这两个过程形象比喻成男女生之间的牵手和分手所需经历的步骤。至于为什么分手比牵手多一步，young哥给出的解释是，双方在一起后会有财产纠葛，需要多加一步进行清算（这里小编的总结是：真是牵手容易分手难啊，单身汪们请珍惜当下...）。\n\n分享会中young哥详细介绍了TCP的首部结构，解释了什么是滑动窗口，讲解了TCP报文确认和重传机制，并通过抓包分析了tcp连接通信过程中的各种状态。\n\n![图片](/images/share/9-2.jpg)\n\n\n最后应八哥的要求，young哥还为大家讲解了如何使用wireshark来抓包和分析报文。\n\n...(此处省略10000字，详情请关注- Github [@Young](https://github.com/newbieYoung))\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/fontend-share-09.md","raw":"---\ntitle: 分享会直播第九弹之tcp协议\ndate: 2016-12-22 16:00\ntags: [FE,Share,Gossip]\ncategory: 分享会直播\nauthor: Coco\n---\n\n\n作为一个很（bu）业（chen）余（zhi）的小编，对于我已无可救药的拖延症首先向大家，更是向这次提供分享的young哥表示深深的歉意。废话就不多说了，让我们来观赏一下young哥的飒爽英姿。\n\n<!--more-->\n\n![图片](/images/share/9-1.jpg)\n\n这次分享的主题是tcp协议，说到tcp协议，大家首先想到的肯定是其“三次握手”和“四次挥手”的连接建立和断开机制。为使大家深刻理解为什么建立连接要三次，断开要四次，young哥将这两个过程形象比喻成男女生之间的牵手和分手所需经历的步骤。至于为什么分手比牵手多一步，young哥给出的解释是，双方在一起后会有财产纠葛，需要多加一步进行清算（这里小编的总结是：真是牵手容易分手难啊，单身汪们请珍惜当下...）。\n\n分享会中young哥详细介绍了TCP的首部结构，解释了什么是滑动窗口，讲解了TCP报文确认和重传机制，并通过抓包分析了tcp连接通信过程中的各种状态。\n\n![图片](/images/share/9-2.jpg)\n\n\n最后应八哥的要求，young哥还为大家讲解了如何使用wireshark来抓包和分析报文。\n\n...(此处省略10000字，详情请关注- Github [@Young](https://github.com/newbieYoung))\n\n\n\n\n\n\n\n\n\n\n\n","slug":"fontend-share-09","published":1,"updated":"2017-12-01T08:50:00.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknk7003ejxs19x6dce7a","content":"<p>作为一个很（bu）业（chen）余（zhi）的小编，对于我已无可救药的拖延症首先向大家，更是向这次提供分享的young哥表示深深的歉意。废话就不多说了，让我们来观赏一下young哥的飒爽英姿。</p>\n<a id=\"more\"></a>\n<p><img src=\"/images/share/9-1.jpg\" alt=\"图片\"></p>\n<p>这次分享的主题是tcp协议，说到tcp协议，大家首先想到的肯定是其“三次握手”和“四次挥手”的连接建立和断开机制。为使大家深刻理解为什么建立连接要三次，断开要四次，young哥将这两个过程形象比喻成男女生之间的牵手和分手所需经历的步骤。至于为什么分手比牵手多一步，young哥给出的解释是，双方在一起后会有财产纠葛，需要多加一步进行清算（这里小编的总结是：真是牵手容易分手难啊，单身汪们请珍惜当下…）。</p>\n<p>分享会中young哥详细介绍了TCP的首部结构，解释了什么是滑动窗口，讲解了TCP报文确认和重传机制，并通过抓包分析了tcp连接通信过程中的各种状态。</p>\n<p><img src=\"/images/share/9-2.jpg\" alt=\"图片\"></p>\n<p>最后应八哥的要求，young哥还为大家讲解了如何使用wireshark来抓包和分析报文。</p>\n<p>…(此处省略10000字，详情请关注- Github <a href=\"https://github.com/newbieYoung\" target=\"_blank\" rel=\"noopener\">@Young</a>)</p>\n","site":{"data":{}},"excerpt":"<p>作为一个很（bu）业（chen）余（zhi）的小编，对于我已无可救药的拖延症首先向大家，更是向这次提供分享的young哥表示深深的歉意。废话就不多说了，让我们来观赏一下young哥的飒爽英姿。</p>","more":"<p><img src=\"/images/share/9-1.jpg\" alt=\"图片\"></p>\n<p>这次分享的主题是tcp协议，说到tcp协议，大家首先想到的肯定是其“三次握手”和“四次挥手”的连接建立和断开机制。为使大家深刻理解为什么建立连接要三次，断开要四次，young哥将这两个过程形象比喻成男女生之间的牵手和分手所需经历的步骤。至于为什么分手比牵手多一步，young哥给出的解释是，双方在一起后会有财产纠葛，需要多加一步进行清算（这里小编的总结是：真是牵手容易分手难啊，单身汪们请珍惜当下…）。</p>\n<p>分享会中young哥详细介绍了TCP的首部结构，解释了什么是滑动窗口，讲解了TCP报文确认和重传机制，并通过抓包分析了tcp连接通信过程中的各种状态。</p>\n<p><img src=\"/images/share/9-2.jpg\" alt=\"图片\"></p>\n<p>最后应八哥的要求，young哥还为大家讲解了如何使用wireshark来抓包和分析报文。</p>\n<p>…(此处省略10000字，详情请关注- Github <a href=\"https://github.com/newbieYoung\" target=\"_blank\" rel=\"noopener\">@Young</a>)</p>"},{"title":"分享会直播第十弹之年末双重分享","date":"2016-12-30T15:00:00.000Z","author":"cynthia","_content":"细心的朋友可能会问，第九弹在哪？怎么直接跳到第十弹了？只想说，在写本文时，它还在coco的脑海里。\n\n2016年就剩最后一天了！！！你2016的小(f)小(l)目(a)标(g)都实现了吗（微信脸），反正我是没实现，但...我们的FUTU-FE团队的2016年的分享会完美的结束啦～而且为感谢大家今年对我们的支持，这次分享双量放送，直接奉上两场分享～\n<!--more-->\n\n本次分享是由帅哥(jin)与美女(linda)分享“重构”与“css实战”，听得太认真了，都没有好好拍照，为了让你们有继续阅读的动力，先放上jin哥哥的帅照一张，希望你们看在jin的帅颜的份上，将文章看到最后吧（感谢！）\n![图片](/images/share/10-1.jpeg)\n\njin哥哥通过介绍什么是重构，重构的风险，为什么重构，什么时候重构等等方面给我们讲述了重构的事儿，在没听分享前，总觉得重构离我很远，但听完jin哥哥的分享之后，发现重构其实离我们并不远，平时要多看看自己的代码，多想想，多改改。不能辜负jin哥哥精美的ppt啊！\n\n再聊到重构后，不知怎么的，话题就带到了注释的问题上了，经过激烈的讨论之后，得出的结论是=>注释一定要写。所以啊，在写完代码之后，写上个注释，也算是个“重构”吧～“重构”就在我们身边！\n\n一分钟寂静后。。。\n\n接下来就轮到linda姐姐分享她多年在css中踩过的坑。能填坑的实战经验都是精华啊，所以大家要集中精神啦！\n\nlinda姐姐根据自己的经验，对`margin`重叠，`margin`百分比，`nth-child`与`nth-of-type`的区别，元素隐藏等常见的坑进行了分析与实例演示，并给出了填坑方法。\n\n在linda姐姐分享的过程中，young哥哥抛出了问题，放出来供大家思考吧～问题是=>哪些css属性使用百分比为值的时候是起效的，又是如何起效的（语文不好，意思大概是这样吧...tips:不知道的话，可以去翻翻young哥的github或者博客，应该有的）\n\n所以本次直播到此为止？？？？怎么可能！！！\n\n不知道大家说到年末，想到的是啥？反正我看到最多的是“总结”。套句rick帅哥说的话=>\"生活的意思不在于枚举，而是总结\"  所以在2016年的最后一次分享，怎么少得了总结了，所以，后面就有toobug（八哥）登场，给我们总结了2016年我们前端团队做了啥，2017年要做啥。（感触最深的是，幸好我是15年过面试的，哈哈）。\n\n好了，2016年的最后一次分享直播真的进入尾声了，感谢大家这半年对我们团队的支持～\n\n最后的最后，在这里立个2017年的flag！！=> 做一次不用toobug总结救场的分享会！\n\nps：精美的分享ppt截图，容我明年再补上。\n\n\n","source":"_posts/fontend-share-10.md","raw":"---\ntitle: 分享会直播第十弹之年末双重分享\ndate: 2016-12-30 23:00\ntags: [FE,Share,Gossip]\ncategory: 分享会直播\nauthor: cynthia\n---\n细心的朋友可能会问，第九弹在哪？怎么直接跳到第十弹了？只想说，在写本文时，它还在coco的脑海里。\n\n2016年就剩最后一天了！！！你2016的小(f)小(l)目(a)标(g)都实现了吗（微信脸），反正我是没实现，但...我们的FUTU-FE团队的2016年的分享会完美的结束啦～而且为感谢大家今年对我们的支持，这次分享双量放送，直接奉上两场分享～\n<!--more-->\n\n本次分享是由帅哥(jin)与美女(linda)分享“重构”与“css实战”，听得太认真了，都没有好好拍照，为了让你们有继续阅读的动力，先放上jin哥哥的帅照一张，希望你们看在jin的帅颜的份上，将文章看到最后吧（感谢！）\n![图片](/images/share/10-1.jpeg)\n\njin哥哥通过介绍什么是重构，重构的风险，为什么重构，什么时候重构等等方面给我们讲述了重构的事儿，在没听分享前，总觉得重构离我很远，但听完jin哥哥的分享之后，发现重构其实离我们并不远，平时要多看看自己的代码，多想想，多改改。不能辜负jin哥哥精美的ppt啊！\n\n再聊到重构后，不知怎么的，话题就带到了注释的问题上了，经过激烈的讨论之后，得出的结论是=>注释一定要写。所以啊，在写完代码之后，写上个注释，也算是个“重构”吧～“重构”就在我们身边！\n\n一分钟寂静后。。。\n\n接下来就轮到linda姐姐分享她多年在css中踩过的坑。能填坑的实战经验都是精华啊，所以大家要集中精神啦！\n\nlinda姐姐根据自己的经验，对`margin`重叠，`margin`百分比，`nth-child`与`nth-of-type`的区别，元素隐藏等常见的坑进行了分析与实例演示，并给出了填坑方法。\n\n在linda姐姐分享的过程中，young哥哥抛出了问题，放出来供大家思考吧～问题是=>哪些css属性使用百分比为值的时候是起效的，又是如何起效的（语文不好，意思大概是这样吧...tips:不知道的话，可以去翻翻young哥的github或者博客，应该有的）\n\n所以本次直播到此为止？？？？怎么可能！！！\n\n不知道大家说到年末，想到的是啥？反正我看到最多的是“总结”。套句rick帅哥说的话=>\"生活的意思不在于枚举，而是总结\"  所以在2016年的最后一次分享，怎么少得了总结了，所以，后面就有toobug（八哥）登场，给我们总结了2016年我们前端团队做了啥，2017年要做啥。（感触最深的是，幸好我是15年过面试的，哈哈）。\n\n好了，2016年的最后一次分享直播真的进入尾声了，感谢大家这半年对我们团队的支持～\n\n最后的最后，在这里立个2017年的flag！！=> 做一次不用toobug总结救场的分享会！\n\nps：精美的分享ppt截图，容我明年再补上。\n\n\n","slug":"fontend-share-10","published":1,"updated":"2017-12-01T08:50:00.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknk8003hjxs1w1vm0h9g","content":"<p>细心的朋友可能会问，第九弹在哪？怎么直接跳到第十弹了？只想说，在写本文时，它还在coco的脑海里。</p>\n<p>2016年就剩最后一天了！！！你2016的小(f)小(l)目(a)标(g)都实现了吗（微信脸），反正我是没实现，但…我们的FUTU-FE团队的2016年的分享会完美的结束啦～而且为感谢大家今年对我们的支持，这次分享双量放送，直接奉上两场分享～<br><a id=\"more\"></a></p>\n<p>本次分享是由帅哥(jin)与美女(linda)分享“重构”与“css实战”，听得太认真了，都没有好好拍照，为了让你们有继续阅读的动力，先放上jin哥哥的帅照一张，希望你们看在jin的帅颜的份上，将文章看到最后吧（感谢！）<br><img src=\"/images/share/10-1.jpeg\" alt=\"图片\"></p>\n<p>jin哥哥通过介绍什么是重构，重构的风险，为什么重构，什么时候重构等等方面给我们讲述了重构的事儿，在没听分享前，总觉得重构离我很远，但听完jin哥哥的分享之后，发现重构其实离我们并不远，平时要多看看自己的代码，多想想，多改改。不能辜负jin哥哥精美的ppt啊！</p>\n<p>再聊到重构后，不知怎么的，话题就带到了注释的问题上了，经过激烈的讨论之后，得出的结论是=&gt;注释一定要写。所以啊，在写完代码之后，写上个注释，也算是个“重构”吧～“重构”就在我们身边！</p>\n<p>一分钟寂静后。。。</p>\n<p>接下来就轮到linda姐姐分享她多年在css中踩过的坑。能填坑的实战经验都是精华啊，所以大家要集中精神啦！</p>\n<p>linda姐姐根据自己的经验，对<code>margin</code>重叠，<code>margin</code>百分比，<code>nth-child</code>与<code>nth-of-type</code>的区别，元素隐藏等常见的坑进行了分析与实例演示，并给出了填坑方法。</p>\n<p>在linda姐姐分享的过程中，young哥哥抛出了问题，放出来供大家思考吧～问题是=&gt;哪些css属性使用百分比为值的时候是起效的，又是如何起效的（语文不好，意思大概是这样吧…tips:不知道的话，可以去翻翻young哥的github或者博客，应该有的）</p>\n<p>所以本次直播到此为止？？？？怎么可能！！！</p>\n<p>不知道大家说到年末，想到的是啥？反正我看到最多的是“总结”。套句rick帅哥说的话=&gt;”生活的意思不在于枚举，而是总结”  所以在2016年的最后一次分享，怎么少得了总结了，所以，后面就有toobug（八哥）登场，给我们总结了2016年我们前端团队做了啥，2017年要做啥。（感触最深的是，幸好我是15年过面试的，哈哈）。</p>\n<p>好了，2016年的最后一次分享直播真的进入尾声了，感谢大家这半年对我们团队的支持～</p>\n<p>最后的最后，在这里立个2017年的flag！！=&gt; 做一次不用toobug总结救场的分享会！</p>\n<p>ps：精美的分享ppt截图，容我明年再补上。</p>\n","site":{"data":{}},"excerpt":"<p>细心的朋友可能会问，第九弹在哪？怎么直接跳到第十弹了？只想说，在写本文时，它还在coco的脑海里。</p>\n<p>2016年就剩最后一天了！！！你2016的小(f)小(l)目(a)标(g)都实现了吗（微信脸），反正我是没实现，但…我们的FUTU-FE团队的2016年的分享会完美的结束啦～而且为感谢大家今年对我们的支持，这次分享双量放送，直接奉上两场分享～<br>","more":"</p>\n<p>本次分享是由帅哥(jin)与美女(linda)分享“重构”与“css实战”，听得太认真了，都没有好好拍照，为了让你们有继续阅读的动力，先放上jin哥哥的帅照一张，希望你们看在jin的帅颜的份上，将文章看到最后吧（感谢！）<br><img src=\"/images/share/10-1.jpeg\" alt=\"图片\"></p>\n<p>jin哥哥通过介绍什么是重构，重构的风险，为什么重构，什么时候重构等等方面给我们讲述了重构的事儿，在没听分享前，总觉得重构离我很远，但听完jin哥哥的分享之后，发现重构其实离我们并不远，平时要多看看自己的代码，多想想，多改改。不能辜负jin哥哥精美的ppt啊！</p>\n<p>再聊到重构后，不知怎么的，话题就带到了注释的问题上了，经过激烈的讨论之后，得出的结论是=&gt;注释一定要写。所以啊，在写完代码之后，写上个注释，也算是个“重构”吧～“重构”就在我们身边！</p>\n<p>一分钟寂静后。。。</p>\n<p>接下来就轮到linda姐姐分享她多年在css中踩过的坑。能填坑的实战经验都是精华啊，所以大家要集中精神啦！</p>\n<p>linda姐姐根据自己的经验，对<code>margin</code>重叠，<code>margin</code>百分比，<code>nth-child</code>与<code>nth-of-type</code>的区别，元素隐藏等常见的坑进行了分析与实例演示，并给出了填坑方法。</p>\n<p>在linda姐姐分享的过程中，young哥哥抛出了问题，放出来供大家思考吧～问题是=&gt;哪些css属性使用百分比为值的时候是起效的，又是如何起效的（语文不好，意思大概是这样吧…tips:不知道的话，可以去翻翻young哥的github或者博客，应该有的）</p>\n<p>所以本次直播到此为止？？？？怎么可能！！！</p>\n<p>不知道大家说到年末，想到的是啥？反正我看到最多的是“总结”。套句rick帅哥说的话=&gt;”生活的意思不在于枚举，而是总结”  所以在2016年的最后一次分享，怎么少得了总结了，所以，后面就有toobug（八哥）登场，给我们总结了2016年我们前端团队做了啥，2017年要做啥。（感触最深的是，幸好我是15年过面试的，哈哈）。</p>\n<p>好了，2016年的最后一次分享直播真的进入尾声了，感谢大家这半年对我们团队的支持～</p>\n<p>最后的最后，在这里立个2017年的flag！！=&gt; 做一次不用toobug总结救场的分享会！</p>\n<p>ps：精美的分享ppt截图，容我明年再补上。</p>"},{"title":"文件hash作为静态资源版本组件的改进-gulp-rev-hash3","date":"2016-11-02T02:00:00.000Z","author":"AlanZhang","_content":"\n## 背景\n为了解决项目中js，css等静态资源的缓存，会在指定的js，css标签后加上hash值作为版本号，只有文件内容改变，作为版本号的hash值才会改变；最初使用的是gulp-rev-hash组件，但是项目中的静态资源多数都使用了CDN来加速，gulp-rev-hash在计算文件hash值时无法获取远程文件的hash值,于是fork了原组件的代码并做了改进和优化，对外发布为gulp-rev-hash3。\n\n**特性**:\n正则匹配出html文件中的css和js路径，根据其文件内容计算出hash值作为版本号.如：\n```\n<!-- rev-hash -->\n<link rel=\"stylesheet\" href=\"main.min.css?v=9d58b7441d92130f545778e418d1317d\">\n<!-- end -->\n```\n\n> 由于项目打包需求，在已有npm gulp-rev-hash 组件基础上进行了扩展和优化！\n> Fork 至 https://github.com/outluch/gulp-rev-hash.git\n\n## 改进\n1. 为js，css加上文件hash值作为版本号，对cdn引用的文件仍然可以进行计算hash值；\n2. 保留script标签中的其他属性值不改变；\n3. 兼容src和href的单引号和双引号包裹；\n4. 自动检测代码使用的换行符\n\n<!--more-->\n\n## 安装\n\n```\nnpm install gulp-rev-hash3\n```\n\n## 原理\n\n- 原理：正则匹配出html文件中的css和js路径，根据其文件内容计算出hash值作为版本号；\n- 具体实现思路：\n    1. 先根据<!-- end -->将html拆分成N段；\n    2. 对1-N的每一段再根据<!-- rev-hash -->进行拆分，得到2段，第一段为<!-- rev-hash -->前的内容，第二段为包含script和link标签的片段；\n    3. 将包含script和link标签的片段进行正则匹配得到其路径，并根据其路径读取其内容从而计算出hash值，作为其版本号，重新得到script和link标签片段；\n    4. 最后将各段重新拼接为完整的html。\n\n- 意义：根据静态文件内容来计算其hash，只有在内容改变时，其hash值才会改变，这样，在缓存有效期内，客户端不会再次下载该静态资源，也减轻服务端压力，同时加快渲染提升了用户体验。\n\n\n## 实例\n\n### Default\n\n默认情况下，打包时，node以gulpfile所在目录为当前目录，然后根据script及link标签中的路径来读取文件，如果script及link设置的路径与gulpfile不在同一目录，则需要配置assetsDir，即静态资源所在目录，读取文件时，会以assetsDir+ js/css path作为路径来读取。\n\n```js\nvar gulp = require('gulp');\nvar revHash = require('gulp-rev-hash3');\n\ngulp.task('rev-hash', function () {\n    return gulp.src('test/*.html')\n        .pipe(revHash({\n            assetsDir: 'test',\n        }))\n        .pipe(gulp.dest('test'));\n});\n```\n\n#### Input:\n\n```html\n<!-- rev-hash -->\n<link rel=\"stylesheet\" href=\"main.min.css\">\n<!-- end -->\n\n<!-- rev-hash -->\n<script src=\"abc.js\"></script>\n<script src=\"def.js\"></script>\n<!-- end -->\n```\n\n#### Output:\n\n```html\n<!-- rev-hash -->\n<link rel=\"stylesheet\" href=\"main.min.css?v=9d58b7441d92130f545778e418d1317d\">\n<!-- end -->\n\n<!-- rev-hash -->\n<script src=\"abc.js?v=0401f2bda539bac50b0378d799c2b64e\"></script>\n<script src=\"def.js?v=e478ca95198c5a901c52f7a0f91a5d00\"></script>\n<!-- end -->\n```\n\n### 静态文件为CDN或者域 的方式（CDN对应目录必须为当前项目可访问的目录）\n\n在demo项目中，以gulp-rev-hash3为项目目录，以gulpfile为基准，则项目的目录为\"./\"，假设需要配置域名cdn.xxxx.com 对应 test目录，则对应的域名配置为\n```\n{\n    domain:\"cdn.xxxx.com\",\n    path:\"test\"\n}\n```\n\n在读取静态资源时，node会以 projectPath + domain path + js/css path 作为路径来读取，此时不受assetsDir的影响；\n\n其打包配置为：\n\n```\nvar gulp = require('gulp');\nvar rev = require('./index');\n\ngulp.task('test', function() {\n    return gulp.src('test/*.html')\n        .pipe(rev({\n            assetsDir: 'test',\n            remotePath:[{\n                domain:\"cdn.xxxx.com\",\n                path:\"test\"\n            }],\n            projectPath:\"./\"\n        }))\n        .pipe(gulp.dest('test'));\n});\n\n```\n\n#### Input\n\n```\n<!-- rev-hash -->\n<link rel=\"stylesheet\" href=\"main.min2.css\"/>\n<link rel=\"stylesheet\" href=\"//cdn.xxxx.com/main.min2.css\"/>\n<!-- end -->\n\n<!-- rev-hash -->\n<script src=\"abc.js\"></script>\n<script src=\"//cdn.xxxx.com/def.js\"></script>\n<!-- end -->\n```\n\n#### Output\n\n```\n<!-- rev-hash -->\n<link rel=\"stylesheet\" href=\"main.min2.css?v=aa4488642be0a613ad4e840e9617ee48\"/>\n<link rel=\"stylesheet\" href=\"//cdn.xxxx.com/main.min2.css?v=aa4488642be0a613ad4e840e9617ee48\"/>\n<!-- end -->\n\n<!-- rev-hash -->\n<script src=\"abc.js?v=9c811ea8215aeaac0efff4fae71a9022\"></script>\n<script src=\"//cdn.xxxx.com/def.js?v=e5803321a29f976103521afa380a5b52\"></script>\n<!-- end -->\n```\n\n## API参数\n\n示例：\n```\nassetsDir: 'test',\nremotePath:[{\n    domain:\"cdn.xxxx.com\",\n    path:\"test\"\n}],\nprojectPath:\"./\"\n```\n\n说明：\n\n|参数| 说明 | 默认值 |\n|---|---|---|\n|assetsDir|相对于gulpfile文件，html中引用的js，css资源的路径，即以gulpfile所在目录 为起点，assetsDir+script.src能找到对应的js|\"\"|\n|remotePath|域名对应文件目录|无|\n|projectPath | 相对于gulpfile，项目目录地址，或者理解为配置domain path时，path所在目录，即以gulpfile所在目录 为起点，projectPath + domain path +script.src能找到对应的js |../，gulpfile上一级|\n\n\n## 局限\n\n由于计算hash值需要能读取让node读取到其二进制文件，需保证以当前gulpfile所在目录为起点能访问到需要加版本号的静态资源文件（css,js）;\n\n原文发表于[https://github.com/AlanZhang001/gulp-rev-hash3](https://github.com/AlanZhang001/gulp-rev-hash3)","source":"_posts/gulp-rev-hash.md","raw":"---\ntitle: 文件hash作为静态资源版本组件的改进-gulp-rev-hash3\ndate: 2016-11-02 10:00\ntags: [gulp-rev-hash3]\ncategory: 技术预研\nauthor: AlanZhang\n---\n\n## 背景\n为了解决项目中js，css等静态资源的缓存，会在指定的js，css标签后加上hash值作为版本号，只有文件内容改变，作为版本号的hash值才会改变；最初使用的是gulp-rev-hash组件，但是项目中的静态资源多数都使用了CDN来加速，gulp-rev-hash在计算文件hash值时无法获取远程文件的hash值,于是fork了原组件的代码并做了改进和优化，对外发布为gulp-rev-hash3。\n\n**特性**:\n正则匹配出html文件中的css和js路径，根据其文件内容计算出hash值作为版本号.如：\n```\n<!-- rev-hash -->\n<link rel=\"stylesheet\" href=\"main.min.css?v=9d58b7441d92130f545778e418d1317d\">\n<!-- end -->\n```\n\n> 由于项目打包需求，在已有npm gulp-rev-hash 组件基础上进行了扩展和优化！\n> Fork 至 https://github.com/outluch/gulp-rev-hash.git\n\n## 改进\n1. 为js，css加上文件hash值作为版本号，对cdn引用的文件仍然可以进行计算hash值；\n2. 保留script标签中的其他属性值不改变；\n3. 兼容src和href的单引号和双引号包裹；\n4. 自动检测代码使用的换行符\n\n<!--more-->\n\n## 安装\n\n```\nnpm install gulp-rev-hash3\n```\n\n## 原理\n\n- 原理：正则匹配出html文件中的css和js路径，根据其文件内容计算出hash值作为版本号；\n- 具体实现思路：\n    1. 先根据<!-- end -->将html拆分成N段；\n    2. 对1-N的每一段再根据<!-- rev-hash -->进行拆分，得到2段，第一段为<!-- rev-hash -->前的内容，第二段为包含script和link标签的片段；\n    3. 将包含script和link标签的片段进行正则匹配得到其路径，并根据其路径读取其内容从而计算出hash值，作为其版本号，重新得到script和link标签片段；\n    4. 最后将各段重新拼接为完整的html。\n\n- 意义：根据静态文件内容来计算其hash，只有在内容改变时，其hash值才会改变，这样，在缓存有效期内，客户端不会再次下载该静态资源，也减轻服务端压力，同时加快渲染提升了用户体验。\n\n\n## 实例\n\n### Default\n\n默认情况下，打包时，node以gulpfile所在目录为当前目录，然后根据script及link标签中的路径来读取文件，如果script及link设置的路径与gulpfile不在同一目录，则需要配置assetsDir，即静态资源所在目录，读取文件时，会以assetsDir+ js/css path作为路径来读取。\n\n```js\nvar gulp = require('gulp');\nvar revHash = require('gulp-rev-hash3');\n\ngulp.task('rev-hash', function () {\n    return gulp.src('test/*.html')\n        .pipe(revHash({\n            assetsDir: 'test',\n        }))\n        .pipe(gulp.dest('test'));\n});\n```\n\n#### Input:\n\n```html\n<!-- rev-hash -->\n<link rel=\"stylesheet\" href=\"main.min.css\">\n<!-- end -->\n\n<!-- rev-hash -->\n<script src=\"abc.js\"></script>\n<script src=\"def.js\"></script>\n<!-- end -->\n```\n\n#### Output:\n\n```html\n<!-- rev-hash -->\n<link rel=\"stylesheet\" href=\"main.min.css?v=9d58b7441d92130f545778e418d1317d\">\n<!-- end -->\n\n<!-- rev-hash -->\n<script src=\"abc.js?v=0401f2bda539bac50b0378d799c2b64e\"></script>\n<script src=\"def.js?v=e478ca95198c5a901c52f7a0f91a5d00\"></script>\n<!-- end -->\n```\n\n### 静态文件为CDN或者域 的方式（CDN对应目录必须为当前项目可访问的目录）\n\n在demo项目中，以gulp-rev-hash3为项目目录，以gulpfile为基准，则项目的目录为\"./\"，假设需要配置域名cdn.xxxx.com 对应 test目录，则对应的域名配置为\n```\n{\n    domain:\"cdn.xxxx.com\",\n    path:\"test\"\n}\n```\n\n在读取静态资源时，node会以 projectPath + domain path + js/css path 作为路径来读取，此时不受assetsDir的影响；\n\n其打包配置为：\n\n```\nvar gulp = require('gulp');\nvar rev = require('./index');\n\ngulp.task('test', function() {\n    return gulp.src('test/*.html')\n        .pipe(rev({\n            assetsDir: 'test',\n            remotePath:[{\n                domain:\"cdn.xxxx.com\",\n                path:\"test\"\n            }],\n            projectPath:\"./\"\n        }))\n        .pipe(gulp.dest('test'));\n});\n\n```\n\n#### Input\n\n```\n<!-- rev-hash -->\n<link rel=\"stylesheet\" href=\"main.min2.css\"/>\n<link rel=\"stylesheet\" href=\"//cdn.xxxx.com/main.min2.css\"/>\n<!-- end -->\n\n<!-- rev-hash -->\n<script src=\"abc.js\"></script>\n<script src=\"//cdn.xxxx.com/def.js\"></script>\n<!-- end -->\n```\n\n#### Output\n\n```\n<!-- rev-hash -->\n<link rel=\"stylesheet\" href=\"main.min2.css?v=aa4488642be0a613ad4e840e9617ee48\"/>\n<link rel=\"stylesheet\" href=\"//cdn.xxxx.com/main.min2.css?v=aa4488642be0a613ad4e840e9617ee48\"/>\n<!-- end -->\n\n<!-- rev-hash -->\n<script src=\"abc.js?v=9c811ea8215aeaac0efff4fae71a9022\"></script>\n<script src=\"//cdn.xxxx.com/def.js?v=e5803321a29f976103521afa380a5b52\"></script>\n<!-- end -->\n```\n\n## API参数\n\n示例：\n```\nassetsDir: 'test',\nremotePath:[{\n    domain:\"cdn.xxxx.com\",\n    path:\"test\"\n}],\nprojectPath:\"./\"\n```\n\n说明：\n\n|参数| 说明 | 默认值 |\n|---|---|---|\n|assetsDir|相对于gulpfile文件，html中引用的js，css资源的路径，即以gulpfile所在目录 为起点，assetsDir+script.src能找到对应的js|\"\"|\n|remotePath|域名对应文件目录|无|\n|projectPath | 相对于gulpfile，项目目录地址，或者理解为配置domain path时，path所在目录，即以gulpfile所在目录 为起点，projectPath + domain path +script.src能找到对应的js |../，gulpfile上一级|\n\n\n## 局限\n\n由于计算hash值需要能读取让node读取到其二进制文件，需保证以当前gulpfile所在目录为起点能访问到需要加版本号的静态资源文件（css,js）;\n\n原文发表于[https://github.com/AlanZhang001/gulp-rev-hash3](https://github.com/AlanZhang001/gulp-rev-hash3)","slug":"gulp-rev-hash","published":1,"updated":"2017-12-01T08:50:00.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknka003kjxs194on0ry4","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>为了解决项目中js，css等静态资源的缓存，会在指定的js，css标签后加上hash值作为版本号，只有文件内容改变，作为版本号的hash值才会改变；最初使用的是gulp-rev-hash组件，但是项目中的静态资源多数都使用了CDN来加速，gulp-rev-hash在计算文件hash值时无法获取远程文件的hash值,于是fork了原组件的代码并做了改进和优化，对外发布为gulp-rev-hash3。</p>\n<p><strong>特性</strong>:<br>正则匹配出html文件中的css和js路径，根据其文件内容计算出hash值作为版本号.如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- rev-hash --&gt;</span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;main.min.css?v=9d58b7441d92130f545778e418d1317d&quot;&gt;</span><br><span class=\"line\">&lt;!-- end --&gt;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>由于项目打包需求，在已有npm gulp-rev-hash 组件基础上进行了扩展和优化！<br>Fork 至 <a href=\"https://github.com/outluch/gulp-rev-hash.git\" target=\"_blank\" rel=\"noopener\">https://github.com/outluch/gulp-rev-hash.git</a></p>\n</blockquote>\n<h2 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h2><ol>\n<li>为js，css加上文件hash值作为版本号，对cdn引用的文件仍然可以进行计算hash值；</li>\n<li>保留script标签中的其他属性值不改变；</li>\n<li>兼容src和href的单引号和双引号包裹；</li>\n<li>自动检测代码使用的换行符</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-rev-hash3</span><br></pre></td></tr></table></figure>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><ul>\n<li>原理：正则匹配出html文件中的css和js路径，根据其文件内容计算出hash值作为版本号；</li>\n<li><p>具体实现思路：</p>\n<ol>\n<li>先根据<!-- end -->将html拆分成N段；</li>\n<li>对1-N的每一段再根据<!-- rev-hash -->进行拆分，得到2段，第一段为<!-- rev-hash -->前的内容，第二段为包含script和link标签的片段；</li>\n<li>将包含script和link标签的片段进行正则匹配得到其路径，并根据其路径读取其内容从而计算出hash值，作为其版本号，重新得到script和link标签片段；</li>\n<li>最后将各段重新拼接为完整的html。</li>\n</ol>\n</li>\n<li><p>意义：根据静态文件内容来计算其hash，只有在内容改变时，其hash值才会改变，这样，在缓存有效期内，客户端不会再次下载该静态资源，也减轻服务端压力，同时加快渲染提升了用户体验。</p>\n</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"Default\"><a href=\"#Default\" class=\"headerlink\" title=\"Default\"></a>Default</h3><p>默认情况下，打包时，node以gulpfile所在目录为当前目录，然后根据script及link标签中的路径来读取文件，如果script及link设置的路径与gulpfile不在同一目录，则需要配置assetsDir，即静态资源所在目录，读取文件时，会以assetsDir+ js/css path作为路径来读取。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> revHash = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rev-hash3'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'rev-hash'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'test/*.html'</span>)</span><br><span class=\"line\">        .pipe(revHash(&#123;</span><br><span class=\"line\">            assetsDir: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'test'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input:\"></a>Input:</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- rev-hash --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.min.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- end --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- rev-hash --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"abc.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"def.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- end --&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output:\"></a>Output:</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- rev-hash --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.min.css?v=9d58b7441d92130f545778e418d1317d\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- end --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- rev-hash --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"abc.js?v=0401f2bda539bac50b0378d799c2b64e\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"def.js?v=e478ca95198c5a901c52f7a0f91a5d00\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- end --&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"静态文件为CDN或者域-的方式（CDN对应目录必须为当前项目可访问的目录）\"><a href=\"#静态文件为CDN或者域-的方式（CDN对应目录必须为当前项目可访问的目录）\" class=\"headerlink\" title=\"静态文件为CDN或者域 的方式（CDN对应目录必须为当前项目可访问的目录）\"></a>静态文件为CDN或者域 的方式（CDN对应目录必须为当前项目可访问的目录）</h3><p>在demo项目中，以gulp-rev-hash3为项目目录，以gulpfile为基准，则项目的目录为”./“，假设需要配置域名cdn.xxxx.com 对应 test目录，则对应的域名配置为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    domain:&quot;cdn.xxxx.com&quot;,</span><br><span class=\"line\">    path:&quot;test&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在读取静态资源时，node会以 projectPath + domain path + js/css path 作为路径来读取，此时不受assetsDir的影响；</p>\n<p>其打包配置为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(&apos;gulp&apos;);</span><br><span class=\"line\">var rev = require(&apos;./index&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(&apos;test&apos;, function() &#123;</span><br><span class=\"line\">    return gulp.src(&apos;test/*.html&apos;)</span><br><span class=\"line\">        .pipe(rev(&#123;</span><br><span class=\"line\">            assetsDir: &apos;test&apos;,</span><br><span class=\"line\">            remotePath:[&#123;</span><br><span class=\"line\">                domain:&quot;cdn.xxxx.com&quot;,</span><br><span class=\"line\">                path:&quot;test&quot;</span><br><span class=\"line\">            &#125;],</span><br><span class=\"line\">            projectPath:&quot;./&quot;</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(&apos;test&apos;));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Input-1\"><a href=\"#Input-1\" class=\"headerlink\" title=\"Input\"></a>Input</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- rev-hash --&gt;</span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;main.min2.css&quot;/&gt;</span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.xxxx.com/main.min2.css&quot;/&gt;</span><br><span class=\"line\">&lt;!-- end --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- rev-hash --&gt;</span><br><span class=\"line\">&lt;script src=&quot;abc.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;//cdn.xxxx.com/def.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- end --&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Output-1\"><a href=\"#Output-1\" class=\"headerlink\" title=\"Output\"></a>Output</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- rev-hash --&gt;</span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;main.min2.css?v=aa4488642be0a613ad4e840e9617ee48&quot;/&gt;</span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.xxxx.com/main.min2.css?v=aa4488642be0a613ad4e840e9617ee48&quot;/&gt;</span><br><span class=\"line\">&lt;!-- end --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- rev-hash --&gt;</span><br><span class=\"line\">&lt;script src=&quot;abc.js?v=9c811ea8215aeaac0efff4fae71a9022&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;//cdn.xxxx.com/def.js?v=e5803321a29f976103521afa380a5b52&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- end --&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"API参数\"><a href=\"#API参数\" class=\"headerlink\" title=\"API参数\"></a>API参数</h2><p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assetsDir: &apos;test&apos;,</span><br><span class=\"line\">remotePath:[&#123;</span><br><span class=\"line\">    domain:&quot;cdn.xxxx.com&quot;,</span><br><span class=\"line\">    path:&quot;test&quot;</span><br><span class=\"line\">&#125;],</span><br><span class=\"line\">projectPath:&quot;./&quot;</span><br></pre></td></tr></table></figure></p>\n<p>说明：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>assetsDir</td>\n<td>相对于gulpfile文件，html中引用的js，css资源的路径，即以gulpfile所在目录 为起点，assetsDir+script.src能找到对应的js</td>\n<td>“”</td>\n</tr>\n<tr>\n<td>remotePath</td>\n<td>域名对应文件目录</td>\n<td>无</td>\n</tr>\n<tr>\n<td>projectPath</td>\n<td>相对于gulpfile，项目目录地址，或者理解为配置domain path时，path所在目录，即以gulpfile所在目录 为起点，projectPath + domain path +script.src能找到对应的js</td>\n<td>../，gulpfile上一级</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"局限\"><a href=\"#局限\" class=\"headerlink\" title=\"局限\"></a>局限</h2><p>由于计算hash值需要能读取让node读取到其二进制文件，需保证以当前gulpfile所在目录为起点能访问到需要加版本号的静态资源文件（css,js）;</p>\n<p>原文发表于<a href=\"https://github.com/AlanZhang001/gulp-rev-hash3\" target=\"_blank\" rel=\"noopener\">https://github.com/AlanZhang001/gulp-rev-hash3</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>为了解决项目中js，css等静态资源的缓存，会在指定的js，css标签后加上hash值作为版本号，只有文件内容改变，作为版本号的hash值才会改变；最初使用的是gulp-rev-hash组件，但是项目中的静态资源多数都使用了CDN来加速，gulp-rev-hash在计算文件hash值时无法获取远程文件的hash值,于是fork了原组件的代码并做了改进和优化，对外发布为gulp-rev-hash3。</p>\n<p><strong>特性</strong>:<br>正则匹配出html文件中的css和js路径，根据其文件内容计算出hash值作为版本号.如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- rev-hash --&gt;</span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;main.min.css?v=9d58b7441d92130f545778e418d1317d&quot;&gt;</span><br><span class=\"line\">&lt;!-- end --&gt;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>由于项目打包需求，在已有npm gulp-rev-hash 组件基础上进行了扩展和优化！<br>Fork 至 <a href=\"https://github.com/outluch/gulp-rev-hash.git\" target=\"_blank\" rel=\"noopener\">https://github.com/outluch/gulp-rev-hash.git</a></p>\n</blockquote>\n<h2 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h2><ol>\n<li>为js，css加上文件hash值作为版本号，对cdn引用的文件仍然可以进行计算hash值；</li>\n<li>保留script标签中的其他属性值不改变；</li>\n<li>兼容src和href的单引号和双引号包裹；</li>\n<li>自动检测代码使用的换行符</li>\n</ol>","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-rev-hash3</span><br></pre></td></tr></table></figure>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><ul>\n<li>原理：正则匹配出html文件中的css和js路径，根据其文件内容计算出hash值作为版本号；</li>\n<li><p>具体实现思路：</p>\n<ol>\n<li>先根据<!-- end -->将html拆分成N段；</li>\n<li>对1-N的每一段再根据<!-- rev-hash -->进行拆分，得到2段，第一段为<!-- rev-hash -->前的内容，第二段为包含script和link标签的片段；</li>\n<li>将包含script和link标签的片段进行正则匹配得到其路径，并根据其路径读取其内容从而计算出hash值，作为其版本号，重新得到script和link标签片段；</li>\n<li>最后将各段重新拼接为完整的html。</li>\n</ol>\n</li>\n<li><p>意义：根据静态文件内容来计算其hash，只有在内容改变时，其hash值才会改变，这样，在缓存有效期内，客户端不会再次下载该静态资源，也减轻服务端压力，同时加快渲染提升了用户体验。</p>\n</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"Default\"><a href=\"#Default\" class=\"headerlink\" title=\"Default\"></a>Default</h3><p>默认情况下，打包时，node以gulpfile所在目录为当前目录，然后根据script及link标签中的路径来读取文件，如果script及link设置的路径与gulpfile不在同一目录，则需要配置assetsDir，即静态资源所在目录，读取文件时，会以assetsDir+ js/css path作为路径来读取。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> revHash = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rev-hash3'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'rev-hash'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'test/*.html'</span>)</span><br><span class=\"line\">        .pipe(revHash(&#123;</span><br><span class=\"line\">            assetsDir: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'test'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input:\"></a>Input:</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- rev-hash --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.min.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- end --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- rev-hash --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"abc.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"def.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- end --&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output:\"></a>Output:</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- rev-hash --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.min.css?v=9d58b7441d92130f545778e418d1317d\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- end --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- rev-hash --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"abc.js?v=0401f2bda539bac50b0378d799c2b64e\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"def.js?v=e478ca95198c5a901c52f7a0f91a5d00\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- end --&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"静态文件为CDN或者域-的方式（CDN对应目录必须为当前项目可访问的目录）\"><a href=\"#静态文件为CDN或者域-的方式（CDN对应目录必须为当前项目可访问的目录）\" class=\"headerlink\" title=\"静态文件为CDN或者域 的方式（CDN对应目录必须为当前项目可访问的目录）\"></a>静态文件为CDN或者域 的方式（CDN对应目录必须为当前项目可访问的目录）</h3><p>在demo项目中，以gulp-rev-hash3为项目目录，以gulpfile为基准，则项目的目录为”./“，假设需要配置域名cdn.xxxx.com 对应 test目录，则对应的域名配置为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    domain:&quot;cdn.xxxx.com&quot;,</span><br><span class=\"line\">    path:&quot;test&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在读取静态资源时，node会以 projectPath + domain path + js/css path 作为路径来读取，此时不受assetsDir的影响；</p>\n<p>其打包配置为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(&apos;gulp&apos;);</span><br><span class=\"line\">var rev = require(&apos;./index&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(&apos;test&apos;, function() &#123;</span><br><span class=\"line\">    return gulp.src(&apos;test/*.html&apos;)</span><br><span class=\"line\">        .pipe(rev(&#123;</span><br><span class=\"line\">            assetsDir: &apos;test&apos;,</span><br><span class=\"line\">            remotePath:[&#123;</span><br><span class=\"line\">                domain:&quot;cdn.xxxx.com&quot;,</span><br><span class=\"line\">                path:&quot;test&quot;</span><br><span class=\"line\">            &#125;],</span><br><span class=\"line\">            projectPath:&quot;./&quot;</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(&apos;test&apos;));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Input-1\"><a href=\"#Input-1\" class=\"headerlink\" title=\"Input\"></a>Input</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- rev-hash --&gt;</span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;main.min2.css&quot;/&gt;</span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.xxxx.com/main.min2.css&quot;/&gt;</span><br><span class=\"line\">&lt;!-- end --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- rev-hash --&gt;</span><br><span class=\"line\">&lt;script src=&quot;abc.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;//cdn.xxxx.com/def.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- end --&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Output-1\"><a href=\"#Output-1\" class=\"headerlink\" title=\"Output\"></a>Output</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- rev-hash --&gt;</span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;main.min2.css?v=aa4488642be0a613ad4e840e9617ee48&quot;/&gt;</span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.xxxx.com/main.min2.css?v=aa4488642be0a613ad4e840e9617ee48&quot;/&gt;</span><br><span class=\"line\">&lt;!-- end --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- rev-hash --&gt;</span><br><span class=\"line\">&lt;script src=&quot;abc.js?v=9c811ea8215aeaac0efff4fae71a9022&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;//cdn.xxxx.com/def.js?v=e5803321a29f976103521afa380a5b52&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- end --&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"API参数\"><a href=\"#API参数\" class=\"headerlink\" title=\"API参数\"></a>API参数</h2><p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assetsDir: &apos;test&apos;,</span><br><span class=\"line\">remotePath:[&#123;</span><br><span class=\"line\">    domain:&quot;cdn.xxxx.com&quot;,</span><br><span class=\"line\">    path:&quot;test&quot;</span><br><span class=\"line\">&#125;],</span><br><span class=\"line\">projectPath:&quot;./&quot;</span><br></pre></td></tr></table></figure></p>\n<p>说明：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>assetsDir</td>\n<td>相对于gulpfile文件，html中引用的js，css资源的路径，即以gulpfile所在目录 为起点，assetsDir+script.src能找到对应的js</td>\n<td>“”</td>\n</tr>\n<tr>\n<td>remotePath</td>\n<td>域名对应文件目录</td>\n<td>无</td>\n</tr>\n<tr>\n<td>projectPath</td>\n<td>相对于gulpfile，项目目录地址，或者理解为配置domain path时，path所在目录，即以gulpfile所在目录 为起点，projectPath + domain path +script.src能找到对应的js</td>\n<td>../，gulpfile上一级</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"局限\"><a href=\"#局限\" class=\"headerlink\" title=\"局限\"></a>局限</h2><p>由于计算hash值需要能读取让node读取到其二进制文件，需保证以当前gulpfile所在目录为起点能访问到需要加版本号的静态资源文件（css,js）;</p>\n<p>原文发表于<a href=\"https://github.com/AlanZhang001/gulp-rev-hash3\" target=\"_blank\" rel=\"noopener\">https://github.com/AlanZhang001/gulp-rev-hash3</a></p>"},{"title":"写在前面的简介","date":"2016-10-31T03:50:00.000Z","author":"Diandian","_content":"\n\n截止到今天，我刚好入职FUTU一年半的时间，收获满满，一句话也说不清楚，写在前面的一堆话主要是想介绍下目前我们的前端团队的小伙伴们，当然都是我眼里的他们。\n\nAlanzhang，大家都习惯叫他阿伦。一个90后、阳光青春、细心体贴的大男孩。他的特点有两个，一是认真，对于技术的钻研都是打破砂锅研究到底的态度；二是细心，别看他是个白白的小书生的样子，却有着非常细致的观察能力，都说细节决定成败，是个前途无量的小伙伴。PS：单身Boy一枚。\n\n<!--more-->\n\nAllen，一个90后、光吃不胖、幽默风趣的逗比小青年。我对他最大的印象就是女朋友总是很漂亮，哈哈。在我眼里他是个愿意追寻内心、随遇而安、乐观向上的人，跟他做朋友应该是件非常快乐的事情。\n\nCoco，第一次听说要入职一个叫coco的人，我立刻想到了，我曾经有个大7岁的性感姐姐，我经常喊她co妈，所以对于叫这个名字的人，都会不自觉多一些亲切感。毕业两年多，从厦门跳槽过来的计算机高材生，虽然看上去外表沉着冷静，实际上内心也是笑看云卷云舒，静观花开花落的生活态度，喜欢看小说。如果不是刚来深圳还不是太熟悉，应该也是个疯狂的姑娘。\n\nCynthia,由于入职那天大家就不知道要怎么喊她的英文名字，所以都亲切的喊她雪兴妹子。应届毕业生，一脸的呆萌和清纯，有着无限的好奇心，对于任何不懂不熟悉的东西都喜欢钻研学习。她的特点是身材好，单身也单纯，长相酷似小s，是我们web组的小s。\n\nElly，网名柚子，站在90后线上的傻呆姑娘，情商犯傻，智商超群的善良妹子。特点就是，自认为自己胖，每天都要健身跑步，观念就是吃饱了才能有力气减肥，工作方面，每次都是我不会，但最后会完成的很棒。单身未嫁，我希望她快点找个如意郎君。\n\nEvanyan, 最近入职的小鲜肉，说实话还没有过多的交流，还不是特别了解，希望以后能多多跟大家交流哦。\n\nJin，靖哥哥，大眼萌，有着一双炯炯有神的双眼皮大眼睛。从他入职那会，就被分到我们小组，是个代码写的想当靠谱的男孩，对于他的过去不是很了解，但是工作中是个热心肠，热衷于对技术的精钻。每次都是静静的坐在那，不参与女生们的八卦，但伸着耳朵在那听的自己偷笑的黄金单身汉。\n\nLee，大家喊他昊哥，css专家，也是公司的IT小助手，大家的电脑坏了，键盘坏了，鼠标坏了等都会找他，是公司的元老之一，有着一个幸福温暖的家庭，女儿长得胖乎乎的特别可爱，是个事业与爱情双丰收的成功男人。\n\nLinda，我常常喊她linda姐姐，虽然她只比我大一岁。是个做事认真、生活超级有规律、有着文静外表喜欢hello kitty的淑女，大家眼中的小富婆，哈哈，单身未嫁待娶。\n\nNick，光头强叔叔，NONO，不要以为是叔叔就是聪明绝顶之人，实际上他是个头发茂密的真正的90后成功人士，有着一个幸福的家庭，长的比他好看多了得女儿。印象中一直是个有问题问他，他都会知无不答的人，并且有着一语惊人的超凡能力。\n\nRick，FE第一帅，当然这是妹子们私下评出来的，不知道他老婆知道不。外表英俊潇洒，风流倜傥的前端大神vs后端大神。虽然是大神但并不冷酷，灰常的平易近人，这让单身的妹子们常感相见恨晚。\n\nTony，真正的老实人，虽然是大叔面孔，却是个实实在在的90后。工作认真，对父母孝顺有加，对同事也是极其爱护，我猜想他除了把工作做好之外，最大的愿望应该是找个有着共同语言和爱好的女盆友吧。\n\nToobug，标准的理工男，却有着超凡的音乐天赋，会不少乐器呢，我导师。导师桃李满天下，我应该是那个最不听话的坏孩子。导师是个非常注重细节，对自己要求严格，对别人亦是的人。虽然比我大一岁，却已是前端大神，我常常把他当成自己的长辈，不仅可以给予你工作学习上的指导，生活上也会给予你非常有帮助的意见和建议，是个全能型的全端工程师。\n\nYoung，长了一张乖乖脸，喜欢留一撮小胡子，喜欢沉浸在自己的代码世界里，但是有时候对人又是态度冷冷的，是个成功在组内前端转后端的榜样。特点就是刀子嘴豆腐心，有着少爷的内心，好像我们都会变成他的小丫鬟一样，但是好处是开玩笑从不生气，哈哈。\n\nDiandian,即本人，我一般这么介绍我自己，聪明伶俐活泼可爱，美丽与智慧集一身的美少女，你信吗？哈哈，曾被很多人说成风一样的女子，因为我走路快。其实大家常喊我点姨，我也不知道为啥，大概是因为我像他们妈妈的妹妹一样亲切吧，(⊙o⊙)…\n\n天哪，我居然找了半天没找到前端的单独合照，下面这张大家勉强看下哈，在我眼里，FE团队就像动物乌托邦，大家各有千秋️，相处和睦，互相帮助,共同进步。\n\n\n![合影](/images/share/1-1.jpg)\n","source":"_posts/share-brief-introduction.md","raw":"---\ntitle: 写在前面的简介\ndate: 2016-10-31 11:50\ntags: [FE,Share,Gossip]\ncategory: 分享会直播\nauthor: Diandian\n---\n\n\n截止到今天，我刚好入职FUTU一年半的时间，收获满满，一句话也说不清楚，写在前面的一堆话主要是想介绍下目前我们的前端团队的小伙伴们，当然都是我眼里的他们。\n\nAlanzhang，大家都习惯叫他阿伦。一个90后、阳光青春、细心体贴的大男孩。他的特点有两个，一是认真，对于技术的钻研都是打破砂锅研究到底的态度；二是细心，别看他是个白白的小书生的样子，却有着非常细致的观察能力，都说细节决定成败，是个前途无量的小伙伴。PS：单身Boy一枚。\n\n<!--more-->\n\nAllen，一个90后、光吃不胖、幽默风趣的逗比小青年。我对他最大的印象就是女朋友总是很漂亮，哈哈。在我眼里他是个愿意追寻内心、随遇而安、乐观向上的人，跟他做朋友应该是件非常快乐的事情。\n\nCoco，第一次听说要入职一个叫coco的人，我立刻想到了，我曾经有个大7岁的性感姐姐，我经常喊她co妈，所以对于叫这个名字的人，都会不自觉多一些亲切感。毕业两年多，从厦门跳槽过来的计算机高材生，虽然看上去外表沉着冷静，实际上内心也是笑看云卷云舒，静观花开花落的生活态度，喜欢看小说。如果不是刚来深圳还不是太熟悉，应该也是个疯狂的姑娘。\n\nCynthia,由于入职那天大家就不知道要怎么喊她的英文名字，所以都亲切的喊她雪兴妹子。应届毕业生，一脸的呆萌和清纯，有着无限的好奇心，对于任何不懂不熟悉的东西都喜欢钻研学习。她的特点是身材好，单身也单纯，长相酷似小s，是我们web组的小s。\n\nElly，网名柚子，站在90后线上的傻呆姑娘，情商犯傻，智商超群的善良妹子。特点就是，自认为自己胖，每天都要健身跑步，观念就是吃饱了才能有力气减肥，工作方面，每次都是我不会，但最后会完成的很棒。单身未嫁，我希望她快点找个如意郎君。\n\nEvanyan, 最近入职的小鲜肉，说实话还没有过多的交流，还不是特别了解，希望以后能多多跟大家交流哦。\n\nJin，靖哥哥，大眼萌，有着一双炯炯有神的双眼皮大眼睛。从他入职那会，就被分到我们小组，是个代码写的想当靠谱的男孩，对于他的过去不是很了解，但是工作中是个热心肠，热衷于对技术的精钻。每次都是静静的坐在那，不参与女生们的八卦，但伸着耳朵在那听的自己偷笑的黄金单身汉。\n\nLee，大家喊他昊哥，css专家，也是公司的IT小助手，大家的电脑坏了，键盘坏了，鼠标坏了等都会找他，是公司的元老之一，有着一个幸福温暖的家庭，女儿长得胖乎乎的特别可爱，是个事业与爱情双丰收的成功男人。\n\nLinda，我常常喊她linda姐姐，虽然她只比我大一岁。是个做事认真、生活超级有规律、有着文静外表喜欢hello kitty的淑女，大家眼中的小富婆，哈哈，单身未嫁待娶。\n\nNick，光头强叔叔，NONO，不要以为是叔叔就是聪明绝顶之人，实际上他是个头发茂密的真正的90后成功人士，有着一个幸福的家庭，长的比他好看多了得女儿。印象中一直是个有问题问他，他都会知无不答的人，并且有着一语惊人的超凡能力。\n\nRick，FE第一帅，当然这是妹子们私下评出来的，不知道他老婆知道不。外表英俊潇洒，风流倜傥的前端大神vs后端大神。虽然是大神但并不冷酷，灰常的平易近人，这让单身的妹子们常感相见恨晚。\n\nTony，真正的老实人，虽然是大叔面孔，却是个实实在在的90后。工作认真，对父母孝顺有加，对同事也是极其爱护，我猜想他除了把工作做好之外，最大的愿望应该是找个有着共同语言和爱好的女盆友吧。\n\nToobug，标准的理工男，却有着超凡的音乐天赋，会不少乐器呢，我导师。导师桃李满天下，我应该是那个最不听话的坏孩子。导师是个非常注重细节，对自己要求严格，对别人亦是的人。虽然比我大一岁，却已是前端大神，我常常把他当成自己的长辈，不仅可以给予你工作学习上的指导，生活上也会给予你非常有帮助的意见和建议，是个全能型的全端工程师。\n\nYoung，长了一张乖乖脸，喜欢留一撮小胡子，喜欢沉浸在自己的代码世界里，但是有时候对人又是态度冷冷的，是个成功在组内前端转后端的榜样。特点就是刀子嘴豆腐心，有着少爷的内心，好像我们都会变成他的小丫鬟一样，但是好处是开玩笑从不生气，哈哈。\n\nDiandian,即本人，我一般这么介绍我自己，聪明伶俐活泼可爱，美丽与智慧集一身的美少女，你信吗？哈哈，曾被很多人说成风一样的女子，因为我走路快。其实大家常喊我点姨，我也不知道为啥，大概是因为我像他们妈妈的妹妹一样亲切吧，(⊙o⊙)…\n\n天哪，我居然找了半天没找到前端的单独合照，下面这张大家勉强看下哈，在我眼里，FE团队就像动物乌托邦，大家各有千秋️，相处和睦，互相帮助,共同进步。\n\n\n![合影](/images/share/1-1.jpg)\n","slug":"share-brief-introduction","published":1,"updated":"2017-12-01T08:50:00.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknkb003njxs1ai6jg93f","content":"<p>截止到今天，我刚好入职FUTU一年半的时间，收获满满，一句话也说不清楚，写在前面的一堆话主要是想介绍下目前我们的前端团队的小伙伴们，当然都是我眼里的他们。</p>\n<p>Alanzhang，大家都习惯叫他阿伦。一个90后、阳光青春、细心体贴的大男孩。他的特点有两个，一是认真，对于技术的钻研都是打破砂锅研究到底的态度；二是细心，别看他是个白白的小书生的样子，却有着非常细致的观察能力，都说细节决定成败，是个前途无量的小伙伴。PS：单身Boy一枚。</p>\n<a id=\"more\"></a>\n<p>Allen，一个90后、光吃不胖、幽默风趣的逗比小青年。我对他最大的印象就是女朋友总是很漂亮，哈哈。在我眼里他是个愿意追寻内心、随遇而安、乐观向上的人，跟他做朋友应该是件非常快乐的事情。</p>\n<p>Coco，第一次听说要入职一个叫coco的人，我立刻想到了，我曾经有个大7岁的性感姐姐，我经常喊她co妈，所以对于叫这个名字的人，都会不自觉多一些亲切感。毕业两年多，从厦门跳槽过来的计算机高材生，虽然看上去外表沉着冷静，实际上内心也是笑看云卷云舒，静观花开花落的生活态度，喜欢看小说。如果不是刚来深圳还不是太熟悉，应该也是个疯狂的姑娘。</p>\n<p>Cynthia,由于入职那天大家就不知道要怎么喊她的英文名字，所以都亲切的喊她雪兴妹子。应届毕业生，一脸的呆萌和清纯，有着无限的好奇心，对于任何不懂不熟悉的东西都喜欢钻研学习。她的特点是身材好，单身也单纯，长相酷似小s，是我们web组的小s。</p>\n<p>Elly，网名柚子，站在90后线上的傻呆姑娘，情商犯傻，智商超群的善良妹子。特点就是，自认为自己胖，每天都要健身跑步，观念就是吃饱了才能有力气减肥，工作方面，每次都是我不会，但最后会完成的很棒。单身未嫁，我希望她快点找个如意郎君。</p>\n<p>Evanyan, 最近入职的小鲜肉，说实话还没有过多的交流，还不是特别了解，希望以后能多多跟大家交流哦。</p>\n<p>Jin，靖哥哥，大眼萌，有着一双炯炯有神的双眼皮大眼睛。从他入职那会，就被分到我们小组，是个代码写的想当靠谱的男孩，对于他的过去不是很了解，但是工作中是个热心肠，热衷于对技术的精钻。每次都是静静的坐在那，不参与女生们的八卦，但伸着耳朵在那听的自己偷笑的黄金单身汉。</p>\n<p>Lee，大家喊他昊哥，css专家，也是公司的IT小助手，大家的电脑坏了，键盘坏了，鼠标坏了等都会找他，是公司的元老之一，有着一个幸福温暖的家庭，女儿长得胖乎乎的特别可爱，是个事业与爱情双丰收的成功男人。</p>\n<p>Linda，我常常喊她linda姐姐，虽然她只比我大一岁。是个做事认真、生活超级有规律、有着文静外表喜欢hello kitty的淑女，大家眼中的小富婆，哈哈，单身未嫁待娶。</p>\n<p>Nick，光头强叔叔，NONO，不要以为是叔叔就是聪明绝顶之人，实际上他是个头发茂密的真正的90后成功人士，有着一个幸福的家庭，长的比他好看多了得女儿。印象中一直是个有问题问他，他都会知无不答的人，并且有着一语惊人的超凡能力。</p>\n<p>Rick，FE第一帅，当然这是妹子们私下评出来的，不知道他老婆知道不。外表英俊潇洒，风流倜傥的前端大神vs后端大神。虽然是大神但并不冷酷，灰常的平易近人，这让单身的妹子们常感相见恨晚。</p>\n<p>Tony，真正的老实人，虽然是大叔面孔，却是个实实在在的90后。工作认真，对父母孝顺有加，对同事也是极其爱护，我猜想他除了把工作做好之外，最大的愿望应该是找个有着共同语言和爱好的女盆友吧。</p>\n<p>Toobug，标准的理工男，却有着超凡的音乐天赋，会不少乐器呢，我导师。导师桃李满天下，我应该是那个最不听话的坏孩子。导师是个非常注重细节，对自己要求严格，对别人亦是的人。虽然比我大一岁，却已是前端大神，我常常把他当成自己的长辈，不仅可以给予你工作学习上的指导，生活上也会给予你非常有帮助的意见和建议，是个全能型的全端工程师。</p>\n<p>Young，长了一张乖乖脸，喜欢留一撮小胡子，喜欢沉浸在自己的代码世界里，但是有时候对人又是态度冷冷的，是个成功在组内前端转后端的榜样。特点就是刀子嘴豆腐心，有着少爷的内心，好像我们都会变成他的小丫鬟一样，但是好处是开玩笑从不生气，哈哈。</p>\n<p>Diandian,即本人，我一般这么介绍我自己，聪明伶俐活泼可爱，美丽与智慧集一身的美少女，你信吗？哈哈，曾被很多人说成风一样的女子，因为我走路快。其实大家常喊我点姨，我也不知道为啥，大概是因为我像他们妈妈的妹妹一样亲切吧，(⊙o⊙)…</p>\n<p>天哪，我居然找了半天没找到前端的单独合照，下面这张大家勉强看下哈，在我眼里，FE团队就像动物乌托邦，大家各有千秋️，相处和睦，互相帮助,共同进步。</p>\n<p><img src=\"/images/share/1-1.jpg\" alt=\"合影\"></p>\n","site":{"data":{}},"excerpt":"<p>截止到今天，我刚好入职FUTU一年半的时间，收获满满，一句话也说不清楚，写在前面的一堆话主要是想介绍下目前我们的前端团队的小伙伴们，当然都是我眼里的他们。</p>\n<p>Alanzhang，大家都习惯叫他阿伦。一个90后、阳光青春、细心体贴的大男孩。他的特点有两个，一是认真，对于技术的钻研都是打破砂锅研究到底的态度；二是细心，别看他是个白白的小书生的样子，却有着非常细致的观察能力，都说细节决定成败，是个前途无量的小伙伴。PS：单身Boy一枚。</p>","more":"<p>Allen，一个90后、光吃不胖、幽默风趣的逗比小青年。我对他最大的印象就是女朋友总是很漂亮，哈哈。在我眼里他是个愿意追寻内心、随遇而安、乐观向上的人，跟他做朋友应该是件非常快乐的事情。</p>\n<p>Coco，第一次听说要入职一个叫coco的人，我立刻想到了，我曾经有个大7岁的性感姐姐，我经常喊她co妈，所以对于叫这个名字的人，都会不自觉多一些亲切感。毕业两年多，从厦门跳槽过来的计算机高材生，虽然看上去外表沉着冷静，实际上内心也是笑看云卷云舒，静观花开花落的生活态度，喜欢看小说。如果不是刚来深圳还不是太熟悉，应该也是个疯狂的姑娘。</p>\n<p>Cynthia,由于入职那天大家就不知道要怎么喊她的英文名字，所以都亲切的喊她雪兴妹子。应届毕业生，一脸的呆萌和清纯，有着无限的好奇心，对于任何不懂不熟悉的东西都喜欢钻研学习。她的特点是身材好，单身也单纯，长相酷似小s，是我们web组的小s。</p>\n<p>Elly，网名柚子，站在90后线上的傻呆姑娘，情商犯傻，智商超群的善良妹子。特点就是，自认为自己胖，每天都要健身跑步，观念就是吃饱了才能有力气减肥，工作方面，每次都是我不会，但最后会完成的很棒。单身未嫁，我希望她快点找个如意郎君。</p>\n<p>Evanyan, 最近入职的小鲜肉，说实话还没有过多的交流，还不是特别了解，希望以后能多多跟大家交流哦。</p>\n<p>Jin，靖哥哥，大眼萌，有着一双炯炯有神的双眼皮大眼睛。从他入职那会，就被分到我们小组，是个代码写的想当靠谱的男孩，对于他的过去不是很了解，但是工作中是个热心肠，热衷于对技术的精钻。每次都是静静的坐在那，不参与女生们的八卦，但伸着耳朵在那听的自己偷笑的黄金单身汉。</p>\n<p>Lee，大家喊他昊哥，css专家，也是公司的IT小助手，大家的电脑坏了，键盘坏了，鼠标坏了等都会找他，是公司的元老之一，有着一个幸福温暖的家庭，女儿长得胖乎乎的特别可爱，是个事业与爱情双丰收的成功男人。</p>\n<p>Linda，我常常喊她linda姐姐，虽然她只比我大一岁。是个做事认真、生活超级有规律、有着文静外表喜欢hello kitty的淑女，大家眼中的小富婆，哈哈，单身未嫁待娶。</p>\n<p>Nick，光头强叔叔，NONO，不要以为是叔叔就是聪明绝顶之人，实际上他是个头发茂密的真正的90后成功人士，有着一个幸福的家庭，长的比他好看多了得女儿。印象中一直是个有问题问他，他都会知无不答的人，并且有着一语惊人的超凡能力。</p>\n<p>Rick，FE第一帅，当然这是妹子们私下评出来的，不知道他老婆知道不。外表英俊潇洒，风流倜傥的前端大神vs后端大神。虽然是大神但并不冷酷，灰常的平易近人，这让单身的妹子们常感相见恨晚。</p>\n<p>Tony，真正的老实人，虽然是大叔面孔，却是个实实在在的90后。工作认真，对父母孝顺有加，对同事也是极其爱护，我猜想他除了把工作做好之外，最大的愿望应该是找个有着共同语言和爱好的女盆友吧。</p>\n<p>Toobug，标准的理工男，却有着超凡的音乐天赋，会不少乐器呢，我导师。导师桃李满天下，我应该是那个最不听话的坏孩子。导师是个非常注重细节，对自己要求严格，对别人亦是的人。虽然比我大一岁，却已是前端大神，我常常把他当成自己的长辈，不仅可以给予你工作学习上的指导，生活上也会给予你非常有帮助的意见和建议，是个全能型的全端工程师。</p>\n<p>Young，长了一张乖乖脸，喜欢留一撮小胡子，喜欢沉浸在自己的代码世界里，但是有时候对人又是态度冷冷的，是个成功在组内前端转后端的榜样。特点就是刀子嘴豆腐心，有着少爷的内心，好像我们都会变成他的小丫鬟一样，但是好处是开玩笑从不生气，哈哈。</p>\n<p>Diandian,即本人，我一般这么介绍我自己，聪明伶俐活泼可爱，美丽与智慧集一身的美少女，你信吗？哈哈，曾被很多人说成风一样的女子，因为我走路快。其实大家常喊我点姨，我也不知道为啥，大概是因为我像他们妈妈的妹妹一样亲切吧，(⊙o⊙)…</p>\n<p>天哪，我居然找了半天没找到前端的单独合照，下面这张大家勉强看下哈，在我眼里，FE团队就像动物乌托邦，大家各有千秋️，相处和睦，互相帮助,共同进步。</p>\n<p><img src=\"/images/share/1-1.jpg\" alt=\"合影\"></p>"},{"title":"关于通过H5页面唤起Native客户端的介绍","date":"2016-11-02T02:00:00.000Z","author":"AlanZhang","_content":"\n本文档用于介绍通过H5端唤起本地NN客户端的研究过程！刚进新公司，导师让研究下5页面唤NNtive户端的课题，后面公司客户端产品可能会用到这方面的技术，所以研究了下，写成文章，保密需要，去掉了和具体客户端绑定的内容，希望对那些想了解这方面知识的人有用！\n\n## 背景\n- 目前通过H5页面唤起native App的场景十分常见，比如常见的分享功能；一方面，对于用户而言，相同的内容在native app上比H5体验更好，操作更加方便，另一方面，对于app运营来说，可以增加app的用户粘性度。\n\n- 当前native客户端内置webview中，比较常用的是通过schema打开登陆页、触发分享入口的显示；而在外部浏览器或者webview中唤醒公司的客户端目前还没有太多尝试，有据此展开研究的必要性，以便日后在真实的需求中使用！\n\n<!--more-->\n\n## 唤醒native APP 的几种方式\n在Android端，常用的方式是Schame + Android Itent，在IOS端，常用的方式是Schema ＋　Universal links（IOS9+）；\n使用的前提都是客户端程序实现了schema协议。\n\n下面对这３种方式做简要的介绍：\n#### Schema\n\n在Android和IOS浏览器中（非微信浏览器），可以通过schema协议的方式唤醒本地app客户端；schema协议在App注册之后，与前端进行统一约定，通过H5页面访问某个具体的协议地址，即可打开对应的App客户端 页面；\n\n访问协议地址，目前有3种方式，以打开NN客户端登录页为例：\n\n1. **通过a标签打开**，点击标签是启动\n```\n    <a href=\"ftnn:login\">打开登录页</a>\n```\n2. **通过iframe打开**，设置iframe.src即会启动\n```\n    <iframe src=\"ftnn:login\"></iframe>\n```\n3. **直接通过window.location 进行跳转**\n```\n    window.location.href= \"ftnn:login\";\n```\nAndroid上注册schema协议，可以参考博文：[Android手机上实现WebApp直接调起NativeApp](https://www.baidufe.com/item/3444ee051f8edb361d12.html)\n\n>注：由于微信的白名单限制，无法通过schema来唤起本地app，只有白名单内的app才能通过微信浏览器唤醒，这个问题我目前没有找到合适的解决办法！\n\n#### Android Intent\n在Android Chrome浏览器中，版本号在chrome 25+的版本不在支持通过传统schema的方法唤醒App，比如通过设置window.location = \"xxxx://login\"将无法唤醒本地客户端。需要通过Android Intent 来唤醒APP；\n使用方式如下：\n\n1. 构件intent字符串：\n```\n    intent:\n    login                                           // 特定的schema uri，例如login表示打开NN登陆页\n    #Intent;\n      package=cn.xxxx.xxxxxx;                       // NN apk 信息\n      action=android.intent.action.VIEW;            // NN apk 信息\n      category=android.intent.category.DEFAULT;     // NN apk 信息\n      component=[string];                           // NN apk 信息,可选\n      scheme=xxxx;                                  // 协议头\n      S.browser_fallback_url=[url]                  // 可选，schema启动客户端失败时的跳转页，一般为下载页，需编码\n    end;\n```\n2. 构造一个a标签，将上面schame 字符串作为其href值，当点击a标签时，即为通过schema打开某客户端登陆页，如果未安装客户端，则会跳转到指定页，这里会跳转到下载页；\n\n        <a href=\"intent://loin#Intent;scheme=ftnn;package=cn.futu.trader;category=android.intent.category.DEFAULT;action=android.intent.action.VIEW;S.browser_fallback_url=http%3A%2F%2Fa.app.qq.com%2Fo%2Fsimple.jsp%3Fpkgname%3Dcn.futu.trader%26g_f%3D991653;end\">打开登录页</a>\n\n\n#### Universal links\nUniversal links为 iOS 9 上一个所谓 通用链接 的深层链接特性，一种能够方便的通过传统 HTTP 链接来启动 APP, 使用相同的网址打开网站和 APP；通过唯一的网址, 就可以链接一个特定的视图到你的 APP 里面, 不需要特别的 schema；\n\n在IOS中，对比schema的方式，Universal links有以下优点：\n\n1. 通过schema启动app时，浏览器会有弹出确认框提示用户是否打开，而Universal links不会提示，体验更好；\n\n\n2. Universal link可在再微信浏览器中打开外部App；\n\n    > 网易新闻客户端IOS 9上目前采用这种Universal links方式\n\n针对这部分内容可以参考博文：\n- [打通 iOS 9 的通用链接（Universal Links）](http://www.cocoachina.com/ios/20150902/13321.html)\n- [浏览器中唤起native app || 跳转到应用商城下载（二） 之universal links](http://gold.xitu.io/entry/57bd1e6179bc440063b3a029/view)\n>由于公司IOS客户端目前未实现这种协议，所以无法对这种唤醒方式做测试，日后明确支持此类协议，待测试功能后，再补充这部分详细内容！\n\n## 实现过程\n\n首先，通过**浏览器是无法判断是否安装了客户端程序的**，因此整体的思路就是：**尝试去通过上面的唤起方式来唤起本地客户端，如果唤起超时，则直接跳转到下载页**；整个实现过程围绕这一点展开。\n\n在不考虑IOS9 Universal links唤醒方式的条件下，可以分为这几个步骤；\n\n1. **生成schema字符串**\n\n首先判断浏览器UA，如果为Chrome for Android，则必须安装 Android Intent的方式来组织schema字符串；如果为其他浏览器，则按照普通的schema方式来返回即可；\n![](http://i.imgur.com/fVd8LQ5.png)\n\n> 注意参数中包含的url地址需要进行encodeURIComponent编码\n\n2 .**通过iframe或者a标签来加载schema**\n\n由于无法确定是否安装了客户端，因此通过window.location =  schema的方式可能导致浏览器跳转到错误页；所以通过iframe.src或a.href载入schema是目前比较常见的方法；\n\n相比于iframe和a，通过设置其diaplay为none来进行隐藏，这样即便链接错误也不会对当前页构成影响，但是对于a标签，在未安装客户端的情况下，仍然会存在提示访问不存在的情况（比如opera），所以在选取上的优先级是：iframe>a>window.location,只有在iframe.href 无法调用schema的情况下，才采用a.href的方式。\n\n经过非全面测试：\n\n- Android系统上，Chrome for Android无法通过iframe.src 来调用schema，而通过a.href 的方式可以成功调用，而针对chrome内核的浏览器如猎豹，360，小米浏览器，\nopera对于iframe.src和a.href的方式都能支持，所以对chrome及先关的内核的浏览器采用a.href的方式来调用scheme；对于其他浏览器，如UC，firefox,mobile QQ，sogou浏览器则采用iframe.src的方式调用schema。对于微信浏览器，则直接跳转到下载页。其他未经测试的浏览器，默认采用iframe.src来调用schema；\n- IOS 9系统上，Safari浏览器无法通过iframe.src的方式调用schema，对于UC，Chrome，百度浏览器，mobileQQ只能通过a.href的方式进行调用schema；对于微信浏览器，默认跳转到下载页；\n\n代码如下：\n\n![](http://i.imgur.com/SCGLk2o.png)\n\n3 .**处理客户端未安装的情况**\n\n前面提到无法确定客户端程序是否安装，所以在通过iframe和a调用schema时，会设置一个settimeout，超时，则跳转到下载页；\n\n>此处的超时时间设置也十分关键，如果超时时间小于app启动时间，则未待app启动，就是执行setimeout的方法，如果超时时间较长，则当客户端程序未安装时，需要较长时间才能执行settimeout方法进入下载页。\n\n![](http://i.imgur.com/5LoUk8D.png)\n\n>代码中，进入到setimeout时，对跳转过程再次进行了限定；当浏览器因为启动app而切换到后台时，settimeout存在计时推迟或延迟的问题，此时，如果从app切换回浏览器端，则执行跳转代码时经历的时间应该大于setimeout所设置的时间；反之，如果本地客户端程序未安装，浏览器则不会进入后台程序，定时器则会准时执行，故应该跳转到下载页！\n\n在实际测试过程，当通过schema成功唤起客户端，再次返回浏览器时，发现页面已跳转至下载页面，因此对已设置的settimeout需要做一个清除处理；\n\n当本地app被唤起，app处于设备可视窗口最上层，则浏览器进入后台程序页面会隐藏掉，会触发pagehide与visibilitychange事件，此时应该清除setimeout事件,于此同时，document.hide属性为true，因此setimeout内也不做跳转动作，防止页面跳转至下载页面；\n此时，有几个事件比较关键：\n\n    pagehide: 页面隐藏时触发\n\n    visibilitychange： 页面隐藏没有在当前显示时触发，比如切换tab，也会触发该事件\n\n    document.hidden 当页面隐藏时，该值为true，显示时为false\n\n为了尽可能的兼容多的浏览器，所以讲这几个事件都进行绑定！\n代码如下。\n\n![](http://i.imgur.com/ZHp2spo.png)\n\n---\n\n## 测试结果\n1. Android平台（小米3 手机测试）\n\n   - 经测试，可唤起chrome，Firefox，uc，360，mibrowser，sogou，liebao，mobileQQ浏览器；\n   - 新版opera浏览器采用webkit内核，但是当客户端未安装时跳转下载页会会出错，提示页面不存在；\n   - 微信不支持登陆，直接做了跳转到下载页处理；\n   - Android上启动相对比较慢，导致很容易启动超时而跳转到下载页面；\n   - 测试页面在本机，百度浏览器会上报检测url合法性，导致唤醒不成功\n\n   ![](http://i.imgur.com/917kCq1.png)\n\n 2 . IOS平台（ip4，ip6+，ipad mini2）\n   - os7上Safari可用，其他浏览器为测试，条件限制；\n   - Safari，UC浏览器，Chrome 浏览器能唤起nn客户端，但是Safari会有 是否打开的提示；\n   - QQ webviwe上能打开，偶尔会失败；\n   - IOS上启动速度相对较快\n\n## 相关代码\n对代码进行简单的封装，代码如下，在使用时需要针对当前的app做必要设置，采用UMD的写法：\n\n代码见[tool-nativeSchema.js](https://github.com/AlanZhang001/H5CallUpNative/blob/master/tool-nativeSchema.js)\n\n调用方式：\n\n```\n// COMMONJS 的方式引用，不能直接在浏览器中运行，需要打包转换\nvar nativeSchema = require(\"tool-nativeSchema.js\");\n\n// Amd的方式\nrequire([\"tool-nativeSchema.js\"],function(nativeSchema){\n\n});\n\n// 直接引入\n<script type=\"text/javascript\" src=\"xxxx/tool-nativeSchema.js\"></script>\n```\n\n```\n// 使用\nnativeSchema.loadSchema({\n    // 某个schema协议，例如login,\n    schema: \"\",\n\n    //schema头协议，\n    protocal:\"xxx\",\n\n    //发起唤醒请求后，会等待loadWaiting时间，超时则跳转到failUrl，默认3000ms\n    loadWaiting:\"3000\",\n\n    //唤起失败时的跳转链接，默认跳转到应用商店下载页\n    failUrl:\"xxx\",\n\n    // Android 客户端信息,可以询问 Android同事\n    apkInfo:{\n        PKG:\"\",\n        CATEGORY:\"\",\n        ACTION:\"\"\n    }\n});\n```\n\n## 研究意义\n **便于通过相关H5页面进入Native客户端，提升用户体验，提升App用户粘度；**\n   对于未安装客户端的用户，可引导进入下载通道，如下场景图：\n\n![](http://i.imgur.com/ymKiJJM.png)\n\n## 存在的问题\n\n1. 在没有安装客户端程序的时候，opera无法跳转到指定页的失败页；\n2. 通过微信唤醒客户端目前不可行，Android上需要微信设置白名单；IOS上，需要微信设置白名单或者通过Universal links（IOS9+）协议；\n3. 尚未对IOS9的 Universal links协议进行功能测试。\n4. 代码中使用的各种时间如：settimeout定时时间均根据本机测试进行的调整，普遍性需要进一步验证\n\n## 最后\n\n1. 经过自行测试及网上查阅资料，目前尚未找到完美的解决方案；\n2. 对于文中的不足和错误，欢迎指出。\n3. 转载请说明出处，以方便追本溯源修正文中错误\n\n## 相关阅读链接\n\n- <https://developer.chrome.com/multidevice/android/intents>\n- <https://segmentfault.com/a/1190000005848133?_ea=938555>\n- <http://www.w3ctech.com/topic/287?utm_source=tuicool&utm_medium=referral>\n- <http://blog.html5funny.com/2015/06/19/open-app-from-mobile-web-browser-or-webview/>\n- <http://echozq.github.io/echo-blog/2015/11/13/callapp.html>\n\n原文发表于[https://github.com/AlanZhang001/H5CallUpNative](https://github.com/AlanZhang001/H5CallUpNative)\n","source":"_posts/h5-callup-native.md","raw":"---\ntitle: 关于通过H5页面唤起Native客户端的介绍\ndate: 2016-11-02 10:00\ntags: [H5,Native,schema]\ncategory: 技术预研\nauthor: AlanZhang\n---\n\n本文档用于介绍通过H5端唤起本地NN客户端的研究过程！刚进新公司，导师让研究下5页面唤NNtive户端的课题，后面公司客户端产品可能会用到这方面的技术，所以研究了下，写成文章，保密需要，去掉了和具体客户端绑定的内容，希望对那些想了解这方面知识的人有用！\n\n## 背景\n- 目前通过H5页面唤起native App的场景十分常见，比如常见的分享功能；一方面，对于用户而言，相同的内容在native app上比H5体验更好，操作更加方便，另一方面，对于app运营来说，可以增加app的用户粘性度。\n\n- 当前native客户端内置webview中，比较常用的是通过schema打开登陆页、触发分享入口的显示；而在外部浏览器或者webview中唤醒公司的客户端目前还没有太多尝试，有据此展开研究的必要性，以便日后在真实的需求中使用！\n\n<!--more-->\n\n## 唤醒native APP 的几种方式\n在Android端，常用的方式是Schame + Android Itent，在IOS端，常用的方式是Schema ＋　Universal links（IOS9+）；\n使用的前提都是客户端程序实现了schema协议。\n\n下面对这３种方式做简要的介绍：\n#### Schema\n\n在Android和IOS浏览器中（非微信浏览器），可以通过schema协议的方式唤醒本地app客户端；schema协议在App注册之后，与前端进行统一约定，通过H5页面访问某个具体的协议地址，即可打开对应的App客户端 页面；\n\n访问协议地址，目前有3种方式，以打开NN客户端登录页为例：\n\n1. **通过a标签打开**，点击标签是启动\n```\n    <a href=\"ftnn:login\">打开登录页</a>\n```\n2. **通过iframe打开**，设置iframe.src即会启动\n```\n    <iframe src=\"ftnn:login\"></iframe>\n```\n3. **直接通过window.location 进行跳转**\n```\n    window.location.href= \"ftnn:login\";\n```\nAndroid上注册schema协议，可以参考博文：[Android手机上实现WebApp直接调起NativeApp](https://www.baidufe.com/item/3444ee051f8edb361d12.html)\n\n>注：由于微信的白名单限制，无法通过schema来唤起本地app，只有白名单内的app才能通过微信浏览器唤醒，这个问题我目前没有找到合适的解决办法！\n\n#### Android Intent\n在Android Chrome浏览器中，版本号在chrome 25+的版本不在支持通过传统schema的方法唤醒App，比如通过设置window.location = \"xxxx://login\"将无法唤醒本地客户端。需要通过Android Intent 来唤醒APP；\n使用方式如下：\n\n1. 构件intent字符串：\n```\n    intent:\n    login                                           // 特定的schema uri，例如login表示打开NN登陆页\n    #Intent;\n      package=cn.xxxx.xxxxxx;                       // NN apk 信息\n      action=android.intent.action.VIEW;            // NN apk 信息\n      category=android.intent.category.DEFAULT;     // NN apk 信息\n      component=[string];                           // NN apk 信息,可选\n      scheme=xxxx;                                  // 协议头\n      S.browser_fallback_url=[url]                  // 可选，schema启动客户端失败时的跳转页，一般为下载页，需编码\n    end;\n```\n2. 构造一个a标签，将上面schame 字符串作为其href值，当点击a标签时，即为通过schema打开某客户端登陆页，如果未安装客户端，则会跳转到指定页，这里会跳转到下载页；\n\n        <a href=\"intent://loin#Intent;scheme=ftnn;package=cn.futu.trader;category=android.intent.category.DEFAULT;action=android.intent.action.VIEW;S.browser_fallback_url=http%3A%2F%2Fa.app.qq.com%2Fo%2Fsimple.jsp%3Fpkgname%3Dcn.futu.trader%26g_f%3D991653;end\">打开登录页</a>\n\n\n#### Universal links\nUniversal links为 iOS 9 上一个所谓 通用链接 的深层链接特性，一种能够方便的通过传统 HTTP 链接来启动 APP, 使用相同的网址打开网站和 APP；通过唯一的网址, 就可以链接一个特定的视图到你的 APP 里面, 不需要特别的 schema；\n\n在IOS中，对比schema的方式，Universal links有以下优点：\n\n1. 通过schema启动app时，浏览器会有弹出确认框提示用户是否打开，而Universal links不会提示，体验更好；\n\n\n2. Universal link可在再微信浏览器中打开外部App；\n\n    > 网易新闻客户端IOS 9上目前采用这种Universal links方式\n\n针对这部分内容可以参考博文：\n- [打通 iOS 9 的通用链接（Universal Links）](http://www.cocoachina.com/ios/20150902/13321.html)\n- [浏览器中唤起native app || 跳转到应用商城下载（二） 之universal links](http://gold.xitu.io/entry/57bd1e6179bc440063b3a029/view)\n>由于公司IOS客户端目前未实现这种协议，所以无法对这种唤醒方式做测试，日后明确支持此类协议，待测试功能后，再补充这部分详细内容！\n\n## 实现过程\n\n首先，通过**浏览器是无法判断是否安装了客户端程序的**，因此整体的思路就是：**尝试去通过上面的唤起方式来唤起本地客户端，如果唤起超时，则直接跳转到下载页**；整个实现过程围绕这一点展开。\n\n在不考虑IOS9 Universal links唤醒方式的条件下，可以分为这几个步骤；\n\n1. **生成schema字符串**\n\n首先判断浏览器UA，如果为Chrome for Android，则必须安装 Android Intent的方式来组织schema字符串；如果为其他浏览器，则按照普通的schema方式来返回即可；\n![](http://i.imgur.com/fVd8LQ5.png)\n\n> 注意参数中包含的url地址需要进行encodeURIComponent编码\n\n2 .**通过iframe或者a标签来加载schema**\n\n由于无法确定是否安装了客户端，因此通过window.location =  schema的方式可能导致浏览器跳转到错误页；所以通过iframe.src或a.href载入schema是目前比较常见的方法；\n\n相比于iframe和a，通过设置其diaplay为none来进行隐藏，这样即便链接错误也不会对当前页构成影响，但是对于a标签，在未安装客户端的情况下，仍然会存在提示访问不存在的情况（比如opera），所以在选取上的优先级是：iframe>a>window.location,只有在iframe.href 无法调用schema的情况下，才采用a.href的方式。\n\n经过非全面测试：\n\n- Android系统上，Chrome for Android无法通过iframe.src 来调用schema，而通过a.href 的方式可以成功调用，而针对chrome内核的浏览器如猎豹，360，小米浏览器，\nopera对于iframe.src和a.href的方式都能支持，所以对chrome及先关的内核的浏览器采用a.href的方式来调用scheme；对于其他浏览器，如UC，firefox,mobile QQ，sogou浏览器则采用iframe.src的方式调用schema。对于微信浏览器，则直接跳转到下载页。其他未经测试的浏览器，默认采用iframe.src来调用schema；\n- IOS 9系统上，Safari浏览器无法通过iframe.src的方式调用schema，对于UC，Chrome，百度浏览器，mobileQQ只能通过a.href的方式进行调用schema；对于微信浏览器，默认跳转到下载页；\n\n代码如下：\n\n![](http://i.imgur.com/SCGLk2o.png)\n\n3 .**处理客户端未安装的情况**\n\n前面提到无法确定客户端程序是否安装，所以在通过iframe和a调用schema时，会设置一个settimeout，超时，则跳转到下载页；\n\n>此处的超时时间设置也十分关键，如果超时时间小于app启动时间，则未待app启动，就是执行setimeout的方法，如果超时时间较长，则当客户端程序未安装时，需要较长时间才能执行settimeout方法进入下载页。\n\n![](http://i.imgur.com/5LoUk8D.png)\n\n>代码中，进入到setimeout时，对跳转过程再次进行了限定；当浏览器因为启动app而切换到后台时，settimeout存在计时推迟或延迟的问题，此时，如果从app切换回浏览器端，则执行跳转代码时经历的时间应该大于setimeout所设置的时间；反之，如果本地客户端程序未安装，浏览器则不会进入后台程序，定时器则会准时执行，故应该跳转到下载页！\n\n在实际测试过程，当通过schema成功唤起客户端，再次返回浏览器时，发现页面已跳转至下载页面，因此对已设置的settimeout需要做一个清除处理；\n\n当本地app被唤起，app处于设备可视窗口最上层，则浏览器进入后台程序页面会隐藏掉，会触发pagehide与visibilitychange事件，此时应该清除setimeout事件,于此同时，document.hide属性为true，因此setimeout内也不做跳转动作，防止页面跳转至下载页面；\n此时，有几个事件比较关键：\n\n    pagehide: 页面隐藏时触发\n\n    visibilitychange： 页面隐藏没有在当前显示时触发，比如切换tab，也会触发该事件\n\n    document.hidden 当页面隐藏时，该值为true，显示时为false\n\n为了尽可能的兼容多的浏览器，所以讲这几个事件都进行绑定！\n代码如下。\n\n![](http://i.imgur.com/ZHp2spo.png)\n\n---\n\n## 测试结果\n1. Android平台（小米3 手机测试）\n\n   - 经测试，可唤起chrome，Firefox，uc，360，mibrowser，sogou，liebao，mobileQQ浏览器；\n   - 新版opera浏览器采用webkit内核，但是当客户端未安装时跳转下载页会会出错，提示页面不存在；\n   - 微信不支持登陆，直接做了跳转到下载页处理；\n   - Android上启动相对比较慢，导致很容易启动超时而跳转到下载页面；\n   - 测试页面在本机，百度浏览器会上报检测url合法性，导致唤醒不成功\n\n   ![](http://i.imgur.com/917kCq1.png)\n\n 2 . IOS平台（ip4，ip6+，ipad mini2）\n   - os7上Safari可用，其他浏览器为测试，条件限制；\n   - Safari，UC浏览器，Chrome 浏览器能唤起nn客户端，但是Safari会有 是否打开的提示；\n   - QQ webviwe上能打开，偶尔会失败；\n   - IOS上启动速度相对较快\n\n## 相关代码\n对代码进行简单的封装，代码如下，在使用时需要针对当前的app做必要设置，采用UMD的写法：\n\n代码见[tool-nativeSchema.js](https://github.com/AlanZhang001/H5CallUpNative/blob/master/tool-nativeSchema.js)\n\n调用方式：\n\n```\n// COMMONJS 的方式引用，不能直接在浏览器中运行，需要打包转换\nvar nativeSchema = require(\"tool-nativeSchema.js\");\n\n// Amd的方式\nrequire([\"tool-nativeSchema.js\"],function(nativeSchema){\n\n});\n\n// 直接引入\n<script type=\"text/javascript\" src=\"xxxx/tool-nativeSchema.js\"></script>\n```\n\n```\n// 使用\nnativeSchema.loadSchema({\n    // 某个schema协议，例如login,\n    schema: \"\",\n\n    //schema头协议，\n    protocal:\"xxx\",\n\n    //发起唤醒请求后，会等待loadWaiting时间，超时则跳转到failUrl，默认3000ms\n    loadWaiting:\"3000\",\n\n    //唤起失败时的跳转链接，默认跳转到应用商店下载页\n    failUrl:\"xxx\",\n\n    // Android 客户端信息,可以询问 Android同事\n    apkInfo:{\n        PKG:\"\",\n        CATEGORY:\"\",\n        ACTION:\"\"\n    }\n});\n```\n\n## 研究意义\n **便于通过相关H5页面进入Native客户端，提升用户体验，提升App用户粘度；**\n   对于未安装客户端的用户，可引导进入下载通道，如下场景图：\n\n![](http://i.imgur.com/ymKiJJM.png)\n\n## 存在的问题\n\n1. 在没有安装客户端程序的时候，opera无法跳转到指定页的失败页；\n2. 通过微信唤醒客户端目前不可行，Android上需要微信设置白名单；IOS上，需要微信设置白名单或者通过Universal links（IOS9+）协议；\n3. 尚未对IOS9的 Universal links协议进行功能测试。\n4. 代码中使用的各种时间如：settimeout定时时间均根据本机测试进行的调整，普遍性需要进一步验证\n\n## 最后\n\n1. 经过自行测试及网上查阅资料，目前尚未找到完美的解决方案；\n2. 对于文中的不足和错误，欢迎指出。\n3. 转载请说明出处，以方便追本溯源修正文中错误\n\n## 相关阅读链接\n\n- <https://developer.chrome.com/multidevice/android/intents>\n- <https://segmentfault.com/a/1190000005848133?_ea=938555>\n- <http://www.w3ctech.com/topic/287?utm_source=tuicool&utm_medium=referral>\n- <http://blog.html5funny.com/2015/06/19/open-app-from-mobile-web-browser-or-webview/>\n- <http://echozq.github.io/echo-blog/2015/11/13/callapp.html>\n\n原文发表于[https://github.com/AlanZhang001/H5CallUpNative](https://github.com/AlanZhang001/H5CallUpNative)\n","slug":"h5-callup-native","published":1,"updated":"2017-12-01T08:50:00.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknke003pjxs119ramgkl","content":"<p>本文档用于介绍通过H5端唤起本地NN客户端的研究过程！刚进新公司，导师让研究下5页面唤NNtive户端的课题，后面公司客户端产品可能会用到这方面的技术，所以研究了下，写成文章，保密需要，去掉了和具体客户端绑定的内容，希望对那些想了解这方面知识的人有用！</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><ul>\n<li><p>目前通过H5页面唤起native App的场景十分常见，比如常见的分享功能；一方面，对于用户而言，相同的内容在native app上比H5体验更好，操作更加方便，另一方面，对于app运营来说，可以增加app的用户粘性度。</p>\n</li>\n<li><p>当前native客户端内置webview中，比较常用的是通过schema打开登陆页、触发分享入口的显示；而在外部浏览器或者webview中唤醒公司的客户端目前还没有太多尝试，有据此展开研究的必要性，以便日后在真实的需求中使用！</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"唤醒native-APP-的几种方式\"><a href=\"#唤醒native-APP-的几种方式\" class=\"headerlink\" title=\"唤醒native APP 的几种方式\"></a>唤醒native APP 的几种方式</h2><p>在Android端，常用的方式是Schame + Android Itent，在IOS端，常用的方式是Schema ＋　Universal links（IOS9+）；<br>使用的前提都是客户端程序实现了schema协议。</p>\n<p>下面对这３种方式做简要的介绍：</p>\n<h4 id=\"Schema\"><a href=\"#Schema\" class=\"headerlink\" title=\"Schema\"></a>Schema</h4><p>在Android和IOS浏览器中（非微信浏览器），可以通过schema协议的方式唤醒本地app客户端；schema协议在App注册之后，与前端进行统一约定，通过H5页面访问某个具体的协议地址，即可打开对应的App客户端 页面；</p>\n<p>访问协议地址，目前有3种方式，以打开NN客户端登录页为例：</p>\n<ol>\n<li><p><strong>通过a标签打开</strong>，点击标签是启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;ftnn:login&quot;&gt;打开登录页&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>通过iframe打开</strong>，设置iframe.src即会启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe src=&quot;ftnn:login&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>直接通过window.location 进行跳转</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.location.href= &quot;ftnn:login&quot;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>Android上注册schema协议，可以参考博文：<a href=\"https://www.baidufe.com/item/3444ee051f8edb361d12.html\" target=\"_blank\" rel=\"noopener\">Android手机上实现WebApp直接调起NativeApp</a></p>\n<blockquote>\n<p>注：由于微信的白名单限制，无法通过schema来唤起本地app，只有白名单内的app才能通过微信浏览器唤醒，这个问题我目前没有找到合适的解决办法！</p>\n</blockquote>\n<h4 id=\"Android-Intent\"><a href=\"#Android-Intent\" class=\"headerlink\" title=\"Android Intent\"></a>Android Intent</h4><p>在Android Chrome浏览器中，版本号在chrome 25+的版本不在支持通过传统schema的方法唤醒App，比如通过设置window.location = “xxxx://login”将无法唤醒本地客户端。需要通过Android Intent 来唤醒APP；<br>使用方式如下：</p>\n<ol>\n<li><p>构件intent字符串：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intent:</span><br><span class=\"line\">login                                           // 特定的schema uri，例如login表示打开NN登陆页</span><br><span class=\"line\">#Intent;</span><br><span class=\"line\">  package=cn.xxxx.xxxxxx;                       // NN apk 信息</span><br><span class=\"line\">  action=android.intent.action.VIEW;            // NN apk 信息</span><br><span class=\"line\">  category=android.intent.category.DEFAULT;     // NN apk 信息</span><br><span class=\"line\">  component=[string];                           // NN apk 信息,可选</span><br><span class=\"line\">  scheme=xxxx;                                  // 协议头</span><br><span class=\"line\">  S.browser_fallback_url=[url]                  // 可选，schema启动客户端失败时的跳转页，一般为下载页，需编码</span><br><span class=\"line\">end;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造一个a标签，将上面schame 字符串作为其href值，当点击a标签时，即为通过schema打开某客户端登陆页，如果未安装客户端，则会跳转到指定页，这里会跳转到下载页；</p>\n<pre><code>&lt;a href=&quot;intent://loin#Intent;scheme=ftnn;package=cn.futu.trader;category=android.intent.category.DEFAULT;action=android.intent.action.VIEW;S.browser_fallback_url=http%3A%2F%2Fa.app.qq.com%2Fo%2Fsimple.jsp%3Fpkgname%3Dcn.futu.trader%26g_f%3D991653;end&quot;&gt;打开登录页&lt;/a&gt;\n</code></pre></li>\n</ol>\n<h4 id=\"Universal-links\"><a href=\"#Universal-links\" class=\"headerlink\" title=\"Universal links\"></a>Universal links</h4><p>Universal links为 iOS 9 上一个所谓 通用链接 的深层链接特性，一种能够方便的通过传统 HTTP 链接来启动 APP, 使用相同的网址打开网站和 APP；通过唯一的网址, 就可以链接一个特定的视图到你的 APP 里面, 不需要特别的 schema；</p>\n<p>在IOS中，对比schema的方式，Universal links有以下优点：</p>\n<ol>\n<li>通过schema启动app时，浏览器会有弹出确认框提示用户是否打开，而Universal links不会提示，体验更好；</li>\n</ol>\n<ol>\n<li><p>Universal link可在再微信浏览器中打开外部App；</p>\n<blockquote>\n<p>网易新闻客户端IOS 9上目前采用这种Universal links方式</p>\n</blockquote>\n</li>\n</ol>\n<p>针对这部分内容可以参考博文：</p>\n<ul>\n<li><a href=\"http://www.cocoachina.com/ios/20150902/13321.html\" target=\"_blank\" rel=\"noopener\">打通 iOS 9 的通用链接（Universal Links）</a></li>\n<li><a href=\"http://gold.xitu.io/entry/57bd1e6179bc440063b3a029/view\" target=\"_blank\" rel=\"noopener\">浏览器中唤起native app || 跳转到应用商城下载（二） 之universal links</a><blockquote>\n<p>由于公司IOS客户端目前未实现这种协议，所以无法对这种唤醒方式做测试，日后明确支持此类协议，待测试功能后，再补充这部分详细内容！</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h2><p>首先，通过<strong>浏览器是无法判断是否安装了客户端程序的</strong>，因此整体的思路就是：<strong>尝试去通过上面的唤起方式来唤起本地客户端，如果唤起超时，则直接跳转到下载页</strong>；整个实现过程围绕这一点展开。</p>\n<p>在不考虑IOS9 Universal links唤醒方式的条件下，可以分为这几个步骤；</p>\n<ol>\n<li><strong>生成schema字符串</strong></li>\n</ol>\n<p>首先判断浏览器UA，如果为Chrome for Android，则必须安装 Android Intent的方式来组织schema字符串；如果为其他浏览器，则按照普通的schema方式来返回即可；<br><img src=\"http://i.imgur.com/fVd8LQ5.png\" alt=\"\"></p>\n<blockquote>\n<p>注意参数中包含的url地址需要进行encodeURIComponent编码</p>\n</blockquote>\n<p>2 .<strong>通过iframe或者a标签来加载schema</strong></p>\n<p>由于无法确定是否安装了客户端，因此通过window.location =  schema的方式可能导致浏览器跳转到错误页；所以通过iframe.src或a.href载入schema是目前比较常见的方法；</p>\n<p>相比于iframe和a，通过设置其diaplay为none来进行隐藏，这样即便链接错误也不会对当前页构成影响，但是对于a标签，在未安装客户端的情况下，仍然会存在提示访问不存在的情况（比如opera），所以在选取上的优先级是：iframe&gt;a&gt;window.location,只有在iframe.href 无法调用schema的情况下，才采用a.href的方式。</p>\n<p>经过非全面测试：</p>\n<ul>\n<li>Android系统上，Chrome for Android无法通过iframe.src 来调用schema，而通过a.href 的方式可以成功调用，而针对chrome内核的浏览器如猎豹，360，小米浏览器，<br>opera对于iframe.src和a.href的方式都能支持，所以对chrome及先关的内核的浏览器采用a.href的方式来调用scheme；对于其他浏览器，如UC，firefox,mobile QQ，sogou浏览器则采用iframe.src的方式调用schema。对于微信浏览器，则直接跳转到下载页。其他未经测试的浏览器，默认采用iframe.src来调用schema；</li>\n<li>IOS 9系统上，Safari浏览器无法通过iframe.src的方式调用schema，对于UC，Chrome，百度浏览器，mobileQQ只能通过a.href的方式进行调用schema；对于微信浏览器，默认跳转到下载页；</li>\n</ul>\n<p>代码如下：</p>\n<p><img src=\"http://i.imgur.com/SCGLk2o.png\" alt=\"\"></p>\n<p>3 .<strong>处理客户端未安装的情况</strong></p>\n<p>前面提到无法确定客户端程序是否安装，所以在通过iframe和a调用schema时，会设置一个settimeout，超时，则跳转到下载页；</p>\n<blockquote>\n<p>此处的超时时间设置也十分关键，如果超时时间小于app启动时间，则未待app启动，就是执行setimeout的方法，如果超时时间较长，则当客户端程序未安装时，需要较长时间才能执行settimeout方法进入下载页。</p>\n</blockquote>\n<p><img src=\"http://i.imgur.com/5LoUk8D.png\" alt=\"\"></p>\n<blockquote>\n<p>代码中，进入到setimeout时，对跳转过程再次进行了限定；当浏览器因为启动app而切换到后台时，settimeout存在计时推迟或延迟的问题，此时，如果从app切换回浏览器端，则执行跳转代码时经历的时间应该大于setimeout所设置的时间；反之，如果本地客户端程序未安装，浏览器则不会进入后台程序，定时器则会准时执行，故应该跳转到下载页！</p>\n</blockquote>\n<p>在实际测试过程，当通过schema成功唤起客户端，再次返回浏览器时，发现页面已跳转至下载页面，因此对已设置的settimeout需要做一个清除处理；</p>\n<p>当本地app被唤起，app处于设备可视窗口最上层，则浏览器进入后台程序页面会隐藏掉，会触发pagehide与visibilitychange事件，此时应该清除setimeout事件,于此同时，document.hide属性为true，因此setimeout内也不做跳转动作，防止页面跳转至下载页面；<br>此时，有几个事件比较关键：</p>\n<pre><code>pagehide: 页面隐藏时触发\n\nvisibilitychange： 页面隐藏没有在当前显示时触发，比如切换tab，也会触发该事件\n\ndocument.hidden 当页面隐藏时，该值为true，显示时为false\n</code></pre><p>为了尽可能的兼容多的浏览器，所以讲这几个事件都进行绑定！<br>代码如下。</p>\n<p><img src=\"http://i.imgur.com/ZHp2spo.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h2><ol>\n<li><p>Android平台（小米3 手机测试）</p>\n<ul>\n<li>经测试，可唤起chrome，Firefox，uc，360，mibrowser，sogou，liebao，mobileQQ浏览器；</li>\n<li>新版opera浏览器采用webkit内核，但是当客户端未安装时跳转下载页会会出错，提示页面不存在；</li>\n<li>微信不支持登陆，直接做了跳转到下载页处理；</li>\n<li>Android上启动相对比较慢，导致很容易启动超时而跳转到下载页面；</li>\n<li>测试页面在本机，百度浏览器会上报检测url合法性，导致唤醒不成功</li>\n</ul>\n<p><img src=\"http://i.imgur.com/917kCq1.png\" alt=\"\"></p>\n<p>2 . IOS平台（ip4，ip6+，ipad mini2）</p>\n<ul>\n<li>os7上Safari可用，其他浏览器为测试，条件限制；</li>\n<li>Safari，UC浏览器，Chrome 浏览器能唤起nn客户端，但是Safari会有 是否打开的提示；</li>\n<li>QQ webviwe上能打开，偶尔会失败；</li>\n<li>IOS上启动速度相对较快</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"相关代码\"><a href=\"#相关代码\" class=\"headerlink\" title=\"相关代码\"></a>相关代码</h2><p>对代码进行简单的封装，代码如下，在使用时需要针对当前的app做必要设置，采用UMD的写法：</p>\n<p>代码见<a href=\"https://github.com/AlanZhang001/H5CallUpNative/blob/master/tool-nativeSchema.js\" target=\"_blank\" rel=\"noopener\">tool-nativeSchema.js</a></p>\n<p>调用方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// COMMONJS 的方式引用，不能直接在浏览器中运行，需要打包转换</span><br><span class=\"line\">var nativeSchema = require(&quot;tool-nativeSchema.js&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">// Amd的方式</span><br><span class=\"line\">require([&quot;tool-nativeSchema.js&quot;],function(nativeSchema)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 直接引入</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;xxxx/tool-nativeSchema.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用</span><br><span class=\"line\">nativeSchema.loadSchema(&#123;</span><br><span class=\"line\">    // 某个schema协议，例如login,</span><br><span class=\"line\">    schema: &quot;&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    //schema头协议，</span><br><span class=\"line\">    protocal:&quot;xxx&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    //发起唤醒请求后，会等待loadWaiting时间，超时则跳转到failUrl，默认3000ms</span><br><span class=\"line\">    loadWaiting:&quot;3000&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    //唤起失败时的跳转链接，默认跳转到应用商店下载页</span><br><span class=\"line\">    failUrl:&quot;xxx&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    // Android 客户端信息,可以询问 Android同事</span><br><span class=\"line\">    apkInfo:&#123;</span><br><span class=\"line\">        PKG:&quot;&quot;,</span><br><span class=\"line\">        CATEGORY:&quot;&quot;,</span><br><span class=\"line\">        ACTION:&quot;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"研究意义\"><a href=\"#研究意义\" class=\"headerlink\" title=\"研究意义\"></a>研究意义</h2><p> <strong>便于通过相关H5页面进入Native客户端，提升用户体验，提升App用户粘度；</strong><br>   对于未安装客户端的用户，可引导进入下载通道，如下场景图：</p>\n<p><img src=\"http://i.imgur.com/ymKiJJM.png\" alt=\"\"></p>\n<h2 id=\"存在的问题\"><a href=\"#存在的问题\" class=\"headerlink\" title=\"存在的问题\"></a>存在的问题</h2><ol>\n<li>在没有安装客户端程序的时候，opera无法跳转到指定页的失败页；</li>\n<li>通过微信唤醒客户端目前不可行，Android上需要微信设置白名单；IOS上，需要微信设置白名单或者通过Universal links（IOS9+）协议；</li>\n<li>尚未对IOS9的 Universal links协议进行功能测试。</li>\n<li>代码中使用的各种时间如：settimeout定时时间均根据本机测试进行的调整，普遍性需要进一步验证</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><ol>\n<li>经过自行测试及网上查阅资料，目前尚未找到完美的解决方案；</li>\n<li>对于文中的不足和错误，欢迎指出。</li>\n<li>转载请说明出处，以方便追本溯源修正文中错误</li>\n</ol>\n<h2 id=\"相关阅读链接\"><a href=\"#相关阅读链接\" class=\"headerlink\" title=\"相关阅读链接\"></a>相关阅读链接</h2><ul>\n<li><a href=\"https://developer.chrome.com/multidevice/android/intents\" target=\"_blank\" rel=\"noopener\">https://developer.chrome.com/multidevice/android/intents</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000005848133?_ea=938555\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000005848133?_ea=938555</a></li>\n<li><a href=\"http://www.w3ctech.com/topic/287?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener\">http://www.w3ctech.com/topic/287?utm_source=tuicool&amp;utm_medium=referral</a></li>\n<li><a href=\"http://blog.html5funny.com/2015/06/19/open-app-from-mobile-web-browser-or-webview/\" target=\"_blank\" rel=\"noopener\">http://blog.html5funny.com/2015/06/19/open-app-from-mobile-web-browser-or-webview/</a></li>\n<li><a href=\"http://echozq.github.io/echo-blog/2015/11/13/callapp.html\" target=\"_blank\" rel=\"noopener\">http://echozq.github.io/echo-blog/2015/11/13/callapp.html</a></li>\n</ul>\n<p>原文发表于<a href=\"https://github.com/AlanZhang001/H5CallUpNative\" target=\"_blank\" rel=\"noopener\">https://github.com/AlanZhang001/H5CallUpNative</a></p>\n","site":{"data":{}},"excerpt":"<p>本文档用于介绍通过H5端唤起本地NN客户端的研究过程！刚进新公司，导师让研究下5页面唤NNtive户端的课题，后面公司客户端产品可能会用到这方面的技术，所以研究了下，写成文章，保密需要，去掉了和具体客户端绑定的内容，希望对那些想了解这方面知识的人有用！</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><ul>\n<li><p>目前通过H5页面唤起native App的场景十分常见，比如常见的分享功能；一方面，对于用户而言，相同的内容在native app上比H5体验更好，操作更加方便，另一方面，对于app运营来说，可以增加app的用户粘性度。</p>\n</li>\n<li><p>当前native客户端内置webview中，比较常用的是通过schema打开登陆页、触发分享入口的显示；而在外部浏览器或者webview中唤醒公司的客户端目前还没有太多尝试，有据此展开研究的必要性，以便日后在真实的需求中使用！</p>\n</li>\n</ul>","more":"<h2 id=\"唤醒native-APP-的几种方式\"><a href=\"#唤醒native-APP-的几种方式\" class=\"headerlink\" title=\"唤醒native APP 的几种方式\"></a>唤醒native APP 的几种方式</h2><p>在Android端，常用的方式是Schame + Android Itent，在IOS端，常用的方式是Schema ＋　Universal links（IOS9+）；<br>使用的前提都是客户端程序实现了schema协议。</p>\n<p>下面对这３种方式做简要的介绍：</p>\n<h4 id=\"Schema\"><a href=\"#Schema\" class=\"headerlink\" title=\"Schema\"></a>Schema</h4><p>在Android和IOS浏览器中（非微信浏览器），可以通过schema协议的方式唤醒本地app客户端；schema协议在App注册之后，与前端进行统一约定，通过H5页面访问某个具体的协议地址，即可打开对应的App客户端 页面；</p>\n<p>访问协议地址，目前有3种方式，以打开NN客户端登录页为例：</p>\n<ol>\n<li><p><strong>通过a标签打开</strong>，点击标签是启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;ftnn:login&quot;&gt;打开登录页&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>通过iframe打开</strong>，设置iframe.src即会启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;iframe src=&quot;ftnn:login&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>直接通过window.location 进行跳转</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.location.href= &quot;ftnn:login&quot;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>Android上注册schema协议，可以参考博文：<a href=\"https://www.baidufe.com/item/3444ee051f8edb361d12.html\" target=\"_blank\" rel=\"noopener\">Android手机上实现WebApp直接调起NativeApp</a></p>\n<blockquote>\n<p>注：由于微信的白名单限制，无法通过schema来唤起本地app，只有白名单内的app才能通过微信浏览器唤醒，这个问题我目前没有找到合适的解决办法！</p>\n</blockquote>\n<h4 id=\"Android-Intent\"><a href=\"#Android-Intent\" class=\"headerlink\" title=\"Android Intent\"></a>Android Intent</h4><p>在Android Chrome浏览器中，版本号在chrome 25+的版本不在支持通过传统schema的方法唤醒App，比如通过设置window.location = “xxxx://login”将无法唤醒本地客户端。需要通过Android Intent 来唤醒APP；<br>使用方式如下：</p>\n<ol>\n<li><p>构件intent字符串：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intent:</span><br><span class=\"line\">login                                           // 特定的schema uri，例如login表示打开NN登陆页</span><br><span class=\"line\">#Intent;</span><br><span class=\"line\">  package=cn.xxxx.xxxxxx;                       // NN apk 信息</span><br><span class=\"line\">  action=android.intent.action.VIEW;            // NN apk 信息</span><br><span class=\"line\">  category=android.intent.category.DEFAULT;     // NN apk 信息</span><br><span class=\"line\">  component=[string];                           // NN apk 信息,可选</span><br><span class=\"line\">  scheme=xxxx;                                  // 协议头</span><br><span class=\"line\">  S.browser_fallback_url=[url]                  // 可选，schema启动客户端失败时的跳转页，一般为下载页，需编码</span><br><span class=\"line\">end;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构造一个a标签，将上面schame 字符串作为其href值，当点击a标签时，即为通过schema打开某客户端登陆页，如果未安装客户端，则会跳转到指定页，这里会跳转到下载页；</p>\n<pre><code>&lt;a href=&quot;intent://loin#Intent;scheme=ftnn;package=cn.futu.trader;category=android.intent.category.DEFAULT;action=android.intent.action.VIEW;S.browser_fallback_url=http%3A%2F%2Fa.app.qq.com%2Fo%2Fsimple.jsp%3Fpkgname%3Dcn.futu.trader%26g_f%3D991653;end&quot;&gt;打开登录页&lt;/a&gt;\n</code></pre></li>\n</ol>\n<h4 id=\"Universal-links\"><a href=\"#Universal-links\" class=\"headerlink\" title=\"Universal links\"></a>Universal links</h4><p>Universal links为 iOS 9 上一个所谓 通用链接 的深层链接特性，一种能够方便的通过传统 HTTP 链接来启动 APP, 使用相同的网址打开网站和 APP；通过唯一的网址, 就可以链接一个特定的视图到你的 APP 里面, 不需要特别的 schema；</p>\n<p>在IOS中，对比schema的方式，Universal links有以下优点：</p>\n<ol>\n<li>通过schema启动app时，浏览器会有弹出确认框提示用户是否打开，而Universal links不会提示，体验更好；</li>\n</ol>\n<ol>\n<li><p>Universal link可在再微信浏览器中打开外部App；</p>\n<blockquote>\n<p>网易新闻客户端IOS 9上目前采用这种Universal links方式</p>\n</blockquote>\n</li>\n</ol>\n<p>针对这部分内容可以参考博文：</p>\n<ul>\n<li><a href=\"http://www.cocoachina.com/ios/20150902/13321.html\" target=\"_blank\" rel=\"noopener\">打通 iOS 9 的通用链接（Universal Links）</a></li>\n<li><a href=\"http://gold.xitu.io/entry/57bd1e6179bc440063b3a029/view\" target=\"_blank\" rel=\"noopener\">浏览器中唤起native app || 跳转到应用商城下载（二） 之universal links</a><blockquote>\n<p>由于公司IOS客户端目前未实现这种协议，所以无法对这种唤醒方式做测试，日后明确支持此类协议，待测试功能后，再补充这部分详细内容！</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h2><p>首先，通过<strong>浏览器是无法判断是否安装了客户端程序的</strong>，因此整体的思路就是：<strong>尝试去通过上面的唤起方式来唤起本地客户端，如果唤起超时，则直接跳转到下载页</strong>；整个实现过程围绕这一点展开。</p>\n<p>在不考虑IOS9 Universal links唤醒方式的条件下，可以分为这几个步骤；</p>\n<ol>\n<li><strong>生成schema字符串</strong></li>\n</ol>\n<p>首先判断浏览器UA，如果为Chrome for Android，则必须安装 Android Intent的方式来组织schema字符串；如果为其他浏览器，则按照普通的schema方式来返回即可；<br><img src=\"http://i.imgur.com/fVd8LQ5.png\" alt=\"\"></p>\n<blockquote>\n<p>注意参数中包含的url地址需要进行encodeURIComponent编码</p>\n</blockquote>\n<p>2 .<strong>通过iframe或者a标签来加载schema</strong></p>\n<p>由于无法确定是否安装了客户端，因此通过window.location =  schema的方式可能导致浏览器跳转到错误页；所以通过iframe.src或a.href载入schema是目前比较常见的方法；</p>\n<p>相比于iframe和a，通过设置其diaplay为none来进行隐藏，这样即便链接错误也不会对当前页构成影响，但是对于a标签，在未安装客户端的情况下，仍然会存在提示访问不存在的情况（比如opera），所以在选取上的优先级是：iframe&gt;a&gt;window.location,只有在iframe.href 无法调用schema的情况下，才采用a.href的方式。</p>\n<p>经过非全面测试：</p>\n<ul>\n<li>Android系统上，Chrome for Android无法通过iframe.src 来调用schema，而通过a.href 的方式可以成功调用，而针对chrome内核的浏览器如猎豹，360，小米浏览器，<br>opera对于iframe.src和a.href的方式都能支持，所以对chrome及先关的内核的浏览器采用a.href的方式来调用scheme；对于其他浏览器，如UC，firefox,mobile QQ，sogou浏览器则采用iframe.src的方式调用schema。对于微信浏览器，则直接跳转到下载页。其他未经测试的浏览器，默认采用iframe.src来调用schema；</li>\n<li>IOS 9系统上，Safari浏览器无法通过iframe.src的方式调用schema，对于UC，Chrome，百度浏览器，mobileQQ只能通过a.href的方式进行调用schema；对于微信浏览器，默认跳转到下载页；</li>\n</ul>\n<p>代码如下：</p>\n<p><img src=\"http://i.imgur.com/SCGLk2o.png\" alt=\"\"></p>\n<p>3 .<strong>处理客户端未安装的情况</strong></p>\n<p>前面提到无法确定客户端程序是否安装，所以在通过iframe和a调用schema时，会设置一个settimeout，超时，则跳转到下载页；</p>\n<blockquote>\n<p>此处的超时时间设置也十分关键，如果超时时间小于app启动时间，则未待app启动，就是执行setimeout的方法，如果超时时间较长，则当客户端程序未安装时，需要较长时间才能执行settimeout方法进入下载页。</p>\n</blockquote>\n<p><img src=\"http://i.imgur.com/5LoUk8D.png\" alt=\"\"></p>\n<blockquote>\n<p>代码中，进入到setimeout时，对跳转过程再次进行了限定；当浏览器因为启动app而切换到后台时，settimeout存在计时推迟或延迟的问题，此时，如果从app切换回浏览器端，则执行跳转代码时经历的时间应该大于setimeout所设置的时间；反之，如果本地客户端程序未安装，浏览器则不会进入后台程序，定时器则会准时执行，故应该跳转到下载页！</p>\n</blockquote>\n<p>在实际测试过程，当通过schema成功唤起客户端，再次返回浏览器时，发现页面已跳转至下载页面，因此对已设置的settimeout需要做一个清除处理；</p>\n<p>当本地app被唤起，app处于设备可视窗口最上层，则浏览器进入后台程序页面会隐藏掉，会触发pagehide与visibilitychange事件，此时应该清除setimeout事件,于此同时，document.hide属性为true，因此setimeout内也不做跳转动作，防止页面跳转至下载页面；<br>此时，有几个事件比较关键：</p>\n<pre><code>pagehide: 页面隐藏时触发\n\nvisibilitychange： 页面隐藏没有在当前显示时触发，比如切换tab，也会触发该事件\n\ndocument.hidden 当页面隐藏时，该值为true，显示时为false\n</code></pre><p>为了尽可能的兼容多的浏览器，所以讲这几个事件都进行绑定！<br>代码如下。</p>\n<p><img src=\"http://i.imgur.com/ZHp2spo.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h2><ol>\n<li><p>Android平台（小米3 手机测试）</p>\n<ul>\n<li>经测试，可唤起chrome，Firefox，uc，360，mibrowser，sogou，liebao，mobileQQ浏览器；</li>\n<li>新版opera浏览器采用webkit内核，但是当客户端未安装时跳转下载页会会出错，提示页面不存在；</li>\n<li>微信不支持登陆，直接做了跳转到下载页处理；</li>\n<li>Android上启动相对比较慢，导致很容易启动超时而跳转到下载页面；</li>\n<li>测试页面在本机，百度浏览器会上报检测url合法性，导致唤醒不成功</li>\n</ul>\n<p><img src=\"http://i.imgur.com/917kCq1.png\" alt=\"\"></p>\n<p>2 . IOS平台（ip4，ip6+，ipad mini2）</p>\n<ul>\n<li>os7上Safari可用，其他浏览器为测试，条件限制；</li>\n<li>Safari，UC浏览器，Chrome 浏览器能唤起nn客户端，但是Safari会有 是否打开的提示；</li>\n<li>QQ webviwe上能打开，偶尔会失败；</li>\n<li>IOS上启动速度相对较快</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"相关代码\"><a href=\"#相关代码\" class=\"headerlink\" title=\"相关代码\"></a>相关代码</h2><p>对代码进行简单的封装，代码如下，在使用时需要针对当前的app做必要设置，采用UMD的写法：</p>\n<p>代码见<a href=\"https://github.com/AlanZhang001/H5CallUpNative/blob/master/tool-nativeSchema.js\" target=\"_blank\" rel=\"noopener\">tool-nativeSchema.js</a></p>\n<p>调用方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// COMMONJS 的方式引用，不能直接在浏览器中运行，需要打包转换</span><br><span class=\"line\">var nativeSchema = require(&quot;tool-nativeSchema.js&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">// Amd的方式</span><br><span class=\"line\">require([&quot;tool-nativeSchema.js&quot;],function(nativeSchema)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 直接引入</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;xxxx/tool-nativeSchema.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用</span><br><span class=\"line\">nativeSchema.loadSchema(&#123;</span><br><span class=\"line\">    // 某个schema协议，例如login,</span><br><span class=\"line\">    schema: &quot;&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    //schema头协议，</span><br><span class=\"line\">    protocal:&quot;xxx&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    //发起唤醒请求后，会等待loadWaiting时间，超时则跳转到failUrl，默认3000ms</span><br><span class=\"line\">    loadWaiting:&quot;3000&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    //唤起失败时的跳转链接，默认跳转到应用商店下载页</span><br><span class=\"line\">    failUrl:&quot;xxx&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">    // Android 客户端信息,可以询问 Android同事</span><br><span class=\"line\">    apkInfo:&#123;</span><br><span class=\"line\">        PKG:&quot;&quot;,</span><br><span class=\"line\">        CATEGORY:&quot;&quot;,</span><br><span class=\"line\">        ACTION:&quot;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"研究意义\"><a href=\"#研究意义\" class=\"headerlink\" title=\"研究意义\"></a>研究意义</h2><p> <strong>便于通过相关H5页面进入Native客户端，提升用户体验，提升App用户粘度；</strong><br>   对于未安装客户端的用户，可引导进入下载通道，如下场景图：</p>\n<p><img src=\"http://i.imgur.com/ymKiJJM.png\" alt=\"\"></p>\n<h2 id=\"存在的问题\"><a href=\"#存在的问题\" class=\"headerlink\" title=\"存在的问题\"></a>存在的问题</h2><ol>\n<li>在没有安装客户端程序的时候，opera无法跳转到指定页的失败页；</li>\n<li>通过微信唤醒客户端目前不可行，Android上需要微信设置白名单；IOS上，需要微信设置白名单或者通过Universal links（IOS9+）协议；</li>\n<li>尚未对IOS9的 Universal links协议进行功能测试。</li>\n<li>代码中使用的各种时间如：settimeout定时时间均根据本机测试进行的调整，普遍性需要进一步验证</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><ol>\n<li>经过自行测试及网上查阅资料，目前尚未找到完美的解决方案；</li>\n<li>对于文中的不足和错误，欢迎指出。</li>\n<li>转载请说明出处，以方便追本溯源修正文中错误</li>\n</ol>\n<h2 id=\"相关阅读链接\"><a href=\"#相关阅读链接\" class=\"headerlink\" title=\"相关阅读链接\"></a>相关阅读链接</h2><ul>\n<li><a href=\"https://developer.chrome.com/multidevice/android/intents\" target=\"_blank\" rel=\"noopener\">https://developer.chrome.com/multidevice/android/intents</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000005848133?_ea=938555\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000005848133?_ea=938555</a></li>\n<li><a href=\"http://www.w3ctech.com/topic/287?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener\">http://www.w3ctech.com/topic/287?utm_source=tuicool&amp;utm_medium=referral</a></li>\n<li><a href=\"http://blog.html5funny.com/2015/06/19/open-app-from-mobile-web-browser-or-webview/\" target=\"_blank\" rel=\"noopener\">http://blog.html5funny.com/2015/06/19/open-app-from-mobile-web-browser-or-webview/</a></li>\n<li><a href=\"http://echozq.github.io/echo-blog/2015/11/13/callapp.html\" target=\"_blank\" rel=\"noopener\">http://echozq.github.io/echo-blog/2015/11/13/callapp.html</a></li>\n</ul>\n<p>原文发表于<a href=\"https://github.com/AlanZhang001/H5CallUpNative\" target=\"_blank\" rel=\"noopener\">https://github.com/AlanZhang001/H5CallUpNative</a></p>"},{"title":"ThreeJS四步制作一个简易魔方","date":"2017-03-03T06:00:00.000Z","author":"Young","_content":"\n## 概述\n\n去年之所以再次兴起了学习WebGL的念头，主要是有两个原因；第一个是想制作一个魔方玩，另外一个是想用Web技术还原一些经典电影的经典镜头，比如《Cast Away》又译《荒岛余生》中电影快结束时主人公站在十字路口的场景。\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-0.jpg\">\n\n现在看来我想第一个目的已经达成了，有点可惜的是在此之前已经有很多人做过同样的事了，比如：\n\n+ [https://github.com/miniwangdali/SimpleRubiksCube](https://github.com/miniwangdali/SimpleRubiksCube)\n+ [https://www.google.com/logos/2014/rubiks/iframe/index.html](https://www.google.com/logos/2014/rubiks/iframe/index.html)\n\n站在前人的肩膀上整个事情简单了很多，但是解决问题所带来的成就感也相对减少了很多，这也是没有办法的事情了。\n\n<!--more-->\n\n## 前言\n\n首先我假设你是一名前端工程师而且已经初步了解WebGL和ThreeJS的基础知识，比如坐标系、相机、光线、矩阵、弧度等；\n\n如若不清楚可以浏览以前几篇文章快速入门：\n\n+ [WebGL ThreeJS学习总结一](https://newbieweb.lione.me/2016/10/19/WebGL%20ThreeJS%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%B8%80/)\n+ [WebGL ThreeJS学习总结二](https://newbieweb.lione.me/2016/10/19/WebGL%20ThreeJS%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%BA%8C/)\n+ [WebGL ThreeJS学习总结三](https://newbieweb.lione.me/2017/02/26/WebGL%20ThreeJS%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%B8%89/)\n\n## 编码\n\n### 第一步：搭架子 \n\n从我短暂的ThreeJS编程经验来看，有个通用的的架构能处理大部分情况，如下：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-1.jpg\">\n\n第一步完整代码如下：\n\n[https://github.com/newbieYoung/Threejs_rubik/blob/master/step1.html](https://github.com/newbieYoung/Threejs_rubik/blob/master/step1.html)\n\n### 第二步：画外型\n\n魔方的外型很简单，就是由一些小正方体组成的一个大正方体而已。\n\n用一个方法封装起来：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-2.jpg\">\n\n> 基本都是些ThreeJS对象的简单运用，比如盒子对象`BoxGeometry`、纹理`Texture`、材质`MeshLambertMaterial`等，纹理主要是用来描述物体表面静态属性的对象，材质主要是用来描述物体表面动态属性的对象，比如处理光照等，不知道这么理解有没有问题。\n\n其中`faces`方法主要是生成一块黑色边框的大正方形其内部是某种颜色填充的圆角小正方形的canvas画布，用来充当纹理渲染魔方中小正方体的某个面。\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-3.png\">\n\n如果把这个canvas画布渲染出来，大致是下边这样的：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-5.png\">\n\n另外基于魔方中心在坐标系原点从而推算出所有小正方体中心点坐标可以画图理解如下：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-4.jpg\">\n\n最后需要把生成的魔方加入到场景中才会被渲染出来：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-6.png\">\n\n第二步完整代码如下：\n\n[https://github.com/newbieYoung/Threejs_rubik/blob/master/step2.html](https://github.com/newbieYoung/Threejs_rubik/blob/master/step2.html)\n\n此时在浏览器中运行第二步完整代码应该是下边这个样子的：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-7.png\">\n\n此时相比于第一步一片空白的页面而言，此时页面中多了一个类似九宫格的正方形，有人可能会说大兄弟要画这么个玩意用得着ThreeJS吗，DIV+CSS分分钟搞定......\n\n其实之所以会这样是因为我们设置的`相机`的位置是在坐标系的Z轴，魔方的中心在坐标系原点，它们刚好处于同一条直线上，导致显示出来的是魔方的正视图。\n\n### 第三步：操控魔方视角\n\n第二步完成之后有个很严重的问题，我们只能看到魔方的正面，为了解决这个问题我们需要让`相机`随着鼠标或者触摸点的移动而移动；\n\n在ThreeJS中作者提供了很多种视角控制类库，比如：\n\n+ 轨迹球控件`TrackballControls`(最常用的控件,用鼠标控制相机移动和转动)；\n\n+ 飞行控件`FlyControls`(飞行模拟器控件,用键盘和鼠标控制相机移动和旋转)；\n\n+ 翻滚控件`RollControls`(翻滚控件是飞行控件的简化版,控制相机绕Z轴旋转)；\n\n+ 第一人称控件`FirstPersonControls`(类似于第一人称视角的相机控件)；\n\n+ 轨道空间`OrbitControls`(类似于轨道中的卫星,控制鼠标和键盘在场景中游走)；\n\n+ 路径控件`PathControls`(控制相机在预定义的轨道上移动和旋转)；\n\n在这里我使用OrbitControls控制器，具体用法很简单如下：\n\n首先引入代码：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-8.png\">\n\n然后根据相机以及画布初始化即可：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-9.png\">\n\n第三步完整代码如下：\n\n[https://github.com/newbieYoung/Threejs_rubik/blob/master/step3.html](https://github.com/newbieYoung/Threejs_rubik/blob/master/step3.html)\n\n此时在浏览器中运行第三步完整代码应该是下边这个样子的：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-10.gif\">\n\n### 第四步：转动魔方\n\n经过前三步在视觉方面简易魔方已经完成了差不多了，但是依然欠缺很重要的东西，没办法转动连最基本的可玩性都没有；\n\n要想转动魔方需要解决以下几个问题：\n\n+ 首先得确定触摸点\n\n也就是说必须得在代码里边判断出魔方的哪个部位被触摸了，Canvas编程是没办法像DOM编程那样有完备的事件机制支持的；所以这个问题需要其它解决办法，比如在2D Canvas我们可以根据坐标来判断当前鼠标或者触摸点在哪个元素上，从而假定该元素获得了焦点；但是在WebGL中存在一个平面2D坐标映射为3D坐标的问题，万幸ThreeJS也提供了对应的解决方案`Raycaster`。\n\n简单来说就是模拟一道光从屏幕点击或者触摸的位置上开始，以相机朝向为方向，然后检测光线与物体的碰撞，可以得知距离、碰撞点以及哪些物体先碰撞哪些物体慢碰撞。\n\n首先得知道在页面的2D坐标，这里可以通过监听鼠标事件或者触摸事件来完成；\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-11.png\">\n\n`Raycaster`的调用也很简单，但是需要注意的是当魔方获得焦点时需要屏蔽视角的转动，给控制器的`enabled`属性置为false即可；另外如果魔方正在转动时下一次转动应该等这次转动完成才可以，这里用`isRotating`变量控制；开始一次转动时置为true，转动结束之后才还原为false。\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-12.png\">\n\n+ 然后得确定转动方向\n\n转动魔方时应该是存在有六个方向的，分别是X轴正方向、X轴负方向、Y轴正方向、Y轴负方向、Z轴正方向、Z轴负方向；\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-13.png\">\n\n先根据滑动时的两点确定转动向量，然后判断转动向量和这六个方向向量夹角最小的方向即为转动方向；\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-14.png\">\n\n但是光知道方向其实还是不能够转动魔方的，比如下图中从点`A`滑动到点`B`和从点`C`滑动到点`D`，滑动方向都是X轴的正方向，而且还有其它情况滑动方向是X轴正方向的；对魔方来说这完全是两种不同的情形，所以我们还需要知道是在哪个平面滑动的。\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-15.jpg\">\n\n判断是在哪个平面，我们可以通过该平面的法向量和哪个坐标轴平行来判断，比如如果滑动平面的法向量平行于坐标系的Y轴且等于Y轴正方向的单位向量，那么该滑动平面肯定是魔方的`上平面`，以此类推；上边那个判断转动方向的方法可以优化为如下这个样子：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-16.png\">\n\n那么接下来的问题就是怎么获得滑动平面的法向量了，所幸ThreeJS的光线碰撞检测机制除了能得到碰撞物体、碰撞点，还能得到碰撞平面；已知平面那么就可以获得平面法向量了。\n\n但是ThreeJS中有个问题需要我们注意，在ThreeJS中存在物体自身坐标系和世界坐标系的区分，在初始化时物体的坐标和世界坐标系一致，但是当物体发生变化之后它自身的坐标系也是会发生变化的；比如说刚开始某个物体`上平面`的法向量就是其自身坐标系Y轴正方向的单位向量，同时也是世界坐标系Y轴正方向的单位向量，如果该物体旋转180度之后，其`上平面`的法向量还是其自身坐标系Y轴正方向的单位向量，但是却是世界坐标系Y轴负方向的单位向量了，如图：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-17.jpg\">\n\n所以不能使用魔方中小正方体的碰撞平面，因为小正方体的坐标系是会随着小正方体的变化而变化的，此时需要再加入一个和魔方整体大小一样的透明正方体，然后根据该透明正方体的碰撞平面的法向量来判断。\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-18.png\">\n\n+ 再然后我们得根据转动方向、触发点获取转动物体\n\n比如上图中从点A滑动到点B，转动物体是魔方`上平面`的所有小正方体；\n\n至于怎么判断，有两种方法，第一种可以根据小正方体的中心点来判断，比如如果转动的是魔方`上平面`的正方体，那么已知触发点所在正方体的中心点，根据其Z轴大小就可以确定其它小正方体了；\n\n还有一种办法则是根据小正方体初始化时的编号规律来判断，转动之后更新编号，保证其规律不发生变化，后续判断依旧即可，从下边的简图很容易就能看出其编号规律。\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-19.jpg\">\n\n第二种方法有个好处在于，我们可以把转动之后更新的编号和初始化时的编号进行比较，来判断魔方是否回到初始化状态，也就是被还原正常了。\n\n> 这种方法不知道有问题没有，由于本人不会玩魔方所以一直没有测试。\n\n+ 最后是制作转动动画\n\n制作转动动画的过程中使用requestAnimationFrame，这没什么要说的；唯一要注意的地方还是关于物体自身坐标系和世界坐标系的问题，举例来说，绕世界坐标系Y轴旋转的方法应该是如下图所示：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-20.png\">\n\n第四步完整代码如下：\n\n[https://github.com/newbieYoung/Threejs_rubik/blob/master/step4.html](https://github.com/newbieYoung/Threejs_rubik/blob/master/step4.html)\n\n可以通过点击下边的链接来查看在线例子\n\n[https://yii-server.lione.me/harp-server/simple-cube](https://yii-server.lione.me/harp-server/simple-cube)\n\n## 拓展\n\n至此一个没什么卵用的魔方已经完成了，是时候开下脑洞了；\n\n+ 玩具店应该只有最简单的三阶魔方买，但是对这个例子稍加拓展，你甚至可以玩100阶魔方。\n\n+ 这个例子稍加扩展应该是能做出一些计时、计步的魔方游戏的。\n\n+ 这个例子稍加扩展结合摄像头和自动还原算法，应该是可以做到扫描现实中的魔方，然后根据自动还原算法还原，得到一步步还原魔方的动画演示例子的。","source":"_posts/threejs-webgl-cube.md","raw":"---\ntitle: ThreeJS四步制作一个简易魔方\ndate: 2017-03-03 14:00\ntags: [ThreeJS,WebGL]\ncategory: 技术预研\nauthor: Young\n---\n\n## 概述\n\n去年之所以再次兴起了学习WebGL的念头，主要是有两个原因；第一个是想制作一个魔方玩，另外一个是想用Web技术还原一些经典电影的经典镜头，比如《Cast Away》又译《荒岛余生》中电影快结束时主人公站在十字路口的场景。\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-0.jpg\">\n\n现在看来我想第一个目的已经达成了，有点可惜的是在此之前已经有很多人做过同样的事了，比如：\n\n+ [https://github.com/miniwangdali/SimpleRubiksCube](https://github.com/miniwangdali/SimpleRubiksCube)\n+ [https://www.google.com/logos/2014/rubiks/iframe/index.html](https://www.google.com/logos/2014/rubiks/iframe/index.html)\n\n站在前人的肩膀上整个事情简单了很多，但是解决问题所带来的成就感也相对减少了很多，这也是没有办法的事情了。\n\n<!--more-->\n\n## 前言\n\n首先我假设你是一名前端工程师而且已经初步了解WebGL和ThreeJS的基础知识，比如坐标系、相机、光线、矩阵、弧度等；\n\n如若不清楚可以浏览以前几篇文章快速入门：\n\n+ [WebGL ThreeJS学习总结一](https://newbieweb.lione.me/2016/10/19/WebGL%20ThreeJS%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%B8%80/)\n+ [WebGL ThreeJS学习总结二](https://newbieweb.lione.me/2016/10/19/WebGL%20ThreeJS%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%BA%8C/)\n+ [WebGL ThreeJS学习总结三](https://newbieweb.lione.me/2017/02/26/WebGL%20ThreeJS%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%B8%89/)\n\n## 编码\n\n### 第一步：搭架子 \n\n从我短暂的ThreeJS编程经验来看，有个通用的的架构能处理大部分情况，如下：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-1.jpg\">\n\n第一步完整代码如下：\n\n[https://github.com/newbieYoung/Threejs_rubik/blob/master/step1.html](https://github.com/newbieYoung/Threejs_rubik/blob/master/step1.html)\n\n### 第二步：画外型\n\n魔方的外型很简单，就是由一些小正方体组成的一个大正方体而已。\n\n用一个方法封装起来：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-2.jpg\">\n\n> 基本都是些ThreeJS对象的简单运用，比如盒子对象`BoxGeometry`、纹理`Texture`、材质`MeshLambertMaterial`等，纹理主要是用来描述物体表面静态属性的对象，材质主要是用来描述物体表面动态属性的对象，比如处理光照等，不知道这么理解有没有问题。\n\n其中`faces`方法主要是生成一块黑色边框的大正方形其内部是某种颜色填充的圆角小正方形的canvas画布，用来充当纹理渲染魔方中小正方体的某个面。\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-3.png\">\n\n如果把这个canvas画布渲染出来，大致是下边这样的：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-5.png\">\n\n另外基于魔方中心在坐标系原点从而推算出所有小正方体中心点坐标可以画图理解如下：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-4.jpg\">\n\n最后需要把生成的魔方加入到场景中才会被渲染出来：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-6.png\">\n\n第二步完整代码如下：\n\n[https://github.com/newbieYoung/Threejs_rubik/blob/master/step2.html](https://github.com/newbieYoung/Threejs_rubik/blob/master/step2.html)\n\n此时在浏览器中运行第二步完整代码应该是下边这个样子的：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-7.png\">\n\n此时相比于第一步一片空白的页面而言，此时页面中多了一个类似九宫格的正方形，有人可能会说大兄弟要画这么个玩意用得着ThreeJS吗，DIV+CSS分分钟搞定......\n\n其实之所以会这样是因为我们设置的`相机`的位置是在坐标系的Z轴，魔方的中心在坐标系原点，它们刚好处于同一条直线上，导致显示出来的是魔方的正视图。\n\n### 第三步：操控魔方视角\n\n第二步完成之后有个很严重的问题，我们只能看到魔方的正面，为了解决这个问题我们需要让`相机`随着鼠标或者触摸点的移动而移动；\n\n在ThreeJS中作者提供了很多种视角控制类库，比如：\n\n+ 轨迹球控件`TrackballControls`(最常用的控件,用鼠标控制相机移动和转动)；\n\n+ 飞行控件`FlyControls`(飞行模拟器控件,用键盘和鼠标控制相机移动和旋转)；\n\n+ 翻滚控件`RollControls`(翻滚控件是飞行控件的简化版,控制相机绕Z轴旋转)；\n\n+ 第一人称控件`FirstPersonControls`(类似于第一人称视角的相机控件)；\n\n+ 轨道空间`OrbitControls`(类似于轨道中的卫星,控制鼠标和键盘在场景中游走)；\n\n+ 路径控件`PathControls`(控制相机在预定义的轨道上移动和旋转)；\n\n在这里我使用OrbitControls控制器，具体用法很简单如下：\n\n首先引入代码：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-8.png\">\n\n然后根据相机以及画布初始化即可：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-9.png\">\n\n第三步完整代码如下：\n\n[https://github.com/newbieYoung/Threejs_rubik/blob/master/step3.html](https://github.com/newbieYoung/Threejs_rubik/blob/master/step3.html)\n\n此时在浏览器中运行第三步完整代码应该是下边这个样子的：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-10.gif\">\n\n### 第四步：转动魔方\n\n经过前三步在视觉方面简易魔方已经完成了差不多了，但是依然欠缺很重要的东西，没办法转动连最基本的可玩性都没有；\n\n要想转动魔方需要解决以下几个问题：\n\n+ 首先得确定触摸点\n\n也就是说必须得在代码里边判断出魔方的哪个部位被触摸了，Canvas编程是没办法像DOM编程那样有完备的事件机制支持的；所以这个问题需要其它解决办法，比如在2D Canvas我们可以根据坐标来判断当前鼠标或者触摸点在哪个元素上，从而假定该元素获得了焦点；但是在WebGL中存在一个平面2D坐标映射为3D坐标的问题，万幸ThreeJS也提供了对应的解决方案`Raycaster`。\n\n简单来说就是模拟一道光从屏幕点击或者触摸的位置上开始，以相机朝向为方向，然后检测光线与物体的碰撞，可以得知距离、碰撞点以及哪些物体先碰撞哪些物体慢碰撞。\n\n首先得知道在页面的2D坐标，这里可以通过监听鼠标事件或者触摸事件来完成；\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-11.png\">\n\n`Raycaster`的调用也很简单，但是需要注意的是当魔方获得焦点时需要屏蔽视角的转动，给控制器的`enabled`属性置为false即可；另外如果魔方正在转动时下一次转动应该等这次转动完成才可以，这里用`isRotating`变量控制；开始一次转动时置为true，转动结束之后才还原为false。\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-12.png\">\n\n+ 然后得确定转动方向\n\n转动魔方时应该是存在有六个方向的，分别是X轴正方向、X轴负方向、Y轴正方向、Y轴负方向、Z轴正方向、Z轴负方向；\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-13.png\">\n\n先根据滑动时的两点确定转动向量，然后判断转动向量和这六个方向向量夹角最小的方向即为转动方向；\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-14.png\">\n\n但是光知道方向其实还是不能够转动魔方的，比如下图中从点`A`滑动到点`B`和从点`C`滑动到点`D`，滑动方向都是X轴的正方向，而且还有其它情况滑动方向是X轴正方向的；对魔方来说这完全是两种不同的情形，所以我们还需要知道是在哪个平面滑动的。\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-15.jpg\">\n\n判断是在哪个平面，我们可以通过该平面的法向量和哪个坐标轴平行来判断，比如如果滑动平面的法向量平行于坐标系的Y轴且等于Y轴正方向的单位向量，那么该滑动平面肯定是魔方的`上平面`，以此类推；上边那个判断转动方向的方法可以优化为如下这个样子：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-16.png\">\n\n那么接下来的问题就是怎么获得滑动平面的法向量了，所幸ThreeJS的光线碰撞检测机制除了能得到碰撞物体、碰撞点，还能得到碰撞平面；已知平面那么就可以获得平面法向量了。\n\n但是ThreeJS中有个问题需要我们注意，在ThreeJS中存在物体自身坐标系和世界坐标系的区分，在初始化时物体的坐标和世界坐标系一致，但是当物体发生变化之后它自身的坐标系也是会发生变化的；比如说刚开始某个物体`上平面`的法向量就是其自身坐标系Y轴正方向的单位向量，同时也是世界坐标系Y轴正方向的单位向量，如果该物体旋转180度之后，其`上平面`的法向量还是其自身坐标系Y轴正方向的单位向量，但是却是世界坐标系Y轴负方向的单位向量了，如图：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-17.jpg\">\n\n所以不能使用魔方中小正方体的碰撞平面，因为小正方体的坐标系是会随着小正方体的变化而变化的，此时需要再加入一个和魔方整体大小一样的透明正方体，然后根据该透明正方体的碰撞平面的法向量来判断。\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-18.png\">\n\n+ 再然后我们得根据转动方向、触发点获取转动物体\n\n比如上图中从点A滑动到点B，转动物体是魔方`上平面`的所有小正方体；\n\n至于怎么判断，有两种方法，第一种可以根据小正方体的中心点来判断，比如如果转动的是魔方`上平面`的正方体，那么已知触发点所在正方体的中心点，根据其Z轴大小就可以确定其它小正方体了；\n\n还有一种办法则是根据小正方体初始化时的编号规律来判断，转动之后更新编号，保证其规律不发生变化，后续判断依旧即可，从下边的简图很容易就能看出其编号规律。\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-19.jpg\">\n\n第二种方法有个好处在于，我们可以把转动之后更新的编号和初始化时的编号进行比较，来判断魔方是否回到初始化状态，也就是被还原正常了。\n\n> 这种方法不知道有问题没有，由于本人不会玩魔方所以一直没有测试。\n\n+ 最后是制作转动动画\n\n制作转动动画的过程中使用requestAnimationFrame，这没什么要说的；唯一要注意的地方还是关于物体自身坐标系和世界坐标系的问题，举例来说，绕世界坐标系Y轴旋转的方法应该是如下图所示：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-20.png\">\n\n第四步完整代码如下：\n\n[https://github.com/newbieYoung/Threejs_rubik/blob/master/step4.html](https://github.com/newbieYoung/Threejs_rubik/blob/master/step4.html)\n\n可以通过点击下边的链接来查看在线例子\n\n[https://yii-server.lione.me/harp-server/simple-cube](https://yii-server.lione.me/harp-server/simple-cube)\n\n## 拓展\n\n至此一个没什么卵用的魔方已经完成了，是时候开下脑洞了；\n\n+ 玩具店应该只有最简单的三阶魔方买，但是对这个例子稍加拓展，你甚至可以玩100阶魔方。\n\n+ 这个例子稍加扩展应该是能做出一些计时、计步的魔方游戏的。\n\n+ 这个例子稍加扩展结合摄像头和自动还原算法，应该是可以做到扫描现实中的魔方，然后根据自动还原算法还原，得到一步步还原魔方的动画演示例子的。","slug":"threejs-webgl-cube","published":1,"updated":"2017-12-01T08:50:00.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknkh003rjxs19omvlw2m","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>去年之所以再次兴起了学习WebGL的念头，主要是有两个原因；第一个是想制作一个魔方玩，另外一个是想用Web技术还原一些经典电影的经典镜头，比如《Cast Away》又译《荒岛余生》中电影快结束时主人公站在十字路口的场景。</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-0.jpg\"></p>\n<p>现在看来我想第一个目的已经达成了，有点可惜的是在此之前已经有很多人做过同样的事了，比如：</p>\n<ul>\n<li><a href=\"https://github.com/miniwangdali/SimpleRubiksCube\" target=\"_blank\" rel=\"noopener\">https://github.com/miniwangdali/SimpleRubiksCube</a></li>\n<li><a href=\"https://www.google.com/logos/2014/rubiks/iframe/index.html\" target=\"_blank\" rel=\"noopener\">https://www.google.com/logos/2014/rubiks/iframe/index.html</a></li>\n</ul>\n<p>站在前人的肩膀上整个事情简单了很多，但是解决问题所带来的成就感也相对减少了很多，这也是没有办法的事情了。</p>\n<a id=\"more\"></a>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>首先我假设你是一名前端工程师而且已经初步了解WebGL和ThreeJS的基础知识，比如坐标系、相机、光线、矩阵、弧度等；</p>\n<p>如若不清楚可以浏览以前几篇文章快速入门：</p>\n<ul>\n<li><a href=\"https://newbieweb.lione.me/2016/10/19/WebGL%20ThreeJS%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%B8%80/\" target=\"_blank\" rel=\"noopener\">WebGL ThreeJS学习总结一</a></li>\n<li><a href=\"https://newbieweb.lione.me/2016/10/19/WebGL%20ThreeJS%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%BA%8C/\" target=\"_blank\" rel=\"noopener\">WebGL ThreeJS学习总结二</a></li>\n<li><a href=\"https://newbieweb.lione.me/2017/02/26/WebGL%20ThreeJS%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%B8%89/\" target=\"_blank\" rel=\"noopener\">WebGL ThreeJS学习总结三</a></li>\n</ul>\n<h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><h3 id=\"第一步：搭架子\"><a href=\"#第一步：搭架子\" class=\"headerlink\" title=\"第一步：搭架子\"></a>第一步：搭架子</h3><p>从我短暂的ThreeJS编程经验来看，有个通用的的架构能处理大部分情况，如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-1.jpg\"></p>\n<p>第一步完整代码如下：</p>\n<p><a href=\"https://github.com/newbieYoung/Threejs_rubik/blob/master/step1.html\" target=\"_blank\" rel=\"noopener\">https://github.com/newbieYoung/Threejs_rubik/blob/master/step1.html</a></p>\n<h3 id=\"第二步：画外型\"><a href=\"#第二步：画外型\" class=\"headerlink\" title=\"第二步：画外型\"></a>第二步：画外型</h3><p>魔方的外型很简单，就是由一些小正方体组成的一个大正方体而已。</p>\n<p>用一个方法封装起来：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-2.jpg\"></p>\n<blockquote>\n<p>基本都是些ThreeJS对象的简单运用，比如盒子对象<code>BoxGeometry</code>、纹理<code>Texture</code>、材质<code>MeshLambertMaterial</code>等，纹理主要是用来描述物体表面静态属性的对象，材质主要是用来描述物体表面动态属性的对象，比如处理光照等，不知道这么理解有没有问题。</p>\n</blockquote>\n<p>其中<code>faces</code>方法主要是生成一块黑色边框的大正方形其内部是某种颜色填充的圆角小正方形的canvas画布，用来充当纹理渲染魔方中小正方体的某个面。</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-3.png\"></p>\n<p>如果把这个canvas画布渲染出来，大致是下边这样的：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-5.png\"></p>\n<p>另外基于魔方中心在坐标系原点从而推算出所有小正方体中心点坐标可以画图理解如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-4.jpg\"></p>\n<p>最后需要把生成的魔方加入到场景中才会被渲染出来：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-6.png\"></p>\n<p>第二步完整代码如下：</p>\n<p><a href=\"https://github.com/newbieYoung/Threejs_rubik/blob/master/step2.html\" target=\"_blank\" rel=\"noopener\">https://github.com/newbieYoung/Threejs_rubik/blob/master/step2.html</a></p>\n<p>此时在浏览器中运行第二步完整代码应该是下边这个样子的：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-7.png\"></p>\n<p>此时相比于第一步一片空白的页面而言，此时页面中多了一个类似九宫格的正方形，有人可能会说大兄弟要画这么个玩意用得着ThreeJS吗，DIV+CSS分分钟搞定……</p>\n<p>其实之所以会这样是因为我们设置的<code>相机</code>的位置是在坐标系的Z轴，魔方的中心在坐标系原点，它们刚好处于同一条直线上，导致显示出来的是魔方的正视图。</p>\n<h3 id=\"第三步：操控魔方视角\"><a href=\"#第三步：操控魔方视角\" class=\"headerlink\" title=\"第三步：操控魔方视角\"></a>第三步：操控魔方视角</h3><p>第二步完成之后有个很严重的问题，我们只能看到魔方的正面，为了解决这个问题我们需要让<code>相机</code>随着鼠标或者触摸点的移动而移动；</p>\n<p>在ThreeJS中作者提供了很多种视角控制类库，比如：</p>\n<ul>\n<li><p>轨迹球控件<code>TrackballControls</code>(最常用的控件,用鼠标控制相机移动和转动)；</p>\n</li>\n<li><p>飞行控件<code>FlyControls</code>(飞行模拟器控件,用键盘和鼠标控制相机移动和旋转)；</p>\n</li>\n<li><p>翻滚控件<code>RollControls</code>(翻滚控件是飞行控件的简化版,控制相机绕Z轴旋转)；</p>\n</li>\n<li><p>第一人称控件<code>FirstPersonControls</code>(类似于第一人称视角的相机控件)；</p>\n</li>\n<li><p>轨道空间<code>OrbitControls</code>(类似于轨道中的卫星,控制鼠标和键盘在场景中游走)；</p>\n</li>\n<li><p>路径控件<code>PathControls</code>(控制相机在预定义的轨道上移动和旋转)；</p>\n</li>\n</ul>\n<p>在这里我使用OrbitControls控制器，具体用法很简单如下：</p>\n<p>首先引入代码：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-8.png\"></p>\n<p>然后根据相机以及画布初始化即可：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-9.png\"></p>\n<p>第三步完整代码如下：</p>\n<p><a href=\"https://github.com/newbieYoung/Threejs_rubik/blob/master/step3.html\" target=\"_blank\" rel=\"noopener\">https://github.com/newbieYoung/Threejs_rubik/blob/master/step3.html</a></p>\n<p>此时在浏览器中运行第三步完整代码应该是下边这个样子的：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-10.gif\"></p>\n<h3 id=\"第四步：转动魔方\"><a href=\"#第四步：转动魔方\" class=\"headerlink\" title=\"第四步：转动魔方\"></a>第四步：转动魔方</h3><p>经过前三步在视觉方面简易魔方已经完成了差不多了，但是依然欠缺很重要的东西，没办法转动连最基本的可玩性都没有；</p>\n<p>要想转动魔方需要解决以下几个问题：</p>\n<ul>\n<li>首先得确定触摸点</li>\n</ul>\n<p>也就是说必须得在代码里边判断出魔方的哪个部位被触摸了，Canvas编程是没办法像DOM编程那样有完备的事件机制支持的；所以这个问题需要其它解决办法，比如在2D Canvas我们可以根据坐标来判断当前鼠标或者触摸点在哪个元素上，从而假定该元素获得了焦点；但是在WebGL中存在一个平面2D坐标映射为3D坐标的问题，万幸ThreeJS也提供了对应的解决方案<code>Raycaster</code>。</p>\n<p>简单来说就是模拟一道光从屏幕点击或者触摸的位置上开始，以相机朝向为方向，然后检测光线与物体的碰撞，可以得知距离、碰撞点以及哪些物体先碰撞哪些物体慢碰撞。</p>\n<p>首先得知道在页面的2D坐标，这里可以通过监听鼠标事件或者触摸事件来完成；</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-11.png\"></p>\n<p><code>Raycaster</code>的调用也很简单，但是需要注意的是当魔方获得焦点时需要屏蔽视角的转动，给控制器的<code>enabled</code>属性置为false即可；另外如果魔方正在转动时下一次转动应该等这次转动完成才可以，这里用<code>isRotating</code>变量控制；开始一次转动时置为true，转动结束之后才还原为false。</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-12.png\"></p>\n<ul>\n<li>然后得确定转动方向</li>\n</ul>\n<p>转动魔方时应该是存在有六个方向的，分别是X轴正方向、X轴负方向、Y轴正方向、Y轴负方向、Z轴正方向、Z轴负方向；</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-13.png\"></p>\n<p>先根据滑动时的两点确定转动向量，然后判断转动向量和这六个方向向量夹角最小的方向即为转动方向；</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-14.png\"></p>\n<p>但是光知道方向其实还是不能够转动魔方的，比如下图中从点<code>A</code>滑动到点<code>B</code>和从点<code>C</code>滑动到点<code>D</code>，滑动方向都是X轴的正方向，而且还有其它情况滑动方向是X轴正方向的；对魔方来说这完全是两种不同的情形，所以我们还需要知道是在哪个平面滑动的。</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-15.jpg\"></p>\n<p>判断是在哪个平面，我们可以通过该平面的法向量和哪个坐标轴平行来判断，比如如果滑动平面的法向量平行于坐标系的Y轴且等于Y轴正方向的单位向量，那么该滑动平面肯定是魔方的<code>上平面</code>，以此类推；上边那个判断转动方向的方法可以优化为如下这个样子：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-16.png\"></p>\n<p>那么接下来的问题就是怎么获得滑动平面的法向量了，所幸ThreeJS的光线碰撞检测机制除了能得到碰撞物体、碰撞点，还能得到碰撞平面；已知平面那么就可以获得平面法向量了。</p>\n<p>但是ThreeJS中有个问题需要我们注意，在ThreeJS中存在物体自身坐标系和世界坐标系的区分，在初始化时物体的坐标和世界坐标系一致，但是当物体发生变化之后它自身的坐标系也是会发生变化的；比如说刚开始某个物体<code>上平面</code>的法向量就是其自身坐标系Y轴正方向的单位向量，同时也是世界坐标系Y轴正方向的单位向量，如果该物体旋转180度之后，其<code>上平面</code>的法向量还是其自身坐标系Y轴正方向的单位向量，但是却是世界坐标系Y轴负方向的单位向量了，如图：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-17.jpg\"></p>\n<p>所以不能使用魔方中小正方体的碰撞平面，因为小正方体的坐标系是会随着小正方体的变化而变化的，此时需要再加入一个和魔方整体大小一样的透明正方体，然后根据该透明正方体的碰撞平面的法向量来判断。</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-18.png\"></p>\n<ul>\n<li>再然后我们得根据转动方向、触发点获取转动物体</li>\n</ul>\n<p>比如上图中从点A滑动到点B，转动物体是魔方<code>上平面</code>的所有小正方体；</p>\n<p>至于怎么判断，有两种方法，第一种可以根据小正方体的中心点来判断，比如如果转动的是魔方<code>上平面</code>的正方体，那么已知触发点所在正方体的中心点，根据其Z轴大小就可以确定其它小正方体了；</p>\n<p>还有一种办法则是根据小正方体初始化时的编号规律来判断，转动之后更新编号，保证其规律不发生变化，后续判断依旧即可，从下边的简图很容易就能看出其编号规律。</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-19.jpg\"></p>\n<p>第二种方法有个好处在于，我们可以把转动之后更新的编号和初始化时的编号进行比较，来判断魔方是否回到初始化状态，也就是被还原正常了。</p>\n<blockquote>\n<p>这种方法不知道有问题没有，由于本人不会玩魔方所以一直没有测试。</p>\n</blockquote>\n<ul>\n<li>最后是制作转动动画</li>\n</ul>\n<p>制作转动动画的过程中使用requestAnimationFrame，这没什么要说的；唯一要注意的地方还是关于物体自身坐标系和世界坐标系的问题，举例来说，绕世界坐标系Y轴旋转的方法应该是如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-20.png\"></p>\n<p>第四步完整代码如下：</p>\n<p><a href=\"https://github.com/newbieYoung/Threejs_rubik/blob/master/step4.html\" target=\"_blank\" rel=\"noopener\">https://github.com/newbieYoung/Threejs_rubik/blob/master/step4.html</a></p>\n<p>可以通过点击下边的链接来查看在线例子</p>\n<p><a href=\"https://yii-server.lione.me/harp-server/simple-cube\" target=\"_blank\" rel=\"noopener\">https://yii-server.lione.me/harp-server/simple-cube</a></p>\n<h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><p>至此一个没什么卵用的魔方已经完成了，是时候开下脑洞了；</p>\n<ul>\n<li><p>玩具店应该只有最简单的三阶魔方买，但是对这个例子稍加拓展，你甚至可以玩100阶魔方。</p>\n</li>\n<li><p>这个例子稍加扩展应该是能做出一些计时、计步的魔方游戏的。</p>\n</li>\n<li><p>这个例子稍加扩展结合摄像头和自动还原算法，应该是可以做到扫描现实中的魔方，然后根据自动还原算法还原，得到一步步还原魔方的动画演示例子的。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>去年之所以再次兴起了学习WebGL的念头，主要是有两个原因；第一个是想制作一个魔方玩，另外一个是想用Web技术还原一些经典电影的经典镜头，比如《Cast Away》又译《荒岛余生》中电影快结束时主人公站在十字路口的场景。</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-0.jpg\"></p>\n<p>现在看来我想第一个目的已经达成了，有点可惜的是在此之前已经有很多人做过同样的事了，比如：</p>\n<ul>\n<li><a href=\"https://github.com/miniwangdali/SimpleRubiksCube\" target=\"_blank\" rel=\"noopener\">https://github.com/miniwangdali/SimpleRubiksCube</a></li>\n<li><a href=\"https://www.google.com/logos/2014/rubiks/iframe/index.html\" target=\"_blank\" rel=\"noopener\">https://www.google.com/logos/2014/rubiks/iframe/index.html</a></li>\n</ul>\n<p>站在前人的肩膀上整个事情简单了很多，但是解决问题所带来的成就感也相对减少了很多，这也是没有办法的事情了。</p>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>首先我假设你是一名前端工程师而且已经初步了解WebGL和ThreeJS的基础知识，比如坐标系、相机、光线、矩阵、弧度等；</p>\n<p>如若不清楚可以浏览以前几篇文章快速入门：</p>\n<ul>\n<li><a href=\"https://newbieweb.lione.me/2016/10/19/WebGL%20ThreeJS%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%B8%80/\" target=\"_blank\" rel=\"noopener\">WebGL ThreeJS学习总结一</a></li>\n<li><a href=\"https://newbieweb.lione.me/2016/10/19/WebGL%20ThreeJS%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%BA%8C/\" target=\"_blank\" rel=\"noopener\">WebGL ThreeJS学习总结二</a></li>\n<li><a href=\"https://newbieweb.lione.me/2017/02/26/WebGL%20ThreeJS%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%B8%89/\" target=\"_blank\" rel=\"noopener\">WebGL ThreeJS学习总结三</a></li>\n</ul>\n<h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><h3 id=\"第一步：搭架子\"><a href=\"#第一步：搭架子\" class=\"headerlink\" title=\"第一步：搭架子\"></a>第一步：搭架子</h3><p>从我短暂的ThreeJS编程经验来看，有个通用的的架构能处理大部分情况，如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-1.jpg\"></p>\n<p>第一步完整代码如下：</p>\n<p><a href=\"https://github.com/newbieYoung/Threejs_rubik/blob/master/step1.html\" target=\"_blank\" rel=\"noopener\">https://github.com/newbieYoung/Threejs_rubik/blob/master/step1.html</a></p>\n<h3 id=\"第二步：画外型\"><a href=\"#第二步：画外型\" class=\"headerlink\" title=\"第二步：画外型\"></a>第二步：画外型</h3><p>魔方的外型很简单，就是由一些小正方体组成的一个大正方体而已。</p>\n<p>用一个方法封装起来：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-2.jpg\"></p>\n<blockquote>\n<p>基本都是些ThreeJS对象的简单运用，比如盒子对象<code>BoxGeometry</code>、纹理<code>Texture</code>、材质<code>MeshLambertMaterial</code>等，纹理主要是用来描述物体表面静态属性的对象，材质主要是用来描述物体表面动态属性的对象，比如处理光照等，不知道这么理解有没有问题。</p>\n</blockquote>\n<p>其中<code>faces</code>方法主要是生成一块黑色边框的大正方形其内部是某种颜色填充的圆角小正方形的canvas画布，用来充当纹理渲染魔方中小正方体的某个面。</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-3.png\"></p>\n<p>如果把这个canvas画布渲染出来，大致是下边这样的：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-5.png\"></p>\n<p>另外基于魔方中心在坐标系原点从而推算出所有小正方体中心点坐标可以画图理解如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-4.jpg\"></p>\n<p>最后需要把生成的魔方加入到场景中才会被渲染出来：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-6.png\"></p>\n<p>第二步完整代码如下：</p>\n<p><a href=\"https://github.com/newbieYoung/Threejs_rubik/blob/master/step2.html\" target=\"_blank\" rel=\"noopener\">https://github.com/newbieYoung/Threejs_rubik/blob/master/step2.html</a></p>\n<p>此时在浏览器中运行第二步完整代码应该是下边这个样子的：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-7.png\"></p>\n<p>此时相比于第一步一片空白的页面而言，此时页面中多了一个类似九宫格的正方形，有人可能会说大兄弟要画这么个玩意用得着ThreeJS吗，DIV+CSS分分钟搞定……</p>\n<p>其实之所以会这样是因为我们设置的<code>相机</code>的位置是在坐标系的Z轴，魔方的中心在坐标系原点，它们刚好处于同一条直线上，导致显示出来的是魔方的正视图。</p>\n<h3 id=\"第三步：操控魔方视角\"><a href=\"#第三步：操控魔方视角\" class=\"headerlink\" title=\"第三步：操控魔方视角\"></a>第三步：操控魔方视角</h3><p>第二步完成之后有个很严重的问题，我们只能看到魔方的正面，为了解决这个问题我们需要让<code>相机</code>随着鼠标或者触摸点的移动而移动；</p>\n<p>在ThreeJS中作者提供了很多种视角控制类库，比如：</p>\n<ul>\n<li><p>轨迹球控件<code>TrackballControls</code>(最常用的控件,用鼠标控制相机移动和转动)；</p>\n</li>\n<li><p>飞行控件<code>FlyControls</code>(飞行模拟器控件,用键盘和鼠标控制相机移动和旋转)；</p>\n</li>\n<li><p>翻滚控件<code>RollControls</code>(翻滚控件是飞行控件的简化版,控制相机绕Z轴旋转)；</p>\n</li>\n<li><p>第一人称控件<code>FirstPersonControls</code>(类似于第一人称视角的相机控件)；</p>\n</li>\n<li><p>轨道空间<code>OrbitControls</code>(类似于轨道中的卫星,控制鼠标和键盘在场景中游走)；</p>\n</li>\n<li><p>路径控件<code>PathControls</code>(控制相机在预定义的轨道上移动和旋转)；</p>\n</li>\n</ul>\n<p>在这里我使用OrbitControls控制器，具体用法很简单如下：</p>\n<p>首先引入代码：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-8.png\"></p>\n<p>然后根据相机以及画布初始化即可：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-9.png\"></p>\n<p>第三步完整代码如下：</p>\n<p><a href=\"https://github.com/newbieYoung/Threejs_rubik/blob/master/step3.html\" target=\"_blank\" rel=\"noopener\">https://github.com/newbieYoung/Threejs_rubik/blob/master/step3.html</a></p>\n<p>此时在浏览器中运行第三步完整代码应该是下边这个样子的：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-10.gif\"></p>\n<h3 id=\"第四步：转动魔方\"><a href=\"#第四步：转动魔方\" class=\"headerlink\" title=\"第四步：转动魔方\"></a>第四步：转动魔方</h3><p>经过前三步在视觉方面简易魔方已经完成了差不多了，但是依然欠缺很重要的东西，没办法转动连最基本的可玩性都没有；</p>\n<p>要想转动魔方需要解决以下几个问题：</p>\n<ul>\n<li>首先得确定触摸点</li>\n</ul>\n<p>也就是说必须得在代码里边判断出魔方的哪个部位被触摸了，Canvas编程是没办法像DOM编程那样有完备的事件机制支持的；所以这个问题需要其它解决办法，比如在2D Canvas我们可以根据坐标来判断当前鼠标或者触摸点在哪个元素上，从而假定该元素获得了焦点；但是在WebGL中存在一个平面2D坐标映射为3D坐标的问题，万幸ThreeJS也提供了对应的解决方案<code>Raycaster</code>。</p>\n<p>简单来说就是模拟一道光从屏幕点击或者触摸的位置上开始，以相机朝向为方向，然后检测光线与物体的碰撞，可以得知距离、碰撞点以及哪些物体先碰撞哪些物体慢碰撞。</p>\n<p>首先得知道在页面的2D坐标，这里可以通过监听鼠标事件或者触摸事件来完成；</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-11.png\"></p>\n<p><code>Raycaster</code>的调用也很简单，但是需要注意的是当魔方获得焦点时需要屏蔽视角的转动，给控制器的<code>enabled</code>属性置为false即可；另外如果魔方正在转动时下一次转动应该等这次转动完成才可以，这里用<code>isRotating</code>变量控制；开始一次转动时置为true，转动结束之后才还原为false。</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-12.png\"></p>\n<ul>\n<li>然后得确定转动方向</li>\n</ul>\n<p>转动魔方时应该是存在有六个方向的，分别是X轴正方向、X轴负方向、Y轴正方向、Y轴负方向、Z轴正方向、Z轴负方向；</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-13.png\"></p>\n<p>先根据滑动时的两点确定转动向量，然后判断转动向量和这六个方向向量夹角最小的方向即为转动方向；</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-14.png\"></p>\n<p>但是光知道方向其实还是不能够转动魔方的，比如下图中从点<code>A</code>滑动到点<code>B</code>和从点<code>C</code>滑动到点<code>D</code>，滑动方向都是X轴的正方向，而且还有其它情况滑动方向是X轴正方向的；对魔方来说这完全是两种不同的情形，所以我们还需要知道是在哪个平面滑动的。</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-15.jpg\"></p>\n<p>判断是在哪个平面，我们可以通过该平面的法向量和哪个坐标轴平行来判断，比如如果滑动平面的法向量平行于坐标系的Y轴且等于Y轴正方向的单位向量，那么该滑动平面肯定是魔方的<code>上平面</code>，以此类推；上边那个判断转动方向的方法可以优化为如下这个样子：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-16.png\"></p>\n<p>那么接下来的问题就是怎么获得滑动平面的法向量了，所幸ThreeJS的光线碰撞检测机制除了能得到碰撞物体、碰撞点，还能得到碰撞平面；已知平面那么就可以获得平面法向量了。</p>\n<p>但是ThreeJS中有个问题需要我们注意，在ThreeJS中存在物体自身坐标系和世界坐标系的区分，在初始化时物体的坐标和世界坐标系一致，但是当物体发生变化之后它自身的坐标系也是会发生变化的；比如说刚开始某个物体<code>上平面</code>的法向量就是其自身坐标系Y轴正方向的单位向量，同时也是世界坐标系Y轴正方向的单位向量，如果该物体旋转180度之后，其<code>上平面</code>的法向量还是其自身坐标系Y轴正方向的单位向量，但是却是世界坐标系Y轴负方向的单位向量了，如图：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-17.jpg\"></p>\n<p>所以不能使用魔方中小正方体的碰撞平面，因为小正方体的坐标系是会随着小正方体的变化而变化的，此时需要再加入一个和魔方整体大小一样的透明正方体，然后根据该透明正方体的碰撞平面的法向量来判断。</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-18.png\"></p>\n<ul>\n<li>再然后我们得根据转动方向、触发点获取转动物体</li>\n</ul>\n<p>比如上图中从点A滑动到点B，转动物体是魔方<code>上平面</code>的所有小正方体；</p>\n<p>至于怎么判断，有两种方法，第一种可以根据小正方体的中心点来判断，比如如果转动的是魔方<code>上平面</code>的正方体，那么已知触发点所在正方体的中心点，根据其Z轴大小就可以确定其它小正方体了；</p>\n<p>还有一种办法则是根据小正方体初始化时的编号规律来判断，转动之后更新编号，保证其规律不发生变化，后续判断依旧即可，从下边的简图很容易就能看出其编号规律。</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-19.jpg\"></p>\n<p>第二种方法有个好处在于，我们可以把转动之后更新的编号和初始化时的编号进行比较，来判断魔方是否回到初始化状态，也就是被还原正常了。</p>\n<blockquote>\n<p>这种方法不知道有问题没有，由于本人不会玩魔方所以一直没有测试。</p>\n</blockquote>\n<ul>\n<li>最后是制作转动动画</li>\n</ul>\n<p>制作转动动画的过程中使用requestAnimationFrame，这没什么要说的；唯一要注意的地方还是关于物体自身坐标系和世界坐标系的问题，举例来说，绕世界坐标系Y轴旋转的方法应该是如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/threejs-webgl-cube-20.png\"></p>\n<p>第四步完整代码如下：</p>\n<p><a href=\"https://github.com/newbieYoung/Threejs_rubik/blob/master/step4.html\" target=\"_blank\" rel=\"noopener\">https://github.com/newbieYoung/Threejs_rubik/blob/master/step4.html</a></p>\n<p>可以通过点击下边的链接来查看在线例子</p>\n<p><a href=\"https://yii-server.lione.me/harp-server/simple-cube\" target=\"_blank\" rel=\"noopener\">https://yii-server.lione.me/harp-server/simple-cube</a></p>\n<h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><p>至此一个没什么卵用的魔方已经完成了，是时候开下脑洞了；</p>\n<ul>\n<li><p>玩具店应该只有最简单的三阶魔方买，但是对这个例子稍加拓展，你甚至可以玩100阶魔方。</p>\n</li>\n<li><p>这个例子稍加扩展应该是能做出一些计时、计步的魔方游戏的。</p>\n</li>\n<li><p>这个例子稍加扩展结合摄像头和自动还原算法，应该是可以做到扫描现实中的魔方，然后根据自动还原算法还原，得到一步步还原魔方的动画演示例子的。</p>\n</li>\n</ul>"},{"title":"某个程序员眼中的用户体验设计","date":"2017-03-10T02:00:00.000Z","author":"Young","_content":"\n## 概述\n\n作为一名半路出家的前端工程师，大概开发移动端网页有两年时间了吧，虽然交互设计不是我的工作内容，但也或多或少的踩了一些坑，然后根据这些坑记录了一些小总结，比如：\n\n+ 移动网页中输入项最好在页面顶部，关联搜索等复杂交互最好是单独新开页面，不应该和其它交互杂糅在一起；\n+ 移动网页中需要交互触发的元素不应该设计的太小，设计的太小对于手指操作来说很困难；\n+ 移动网页中某个交互不应该对页面元素以及布局产生突然变化，容易让用户很困惑；如果某个交互导致页面变化很大则应该用新开的页面的方式展现；\n+ 移动网页的交互不仅仅包括其内部本身的一些交互，还包括和任何可能出现该网页的APP软件的交互；简单来说，设计和实现一个移动网页其实还要考虑该网页在当前流行APP中分享的文案、图标等；\n+ 异常反馈很重要，不仅仅指产品设计时的异常情况，还包括程序运行时的各种异常（这里需要开发尽可能的考虑清楚并反馈给产品），尽可能的给用户清晰的反馈；\n+ 最好对用户在页面的操作有一定的反馈，比如点击按钮等。\n\n都是些零零散散的东西，直到前不久在公司的图书角找到了一本漂亮，纸质很好的书《匠心体验-智能手机与平板电脑的用户体验设计》：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/understanding-experience-0.jpg\">\n\n<!--more-->\n\n## 前言\n\n首先得声明一下这只是某个程序员粗略浏览《匠心体验-智能手机与平板电脑的用户体验设计》之后为方便和加深自己理解而记录的读后感，主要内容基本可以概括为：从一个适合自己理解的角度来简要复述上述书籍的内容。\n\n因此你不可能在后续的内容中发现细致深入的知识点，甚至看到最后你还可能还会感觉这个角度完全不适合你。\n\n## 详解\n\n第一章作者从视觉、触觉、听觉、感知等方面，阐述了智能手机和平板电脑在用户体验设计中应该遵循的规则和注意事项。\n\n看完之后...\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/understanding-experience-1.jpg\">\n\n作者从哪几个方面阐述来着...\n\n知其然不知其所以然就会出现这样的情况了，如果不能系统的了解并转化成自己的知识，就只能停留在死记硬背的程度。\n\n工作四年了，在这四年的屡次面试中，不管是JAVA开发工程师还是前端开发工程师，大部分情况下都能遇到一道面试题，`请尽可能详细的阐述从浏览器中输入url地址到浏览器渲染出页面的过程`。\n\n这里既不讨论这道题的答案也不讨论这道题作为面试题的意义，我只是感觉这个问题本身描述了一种方法，从头到尾系统了解某个事物的方法。\n\n那么对比某个用户使用智能手机或者平板电脑浏览网页或者APP的行为，是不是可以从头到尾可以分成以下几个步骤来理解呢？\n\n### 有一天在某个无聊的会议上你准备掏出手机\n\n移动终端的使用情景比较特殊，用户往往在时间紧张的情况下使用，即在移动过程中或者在需要分散注意力的时候使用。\n\n> 比如公交上、地铁上、某些会议期间、餐厅里边等（不排除存在特例，但是至少大部分移动终端的使用情景是这样的）。\n\n既然这样我们是不是得让我们的网页或者APP做到`适应分散注意力的环境`，在书中作者基于`聚焦点原理`列出了以下几点建议：\n\n+ 屏幕上突出显示聚焦点；\n+ 通过动画创造临时聚焦点；\n\n+ 标明内容的主次关系；\n> 前两点没什么好说的，但是在`标明内容的主次关系`中作者抨击了下`扁平化设计`，认为这种设计会导致页面中没有任何重点，所有元素都处于同一背景层，用户需要消耗更多精力来发现重要元素；\n> 所谓`扁平化设计`维基百科给出的定义是`一种交互界面的设计理念，强调对于三维效果图像元素使用的最小化（其元素也包括阴影、渐变和纹理），亦专注于使用去除了冗余信息的图像元素，排版及纯色效果`；\n> 虽然`扁平化设计`确实可能会存在重点不突出的问题，但是其实也有自身的优势，比如：画面看起来更为流线型、更能适应不同尺寸的屏幕、元素简单导致性能更高等；\n> 暂且认为各有优劣吧，具体情况具体分析。\n\n+ 预防用户分心\n> 大致意思就是设计时得考虑用户分心的情况，比如某些提示信息在决定采用短暂显示的形式来保证页面更加简洁时，应当慎重一点，除非是一些不太重要的信息，即使用户没有看到也无关紧要。\n\n### 之后你打开富途牛牛准备看下自己的收益情况\n\n当用户看到移动端的屏幕时，需要使用`选择性注意`的能力，区分有用和无用的内容；屏幕上无用的信息越多，大脑选择耗费的`认知成本`就越大。\n\n因此我们设计时就得考虑`怎样让用户更方便的获取信息`，在书中作者也列出了以下几点建议：\n\n+ 清理屏幕，给内容让位；\n> 这里引申出`交互时刻`的概念，即用户看到的屏幕内容、刚刚进行的操作、最终的目标等不同因素，决定了用户的需求也不一样。\n> 比如以前总结的`关联搜索等复杂交互最好是单独新开页面`就是基于上述原理。\n\n+ 让文字信息利于阅读。\n> 专业的事还是交给专业的人来做，文字排版其实也涉及很多东西，这里暂且只列下书中作者提及的几点：1、把阅读内容分成小段；2、控制好背景和文字的对比度；3、优化文字大小；4、注意行间距与页边距等。\n\n### 意外发现自己大赚了一笔，这时候你决定卖出股票落袋为安\n\n用户通过触控与智能手机和平板电脑交流、下达指示、在屏幕上运行各种功能、享受服务......所以需要考虑这种操作模式的内在制约。\n\n用户偏好使用左手还是右手、持握电话的习惯姿势、移动终端的尺寸大小等因素都存在差异，因此用户触及屏幕区域的难易程度也不尽相同，如下图所示：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/understanding-experience-2.jpg\">\n\n同样不过多展开，但是有一些很基础的点；\n\n+ 足够大的活动区域\n> 如果屏幕上元素过小，用户就难以避免的出现操作失误，另外这里的说的元素大小，并不一定是指元素显示出来的大小，而是包括了元素周围可以响应触摸的区域。\n> 还要注意的是可触控区域并非越大越好，一旦超过了一定限度，反而会起相反的效果。\n\n+ 在可触控区域之间拉开距离\n> 可触控区域之间距离越近，用户同样就越难以避免的出现操作失误，但是距离越远就会浪费屏幕空间，所以这里也需要合理规划。\n\n+ 功能可供性\n> 功能可供性是事物自身特点所显示出的操作可能性，简单来说，凸起矩形一般就是可点击按钮，按钮上边文字是`买入`，那么点击这个按钮就能买入股票等。\n> 功能可供性还有一点要注意的是，在设计界面的各种功能可供性元素时，切记不要出现错误操作指示，即形式上貌似可以操作，但实际上不可操作的元素。\n\n### 你点击卖出股票然后被弹框告知“交易成功”\n\n用户不可能百分百知道哪些元素可操作，哪些元素不可操作，既然如此，在用户操作后立即提供反馈显得非常重要。通过反馈，让用户知道系统已感知到他的行为，而且如果某个操作处理时间相对较长，提供反馈就更显得尤为重要，这样用户才不会对操作是否正确产生疑虑，从而避免进行没有意义的操作。\n\n## 其它\n\n上述小故事中仅仅涉及了《匠心体验-智能手机与平板电脑的用户体验设计》书中的一小部分基础知识点，还有大量关于`操作手势体验`、`传感器体验`、`声音体验`、`等待体验`、`情感体验`、`移动应用导航设计`、`移动应用效率问题`、`用户教学设计`等高端知识点，如果有兴趣可以查找相关资料详细了解。\n\n\n\n\n\n","source":"_posts/understanding-experience.md","raw":"---\ntitle: 某个程序员眼中的用户体验设计\ndate: 2017-03-10 10:00\ntags: [用户体验设计]\ncategory: 读书笔记\nauthor: Young\n---\n\n## 概述\n\n作为一名半路出家的前端工程师，大概开发移动端网页有两年时间了吧，虽然交互设计不是我的工作内容，但也或多或少的踩了一些坑，然后根据这些坑记录了一些小总结，比如：\n\n+ 移动网页中输入项最好在页面顶部，关联搜索等复杂交互最好是单独新开页面，不应该和其它交互杂糅在一起；\n+ 移动网页中需要交互触发的元素不应该设计的太小，设计的太小对于手指操作来说很困难；\n+ 移动网页中某个交互不应该对页面元素以及布局产生突然变化，容易让用户很困惑；如果某个交互导致页面变化很大则应该用新开的页面的方式展现；\n+ 移动网页的交互不仅仅包括其内部本身的一些交互，还包括和任何可能出现该网页的APP软件的交互；简单来说，设计和实现一个移动网页其实还要考虑该网页在当前流行APP中分享的文案、图标等；\n+ 异常反馈很重要，不仅仅指产品设计时的异常情况，还包括程序运行时的各种异常（这里需要开发尽可能的考虑清楚并反馈给产品），尽可能的给用户清晰的反馈；\n+ 最好对用户在页面的操作有一定的反馈，比如点击按钮等。\n\n都是些零零散散的东西，直到前不久在公司的图书角找到了一本漂亮，纸质很好的书《匠心体验-智能手机与平板电脑的用户体验设计》：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/understanding-experience-0.jpg\">\n\n<!--more-->\n\n## 前言\n\n首先得声明一下这只是某个程序员粗略浏览《匠心体验-智能手机与平板电脑的用户体验设计》之后为方便和加深自己理解而记录的读后感，主要内容基本可以概括为：从一个适合自己理解的角度来简要复述上述书籍的内容。\n\n因此你不可能在后续的内容中发现细致深入的知识点，甚至看到最后你还可能还会感觉这个角度完全不适合你。\n\n## 详解\n\n第一章作者从视觉、触觉、听觉、感知等方面，阐述了智能手机和平板电脑在用户体验设计中应该遵循的规则和注意事项。\n\n看完之后...\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/understanding-experience-1.jpg\">\n\n作者从哪几个方面阐述来着...\n\n知其然不知其所以然就会出现这样的情况了，如果不能系统的了解并转化成自己的知识，就只能停留在死记硬背的程度。\n\n工作四年了，在这四年的屡次面试中，不管是JAVA开发工程师还是前端开发工程师，大部分情况下都能遇到一道面试题，`请尽可能详细的阐述从浏览器中输入url地址到浏览器渲染出页面的过程`。\n\n这里既不讨论这道题的答案也不讨论这道题作为面试题的意义，我只是感觉这个问题本身描述了一种方法，从头到尾系统了解某个事物的方法。\n\n那么对比某个用户使用智能手机或者平板电脑浏览网页或者APP的行为，是不是可以从头到尾可以分成以下几个步骤来理解呢？\n\n### 有一天在某个无聊的会议上你准备掏出手机\n\n移动终端的使用情景比较特殊，用户往往在时间紧张的情况下使用，即在移动过程中或者在需要分散注意力的时候使用。\n\n> 比如公交上、地铁上、某些会议期间、餐厅里边等（不排除存在特例，但是至少大部分移动终端的使用情景是这样的）。\n\n既然这样我们是不是得让我们的网页或者APP做到`适应分散注意力的环境`，在书中作者基于`聚焦点原理`列出了以下几点建议：\n\n+ 屏幕上突出显示聚焦点；\n+ 通过动画创造临时聚焦点；\n\n+ 标明内容的主次关系；\n> 前两点没什么好说的，但是在`标明内容的主次关系`中作者抨击了下`扁平化设计`，认为这种设计会导致页面中没有任何重点，所有元素都处于同一背景层，用户需要消耗更多精力来发现重要元素；\n> 所谓`扁平化设计`维基百科给出的定义是`一种交互界面的设计理念，强调对于三维效果图像元素使用的最小化（其元素也包括阴影、渐变和纹理），亦专注于使用去除了冗余信息的图像元素，排版及纯色效果`；\n> 虽然`扁平化设计`确实可能会存在重点不突出的问题，但是其实也有自身的优势，比如：画面看起来更为流线型、更能适应不同尺寸的屏幕、元素简单导致性能更高等；\n> 暂且认为各有优劣吧，具体情况具体分析。\n\n+ 预防用户分心\n> 大致意思就是设计时得考虑用户分心的情况，比如某些提示信息在决定采用短暂显示的形式来保证页面更加简洁时，应当慎重一点，除非是一些不太重要的信息，即使用户没有看到也无关紧要。\n\n### 之后你打开富途牛牛准备看下自己的收益情况\n\n当用户看到移动端的屏幕时，需要使用`选择性注意`的能力，区分有用和无用的内容；屏幕上无用的信息越多，大脑选择耗费的`认知成本`就越大。\n\n因此我们设计时就得考虑`怎样让用户更方便的获取信息`，在书中作者也列出了以下几点建议：\n\n+ 清理屏幕，给内容让位；\n> 这里引申出`交互时刻`的概念，即用户看到的屏幕内容、刚刚进行的操作、最终的目标等不同因素，决定了用户的需求也不一样。\n> 比如以前总结的`关联搜索等复杂交互最好是单独新开页面`就是基于上述原理。\n\n+ 让文字信息利于阅读。\n> 专业的事还是交给专业的人来做，文字排版其实也涉及很多东西，这里暂且只列下书中作者提及的几点：1、把阅读内容分成小段；2、控制好背景和文字的对比度；3、优化文字大小；4、注意行间距与页边距等。\n\n### 意外发现自己大赚了一笔，这时候你决定卖出股票落袋为安\n\n用户通过触控与智能手机和平板电脑交流、下达指示、在屏幕上运行各种功能、享受服务......所以需要考虑这种操作模式的内在制约。\n\n用户偏好使用左手还是右手、持握电话的习惯姿势、移动终端的尺寸大小等因素都存在差异，因此用户触及屏幕区域的难易程度也不尽相同，如下图所示：\n\n<img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/understanding-experience-2.jpg\">\n\n同样不过多展开，但是有一些很基础的点；\n\n+ 足够大的活动区域\n> 如果屏幕上元素过小，用户就难以避免的出现操作失误，另外这里的说的元素大小，并不一定是指元素显示出来的大小，而是包括了元素周围可以响应触摸的区域。\n> 还要注意的是可触控区域并非越大越好，一旦超过了一定限度，反而会起相反的效果。\n\n+ 在可触控区域之间拉开距离\n> 可触控区域之间距离越近，用户同样就越难以避免的出现操作失误，但是距离越远就会浪费屏幕空间，所以这里也需要合理规划。\n\n+ 功能可供性\n> 功能可供性是事物自身特点所显示出的操作可能性，简单来说，凸起矩形一般就是可点击按钮，按钮上边文字是`买入`，那么点击这个按钮就能买入股票等。\n> 功能可供性还有一点要注意的是，在设计界面的各种功能可供性元素时，切记不要出现错误操作指示，即形式上貌似可以操作，但实际上不可操作的元素。\n\n### 你点击卖出股票然后被弹框告知“交易成功”\n\n用户不可能百分百知道哪些元素可操作，哪些元素不可操作，既然如此，在用户操作后立即提供反馈显得非常重要。通过反馈，让用户知道系统已感知到他的行为，而且如果某个操作处理时间相对较长，提供反馈就更显得尤为重要，这样用户才不会对操作是否正确产生疑虑，从而避免进行没有意义的操作。\n\n## 其它\n\n上述小故事中仅仅涉及了《匠心体验-智能手机与平板电脑的用户体验设计》书中的一小部分基础知识点，还有大量关于`操作手势体验`、`传感器体验`、`声音体验`、`等待体验`、`情感体验`、`移动应用导航设计`、`移动应用效率问题`、`用户教学设计`等高端知识点，如果有兴趣可以查找相关资料详细了解。\n\n\n\n\n\n","slug":"understanding-experience","published":1,"updated":"2017-12-01T08:50:00.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjanoknkl003vjxs1l8wzot07","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>作为一名半路出家的前端工程师，大概开发移动端网页有两年时间了吧，虽然交互设计不是我的工作内容，但也或多或少的踩了一些坑，然后根据这些坑记录了一些小总结，比如：</p>\n<ul>\n<li>移动网页中输入项最好在页面顶部，关联搜索等复杂交互最好是单独新开页面，不应该和其它交互杂糅在一起；</li>\n<li>移动网页中需要交互触发的元素不应该设计的太小，设计的太小对于手指操作来说很困难；</li>\n<li>移动网页中某个交互不应该对页面元素以及布局产生突然变化，容易让用户很困惑；如果某个交互导致页面变化很大则应该用新开的页面的方式展现；</li>\n<li>移动网页的交互不仅仅包括其内部本身的一些交互，还包括和任何可能出现该网页的APP软件的交互；简单来说，设计和实现一个移动网页其实还要考虑该网页在当前流行APP中分享的文案、图标等；</li>\n<li>异常反馈很重要，不仅仅指产品设计时的异常情况，还包括程序运行时的各种异常（这里需要开发尽可能的考虑清楚并反馈给产品），尽可能的给用户清晰的反馈；</li>\n<li>最好对用户在页面的操作有一定的反馈，比如点击按钮等。</li>\n</ul>\n<p>都是些零零散散的东西，直到前不久在公司的图书角找到了一本漂亮，纸质很好的书《匠心体验-智能手机与平板电脑的用户体验设计》：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/understanding-experience-0.jpg\"></p>\n<a id=\"more\"></a>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>首先得声明一下这只是某个程序员粗略浏览《匠心体验-智能手机与平板电脑的用户体验设计》之后为方便和加深自己理解而记录的读后感，主要内容基本可以概括为：从一个适合自己理解的角度来简要复述上述书籍的内容。</p>\n<p>因此你不可能在后续的内容中发现细致深入的知识点，甚至看到最后你还可能还会感觉这个角度完全不适合你。</p>\n<h2 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a>详解</h2><p>第一章作者从视觉、触觉、听觉、感知等方面，阐述了智能手机和平板电脑在用户体验设计中应该遵循的规则和注意事项。</p>\n<p>看完之后…</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/understanding-experience-1.jpg\"></p>\n<p>作者从哪几个方面阐述来着…</p>\n<p>知其然不知其所以然就会出现这样的情况了，如果不能系统的了解并转化成自己的知识，就只能停留在死记硬背的程度。</p>\n<p>工作四年了，在这四年的屡次面试中，不管是JAVA开发工程师还是前端开发工程师，大部分情况下都能遇到一道面试题，<code>请尽可能详细的阐述从浏览器中输入url地址到浏览器渲染出页面的过程</code>。</p>\n<p>这里既不讨论这道题的答案也不讨论这道题作为面试题的意义，我只是感觉这个问题本身描述了一种方法，从头到尾系统了解某个事物的方法。</p>\n<p>那么对比某个用户使用智能手机或者平板电脑浏览网页或者APP的行为，是不是可以从头到尾可以分成以下几个步骤来理解呢？</p>\n<h3 id=\"有一天在某个无聊的会议上你准备掏出手机\"><a href=\"#有一天在某个无聊的会议上你准备掏出手机\" class=\"headerlink\" title=\"有一天在某个无聊的会议上你准备掏出手机\"></a>有一天在某个无聊的会议上你准备掏出手机</h3><p>移动终端的使用情景比较特殊，用户往往在时间紧张的情况下使用，即在移动过程中或者在需要分散注意力的时候使用。</p>\n<blockquote>\n<p>比如公交上、地铁上、某些会议期间、餐厅里边等（不排除存在特例，但是至少大部分移动终端的使用情景是这样的）。</p>\n</blockquote>\n<p>既然这样我们是不是得让我们的网页或者APP做到<code>适应分散注意力的环境</code>，在书中作者基于<code>聚焦点原理</code>列出了以下几点建议：</p>\n<ul>\n<li>屏幕上突出显示聚焦点；</li>\n<li><p>通过动画创造临时聚焦点；</p>\n</li>\n<li><p>标明内容的主次关系；</p>\n<blockquote>\n<p>前两点没什么好说的，但是在<code>标明内容的主次关系</code>中作者抨击了下<code>扁平化设计</code>，认为这种设计会导致页面中没有任何重点，所有元素都处于同一背景层，用户需要消耗更多精力来发现重要元素；<br>所谓<code>扁平化设计</code>维基百科给出的定义是<code>一种交互界面的设计理念，强调对于三维效果图像元素使用的最小化（其元素也包括阴影、渐变和纹理），亦专注于使用去除了冗余信息的图像元素，排版及纯色效果</code>；<br>虽然<code>扁平化设计</code>确实可能会存在重点不突出的问题，但是其实也有自身的优势，比如：画面看起来更为流线型、更能适应不同尺寸的屏幕、元素简单导致性能更高等；<br>暂且认为各有优劣吧，具体情况具体分析。</p>\n</blockquote>\n</li>\n<li><p>预防用户分心</p>\n<blockquote>\n<p>大致意思就是设计时得考虑用户分心的情况，比如某些提示信息在决定采用短暂显示的形式来保证页面更加简洁时，应当慎重一点，除非是一些不太重要的信息，即使用户没有看到也无关紧要。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"之后你打开富途牛牛准备看下自己的收益情况\"><a href=\"#之后你打开富途牛牛准备看下自己的收益情况\" class=\"headerlink\" title=\"之后你打开富途牛牛准备看下自己的收益情况\"></a>之后你打开富途牛牛准备看下自己的收益情况</h3><p>当用户看到移动端的屏幕时，需要使用<code>选择性注意</code>的能力，区分有用和无用的内容；屏幕上无用的信息越多，大脑选择耗费的<code>认知成本</code>就越大。</p>\n<p>因此我们设计时就得考虑<code>怎样让用户更方便的获取信息</code>，在书中作者也列出了以下几点建议：</p>\n<ul>\n<li><p>清理屏幕，给内容让位；</p>\n<blockquote>\n<p>这里引申出<code>交互时刻</code>的概念，即用户看到的屏幕内容、刚刚进行的操作、最终的目标等不同因素，决定了用户的需求也不一样。<br>比如以前总结的<code>关联搜索等复杂交互最好是单独新开页面</code>就是基于上述原理。</p>\n</blockquote>\n</li>\n<li><p>让文字信息利于阅读。</p>\n<blockquote>\n<p>专业的事还是交给专业的人来做，文字排版其实也涉及很多东西，这里暂且只列下书中作者提及的几点：1、把阅读内容分成小段；2、控制好背景和文字的对比度；3、优化文字大小；4、注意行间距与页边距等。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"意外发现自己大赚了一笔，这时候你决定卖出股票落袋为安\"><a href=\"#意外发现自己大赚了一笔，这时候你决定卖出股票落袋为安\" class=\"headerlink\" title=\"意外发现自己大赚了一笔，这时候你决定卖出股票落袋为安\"></a>意外发现自己大赚了一笔，这时候你决定卖出股票落袋为安</h3><p>用户通过触控与智能手机和平板电脑交流、下达指示、在屏幕上运行各种功能、享受服务……所以需要考虑这种操作模式的内在制约。</p>\n<p>用户偏好使用左手还是右手、持握电话的习惯姿势、移动终端的尺寸大小等因素都存在差异，因此用户触及屏幕区域的难易程度也不尽相同，如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/understanding-experience-2.jpg\"></p>\n<p>同样不过多展开，但是有一些很基础的点；</p>\n<ul>\n<li><p>足够大的活动区域</p>\n<blockquote>\n<p>如果屏幕上元素过小，用户就难以避免的出现操作失误，另外这里的说的元素大小，并不一定是指元素显示出来的大小，而是包括了元素周围可以响应触摸的区域。<br>还要注意的是可触控区域并非越大越好，一旦超过了一定限度，反而会起相反的效果。</p>\n</blockquote>\n</li>\n<li><p>在可触控区域之间拉开距离</p>\n<blockquote>\n<p>可触控区域之间距离越近，用户同样就越难以避免的出现操作失误，但是距离越远就会浪费屏幕空间，所以这里也需要合理规划。</p>\n</blockquote>\n</li>\n<li><p>功能可供性</p>\n<blockquote>\n<p>功能可供性是事物自身特点所显示出的操作可能性，简单来说，凸起矩形一般就是可点击按钮，按钮上边文字是<code>买入</code>，那么点击这个按钮就能买入股票等。<br>功能可供性还有一点要注意的是，在设计界面的各种功能可供性元素时，切记不要出现错误操作指示，即形式上貌似可以操作，但实际上不可操作的元素。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"你点击卖出股票然后被弹框告知“交易成功”\"><a href=\"#你点击卖出股票然后被弹框告知“交易成功”\" class=\"headerlink\" title=\"你点击卖出股票然后被弹框告知“交易成功”\"></a>你点击卖出股票然后被弹框告知“交易成功”</h3><p>用户不可能百分百知道哪些元素可操作，哪些元素不可操作，既然如此，在用户操作后立即提供反馈显得非常重要。通过反馈，让用户知道系统已感知到他的行为，而且如果某个操作处理时间相对较长，提供反馈就更显得尤为重要，这样用户才不会对操作是否正确产生疑虑，从而避免进行没有意义的操作。</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>上述小故事中仅仅涉及了《匠心体验-智能手机与平板电脑的用户体验设计》书中的一小部分基础知识点，还有大量关于<code>操作手势体验</code>、<code>传感器体验</code>、<code>声音体验</code>、<code>等待体验</code>、<code>情感体验</code>、<code>移动应用导航设计</code>、<code>移动应用效率问题</code>、<code>用户教学设计</code>等高端知识点，如果有兴趣可以查找相关资料详细了解。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>作为一名半路出家的前端工程师，大概开发移动端网页有两年时间了吧，虽然交互设计不是我的工作内容，但也或多或少的踩了一些坑，然后根据这些坑记录了一些小总结，比如：</p>\n<ul>\n<li>移动网页中输入项最好在页面顶部，关联搜索等复杂交互最好是单独新开页面，不应该和其它交互杂糅在一起；</li>\n<li>移动网页中需要交互触发的元素不应该设计的太小，设计的太小对于手指操作来说很困难；</li>\n<li>移动网页中某个交互不应该对页面元素以及布局产生突然变化，容易让用户很困惑；如果某个交互导致页面变化很大则应该用新开的页面的方式展现；</li>\n<li>移动网页的交互不仅仅包括其内部本身的一些交互，还包括和任何可能出现该网页的APP软件的交互；简单来说，设计和实现一个移动网页其实还要考虑该网页在当前流行APP中分享的文案、图标等；</li>\n<li>异常反馈很重要，不仅仅指产品设计时的异常情况，还包括程序运行时的各种异常（这里需要开发尽可能的考虑清楚并反馈给产品），尽可能的给用户清晰的反馈；</li>\n<li>最好对用户在页面的操作有一定的反馈，比如点击按钮等。</li>\n</ul>\n<p>都是些零零散散的东西，直到前不久在公司的图书角找到了一本漂亮，纸质很好的书《匠心体验-智能手机与平板电脑的用户体验设计》：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/understanding-experience-0.jpg\"></p>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>首先得声明一下这只是某个程序员粗略浏览《匠心体验-智能手机与平板电脑的用户体验设计》之后为方便和加深自己理解而记录的读后感，主要内容基本可以概括为：从一个适合自己理解的角度来简要复述上述书籍的内容。</p>\n<p>因此你不可能在后续的内容中发现细致深入的知识点，甚至看到最后你还可能还会感觉这个角度完全不适合你。</p>\n<h2 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a>详解</h2><p>第一章作者从视觉、触觉、听觉、感知等方面，阐述了智能手机和平板电脑在用户体验设计中应该遵循的规则和注意事项。</p>\n<p>看完之后…</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/understanding-experience-1.jpg\"></p>\n<p>作者从哪几个方面阐述来着…</p>\n<p>知其然不知其所以然就会出现这样的情况了，如果不能系统的了解并转化成自己的知识，就只能停留在死记硬背的程度。</p>\n<p>工作四年了，在这四年的屡次面试中，不管是JAVA开发工程师还是前端开发工程师，大部分情况下都能遇到一道面试题，<code>请尽可能详细的阐述从浏览器中输入url地址到浏览器渲染出页面的过程</code>。</p>\n<p>这里既不讨论这道题的答案也不讨论这道题作为面试题的意义，我只是感觉这个问题本身描述了一种方法，从头到尾系统了解某个事物的方法。</p>\n<p>那么对比某个用户使用智能手机或者平板电脑浏览网页或者APP的行为，是不是可以从头到尾可以分成以下几个步骤来理解呢？</p>\n<h3 id=\"有一天在某个无聊的会议上你准备掏出手机\"><a href=\"#有一天在某个无聊的会议上你准备掏出手机\" class=\"headerlink\" title=\"有一天在某个无聊的会议上你准备掏出手机\"></a>有一天在某个无聊的会议上你准备掏出手机</h3><p>移动终端的使用情景比较特殊，用户往往在时间紧张的情况下使用，即在移动过程中或者在需要分散注意力的时候使用。</p>\n<blockquote>\n<p>比如公交上、地铁上、某些会议期间、餐厅里边等（不排除存在特例，但是至少大部分移动终端的使用情景是这样的）。</p>\n</blockquote>\n<p>既然这样我们是不是得让我们的网页或者APP做到<code>适应分散注意力的环境</code>，在书中作者基于<code>聚焦点原理</code>列出了以下几点建议：</p>\n<ul>\n<li>屏幕上突出显示聚焦点；</li>\n<li><p>通过动画创造临时聚焦点；</p>\n</li>\n<li><p>标明内容的主次关系；</p>\n<blockquote>\n<p>前两点没什么好说的，但是在<code>标明内容的主次关系</code>中作者抨击了下<code>扁平化设计</code>，认为这种设计会导致页面中没有任何重点，所有元素都处于同一背景层，用户需要消耗更多精力来发现重要元素；<br>所谓<code>扁平化设计</code>维基百科给出的定义是<code>一种交互界面的设计理念，强调对于三维效果图像元素使用的最小化（其元素也包括阴影、渐变和纹理），亦专注于使用去除了冗余信息的图像元素，排版及纯色效果</code>；<br>虽然<code>扁平化设计</code>确实可能会存在重点不突出的问题，但是其实也有自身的优势，比如：画面看起来更为流线型、更能适应不同尺寸的屏幕、元素简单导致性能更高等；<br>暂且认为各有优劣吧，具体情况具体分析。</p>\n</blockquote>\n</li>\n<li><p>预防用户分心</p>\n<blockquote>\n<p>大致意思就是设计时得考虑用户分心的情况，比如某些提示信息在决定采用短暂显示的形式来保证页面更加简洁时，应当慎重一点，除非是一些不太重要的信息，即使用户没有看到也无关紧要。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"之后你打开富途牛牛准备看下自己的收益情况\"><a href=\"#之后你打开富途牛牛准备看下自己的收益情况\" class=\"headerlink\" title=\"之后你打开富途牛牛准备看下自己的收益情况\"></a>之后你打开富途牛牛准备看下自己的收益情况</h3><p>当用户看到移动端的屏幕时，需要使用<code>选择性注意</code>的能力，区分有用和无用的内容；屏幕上无用的信息越多，大脑选择耗费的<code>认知成本</code>就越大。</p>\n<p>因此我们设计时就得考虑<code>怎样让用户更方便的获取信息</code>，在书中作者也列出了以下几点建议：</p>\n<ul>\n<li><p>清理屏幕，给内容让位；</p>\n<blockquote>\n<p>这里引申出<code>交互时刻</code>的概念，即用户看到的屏幕内容、刚刚进行的操作、最终的目标等不同因素，决定了用户的需求也不一样。<br>比如以前总结的<code>关联搜索等复杂交互最好是单独新开页面</code>就是基于上述原理。</p>\n</blockquote>\n</li>\n<li><p>让文字信息利于阅读。</p>\n<blockquote>\n<p>专业的事还是交给专业的人来做，文字排版其实也涉及很多东西，这里暂且只列下书中作者提及的几点：1、把阅读内容分成小段；2、控制好背景和文字的对比度；3、优化文字大小；4、注意行间距与页边距等。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"意外发现自己大赚了一笔，这时候你决定卖出股票落袋为安\"><a href=\"#意外发现自己大赚了一笔，这时候你决定卖出股票落袋为安\" class=\"headerlink\" title=\"意外发现自己大赚了一笔，这时候你决定卖出股票落袋为安\"></a>意外发现自己大赚了一笔，这时候你决定卖出股票落袋为安</h3><p>用户通过触控与智能手机和平板电脑交流、下达指示、在屏幕上运行各种功能、享受服务……所以需要考虑这种操作模式的内在制约。</p>\n<p>用户偏好使用左手还是右手、持握电话的习惯姿势、移动终端的尺寸大小等因素都存在差异，因此用户触及屏幕区域的难易程度也不尽相同，如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/newbieYoung/NewbieWebArticles/master/images/understanding-experience-2.jpg\"></p>\n<p>同样不过多展开，但是有一些很基础的点；</p>\n<ul>\n<li><p>足够大的活动区域</p>\n<blockquote>\n<p>如果屏幕上元素过小，用户就难以避免的出现操作失误，另外这里的说的元素大小，并不一定是指元素显示出来的大小，而是包括了元素周围可以响应触摸的区域。<br>还要注意的是可触控区域并非越大越好，一旦超过了一定限度，反而会起相反的效果。</p>\n</blockquote>\n</li>\n<li><p>在可触控区域之间拉开距离</p>\n<blockquote>\n<p>可触控区域之间距离越近，用户同样就越难以避免的出现操作失误，但是距离越远就会浪费屏幕空间，所以这里也需要合理规划。</p>\n</blockquote>\n</li>\n<li><p>功能可供性</p>\n<blockquote>\n<p>功能可供性是事物自身特点所显示出的操作可能性，简单来说，凸起矩形一般就是可点击按钮，按钮上边文字是<code>买入</code>，那么点击这个按钮就能买入股票等。<br>功能可供性还有一点要注意的是，在设计界面的各种功能可供性元素时，切记不要出现错误操作指示，即形式上貌似可以操作，但实际上不可操作的元素。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"你点击卖出股票然后被弹框告知“交易成功”\"><a href=\"#你点击卖出股票然后被弹框告知“交易成功”\" class=\"headerlink\" title=\"你点击卖出股票然后被弹框告知“交易成功”\"></a>你点击卖出股票然后被弹框告知“交易成功”</h3><p>用户不可能百分百知道哪些元素可操作，哪些元素不可操作，既然如此，在用户操作后立即提供反馈显得非常重要。通过反馈，让用户知道系统已感知到他的行为，而且如果某个操作处理时间相对较长，提供反馈就更显得尤为重要，这样用户才不会对操作是否正确产生疑虑，从而避免进行没有意义的操作。</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>上述小故事中仅仅涉及了《匠心体验-智能手机与平板电脑的用户体验设计》书中的一小部分基础知识点，还有大量关于<code>操作手势体验</code>、<code>传感器体验</code>、<code>声音体验</code>、<code>等待体验</code>、<code>情感体验</code>、<code>移动应用导航设计</code>、<code>移动应用效率问题</code>、<code>用户教学设计</code>等高端知识点，如果有兴趣可以查找相关资料详细了解。</p>"},{"title":"直播理论与实践","date":"2017-12-01T09:08:00.000Z","author":"Tony","_content":"\n直播在互联网中已经成为一个必不可少的东西，作为了一家互联公司直播当然也少不了了，目前直播在牛牛软件中主要功能是教育跟宣传作用。\n\n## 内容\n1. 直播构成\n1. 直播流程\n1. web中直播技术\n\t* \thls协议\n\t* \trtmp协议\n\t* \thls与rtmp对比\n1. 实践\n\t* 安装nginx、nginx-rtmp-module、FFmpeg（以下操作均在mac下进行）\n\t* nginx.conf配置文件，配置RTMP、HLS\n\t* 重启nginx\n\t* 查看端口是否启动\n\t* FFmpeg执行命令\n\t* 代码\n\t* 效果\n1. 直播中遇到坑\n1. 总结\n\n## 直播构成（使用角色）\n![Markdown](http://i2.bvimg.com/600839/c19343ac6b031af7.png)\n\n目前牛牛支持情况：\n\n移动牛牛（安卓、IOS）主播端只支持摄像头直播，观众端支持展示\n\nPC牛牛主播端支持摄像头直播、录屏直播、摄像头+录屏直播，观众端支持展示\n\nMAC牛牛跟web端主播端不支持，观众端支持展示\n\n## 直播流程\n\n视频直播，可以分为 采集，前处理，编码，传输，解码，渲染 这几个环节\n\n采集，一般是由客户端（IOS、安卓、PC或其它工具，如OBS）完成的，iOS是比较简单的，Android则要做些机型适配工作，PC最麻烦各种奇葩摄像头驱动，当然这些问题，腾讯云已经帮我们处理好了，呵呵。\n\n前处理，主要是处理直播美颜，美颜算法需要用到GPU编程，需要懂图像处理算法的人，没有好的开源实现，要自己参考论文去研究。难点不在于美颜效果，而在于GPU占用和美颜效果之间找平衡。\n\n编码，肯定要采用硬编码，软编码720p完全没希望，勉强能编码也会导致CPU过热烫到摄像头。编码要在分辨率，帧率，码率，GOP等参数设计上找到最佳平衡点。\n\n传输，一般交给了CDN服务商。\n\n解码，是对之前编码的操作，进行解码，在web里需要解码是hls。\n\n渲染，主要用播放器来解决，web中常用到的播放器有video.js，目前我们使用是腾讯云播放器。\n\n其实一个完成直播，远远不上面这几个环节，下面是腾讯云直播方案的整个流程图：\n![Markdown](http://i4.bvimg.com/600839/2d4844429b6c24c5.png)\n\n## web中直播技术\n\n目前互联网上web做直播，主要是展示，主流web展示的话可能涉及到hls跟rtmp这两个东西，现在我们重点讲解hls跟rtmp协议。\n\n### HLS\n\nHLS（HTTP Live Streaming全称）是一个基于 HTTP 的视频流协议，由 Apple 公司实现，Mac OS 上的 QuickTime、Safari 以及 iOS 上的 Safari 都能很好的支持 HLS，高版本 Android 也增加了对 HLS 的支持。一些常见的客户端如：MPlayerX、VLC 也都支持 HLS 协议，如果需要在chrome上播放，需要使用videojs-contrib-hls.js解析。\n\n\nHLS工作流程：\n\n![Markdown](http://i2.bvimg.com/600839/ebf24281ef5b0221.png)\n\nServer :\n服务器组件负责获取的媒体输入流 , 然后Media编码后 MPEG-4（H.264 video 和 AAC audio）格式然后用硬件打包到 MPEG-2 (MPEG-2 transport stream)的传输流中。图中显示,传输流会经过stream segmenter, 这里的工作是MPEG-2传输流会被分散为小片段然后保存为一个或多个系列的 .ts 格式的媒体文件。这个过程需要借助编码工具来完成，比如 Apple stream segmenter。\n(视频类是.ts文件,纯音频会被编码为一些音频小片段，通常为 ADTS头的AAC、MP3、或者 AC-3格式。)\n服务端可以采用硬件编码和软件编码两种形式，其功能都是按照上文描述的规则对现有的媒体文件进行切片并使用索引文件进行管理。而软件切片通常会使用 Apple 公司提供的工具或者第三方的集成工具。\n\nDistribution :\n同时上面提到的那个切片器（segmenter）也会创建一个索引文件，通常会包含这些媒体文件的一个列表，也能包含元数据。他一般都是一个.M38U 个hi的列表。列表元素会关联一个 URL 用于客户端访问。然后按序去请求这些 URL。\n\nclient :\n分配组件由标准的网络服务器。他们负责接受Client客户端请求并提供相关联的资源给客户端。\n\n索引文件结构图\n\n![](http://upload-images.jianshu.io/upload_images/764764-551e7aa6c8f2b86e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n主索引文件\n\n```\n#EXTM3U\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=409037,RESOLUTION=416x234,CODECS=\"mp4a.40.2, avc1.42001e\"\nGear1/prog_index.m3u8\n\n```\n\\#EXTM3U\n\n每个M3U文件第一行必须是这个tag，请标示作用\n\n\\#EXT-X-STREAM-INF\n\n标签的属性列表中直接指明当前流是VIDEO还是AUDIO\n\n属性 :\n\n1. BANDWIDTH 指定码率\n1. PROGRAM-ID 唯一ID (这个属性在后面的协议版本废除了)\n1. CODECS 指定流的编码类型\n1. RESOLUTION：分辨率\n\n子索引：\n\n```\n#EXTM3U\n#EXT-X-TARGETDURATION:11\n#EXT-X-VERSION:3\n#EXT-X-MEDIA-SEQUENCE:0\n#EXT-X-PLAYLIST-TYPE:VOD\n#EXTINF:10.133333,\nfileSequence0.ts\n#EXTINF:10.000666,\nfileSequence1.ts\n#EXTINF:10.667334,\nfileSequence2.ts\n#EXTINF:9.686001,\nfileSequence3.ts\n#EXTINF:9.768665,\nfileSequence4.ts\n#EXTINF:10.000000,\nfileSequence5.ts\n#EXT-X-ENDLIST\n\n```\n\n\\#EXTM3U   m3u文件头，必须放在第一行 \n\n\\#EXT-X-TARGETDURATION  每个分片TS的最大的时长 \n\n\\#EXT-X-VERSION   用以标示协议版本\n\\#EXT-X-MEDIA-SEQUENCE  TS分片的序列号 \n\\#EXT-X-PLAYLIST-TYPE  提供关于PlayList的可变性的信息， 这个对整个PlayList文件有效，是可选的\n\\#EXTINF  extra info，分片TS的信息，如时长，带宽等\n\n说明\n\n* 主索引文件和子索引文件都是.M3U8的playlist\n* 主索引文件只需下载一次，但对于直播节目子索引文件定期重新加载\n\nvideojs-contrib-hls解析过程\n\n![Markdown](http://i4.bvimg.com/600839/aed1d13465cd5422.png)\n\nHLS简单讲就是把整个流分成一个个小的，基于 HTTP 的文件来下载，每次只下载一些，前面提到了用于 H5 播放直播视频时引入的一个 .m3u8 的文件，这个文件就是基于 HLS 协议，存放视频流元数据的文件。 每一个 .m3u8 文件，分别对应若干个 ts 文件，这些 ts 文件才是真正存放视频的数据，m3u8 文件只是存放了一些 ts 文件的配置信息和相关路径，当视频播放时，.m3u8 是动态改变的，再通过解析器（videojs-contrib-hls.js）解析这个文件，并找到对应的 ts 文件来播放，所以一般为了加快速度，.m3u8 放在 web 服务器上，ts 文件放在 cdn 上。\n\n### RTMP\n\nReal Time Messaging Protocol（简称 RTMP）是 Macromedia 开发的一套视频直播协议，现在属于 Adobe。这套方案需要搭建专门的 RTMP 流媒体服务如 Adobe Media Server，并且在浏览器中只能使用 Flash 实现播放器。它的实时性非常好，延迟很小，但无法支持移动端 WEB 播放是它的硬伤。\n\n浏览器端，HTML5 video标签无法播放 RTMP 协议的视频，可以通过 video.js 来实现。\n\n```\n<link href=\"http://vjs.zencdn.net/5.8.8/video-js.css\" rel=\"stylesheet\">\n \n<video id=\"example_video_1\" class=\"video-js vjs-default-skin\" controls preload=\"auto\" width=\"640\" height=\"264\" loop=\"loop\" webkit-playsinline>\n<source src=\"rtmp://10.14.221.17:1935/rtmplive/home\" type='rtmp/flv'>\n</video>\n \n<script src=\"http://vjs.zencdn.net/5.8.8/video.js\"></script>\n<script>\nvideojs.options.flash.swf = 'video.swf';\nvideojs('example_video_1').ready(function() {\nthis.play();\n});\n</script>\n```\n### hls与RTMP对应\n|协议 | 原理 |延时 |优点 | 缺点 |使用场景 |\n| --- | --- | --- |--- | --- | --- |\n| HLS(http)|  集合一段时间数据生成ts切片文件更m3u8文件 | 10s-30s|跨平台|  延时性高 | 移动端|\n| RTMP(TCP)| 每个时刻的数据收到后立即发送 | 2s|延时低、实时性好|跨平台差|PC+直播+实时性要求高+互动性强|\n\n## 实践（搭建RTMP、HLS直播流服务）\n\n### 安装nginx\n\n```\nbrew install nginx\n\n```\n### 安装nginx-rtmp-module\n\n```\nbrew install nginx-full --with-rtmp-module\n\n```\n\n安装FFmpeg（是一个集录制、转换、音/视频编码解码功能 为一体的完整的开源工具，我们下面用它来做推流跟切片）\n\n```\nbrew install ffmpeg\n\n```\n\n### nginx.conf配置文件，配置RTMP、HLS\n\n查找到nginx.conf配置文件（/usr/local/etc/nginx/nginx.conf）\n\n```\nrtmp {\n\tserver {\n\t\t#监听的端口\n\t\tlisten 1935;\n\t\t# RTMP 直播流配置\n\t\tapplication rtmplive {\n\t\t\tlive on;\n\t\t\t#为 rtmp 引擎设置最大连接数。默认为 off\n\t\t\tmax_connections 1024;\n\t\t}\n\t\t# HLS 直播流配置\n\t\tapplication hls{\n\t\t\tlive on;\n\t\t\thls on;\n\t\t\thls_path /Users/tony/Documents/notes/live/public/hls;  #这里的路径切片需要保存的路径\n\t\t\thls_fragment 1s;\n\t\t}\n\t}\n}\n\n```\n\n在http中添加 hls 的配置\n\n```\n\nlocation /hls {\n\t# Serve HLS fragments\n\ttypes {\n\t\tapplication/vnd.apple.mpegurl m3u8;\n\t\tvideo/mp2t ts;\n\t}\n\troot /Users/tony/Documents/notes/live/public;#切片的路径\n\t#add_header Cache-Controll no-cache;\n\texpires -1;\n}\n\n```\n### 重启nginx\n\n```\nsudo nginx -s reload\n\n```\n\n### 查看端口是否启动\n\n```\nnetstat -an | grep 1935\n\n```\n\n如果显示如下，显示已经启用\n\n![Markdown](http://i4.bvimg.com/600839/edf1708baf6fbc90.png)\n\nhttp端口同理\n\n到现在我们已经完成了，服务的搭建（rtmp、hls推流地址分别为:rtmp://127.0.0.1:1935/rtmplive/home,rtmp://localhost:1935/rtmplive/hls）\n\n### FFmpeg执行命令\n\n我们以推流MP4文件为例，我的视频文件地址：/Users/tony/Desktop/w01661pl9vw.p702.1.mp4 \n\nRTMP 协议推流命令\n\n```\nffmpeg -re -i /Users/tony/Desktop/w01661pl9vw.p702.1.mp4 -vcodec libx264 -acodec aac -f flv rtmp://127.0.0.1:1935/rtmplive/home\n\n```\n\nHLS 协议推流命令\n\n```\nffmpeg -re -i  /Users/tony/Desktop/w01661pl9vw.p702.1.mp4 -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -q 10 rtmp://127.0.0.1:1935/hls/test \n\n```\n/Users/tony/Desktop/w01661pl9vw.p702.1.mp4 表示视频的地址\n\nrtmp://127.0.0.1:1935/rtmplive/home、rtmp://localhost:1935/rtmplive/hls表示推流地址\n\n上面的命令操作后，命令行出现了如下图，表示已经成功了\n\n![Markdown](http://i4.bvimg.com/600839/2835498ab8464e62.png)\n\n关于FFmpeg功能命令可参考：\n\n[FFmpeg功能命令集合](http://www.jianshu.com/p/053665062f22)\n\n### 代码实现\n\n两种推流方式播放的话，我们都使用video.js播放器播放(牛牛里使用的是腾讯云播放器)\n\nrtmp\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>Insert title here</title>\n<link href=\"http://vjs.zencdn.net/5.19/video-js.min.css\" rel=\"stylesheet\">\n<script src=\"http://vjs.zencdn.net/5.19/video.min.js\"></script>\n</head>\n<body>\n<video\n    id=\"my-player\"\n    class=\"video-js\"\n    controls\n    preload=\"auto\"\n    data-setup='{}'>\n    <source src='rtmp://127.0.0.1/rtmplive/home' type='rtmp/flv'/>  \n  </p>\n</video>\n<script type=\"text/javascript\">\n   var player = videojs('my-player');\n   var options = {};\n\n   var player = videojs('my-player', options, function onPlayerReady() {\n     videojs.log('Your player is ready!');\n     // In this context, `this` is the player that was created by Video.js.\n     this.play();\n     // How about an event listener?\n     this.on('ended', function() {\n       videojs.log('Awww...over so soon?!');\n     });\n   });\n\n</script>\n</body>\n</html>\n\n```\n其它src中的地址填的是RTMP推流地址，注意播放时，如果出现“当前系统环境不支持播放该视频格式”，浏览器需要启用flash，才能正常播放。\n\nhls\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=utf-8 />\n<title>videojs-contrib-hls embed</title>\n  <link href=\"https://unpkg.com/video.js/dist/video-js.css\" rel=\"stylesheet\">\n  <script src=\"https://unpkg.com/video.js/dist/video.js\"></script>\n  <script src=\"https://unpkg.com/videojs-contrib-hls/dist/videojs-contrib-hls.js\"></script>\n</head>\n<body>\n\n  <video id=\"my_video_1\" class=\"video-js vjs-default-skin\" controls preload=\"auto\" width=\"640\" height=\"268\" \n  data-setup='{}'>\n    <source src=\"http://www.tony.com/hls/test.m3u8\" type=\"application/x-mpegURL\">\n  </video>\n  \n  <script>\n  </script>\n  \n</body>\n</html>\n```\nsrc填的是切片地址\n\n### 效果\n\nrtmp效果\n\n![Markdown](http://i2.bvimg.com/600839/0b20b027406625d2.png)\n\nhls效果\n\n![Markdown](http://i2.bvimg.com/600839/fbd49eed2bd3f92e.png)\n\nts和m3u8文件\n\n![Markdown](http://i2.bvimg.com/600839/14e622f03c4a9193.png)\n\n\n## 直播中遇到问题\n\n* 自动播放问题\n* 各平台播放器表现不统一\n* 内页面调试困难\n* Native与web通信问题\n\n### 自动播放问题\n\n在X5内核浏览器里必须使用触发touchend、click、doubleclick或 keydown 事件等标准的事件才能触发\n\n### 各平台播放器表现不统一\n\n安卓下很多浏览器把video标签替换成了原生自带播放器样式跟行为，很难控制其行为跟样式。\n\n### 内嵌页面调试困难\n\n目前使用的是weinre调试，但weinre调试看不到在native实际效果，比如web调用native，需要native反馈一种效果，weinre是看不到效果。\n\n### Native与web通信\n\nschema跟jsBridge，schema只能做到web调用native，而且做不到native调用web；jsBridge虽然可以做native调用web，但在iframe没加载完的情况下，也是通知不到web的；\n\n## 总结\n\n整个直播是一个非常复杂的过程，实现过程中会遇到很多性能问题，需要在性能跟即时性做一个权衡，ts跟m3u8尽量做到缓存，浏览器里尽量使用推流。\n\n参考资料：\n\n[如何搭建一个完整的视频直播系统？](https://www.zhihu.com/question/42162310)\n\n[H5直播起航](http://web.jobbole.com/88543/)\n\n[有支持M3U8格式的HTML5播放器吗？](https://www.zhihu.com/question/21087379)\n\n[HTTP Live Streaming (HLS) - 概念\n](http://www.jianshu.com/p/2ce402a485ca)\n\n[M3U8格式讲解及实际应用分析\n](http://www.eduve.org/knowledge/732)\n\n作者：[Tony](https://github.com/fttony)","source":"_posts/2017-12-01-live.md","raw":"---\ntitle: 直播理论与实践\ndate: 2017-12-01 17:08\ncategory: JavaScript\ntags: [直播]\nauthor: Tony\n---\n\n直播在互联网中已经成为一个必不可少的东西，作为了一家互联公司直播当然也少不了了，目前直播在牛牛软件中主要功能是教育跟宣传作用。\n\n## 内容\n1. 直播构成\n1. 直播流程\n1. web中直播技术\n\t* \thls协议\n\t* \trtmp协议\n\t* \thls与rtmp对比\n1. 实践\n\t* 安装nginx、nginx-rtmp-module、FFmpeg（以下操作均在mac下进行）\n\t* nginx.conf配置文件，配置RTMP、HLS\n\t* 重启nginx\n\t* 查看端口是否启动\n\t* FFmpeg执行命令\n\t* 代码\n\t* 效果\n1. 直播中遇到坑\n1. 总结\n\n## 直播构成（使用角色）\n![Markdown](http://i2.bvimg.com/600839/c19343ac6b031af7.png)\n\n目前牛牛支持情况：\n\n移动牛牛（安卓、IOS）主播端只支持摄像头直播，观众端支持展示\n\nPC牛牛主播端支持摄像头直播、录屏直播、摄像头+录屏直播，观众端支持展示\n\nMAC牛牛跟web端主播端不支持，观众端支持展示\n\n## 直播流程\n\n视频直播，可以分为 采集，前处理，编码，传输，解码，渲染 这几个环节\n\n采集，一般是由客户端（IOS、安卓、PC或其它工具，如OBS）完成的，iOS是比较简单的，Android则要做些机型适配工作，PC最麻烦各种奇葩摄像头驱动，当然这些问题，腾讯云已经帮我们处理好了，呵呵。\n\n前处理，主要是处理直播美颜，美颜算法需要用到GPU编程，需要懂图像处理算法的人，没有好的开源实现，要自己参考论文去研究。难点不在于美颜效果，而在于GPU占用和美颜效果之间找平衡。\n\n编码，肯定要采用硬编码，软编码720p完全没希望，勉强能编码也会导致CPU过热烫到摄像头。编码要在分辨率，帧率，码率，GOP等参数设计上找到最佳平衡点。\n\n传输，一般交给了CDN服务商。\n\n解码，是对之前编码的操作，进行解码，在web里需要解码是hls。\n\n渲染，主要用播放器来解决，web中常用到的播放器有video.js，目前我们使用是腾讯云播放器。\n\n其实一个完成直播，远远不上面这几个环节，下面是腾讯云直播方案的整个流程图：\n![Markdown](http://i4.bvimg.com/600839/2d4844429b6c24c5.png)\n\n## web中直播技术\n\n目前互联网上web做直播，主要是展示，主流web展示的话可能涉及到hls跟rtmp这两个东西，现在我们重点讲解hls跟rtmp协议。\n\n### HLS\n\nHLS（HTTP Live Streaming全称）是一个基于 HTTP 的视频流协议，由 Apple 公司实现，Mac OS 上的 QuickTime、Safari 以及 iOS 上的 Safari 都能很好的支持 HLS，高版本 Android 也增加了对 HLS 的支持。一些常见的客户端如：MPlayerX、VLC 也都支持 HLS 协议，如果需要在chrome上播放，需要使用videojs-contrib-hls.js解析。\n\n\nHLS工作流程：\n\n![Markdown](http://i2.bvimg.com/600839/ebf24281ef5b0221.png)\n\nServer :\n服务器组件负责获取的媒体输入流 , 然后Media编码后 MPEG-4（H.264 video 和 AAC audio）格式然后用硬件打包到 MPEG-2 (MPEG-2 transport stream)的传输流中。图中显示,传输流会经过stream segmenter, 这里的工作是MPEG-2传输流会被分散为小片段然后保存为一个或多个系列的 .ts 格式的媒体文件。这个过程需要借助编码工具来完成，比如 Apple stream segmenter。\n(视频类是.ts文件,纯音频会被编码为一些音频小片段，通常为 ADTS头的AAC、MP3、或者 AC-3格式。)\n服务端可以采用硬件编码和软件编码两种形式，其功能都是按照上文描述的规则对现有的媒体文件进行切片并使用索引文件进行管理。而软件切片通常会使用 Apple 公司提供的工具或者第三方的集成工具。\n\nDistribution :\n同时上面提到的那个切片器（segmenter）也会创建一个索引文件，通常会包含这些媒体文件的一个列表，也能包含元数据。他一般都是一个.M38U 个hi的列表。列表元素会关联一个 URL 用于客户端访问。然后按序去请求这些 URL。\n\nclient :\n分配组件由标准的网络服务器。他们负责接受Client客户端请求并提供相关联的资源给客户端。\n\n索引文件结构图\n\n![](http://upload-images.jianshu.io/upload_images/764764-551e7aa6c8f2b86e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n主索引文件\n\n```\n#EXTM3U\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=409037,RESOLUTION=416x234,CODECS=\"mp4a.40.2, avc1.42001e\"\nGear1/prog_index.m3u8\n\n```\n\\#EXTM3U\n\n每个M3U文件第一行必须是这个tag，请标示作用\n\n\\#EXT-X-STREAM-INF\n\n标签的属性列表中直接指明当前流是VIDEO还是AUDIO\n\n属性 :\n\n1. BANDWIDTH 指定码率\n1. PROGRAM-ID 唯一ID (这个属性在后面的协议版本废除了)\n1. CODECS 指定流的编码类型\n1. RESOLUTION：分辨率\n\n子索引：\n\n```\n#EXTM3U\n#EXT-X-TARGETDURATION:11\n#EXT-X-VERSION:3\n#EXT-X-MEDIA-SEQUENCE:0\n#EXT-X-PLAYLIST-TYPE:VOD\n#EXTINF:10.133333,\nfileSequence0.ts\n#EXTINF:10.000666,\nfileSequence1.ts\n#EXTINF:10.667334,\nfileSequence2.ts\n#EXTINF:9.686001,\nfileSequence3.ts\n#EXTINF:9.768665,\nfileSequence4.ts\n#EXTINF:10.000000,\nfileSequence5.ts\n#EXT-X-ENDLIST\n\n```\n\n\\#EXTM3U   m3u文件头，必须放在第一行 \n\n\\#EXT-X-TARGETDURATION  每个分片TS的最大的时长 \n\n\\#EXT-X-VERSION   用以标示协议版本\n\\#EXT-X-MEDIA-SEQUENCE  TS分片的序列号 \n\\#EXT-X-PLAYLIST-TYPE  提供关于PlayList的可变性的信息， 这个对整个PlayList文件有效，是可选的\n\\#EXTINF  extra info，分片TS的信息，如时长，带宽等\n\n说明\n\n* 主索引文件和子索引文件都是.M3U8的playlist\n* 主索引文件只需下载一次，但对于直播节目子索引文件定期重新加载\n\nvideojs-contrib-hls解析过程\n\n![Markdown](http://i4.bvimg.com/600839/aed1d13465cd5422.png)\n\nHLS简单讲就是把整个流分成一个个小的，基于 HTTP 的文件来下载，每次只下载一些，前面提到了用于 H5 播放直播视频时引入的一个 .m3u8 的文件，这个文件就是基于 HLS 协议，存放视频流元数据的文件。 每一个 .m3u8 文件，分别对应若干个 ts 文件，这些 ts 文件才是真正存放视频的数据，m3u8 文件只是存放了一些 ts 文件的配置信息和相关路径，当视频播放时，.m3u8 是动态改变的，再通过解析器（videojs-contrib-hls.js）解析这个文件，并找到对应的 ts 文件来播放，所以一般为了加快速度，.m3u8 放在 web 服务器上，ts 文件放在 cdn 上。\n\n### RTMP\n\nReal Time Messaging Protocol（简称 RTMP）是 Macromedia 开发的一套视频直播协议，现在属于 Adobe。这套方案需要搭建专门的 RTMP 流媒体服务如 Adobe Media Server，并且在浏览器中只能使用 Flash 实现播放器。它的实时性非常好，延迟很小，但无法支持移动端 WEB 播放是它的硬伤。\n\n浏览器端，HTML5 video标签无法播放 RTMP 协议的视频，可以通过 video.js 来实现。\n\n```\n<link href=\"http://vjs.zencdn.net/5.8.8/video-js.css\" rel=\"stylesheet\">\n \n<video id=\"example_video_1\" class=\"video-js vjs-default-skin\" controls preload=\"auto\" width=\"640\" height=\"264\" loop=\"loop\" webkit-playsinline>\n<source src=\"rtmp://10.14.221.17:1935/rtmplive/home\" type='rtmp/flv'>\n</video>\n \n<script src=\"http://vjs.zencdn.net/5.8.8/video.js\"></script>\n<script>\nvideojs.options.flash.swf = 'video.swf';\nvideojs('example_video_1').ready(function() {\nthis.play();\n});\n</script>\n```\n### hls与RTMP对应\n|协议 | 原理 |延时 |优点 | 缺点 |使用场景 |\n| --- | --- | --- |--- | --- | --- |\n| HLS(http)|  集合一段时间数据生成ts切片文件更m3u8文件 | 10s-30s|跨平台|  延时性高 | 移动端|\n| RTMP(TCP)| 每个时刻的数据收到后立即发送 | 2s|延时低、实时性好|跨平台差|PC+直播+实时性要求高+互动性强|\n\n## 实践（搭建RTMP、HLS直播流服务）\n\n### 安装nginx\n\n```\nbrew install nginx\n\n```\n### 安装nginx-rtmp-module\n\n```\nbrew install nginx-full --with-rtmp-module\n\n```\n\n安装FFmpeg（是一个集录制、转换、音/视频编码解码功能 为一体的完整的开源工具，我们下面用它来做推流跟切片）\n\n```\nbrew install ffmpeg\n\n```\n\n### nginx.conf配置文件，配置RTMP、HLS\n\n查找到nginx.conf配置文件（/usr/local/etc/nginx/nginx.conf）\n\n```\nrtmp {\n\tserver {\n\t\t#监听的端口\n\t\tlisten 1935;\n\t\t# RTMP 直播流配置\n\t\tapplication rtmplive {\n\t\t\tlive on;\n\t\t\t#为 rtmp 引擎设置最大连接数。默认为 off\n\t\t\tmax_connections 1024;\n\t\t}\n\t\t# HLS 直播流配置\n\t\tapplication hls{\n\t\t\tlive on;\n\t\t\thls on;\n\t\t\thls_path /Users/tony/Documents/notes/live/public/hls;  #这里的路径切片需要保存的路径\n\t\t\thls_fragment 1s;\n\t\t}\n\t}\n}\n\n```\n\n在http中添加 hls 的配置\n\n```\n\nlocation /hls {\n\t# Serve HLS fragments\n\ttypes {\n\t\tapplication/vnd.apple.mpegurl m3u8;\n\t\tvideo/mp2t ts;\n\t}\n\troot /Users/tony/Documents/notes/live/public;#切片的路径\n\t#add_header Cache-Controll no-cache;\n\texpires -1;\n}\n\n```\n### 重启nginx\n\n```\nsudo nginx -s reload\n\n```\n\n### 查看端口是否启动\n\n```\nnetstat -an | grep 1935\n\n```\n\n如果显示如下，显示已经启用\n\n![Markdown](http://i4.bvimg.com/600839/edf1708baf6fbc90.png)\n\nhttp端口同理\n\n到现在我们已经完成了，服务的搭建（rtmp、hls推流地址分别为:rtmp://127.0.0.1:1935/rtmplive/home,rtmp://localhost:1935/rtmplive/hls）\n\n### FFmpeg执行命令\n\n我们以推流MP4文件为例，我的视频文件地址：/Users/tony/Desktop/w01661pl9vw.p702.1.mp4 \n\nRTMP 协议推流命令\n\n```\nffmpeg -re -i /Users/tony/Desktop/w01661pl9vw.p702.1.mp4 -vcodec libx264 -acodec aac -f flv rtmp://127.0.0.1:1935/rtmplive/home\n\n```\n\nHLS 协议推流命令\n\n```\nffmpeg -re -i  /Users/tony/Desktop/w01661pl9vw.p702.1.mp4 -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -q 10 rtmp://127.0.0.1:1935/hls/test \n\n```\n/Users/tony/Desktop/w01661pl9vw.p702.1.mp4 表示视频的地址\n\nrtmp://127.0.0.1:1935/rtmplive/home、rtmp://localhost:1935/rtmplive/hls表示推流地址\n\n上面的命令操作后，命令行出现了如下图，表示已经成功了\n\n![Markdown](http://i4.bvimg.com/600839/2835498ab8464e62.png)\n\n关于FFmpeg功能命令可参考：\n\n[FFmpeg功能命令集合](http://www.jianshu.com/p/053665062f22)\n\n### 代码实现\n\n两种推流方式播放的话，我们都使用video.js播放器播放(牛牛里使用的是腾讯云播放器)\n\nrtmp\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>Insert title here</title>\n<link href=\"http://vjs.zencdn.net/5.19/video-js.min.css\" rel=\"stylesheet\">\n<script src=\"http://vjs.zencdn.net/5.19/video.min.js\"></script>\n</head>\n<body>\n<video\n    id=\"my-player\"\n    class=\"video-js\"\n    controls\n    preload=\"auto\"\n    data-setup='{}'>\n    <source src='rtmp://127.0.0.1/rtmplive/home' type='rtmp/flv'/>  \n  </p>\n</video>\n<script type=\"text/javascript\">\n   var player = videojs('my-player');\n   var options = {};\n\n   var player = videojs('my-player', options, function onPlayerReady() {\n     videojs.log('Your player is ready!');\n     // In this context, `this` is the player that was created by Video.js.\n     this.play();\n     // How about an event listener?\n     this.on('ended', function() {\n       videojs.log('Awww...over so soon?!');\n     });\n   });\n\n</script>\n</body>\n</html>\n\n```\n其它src中的地址填的是RTMP推流地址，注意播放时，如果出现“当前系统环境不支持播放该视频格式”，浏览器需要启用flash，才能正常播放。\n\nhls\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=utf-8 />\n<title>videojs-contrib-hls embed</title>\n  <link href=\"https://unpkg.com/video.js/dist/video-js.css\" rel=\"stylesheet\">\n  <script src=\"https://unpkg.com/video.js/dist/video.js\"></script>\n  <script src=\"https://unpkg.com/videojs-contrib-hls/dist/videojs-contrib-hls.js\"></script>\n</head>\n<body>\n\n  <video id=\"my_video_1\" class=\"video-js vjs-default-skin\" controls preload=\"auto\" width=\"640\" height=\"268\" \n  data-setup='{}'>\n    <source src=\"http://www.tony.com/hls/test.m3u8\" type=\"application/x-mpegURL\">\n  </video>\n  \n  <script>\n  </script>\n  \n</body>\n</html>\n```\nsrc填的是切片地址\n\n### 效果\n\nrtmp效果\n\n![Markdown](http://i2.bvimg.com/600839/0b20b027406625d2.png)\n\nhls效果\n\n![Markdown](http://i2.bvimg.com/600839/fbd49eed2bd3f92e.png)\n\nts和m3u8文件\n\n![Markdown](http://i2.bvimg.com/600839/14e622f03c4a9193.png)\n\n\n## 直播中遇到问题\n\n* 自动播放问题\n* 各平台播放器表现不统一\n* 内页面调试困难\n* Native与web通信问题\n\n### 自动播放问题\n\n在X5内核浏览器里必须使用触发touchend、click、doubleclick或 keydown 事件等标准的事件才能触发\n\n### 各平台播放器表现不统一\n\n安卓下很多浏览器把video标签替换成了原生自带播放器样式跟行为，很难控制其行为跟样式。\n\n### 内嵌页面调试困难\n\n目前使用的是weinre调试，但weinre调试看不到在native实际效果，比如web调用native，需要native反馈一种效果，weinre是看不到效果。\n\n### Native与web通信\n\nschema跟jsBridge，schema只能做到web调用native，而且做不到native调用web；jsBridge虽然可以做native调用web，但在iframe没加载完的情况下，也是通知不到web的；\n\n## 总结\n\n整个直播是一个非常复杂的过程，实现过程中会遇到很多性能问题，需要在性能跟即时性做一个权衡，ts跟m3u8尽量做到缓存，浏览器里尽量使用推流。\n\n参考资料：\n\n[如何搭建一个完整的视频直播系统？](https://www.zhihu.com/question/42162310)\n\n[H5直播起航](http://web.jobbole.com/88543/)\n\n[有支持M3U8格式的HTML5播放器吗？](https://www.zhihu.com/question/21087379)\n\n[HTTP Live Streaming (HLS) - 概念\n](http://www.jianshu.com/p/2ce402a485ca)\n\n[M3U8格式讲解及实际应用分析\n](http://www.eduve.org/knowledge/732)\n\n作者：[Tony](https://github.com/fttony)","slug":"2017-12-01-live","published":1,"updated":"2017-12-01T09:40:16.042Z","_id":"cjanov2xl009pjxs1gtep6jle","comments":1,"layout":"post","photos":[],"link":"","content":"<p>直播在互联网中已经成为一个必不可少的东西，作为了一家互联公司直播当然也少不了了，目前直播在牛牛软件中主要功能是教育跟宣传作用。</p>\n<h2 id=\"内容\"><a href=\"#内容\" class=\"headerlink\" title=\"内容\"></a>内容</h2><ol>\n<li>直播构成</li>\n<li>直播流程</li>\n<li>web中直播技术<ul>\n<li>hls协议</li>\n<li>rtmp协议</li>\n<li>hls与rtmp对比</li>\n</ul>\n</li>\n<li>实践<ul>\n<li>安装nginx、nginx-rtmp-module、FFmpeg（以下操作均在mac下进行）</li>\n<li>nginx.conf配置文件，配置RTMP、HLS</li>\n<li>重启nginx</li>\n<li>查看端口是否启动</li>\n<li>FFmpeg执行命令</li>\n<li>代码</li>\n<li>效果</li>\n</ul>\n</li>\n<li>直播中遇到坑</li>\n<li>总结</li>\n</ol>\n<h2 id=\"直播构成（使用角色）\"><a href=\"#直播构成（使用角色）\" class=\"headerlink\" title=\"直播构成（使用角色）\"></a>直播构成（使用角色）</h2><p><img src=\"http://i2.bvimg.com/600839/c19343ac6b031af7.png\" alt=\"Markdown\"></p>\n<p>目前牛牛支持情况：</p>\n<p>移动牛牛（安卓、IOS）主播端只支持摄像头直播，观众端支持展示</p>\n<p>PC牛牛主播端支持摄像头直播、录屏直播、摄像头+录屏直播，观众端支持展示</p>\n<p>MAC牛牛跟web端主播端不支持，观众端支持展示</p>\n<h2 id=\"直播流程\"><a href=\"#直播流程\" class=\"headerlink\" title=\"直播流程\"></a>直播流程</h2><p>视频直播，可以分为 采集，前处理，编码，传输，解码，渲染 这几个环节</p>\n<p>采集，一般是由客户端（IOS、安卓、PC或其它工具，如OBS）完成的，iOS是比较简单的，Android则要做些机型适配工作，PC最麻烦各种奇葩摄像头驱动，当然这些问题，腾讯云已经帮我们处理好了，呵呵。</p>\n<p>前处理，主要是处理直播美颜，美颜算法需要用到GPU编程，需要懂图像处理算法的人，没有好的开源实现，要自己参考论文去研究。难点不在于美颜效果，而在于GPU占用和美颜效果之间找平衡。</p>\n<p>编码，肯定要采用硬编码，软编码720p完全没希望，勉强能编码也会导致CPU过热烫到摄像头。编码要在分辨率，帧率，码率，GOP等参数设计上找到最佳平衡点。</p>\n<p>传输，一般交给了CDN服务商。</p>\n<p>解码，是对之前编码的操作，进行解码，在web里需要解码是hls。</p>\n<p>渲染，主要用播放器来解决，web中常用到的播放器有video.js，目前我们使用是腾讯云播放器。</p>\n<p>其实一个完成直播，远远不上面这几个环节，下面是腾讯云直播方案的整个流程图：<br><img src=\"http://i4.bvimg.com/600839/2d4844429b6c24c5.png\" alt=\"Markdown\"></p>\n<h2 id=\"web中直播技术\"><a href=\"#web中直播技术\" class=\"headerlink\" title=\"web中直播技术\"></a>web中直播技术</h2><p>目前互联网上web做直播，主要是展示，主流web展示的话可能涉及到hls跟rtmp这两个东西，现在我们重点讲解hls跟rtmp协议。</p>\n<h3 id=\"HLS\"><a href=\"#HLS\" class=\"headerlink\" title=\"HLS\"></a>HLS</h3><p>HLS（HTTP Live Streaming全称）是一个基于 HTTP 的视频流协议，由 Apple 公司实现，Mac OS 上的 QuickTime、Safari 以及 iOS 上的 Safari 都能很好的支持 HLS，高版本 Android 也增加了对 HLS 的支持。一些常见的客户端如：MPlayerX、VLC 也都支持 HLS 协议，如果需要在chrome上播放，需要使用videojs-contrib-hls.js解析。</p>\n<p>HLS工作流程：</p>\n<p><img src=\"http://i2.bvimg.com/600839/ebf24281ef5b0221.png\" alt=\"Markdown\"></p>\n<p>Server :<br>服务器组件负责获取的媒体输入流 , 然后Media编码后 MPEG-4（H.264 video 和 AAC audio）格式然后用硬件打包到 MPEG-2 (MPEG-2 transport stream)的传输流中。图中显示,传输流会经过stream segmenter, 这里的工作是MPEG-2传输流会被分散为小片段然后保存为一个或多个系列的 .ts 格式的媒体文件。这个过程需要借助编码工具来完成，比如 Apple stream segmenter。<br>(视频类是.ts文件,纯音频会被编码为一些音频小片段，通常为 ADTS头的AAC、MP3、或者 AC-3格式。)<br>服务端可以采用硬件编码和软件编码两种形式，其功能都是按照上文描述的规则对现有的媒体文件进行切片并使用索引文件进行管理。而软件切片通常会使用 Apple 公司提供的工具或者第三方的集成工具。</p>\n<p>Distribution :<br>同时上面提到的那个切片器（segmenter）也会创建一个索引文件，通常会包含这些媒体文件的一个列表，也能包含元数据。他一般都是一个.M38U 个hi的列表。列表元素会关联一个 URL 用于客户端访问。然后按序去请求这些 URL。</p>\n<p>client :<br>分配组件由标准的网络服务器。他们负责接受Client客户端请求并提供相关联的资源给客户端。</p>\n<p>索引文件结构图</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/764764-551e7aa6c8f2b86e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>主索引文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#EXTM3U</span><br><span class=\"line\">#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=409037,RESOLUTION=416x234,CODECS=&quot;mp4a.40.2, avc1.42001e&quot;</span><br><span class=\"line\">Gear1/prog_index.m3u8</span><br></pre></td></tr></table></figure>\n<p>#EXTM3U</p>\n<p>每个M3U文件第一行必须是这个tag，请标示作用</p>\n<p>#EXT-X-STREAM-INF</p>\n<p>标签的属性列表中直接指明当前流是VIDEO还是AUDIO</p>\n<p>属性 :</p>\n<ol>\n<li>BANDWIDTH 指定码率</li>\n<li>PROGRAM-ID 唯一ID (这个属性在后面的协议版本废除了)</li>\n<li>CODECS 指定流的编码类型</li>\n<li>RESOLUTION：分辨率</li>\n</ol>\n<p>子索引：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#EXTM3U</span><br><span class=\"line\">#EXT-X-TARGETDURATION:11</span><br><span class=\"line\">#EXT-X-VERSION:3</span><br><span class=\"line\">#EXT-X-MEDIA-SEQUENCE:0</span><br><span class=\"line\">#EXT-X-PLAYLIST-TYPE:VOD</span><br><span class=\"line\">#EXTINF:10.133333,</span><br><span class=\"line\">fileSequence0.ts</span><br><span class=\"line\">#EXTINF:10.000666,</span><br><span class=\"line\">fileSequence1.ts</span><br><span class=\"line\">#EXTINF:10.667334,</span><br><span class=\"line\">fileSequence2.ts</span><br><span class=\"line\">#EXTINF:9.686001,</span><br><span class=\"line\">fileSequence3.ts</span><br><span class=\"line\">#EXTINF:9.768665,</span><br><span class=\"line\">fileSequence4.ts</span><br><span class=\"line\">#EXTINF:10.000000,</span><br><span class=\"line\">fileSequence5.ts</span><br><span class=\"line\">#EXT-X-ENDLIST</span><br></pre></td></tr></table></figure>\n<p>#EXTM3U   m3u文件头，必须放在第一行 </p>\n<p>#EXT-X-TARGETDURATION  每个分片TS的最大的时长 </p>\n<p>#EXT-X-VERSION   用以标示协议版本<br>#EXT-X-MEDIA-SEQUENCE  TS分片的序列号<br>#EXT-X-PLAYLIST-TYPE  提供关于PlayList的可变性的信息， 这个对整个PlayList文件有效，是可选的<br>#EXTINF  extra info，分片TS的信息，如时长，带宽等</p>\n<p>说明</p>\n<ul>\n<li>主索引文件和子索引文件都是.M3U8的playlist</li>\n<li>主索引文件只需下载一次，但对于直播节目子索引文件定期重新加载</li>\n</ul>\n<p>videojs-contrib-hls解析过程</p>\n<p><img src=\"http://i4.bvimg.com/600839/aed1d13465cd5422.png\" alt=\"Markdown\"></p>\n<p>HLS简单讲就是把整个流分成一个个小的，基于 HTTP 的文件来下载，每次只下载一些，前面提到了用于 H5 播放直播视频时引入的一个 .m3u8 的文件，这个文件就是基于 HLS 协议，存放视频流元数据的文件。 每一个 .m3u8 文件，分别对应若干个 ts 文件，这些 ts 文件才是真正存放视频的数据，m3u8 文件只是存放了一些 ts 文件的配置信息和相关路径，当视频播放时，.m3u8 是动态改变的，再通过解析器（videojs-contrib-hls.js）解析这个文件，并找到对应的 ts 文件来播放，所以一般为了加快速度，.m3u8 放在 web 服务器上，ts 文件放在 cdn 上。</p>\n<h3 id=\"RTMP\"><a href=\"#RTMP\" class=\"headerlink\" title=\"RTMP\"></a>RTMP</h3><p>Real Time Messaging Protocol（简称 RTMP）是 Macromedia 开发的一套视频直播协议，现在属于 Adobe。这套方案需要搭建专门的 RTMP 流媒体服务如 Adobe Media Server，并且在浏览器中只能使用 Flash 实现播放器。它的实时性非常好，延迟很小，但无法支持移动端 WEB 播放是它的硬伤。</p>\n<p>浏览器端，HTML5 video标签无法播放 RTMP 协议的视频，可以通过 video.js 来实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link href=&quot;http://vjs.zencdn.net/5.8.8/video-js.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;video id=&quot;example_video_1&quot; class=&quot;video-js vjs-default-skin&quot; controls preload=&quot;auto&quot; width=&quot;640&quot; height=&quot;264&quot; loop=&quot;loop&quot; webkit-playsinline&gt;</span><br><span class=\"line\">&lt;source src=&quot;rtmp://10.14.221.17:1935/rtmplive/home&quot; type=&apos;rtmp/flv&apos;&gt;</span><br><span class=\"line\">&lt;/video&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;script src=&quot;http://vjs.zencdn.net/5.8.8/video.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">videojs.options.flash.swf = &apos;video.swf&apos;;</span><br><span class=\"line\">videojs(&apos;example_video_1&apos;).ready(function() &#123;</span><br><span class=\"line\">this.play();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"hls与RTMP对应\"><a href=\"#hls与RTMP对应\" class=\"headerlink\" title=\"hls与RTMP对应\"></a>hls与RTMP对应</h3><table>\n<thead>\n<tr>\n<th>协议</th>\n<th>原理</th>\n<th>延时</th>\n<th>优点</th>\n<th>缺点</th>\n<th>使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HLS(http)</td>\n<td>集合一段时间数据生成ts切片文件更m3u8文件</td>\n<td>10s-30s</td>\n<td>跨平台</td>\n<td>延时性高</td>\n<td>移动端</td>\n</tr>\n<tr>\n<td>RTMP(TCP)</td>\n<td>每个时刻的数据收到后立即发送</td>\n<td>2s</td>\n<td>延时低、实时性好</td>\n<td>跨平台差</td>\n<td>PC+直播+实时性要求高+互动性强</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"实践（搭建RTMP、HLS直播流服务）\"><a href=\"#实践（搭建RTMP、HLS直播流服务）\" class=\"headerlink\" title=\"实践（搭建RTMP、HLS直播流服务）\"></a>实践（搭建RTMP、HLS直播流服务）</h2><h3 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装nginx-rtmp-module\"><a href=\"#安装nginx-rtmp-module\" class=\"headerlink\" title=\"安装nginx-rtmp-module\"></a>安装nginx-rtmp-module</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nginx-full --with-rtmp-module</span><br></pre></td></tr></table></figure>\n<p>安装FFmpeg（是一个集录制、转换、音/视频编码解码功能 为一体的完整的开源工具，我们下面用它来做推流跟切片）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install ffmpeg</span><br></pre></td></tr></table></figure>\n<h3 id=\"nginx-conf配置文件，配置RTMP、HLS\"><a href=\"#nginx-conf配置文件，配置RTMP、HLS\" class=\"headerlink\" title=\"nginx.conf配置文件，配置RTMP、HLS\"></a>nginx.conf配置文件，配置RTMP、HLS</h3><p>查找到nginx.conf配置文件（/usr/local/etc/nginx/nginx.conf）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rtmp &#123;</span><br><span class=\"line\">\tserver &#123;</span><br><span class=\"line\">\t\t#监听的端口</span><br><span class=\"line\">\t\tlisten 1935;</span><br><span class=\"line\">\t\t# RTMP 直播流配置</span><br><span class=\"line\">\t\tapplication rtmplive &#123;</span><br><span class=\"line\">\t\t\tlive on;</span><br><span class=\"line\">\t\t\t#为 rtmp 引擎设置最大连接数。默认为 off</span><br><span class=\"line\">\t\t\tmax_connections 1024;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t# HLS 直播流配置</span><br><span class=\"line\">\t\tapplication hls&#123;</span><br><span class=\"line\">\t\t\tlive on;</span><br><span class=\"line\">\t\t\thls on;</span><br><span class=\"line\">\t\t\thls_path /Users/tony/Documents/notes/live/public/hls;  #这里的路径切片需要保存的路径</span><br><span class=\"line\">\t\t\thls_fragment 1s;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在http中添加 hls 的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">location /hls &#123;</span><br><span class=\"line\">\t# Serve HLS fragments</span><br><span class=\"line\">\ttypes &#123;</span><br><span class=\"line\">\t\tapplication/vnd.apple.mpegurl m3u8;</span><br><span class=\"line\">\t\tvideo/mp2t ts;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\troot /Users/tony/Documents/notes/live/public;#切片的路径</span><br><span class=\"line\">\t#add_header Cache-Controll no-cache;</span><br><span class=\"line\">\texpires -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"重启nginx\"><a href=\"#重启nginx\" class=\"headerlink\" title=\"重启nginx\"></a>重启nginx</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看端口是否启动\"><a href=\"#查看端口是否启动\" class=\"headerlink\" title=\"查看端口是否启动\"></a>查看端口是否启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -an | grep 1935</span><br></pre></td></tr></table></figure>\n<p>如果显示如下，显示已经启用</p>\n<p><img src=\"http://i4.bvimg.com/600839/edf1708baf6fbc90.png\" alt=\"Markdown\"></p>\n<p>http端口同理</p>\n<p>到现在我们已经完成了，服务的搭建（rtmp、hls推流地址分别为:rtmp://127.0.0.1:1935/rtmplive/home,rtmp://localhost:1935/rtmplive/hls）</p>\n<h3 id=\"FFmpeg执行命令\"><a href=\"#FFmpeg执行命令\" class=\"headerlink\" title=\"FFmpeg执行命令\"></a>FFmpeg执行命令</h3><p>我们以推流MP4文件为例，我的视频文件地址：/Users/tony/Desktop/w01661pl9vw.p702.1.mp4 </p>\n<p>RTMP 协议推流命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -re -i /Users/tony/Desktop/w01661pl9vw.p702.1.mp4 -vcodec libx264 -acodec aac -f flv rtmp://127.0.0.1:1935/rtmplive/home</span><br></pre></td></tr></table></figure>\n<p>HLS 协议推流命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -re -i  /Users/tony/Desktop/w01661pl9vw.p702.1.mp4 -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -q 10 rtmp://127.0.0.1:1935/hls/test</span><br></pre></td></tr></table></figure>\n<p>/Users/tony/Desktop/w01661pl9vw.p702.1.mp4 表示视频的地址</p>\n<p>rtmp://127.0.0.1:1935/rtmplive/home、rtmp://localhost:1935/rtmplive/hls表示推流地址</p>\n<p>上面的命令操作后，命令行出现了如下图，表示已经成功了</p>\n<p><img src=\"http://i4.bvimg.com/600839/2835498ab8464e62.png\" alt=\"Markdown\"></p>\n<p>关于FFmpeg功能命令可参考：</p>\n<p><a href=\"http://www.jianshu.com/p/053665062f22\" target=\"_blank\" rel=\"noopener\">FFmpeg功能命令集合</a></p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>两种推流方式播放的话，我们都使用video.js播放器播放(牛牛里使用的是腾讯云播放器)</p>\n<p>rtmp</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;link href=&quot;http://vjs.zencdn.net/5.19/video-js.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class=\"line\">&lt;script src=&quot;http://vjs.zencdn.net/5.19/video.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;video</span><br><span class=\"line\">    id=&quot;my-player&quot;</span><br><span class=\"line\">    class=&quot;video-js&quot;</span><br><span class=\"line\">    controls</span><br><span class=\"line\">    preload=&quot;auto&quot;</span><br><span class=\"line\">    data-setup=&apos;&#123;&#125;&apos;&gt;</span><br><span class=\"line\">    &lt;source src=&apos;rtmp://127.0.0.1/rtmplive/home&apos; type=&apos;rtmp/flv&apos;/&gt;  </span><br><span class=\"line\">  &lt;/p&gt;</span><br><span class=\"line\">&lt;/video&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">   var player = videojs(&apos;my-player&apos;);</span><br><span class=\"line\">   var options = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   var player = videojs(&apos;my-player&apos;, options, function onPlayerReady() &#123;</span><br><span class=\"line\">     videojs.log(&apos;Your player is ready!&apos;);</span><br><span class=\"line\">     // In this context, `this` is the player that was created by Video.js.</span><br><span class=\"line\">     this.play();</span><br><span class=\"line\">     // How about an event listener?</span><br><span class=\"line\">     this.on(&apos;ended&apos;, function() &#123;</span><br><span class=\"line\">       videojs.log(&apos;Awww...over so soon?!&apos;);</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>其它src中的地址填的是RTMP推流地址，注意播放时，如果出现“当前系统环境不支持播放该视频格式”，浏览器需要启用flash，才能正常播放。</p>\n<p>hls</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=utf-8 /&gt;</span><br><span class=\"line\">&lt;title&gt;videojs-contrib-hls embed&lt;/title&gt;</span><br><span class=\"line\">  &lt;link href=&quot;https://unpkg.com/video.js/dist/video-js.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class=\"line\">  &lt;script src=&quot;https://unpkg.com/video.js/dist/video.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;https://unpkg.com/videojs-contrib-hls/dist/videojs-contrib-hls.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;video id=&quot;my_video_1&quot; class=&quot;video-js vjs-default-skin&quot; controls preload=&quot;auto&quot; width=&quot;640&quot; height=&quot;268&quot; </span><br><span class=\"line\">  data-setup=&apos;&#123;&#125;&apos;&gt;</span><br><span class=\"line\">    &lt;source src=&quot;http://www.tony.com/hls/test.m3u8&quot; type=&quot;application/x-mpegURL&quot;&gt;</span><br><span class=\"line\">  &lt;/video&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>src填的是切片地址</p>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p>rtmp效果</p>\n<p><img src=\"http://i2.bvimg.com/600839/0b20b027406625d2.png\" alt=\"Markdown\"></p>\n<p>hls效果</p>\n<p><img src=\"http://i2.bvimg.com/600839/fbd49eed2bd3f92e.png\" alt=\"Markdown\"></p>\n<p>ts和m3u8文件</p>\n<p><img src=\"http://i2.bvimg.com/600839/14e622f03c4a9193.png\" alt=\"Markdown\"></p>\n<h2 id=\"直播中遇到问题\"><a href=\"#直播中遇到问题\" class=\"headerlink\" title=\"直播中遇到问题\"></a>直播中遇到问题</h2><ul>\n<li>自动播放问题</li>\n<li>各平台播放器表现不统一</li>\n<li>内页面调试困难</li>\n<li>Native与web通信问题</li>\n</ul>\n<h3 id=\"自动播放问题\"><a href=\"#自动播放问题\" class=\"headerlink\" title=\"自动播放问题\"></a>自动播放问题</h3><p>在X5内核浏览器里必须使用触发touchend、click、doubleclick或 keydown 事件等标准的事件才能触发</p>\n<h3 id=\"各平台播放器表现不统一\"><a href=\"#各平台播放器表现不统一\" class=\"headerlink\" title=\"各平台播放器表现不统一\"></a>各平台播放器表现不统一</h3><p>安卓下很多浏览器把video标签替换成了原生自带播放器样式跟行为，很难控制其行为跟样式。</p>\n<h3 id=\"内嵌页面调试困难\"><a href=\"#内嵌页面调试困难\" class=\"headerlink\" title=\"内嵌页面调试困难\"></a>内嵌页面调试困难</h3><p>目前使用的是weinre调试，但weinre调试看不到在native实际效果，比如web调用native，需要native反馈一种效果，weinre是看不到效果。</p>\n<h3 id=\"Native与web通信\"><a href=\"#Native与web通信\" class=\"headerlink\" title=\"Native与web通信\"></a>Native与web通信</h3><p>schema跟jsBridge，schema只能做到web调用native，而且做不到native调用web；jsBridge虽然可以做native调用web，但在iframe没加载完的情况下，也是通知不到web的；</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>整个直播是一个非常复杂的过程，实现过程中会遇到很多性能问题，需要在性能跟即时性做一个权衡，ts跟m3u8尽量做到缓存，浏览器里尽量使用推流。</p>\n<p>参考资料：</p>\n<p><a href=\"https://www.zhihu.com/question/42162310\" target=\"_blank\" rel=\"noopener\">如何搭建一个完整的视频直播系统？</a></p>\n<p><a href=\"http://web.jobbole.com/88543/\" target=\"_blank\" rel=\"noopener\">H5直播起航</a></p>\n<p><a href=\"https://www.zhihu.com/question/21087379\" target=\"_blank\" rel=\"noopener\">有支持M3U8格式的HTML5播放器吗？</a></p>\n<p><a href=\"http://www.jianshu.com/p/2ce402a485ca\" target=\"_blank\" rel=\"noopener\">HTTP Live Streaming (HLS) - 概念\n</a></p>\n<p><a href=\"http://www.eduve.org/knowledge/732\" target=\"_blank\" rel=\"noopener\">M3U8格式讲解及实际应用分析\n</a></p>\n<p>作者：<a href=\"https://github.com/fttony\" target=\"_blank\" rel=\"noopener\">Tony</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>直播在互联网中已经成为一个必不可少的东西，作为了一家互联公司直播当然也少不了了，目前直播在牛牛软件中主要功能是教育跟宣传作用。</p>\n<h2 id=\"内容\"><a href=\"#内容\" class=\"headerlink\" title=\"内容\"></a>内容</h2><ol>\n<li>直播构成</li>\n<li>直播流程</li>\n<li>web中直播技术<ul>\n<li>hls协议</li>\n<li>rtmp协议</li>\n<li>hls与rtmp对比</li>\n</ul>\n</li>\n<li>实践<ul>\n<li>安装nginx、nginx-rtmp-module、FFmpeg（以下操作均在mac下进行）</li>\n<li>nginx.conf配置文件，配置RTMP、HLS</li>\n<li>重启nginx</li>\n<li>查看端口是否启动</li>\n<li>FFmpeg执行命令</li>\n<li>代码</li>\n<li>效果</li>\n</ul>\n</li>\n<li>直播中遇到坑</li>\n<li>总结</li>\n</ol>\n<h2 id=\"直播构成（使用角色）\"><a href=\"#直播构成（使用角色）\" class=\"headerlink\" title=\"直播构成（使用角色）\"></a>直播构成（使用角色）</h2><p><img src=\"http://i2.bvimg.com/600839/c19343ac6b031af7.png\" alt=\"Markdown\"></p>\n<p>目前牛牛支持情况：</p>\n<p>移动牛牛（安卓、IOS）主播端只支持摄像头直播，观众端支持展示</p>\n<p>PC牛牛主播端支持摄像头直播、录屏直播、摄像头+录屏直播，观众端支持展示</p>\n<p>MAC牛牛跟web端主播端不支持，观众端支持展示</p>\n<h2 id=\"直播流程\"><a href=\"#直播流程\" class=\"headerlink\" title=\"直播流程\"></a>直播流程</h2><p>视频直播，可以分为 采集，前处理，编码，传输，解码，渲染 这几个环节</p>\n<p>采集，一般是由客户端（IOS、安卓、PC或其它工具，如OBS）完成的，iOS是比较简单的，Android则要做些机型适配工作，PC最麻烦各种奇葩摄像头驱动，当然这些问题，腾讯云已经帮我们处理好了，呵呵。</p>\n<p>前处理，主要是处理直播美颜，美颜算法需要用到GPU编程，需要懂图像处理算法的人，没有好的开源实现，要自己参考论文去研究。难点不在于美颜效果，而在于GPU占用和美颜效果之间找平衡。</p>\n<p>编码，肯定要采用硬编码，软编码720p完全没希望，勉强能编码也会导致CPU过热烫到摄像头。编码要在分辨率，帧率，码率，GOP等参数设计上找到最佳平衡点。</p>\n<p>传输，一般交给了CDN服务商。</p>\n<p>解码，是对之前编码的操作，进行解码，在web里需要解码是hls。</p>\n<p>渲染，主要用播放器来解决，web中常用到的播放器有video.js，目前我们使用是腾讯云播放器。</p>\n<p>其实一个完成直播，远远不上面这几个环节，下面是腾讯云直播方案的整个流程图：<br><img src=\"http://i4.bvimg.com/600839/2d4844429b6c24c5.png\" alt=\"Markdown\"></p>\n<h2 id=\"web中直播技术\"><a href=\"#web中直播技术\" class=\"headerlink\" title=\"web中直播技术\"></a>web中直播技术</h2><p>目前互联网上web做直播，主要是展示，主流web展示的话可能涉及到hls跟rtmp这两个东西，现在我们重点讲解hls跟rtmp协议。</p>\n<h3 id=\"HLS\"><a href=\"#HLS\" class=\"headerlink\" title=\"HLS\"></a>HLS</h3><p>HLS（HTTP Live Streaming全称）是一个基于 HTTP 的视频流协议，由 Apple 公司实现，Mac OS 上的 QuickTime、Safari 以及 iOS 上的 Safari 都能很好的支持 HLS，高版本 Android 也增加了对 HLS 的支持。一些常见的客户端如：MPlayerX、VLC 也都支持 HLS 协议，如果需要在chrome上播放，需要使用videojs-contrib-hls.js解析。</p>\n<p>HLS工作流程：</p>\n<p><img src=\"http://i2.bvimg.com/600839/ebf24281ef5b0221.png\" alt=\"Markdown\"></p>\n<p>Server :<br>服务器组件负责获取的媒体输入流 , 然后Media编码后 MPEG-4（H.264 video 和 AAC audio）格式然后用硬件打包到 MPEG-2 (MPEG-2 transport stream)的传输流中。图中显示,传输流会经过stream segmenter, 这里的工作是MPEG-2传输流会被分散为小片段然后保存为一个或多个系列的 .ts 格式的媒体文件。这个过程需要借助编码工具来完成，比如 Apple stream segmenter。<br>(视频类是.ts文件,纯音频会被编码为一些音频小片段，通常为 ADTS头的AAC、MP3、或者 AC-3格式。)<br>服务端可以采用硬件编码和软件编码两种形式，其功能都是按照上文描述的规则对现有的媒体文件进行切片并使用索引文件进行管理。而软件切片通常会使用 Apple 公司提供的工具或者第三方的集成工具。</p>\n<p>Distribution :<br>同时上面提到的那个切片器（segmenter）也会创建一个索引文件，通常会包含这些媒体文件的一个列表，也能包含元数据。他一般都是一个.M38U 个hi的列表。列表元素会关联一个 URL 用于客户端访问。然后按序去请求这些 URL。</p>\n<p>client :<br>分配组件由标准的网络服务器。他们负责接受Client客户端请求并提供相关联的资源给客户端。</p>\n<p>索引文件结构图</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/764764-551e7aa6c8f2b86e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>主索引文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#EXTM3U</span><br><span class=\"line\">#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=409037,RESOLUTION=416x234,CODECS=&quot;mp4a.40.2, avc1.42001e&quot;</span><br><span class=\"line\">Gear1/prog_index.m3u8</span><br></pre></td></tr></table></figure>\n<p>#EXTM3U</p>\n<p>每个M3U文件第一行必须是这个tag，请标示作用</p>\n<p>#EXT-X-STREAM-INF</p>\n<p>标签的属性列表中直接指明当前流是VIDEO还是AUDIO</p>\n<p>属性 :</p>\n<ol>\n<li>BANDWIDTH 指定码率</li>\n<li>PROGRAM-ID 唯一ID (这个属性在后面的协议版本废除了)</li>\n<li>CODECS 指定流的编码类型</li>\n<li>RESOLUTION：分辨率</li>\n</ol>\n<p>子索引：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#EXTM3U</span><br><span class=\"line\">#EXT-X-TARGETDURATION:11</span><br><span class=\"line\">#EXT-X-VERSION:3</span><br><span class=\"line\">#EXT-X-MEDIA-SEQUENCE:0</span><br><span class=\"line\">#EXT-X-PLAYLIST-TYPE:VOD</span><br><span class=\"line\">#EXTINF:10.133333,</span><br><span class=\"line\">fileSequence0.ts</span><br><span class=\"line\">#EXTINF:10.000666,</span><br><span class=\"line\">fileSequence1.ts</span><br><span class=\"line\">#EXTINF:10.667334,</span><br><span class=\"line\">fileSequence2.ts</span><br><span class=\"line\">#EXTINF:9.686001,</span><br><span class=\"line\">fileSequence3.ts</span><br><span class=\"line\">#EXTINF:9.768665,</span><br><span class=\"line\">fileSequence4.ts</span><br><span class=\"line\">#EXTINF:10.000000,</span><br><span class=\"line\">fileSequence5.ts</span><br><span class=\"line\">#EXT-X-ENDLIST</span><br></pre></td></tr></table></figure>\n<p>#EXTM3U   m3u文件头，必须放在第一行 </p>\n<p>#EXT-X-TARGETDURATION  每个分片TS的最大的时长 </p>\n<p>#EXT-X-VERSION   用以标示协议版本<br>#EXT-X-MEDIA-SEQUENCE  TS分片的序列号<br>#EXT-X-PLAYLIST-TYPE  提供关于PlayList的可变性的信息， 这个对整个PlayList文件有效，是可选的<br>#EXTINF  extra info，分片TS的信息，如时长，带宽等</p>\n<p>说明</p>\n<ul>\n<li>主索引文件和子索引文件都是.M3U8的playlist</li>\n<li>主索引文件只需下载一次，但对于直播节目子索引文件定期重新加载</li>\n</ul>\n<p>videojs-contrib-hls解析过程</p>\n<p><img src=\"http://i4.bvimg.com/600839/aed1d13465cd5422.png\" alt=\"Markdown\"></p>\n<p>HLS简单讲就是把整个流分成一个个小的，基于 HTTP 的文件来下载，每次只下载一些，前面提到了用于 H5 播放直播视频时引入的一个 .m3u8 的文件，这个文件就是基于 HLS 协议，存放视频流元数据的文件。 每一个 .m3u8 文件，分别对应若干个 ts 文件，这些 ts 文件才是真正存放视频的数据，m3u8 文件只是存放了一些 ts 文件的配置信息和相关路径，当视频播放时，.m3u8 是动态改变的，再通过解析器（videojs-contrib-hls.js）解析这个文件，并找到对应的 ts 文件来播放，所以一般为了加快速度，.m3u8 放在 web 服务器上，ts 文件放在 cdn 上。</p>\n<h3 id=\"RTMP\"><a href=\"#RTMP\" class=\"headerlink\" title=\"RTMP\"></a>RTMP</h3><p>Real Time Messaging Protocol（简称 RTMP）是 Macromedia 开发的一套视频直播协议，现在属于 Adobe。这套方案需要搭建专门的 RTMP 流媒体服务如 Adobe Media Server，并且在浏览器中只能使用 Flash 实现播放器。它的实时性非常好，延迟很小，但无法支持移动端 WEB 播放是它的硬伤。</p>\n<p>浏览器端，HTML5 video标签无法播放 RTMP 协议的视频，可以通过 video.js 来实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link href=&quot;http://vjs.zencdn.net/5.8.8/video-js.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;video id=&quot;example_video_1&quot; class=&quot;video-js vjs-default-skin&quot; controls preload=&quot;auto&quot; width=&quot;640&quot; height=&quot;264&quot; loop=&quot;loop&quot; webkit-playsinline&gt;</span><br><span class=\"line\">&lt;source src=&quot;rtmp://10.14.221.17:1935/rtmplive/home&quot; type=&apos;rtmp/flv&apos;&gt;</span><br><span class=\"line\">&lt;/video&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;script src=&quot;http://vjs.zencdn.net/5.8.8/video.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">videojs.options.flash.swf = &apos;video.swf&apos;;</span><br><span class=\"line\">videojs(&apos;example_video_1&apos;).ready(function() &#123;</span><br><span class=\"line\">this.play();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"hls与RTMP对应\"><a href=\"#hls与RTMP对应\" class=\"headerlink\" title=\"hls与RTMP对应\"></a>hls与RTMP对应</h3><table>\n<thead>\n<tr>\n<th>协议</th>\n<th>原理</th>\n<th>延时</th>\n<th>优点</th>\n<th>缺点</th>\n<th>使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HLS(http)</td>\n<td>集合一段时间数据生成ts切片文件更m3u8文件</td>\n<td>10s-30s</td>\n<td>跨平台</td>\n<td>延时性高</td>\n<td>移动端</td>\n</tr>\n<tr>\n<td>RTMP(TCP)</td>\n<td>每个时刻的数据收到后立即发送</td>\n<td>2s</td>\n<td>延时低、实时性好</td>\n<td>跨平台差</td>\n<td>PC+直播+实时性要求高+互动性强</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"实践（搭建RTMP、HLS直播流服务）\"><a href=\"#实践（搭建RTMP、HLS直播流服务）\" class=\"headerlink\" title=\"实践（搭建RTMP、HLS直播流服务）\"></a>实践（搭建RTMP、HLS直播流服务）</h2><h3 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装nginx-rtmp-module\"><a href=\"#安装nginx-rtmp-module\" class=\"headerlink\" title=\"安装nginx-rtmp-module\"></a>安装nginx-rtmp-module</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nginx-full --with-rtmp-module</span><br></pre></td></tr></table></figure>\n<p>安装FFmpeg（是一个集录制、转换、音/视频编码解码功能 为一体的完整的开源工具，我们下面用它来做推流跟切片）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install ffmpeg</span><br></pre></td></tr></table></figure>\n<h3 id=\"nginx-conf配置文件，配置RTMP、HLS\"><a href=\"#nginx-conf配置文件，配置RTMP、HLS\" class=\"headerlink\" title=\"nginx.conf配置文件，配置RTMP、HLS\"></a>nginx.conf配置文件，配置RTMP、HLS</h3><p>查找到nginx.conf配置文件（/usr/local/etc/nginx/nginx.conf）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rtmp &#123;</span><br><span class=\"line\">\tserver &#123;</span><br><span class=\"line\">\t\t#监听的端口</span><br><span class=\"line\">\t\tlisten 1935;</span><br><span class=\"line\">\t\t# RTMP 直播流配置</span><br><span class=\"line\">\t\tapplication rtmplive &#123;</span><br><span class=\"line\">\t\t\tlive on;</span><br><span class=\"line\">\t\t\t#为 rtmp 引擎设置最大连接数。默认为 off</span><br><span class=\"line\">\t\t\tmax_connections 1024;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t# HLS 直播流配置</span><br><span class=\"line\">\t\tapplication hls&#123;</span><br><span class=\"line\">\t\t\tlive on;</span><br><span class=\"line\">\t\t\thls on;</span><br><span class=\"line\">\t\t\thls_path /Users/tony/Documents/notes/live/public/hls;  #这里的路径切片需要保存的路径</span><br><span class=\"line\">\t\t\thls_fragment 1s;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在http中添加 hls 的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">location /hls &#123;</span><br><span class=\"line\">\t# Serve HLS fragments</span><br><span class=\"line\">\ttypes &#123;</span><br><span class=\"line\">\t\tapplication/vnd.apple.mpegurl m3u8;</span><br><span class=\"line\">\t\tvideo/mp2t ts;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\troot /Users/tony/Documents/notes/live/public;#切片的路径</span><br><span class=\"line\">\t#add_header Cache-Controll no-cache;</span><br><span class=\"line\">\texpires -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"重启nginx\"><a href=\"#重启nginx\" class=\"headerlink\" title=\"重启nginx\"></a>重启nginx</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看端口是否启动\"><a href=\"#查看端口是否启动\" class=\"headerlink\" title=\"查看端口是否启动\"></a>查看端口是否启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -an | grep 1935</span><br></pre></td></tr></table></figure>\n<p>如果显示如下，显示已经启用</p>\n<p><img src=\"http://i4.bvimg.com/600839/edf1708baf6fbc90.png\" alt=\"Markdown\"></p>\n<p>http端口同理</p>\n<p>到现在我们已经完成了，服务的搭建（rtmp、hls推流地址分别为:rtmp://127.0.0.1:1935/rtmplive/home,rtmp://localhost:1935/rtmplive/hls）</p>\n<h3 id=\"FFmpeg执行命令\"><a href=\"#FFmpeg执行命令\" class=\"headerlink\" title=\"FFmpeg执行命令\"></a>FFmpeg执行命令</h3><p>我们以推流MP4文件为例，我的视频文件地址：/Users/tony/Desktop/w01661pl9vw.p702.1.mp4 </p>\n<p>RTMP 协议推流命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -re -i /Users/tony/Desktop/w01661pl9vw.p702.1.mp4 -vcodec libx264 -acodec aac -f flv rtmp://127.0.0.1:1935/rtmplive/home</span><br></pre></td></tr></table></figure>\n<p>HLS 协议推流命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -re -i  /Users/tony/Desktop/w01661pl9vw.p702.1.mp4 -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -q 10 rtmp://127.0.0.1:1935/hls/test</span><br></pre></td></tr></table></figure>\n<p>/Users/tony/Desktop/w01661pl9vw.p702.1.mp4 表示视频的地址</p>\n<p>rtmp://127.0.0.1:1935/rtmplive/home、rtmp://localhost:1935/rtmplive/hls表示推流地址</p>\n<p>上面的命令操作后，命令行出现了如下图，表示已经成功了</p>\n<p><img src=\"http://i4.bvimg.com/600839/2835498ab8464e62.png\" alt=\"Markdown\"></p>\n<p>关于FFmpeg功能命令可参考：</p>\n<p><a href=\"http://www.jianshu.com/p/053665062f22\" target=\"_blank\" rel=\"noopener\">FFmpeg功能命令集合</a></p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>两种推流方式播放的话，我们都使用video.js播放器播放(牛牛里使用的是腾讯云播放器)</p>\n<p>rtmp</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;link href=&quot;http://vjs.zencdn.net/5.19/video-js.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class=\"line\">&lt;script src=&quot;http://vjs.zencdn.net/5.19/video.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;video</span><br><span class=\"line\">    id=&quot;my-player&quot;</span><br><span class=\"line\">    class=&quot;video-js&quot;</span><br><span class=\"line\">    controls</span><br><span class=\"line\">    preload=&quot;auto&quot;</span><br><span class=\"line\">    data-setup=&apos;&#123;&#125;&apos;&gt;</span><br><span class=\"line\">    &lt;source src=&apos;rtmp://127.0.0.1/rtmplive/home&apos; type=&apos;rtmp/flv&apos;/&gt;  </span><br><span class=\"line\">  &lt;/p&gt;</span><br><span class=\"line\">&lt;/video&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">   var player = videojs(&apos;my-player&apos;);</span><br><span class=\"line\">   var options = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   var player = videojs(&apos;my-player&apos;, options, function onPlayerReady() &#123;</span><br><span class=\"line\">     videojs.log(&apos;Your player is ready!&apos;);</span><br><span class=\"line\">     // In this context, `this` is the player that was created by Video.js.</span><br><span class=\"line\">     this.play();</span><br><span class=\"line\">     // How about an event listener?</span><br><span class=\"line\">     this.on(&apos;ended&apos;, function() &#123;</span><br><span class=\"line\">       videojs.log(&apos;Awww...over so soon?!&apos;);</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>其它src中的地址填的是RTMP推流地址，注意播放时，如果出现“当前系统环境不支持播放该视频格式”，浏览器需要启用flash，才能正常播放。</p>\n<p>hls</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=utf-8 /&gt;</span><br><span class=\"line\">&lt;title&gt;videojs-contrib-hls embed&lt;/title&gt;</span><br><span class=\"line\">  &lt;link href=&quot;https://unpkg.com/video.js/dist/video-js.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class=\"line\">  &lt;script src=&quot;https://unpkg.com/video.js/dist/video.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;https://unpkg.com/videojs-contrib-hls/dist/videojs-contrib-hls.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;video id=&quot;my_video_1&quot; class=&quot;video-js vjs-default-skin&quot; controls preload=&quot;auto&quot; width=&quot;640&quot; height=&quot;268&quot; </span><br><span class=\"line\">  data-setup=&apos;&#123;&#125;&apos;&gt;</span><br><span class=\"line\">    &lt;source src=&quot;http://www.tony.com/hls/test.m3u8&quot; type=&quot;application/x-mpegURL&quot;&gt;</span><br><span class=\"line\">  &lt;/video&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>src填的是切片地址</p>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p>rtmp效果</p>\n<p><img src=\"http://i2.bvimg.com/600839/0b20b027406625d2.png\" alt=\"Markdown\"></p>\n<p>hls效果</p>\n<p><img src=\"http://i2.bvimg.com/600839/fbd49eed2bd3f92e.png\" alt=\"Markdown\"></p>\n<p>ts和m3u8文件</p>\n<p><img src=\"http://i2.bvimg.com/600839/14e622f03c4a9193.png\" alt=\"Markdown\"></p>\n<h2 id=\"直播中遇到问题\"><a href=\"#直播中遇到问题\" class=\"headerlink\" title=\"直播中遇到问题\"></a>直播中遇到问题</h2><ul>\n<li>自动播放问题</li>\n<li>各平台播放器表现不统一</li>\n<li>内页面调试困难</li>\n<li>Native与web通信问题</li>\n</ul>\n<h3 id=\"自动播放问题\"><a href=\"#自动播放问题\" class=\"headerlink\" title=\"自动播放问题\"></a>自动播放问题</h3><p>在X5内核浏览器里必须使用触发touchend、click、doubleclick或 keydown 事件等标准的事件才能触发</p>\n<h3 id=\"各平台播放器表现不统一\"><a href=\"#各平台播放器表现不统一\" class=\"headerlink\" title=\"各平台播放器表现不统一\"></a>各平台播放器表现不统一</h3><p>安卓下很多浏览器把video标签替换成了原生自带播放器样式跟行为，很难控制其行为跟样式。</p>\n<h3 id=\"内嵌页面调试困难\"><a href=\"#内嵌页面调试困难\" class=\"headerlink\" title=\"内嵌页面调试困难\"></a>内嵌页面调试困难</h3><p>目前使用的是weinre调试，但weinre调试看不到在native实际效果，比如web调用native，需要native反馈一种效果，weinre是看不到效果。</p>\n<h3 id=\"Native与web通信\"><a href=\"#Native与web通信\" class=\"headerlink\" title=\"Native与web通信\"></a>Native与web通信</h3><p>schema跟jsBridge，schema只能做到web调用native，而且做不到native调用web；jsBridge虽然可以做native调用web，但在iframe没加载完的情况下，也是通知不到web的；</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>整个直播是一个非常复杂的过程，实现过程中会遇到很多性能问题，需要在性能跟即时性做一个权衡，ts跟m3u8尽量做到缓存，浏览器里尽量使用推流。</p>\n<p>参考资料：</p>\n<p><a href=\"https://www.zhihu.com/question/42162310\" target=\"_blank\" rel=\"noopener\">如何搭建一个完整的视频直播系统？</a></p>\n<p><a href=\"http://web.jobbole.com/88543/\" target=\"_blank\" rel=\"noopener\">H5直播起航</a></p>\n<p><a href=\"https://www.zhihu.com/question/21087379\" target=\"_blank\" rel=\"noopener\">有支持M3U8格式的HTML5播放器吗？</a></p>\n<p><a href=\"http://www.jianshu.com/p/2ce402a485ca\" target=\"_blank\" rel=\"noopener\">HTTP Live Streaming (HLS) - 概念\n</a></p>\n<p><a href=\"http://www.eduve.org/knowledge/732\" target=\"_blank\" rel=\"noopener\">M3U8格式讲解及实际应用分析\n</a></p>\n<p>作者：<a href=\"https://github.com/fttony\" target=\"_blank\" rel=\"noopener\">Tony</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjanoknhg0007jxs1gqel3x80","category_id":"cjanoknh80004jxs1zl3svnv5","_id":"cjanoknhs000djxs12p3z82yo"},{"post_id":"cjanokngh0000jxs1pfvv51e0","category_id":"cjanoknh80004jxs1zl3svnv5","_id":"cjanoknhw000hjxs1krhjkb2g"},{"post_id":"cjanoknhi0008jxs141at636d","category_id":"cjanoknh80004jxs1zl3svnv5","_id":"cjanoknhy000kjxs1fqvkdine"},{"post_id":"cjanoknhp000bjxs1yoitjw4b","category_id":"cjanoknh80004jxs1zl3svnv5","_id":"cjanokni0000ojxs1kxbgd8rv"},{"post_id":"cjanokngq0002jxs11tvdxv1g","category_id":"cjanoknh80004jxs1zl3svnv5","_id":"cjanokni2000qjxs1qsx25yct"},{"post_id":"cjanoknhr000cjxs1jqr45hcl","category_id":"cjanoknh80004jxs1zl3svnv5","_id":"cjanokni7000ujxs1740ojl0t"},{"post_id":"cjanoknhv000gjxs1glmtloyf","category_id":"cjanoknh80004jxs1zl3svnv5","_id":"cjanokni9000xjxs16axix2p8"},{"post_id":"cjanoknhe0006jxs18bawr885","category_id":"cjanoknh80004jxs1zl3svnv5","_id":"cjanoknid0011jxs1tjj4n019"},{"post_id":"cjanoknhx000jjxs1cglb0s9t","category_id":"cjanoknh80004jxs1zl3svnv5","_id":"cjanoknih0014jxs1t9jx56oc"},{"post_id":"cjanokni1000pjxs17iwbki57","category_id":"cjanoknh80004jxs1zl3svnv5","_id":"cjanoknij0017jxs1vb9ncpm0"},{"post_id":"cjanokni6000tjxs1r7ylwdis","category_id":"cjanoknh80004jxs1zl3svnv5","_id":"cjanoknil001bjxs1q1igg3ld"},{"post_id":"cjanoknhz000njxs119byeoiz","category_id":"cjanokni5000sjxs1rx5tlgxz","_id":"cjanoknio001fjxs1rsozug1z"},{"post_id":"cjanoknii0016jxs1fkmi7206","category_id":"cjanokni5000sjxs1rx5tlgxz","_id":"cjanokniq001ijxs10uolb3py"},{"post_id":"cjanokni8000wjxs1h2n4t8p4","category_id":"cjanoknid0012jxs1m76toxnn","_id":"cjanoknir001ljxs17bbwnqza"},{"post_id":"cjanoknib0010jxs1x5pdl38e","category_id":"cjanoknid0012jxs1m76toxnn","_id":"cjanoknit001ojxs1kzhiqiod"},{"post_id":"cjanoknio001gjxs1w4p6zg8e","category_id":"cjanoknh80004jxs1zl3svnv5","_id":"cjanokniu001sjxs1wajt6d2y"},{"post_id":"cjanoknir001kjxs1n52febuj","category_id":"cjanokniq001hjxs1t0c61fh6","_id":"cjanokniw001wjxs1i78e66nu"},{"post_id":"cjanoknif0013jxs1z8skyz16","category_id":"cjanokniq001hjxs1t0c61fh6","_id":"cjanokniz001zjxs1oco5b11z"},{"post_id":"cjanokniu001rjxs13w2whoqx","category_id":"cjanokni5000sjxs1rx5tlgxz","_id":"cjanoknj40023jxs1k2uo11z4"},{"post_id":"cjanoknij0019jxs1mwb9btrj","category_id":"cjanokniq001hjxs1t0c61fh6","_id":"cjanoknj60027jxs1e93lgyh3"},{"post_id":"cjanokniv001vjxs1fyokktzm","category_id":"cjanoknh80004jxs1zl3svnv5","_id":"cjanoknj9002bjxs1v9gxq07f"},{"post_id":"cjanoknin001ejxs1uva1x55a","category_id":"cjanokniq001hjxs1t0c61fh6","_id":"cjanoknjc002ejxs1m1hfkt6i"},{"post_id":"cjanoknj20022jxs117tvgvou","category_id":"cjanokni5000sjxs1rx5tlgxz","_id":"cjanoknjk002hjxs1q3doqru6"},{"post_id":"cjanoknis001njxs13bwddvob","category_id":"cjanoknj50024jxs1l61b9nqb","_id":"cjanoknjo002kjxs1807g49w7"},{"post_id":"cjanoknjb002djxs12gepo554","category_id":"cjanokniq001hjxs1t0c61fh6","_id":"cjanoknjq002njxs10i8cgtpc"},{"post_id":"cjanokniy001yjxs1vczcoevu","category_id":"cjanoknj9002cjxs1n68c128m","_id":"cjanoknjr002rjxs1fga9rg04"},{"post_id":"cjanoknje002gjxs1jbquikm2","category_id":"cjanokniq001hjxs1t0c61fh6","_id":"cjanoknjt002vjxs1nr3cojvy"},{"post_id":"cjanoknjm002jjxs157mhe4ph","category_id":"cjanokniq001hjxs1t0c61fh6","_id":"cjanoknjv002yjxs1mksxkboq"},{"post_id":"cjanoknj50026jxs1vamwzwau","category_id":"cjanoknjl002ijxs1mpz0kpa0","_id":"cjanoknjw0032jxs19c13iqkj"},{"post_id":"cjanoknj7002ajxs101pie3y7","category_id":"cjanoknjr002qjxs1bpqotzdi","_id":"cjanoknk00036jxs15wdik5ay"},{"post_id":"cjanoknjv0031jxs14v4zkvwz","category_id":"cjanoknjv002zjxs11ylklqz2","_id":"cjanoknk5003cjxs1zqr9f4au"},{"post_id":"cjanoknjp002mjxs1fntkg0sx","category_id":"cjanoknjv002zjxs11ylklqz2","_id":"cjanoknk7003fjxs1ggey64cn"},{"post_id":"cjanoknjx0035jxs104kvs5m1","category_id":"cjanoknjv002zjxs11ylklqz2","_id":"cjanoknk9003ijxs1vetfun2f"},{"post_id":"cjanoknk10039jxs1q4kxyjqj","category_id":"cjanoknjv002zjxs11ylklqz2","_id":"cjanoknka003ljxs1k79lhpjw"},{"post_id":"cjanoknjq002pjxs1iti2ofyn","category_id":"cjanoknjv002zjxs11ylklqz2","_id":"cjanoknkd003ojxs1bm74jv7c"},{"post_id":"cjanoknk3003bjxs10u9q29mo","category_id":"cjanoknjv002zjxs11ylklqz2","_id":"cjanoknkf003qjxs1empl89bx"},{"post_id":"cjanoknk7003ejxs19x6dce7a","category_id":"cjanoknjv002zjxs11ylklqz2","_id":"cjanoknki003sjxs17ms4x2sc"},{"post_id":"cjanoknjs002ujxs1f2u5q0rm","category_id":"cjanoknjv002zjxs11ylklqz2","_id":"cjanoknkn003wjxs11tw2sjjy"},{"post_id":"cjanoknk8003hjxs1w1vm0h9g","category_id":"cjanoknjv002zjxs11ylklqz2","_id":"cjanoknko003yjxs1ltumatlh"},{"post_id":"cjanoknka003kjxs194on0ry4","category_id":"cjanoknjr002qjxs1bpqotzdi","_id":"cjanoknko0042jxs13sy06vy3"},{"post_id":"cjanoknju002xjxs1gdobxuso","category_id":"cjanoknjv002zjxs11ylklqz2","_id":"cjanoknkp0044jxs1sfr15128"},{"post_id":"cjanoknkb003njxs1ai6jg93f","category_id":"cjanoknjv002zjxs11ylklqz2","_id":"cjanoknkp0046jxs1omsi8lmd"},{"post_id":"cjanoknke003pjxs119ramgkl","category_id":"cjanoknjr002qjxs1bpqotzdi","_id":"cjanoknkq0047jxs1ks2u8oue"},{"post_id":"cjanoknkh003rjxs19omvlw2m","category_id":"cjanoknjr002qjxs1bpqotzdi","_id":"cjanoknkr0049jxs1ub379b27"},{"post_id":"cjanoknkl003vjxs1l8wzot07","category_id":"cjanoknko0040jxs1mbv4l99e","_id":"cjanoknkr004ajxs1y97jtcll"},{"post_id":"cjanov2xl009pjxs1gtep6jle","category_id":"cjanokni5000sjxs1rx5tlgxz","_id":"cjanov2xn009rjxs1z554s9fm"}],"PostTag":[{"post_id":"cjanokngh0000jxs1pfvv51e0","tag_id":"cjanoknhd0005jxs1bcgckvtn","_id":"cjanoknhw000ijxs18bqkhjl8"},{"post_id":"cjanokngh0000jxs1pfvv51e0","tag_id":"cjanoknhk000ajxs1y34qrvu2","_id":"cjanoknhy000ljxs1xbjoj53t"},{"post_id":"cjanokngq0002jxs11tvdxv1g","tag_id":"cjanoknhd0005jxs1bcgckvtn","_id":"cjanokni7000vjxs1j5itw0pz"},{"post_id":"cjanokngq0002jxs11tvdxv1g","tag_id":"cjanoknhk000ajxs1y34qrvu2","_id":"cjanoknia000yjxs14u1j3zmx"},{"post_id":"cjanoknhe0006jxs18bawr885","tag_id":"cjanokni3000rjxs1urfm9y0h","_id":"cjanoknij0018jxs1q93fqlyb"},{"post_id":"cjanoknhe0006jxs18bawr885","tag_id":"cjanoknhk000ajxs1y34qrvu2","_id":"cjanoknim001cjxs1hlr76ohw"},{"post_id":"cjanoknhg0007jxs1gqel3x80","tag_id":"cjanoknih0015jxs1wsb811x5","_id":"cjanoknis001mjxs1y1n6eg34"},{"post_id":"cjanoknhg0007jxs1gqel3x80","tag_id":"cjanoknhk000ajxs1y34qrvu2","_id":"cjanokniu001qjxs14ev6xcz6"},{"post_id":"cjanoknhi0008jxs141at636d","tag_id":"cjanokniq001jjxs17shuai7j","_id":"cjanokniv001ujxs1lnhay9qe"},{"post_id":"cjanokniv001vjxs1fyokktzm","tag_id":"cjanoknih0015jxs1wsb811x5","_id":"cjanoknj20021jxs1dqem3ny5"},{"post_id":"cjanokniv001vjxs1fyokktzm","tag_id":"cjanoknhk000ajxs1y34qrvu2","_id":"cjanoknj50025jxs1m9hrahs6"},{"post_id":"cjanoknhp000bjxs1yoitjw4b","tag_id":"cjanokniu001tjxs16q9f4n06","_id":"cjanoknj70029jxs1w284g0jh"},{"post_id":"cjanoknhr000cjxs1jqr45hcl","tag_id":"cjanoknih0015jxs1wsb811x5","_id":"cjanoknjq002ojxs17mlqo2gm"},{"post_id":"cjanoknhr000cjxs1jqr45hcl","tag_id":"cjanoknhk000ajxs1y34qrvu2","_id":"cjanoknjr002sjxs1yesdfe9o"},{"post_id":"cjanoknhr000cjxs1jqr45hcl","tag_id":"cjanokni3000rjxs1urfm9y0h","_id":"cjanoknjt002wjxs1us6uux80"},{"post_id":"cjanoknhr000cjxs1jqr45hcl","tag_id":"cjanoknjd002fjxs1akj51fvb","_id":"cjanoknjv0030jxs1k4djh60x"},{"post_id":"cjanoknhv000gjxs1glmtloyf","tag_id":"cjanoknjp002ljxs1857rj8eq","_id":"cjanoknjx0034jxs10f4ha0hl"},{"post_id":"cjanoknhv000gjxs1glmtloyf","tag_id":"cjanoknjs002tjxs1wjbul6cv","_id":"cjanoknk10038jxs1ibeveq4m"},{"post_id":"cjanoknhx000jjxs1cglb0s9t","tag_id":"cjanoknjw0033jxs16aka8a1l","_id":"cjanoknkk003ujxs1p2i7xl5c"},{"post_id":"cjanoknhx000jjxs1cglb0s9t","tag_id":"cjanoknk2003ajxs1qqf6a1po","_id":"cjanoknkn003xjxs13qkfc56p"},{"post_id":"cjanoknhx000jjxs1cglb0s9t","tag_id":"cjanoknk8003gjxs1wfd9c1n5","_id":"cjanoknko0041jxs15j5a0h4v"},{"post_id":"cjanoknhx000jjxs1cglb0s9t","tag_id":"cjanoknkb003mjxs1wkt8tsmp","_id":"cjanoknko0043jxs1vs4yz9ia"},{"post_id":"cjanoknhz000njxs119byeoiz","tag_id":"cjanoknkj003tjxs17obmt3qm","_id":"cjanoknks004cjxs1blirn54p"},{"post_id":"cjanoknhz000njxs119byeoiz","tag_id":"cjanoknko003zjxs1xe6sby1p","_id":"cjanoknks004djxs1420hyvjg"},{"post_id":"cjanoknhz000njxs119byeoiz","tag_id":"cjanoknkp0045jxs12nv8ieh4","_id":"cjanoknkt004fjxs18jr6u93g"},{"post_id":"cjanoknhz000njxs119byeoiz","tag_id":"cjanoknkq0048jxs11mqxhjz1","_id":"cjanoknku004gjxs1jgwuk9a4"},{"post_id":"cjanokni1000pjxs17iwbki57","tag_id":"cjanoknkr004bjxs17ysrebu4","_id":"cjanoknkw004jjxs1n8rirbbv"},{"post_id":"cjanokni1000pjxs17iwbki57","tag_id":"cjanoknkt004ejxs1lrcvyp1z","_id":"cjanoknkx004kjxs1h7woiqtd"},{"post_id":"cjanokni1000pjxs17iwbki57","tag_id":"cjanoknku004hjxs1h8wmot7v","_id":"cjanoknky004mjxs1kec4scr1"},{"post_id":"cjanokni6000tjxs1r7ylwdis","tag_id":"cjanoknih0015jxs1wsb811x5","_id":"cjanoknky004njxs17hbzqgu3"},{"post_id":"cjanokni6000tjxs1r7ylwdis","tag_id":"cjanoknhk000ajxs1y34qrvu2","_id":"cjanoknkz004pjxs19x7owde0"},{"post_id":"cjanokni8000wjxs1h2n4t8p4","tag_id":"cjanoknkx004ljxs1wix5iw60","_id":"cjanoknl3004tjxs1njpyf2sl"},{"post_id":"cjanokni8000wjxs1h2n4t8p4","tag_id":"cjanoknkz004ojxs19gli3vts","_id":"cjanoknl3004ujxs13o2gay3r"},{"post_id":"cjanokni8000wjxs1h2n4t8p4","tag_id":"cjanoknl0004qjxs1w0xmpt6w","_id":"cjanoknl3004wjxs1r4cll9lo"},{"post_id":"cjanokni8000wjxs1h2n4t8p4","tag_id":"cjanokniq001jjxs17shuai7j","_id":"cjanoknl4004xjxs1j5f796r5"},{"post_id":"cjanoknib0010jxs1x5pdl38e","tag_id":"cjanoknkx004ljxs1wix5iw60","_id":"cjanoknl50051jxs1dypucn9l"},{"post_id":"cjanoknib0010jxs1x5pdl38e","tag_id":"cjanoknkz004ojxs19gli3vts","_id":"cjanoknl50052jxs193iyrjex"},{"post_id":"cjanoknib0010jxs1x5pdl38e","tag_id":"cjanoknl0004qjxs1w0xmpt6w","_id":"cjanoknl60054jxs121lslsq2"},{"post_id":"cjanoknib0010jxs1x5pdl38e","tag_id":"cjanokniq001jjxs17shuai7j","_id":"cjanoknl60055jxs1xgb6f2oc"},{"post_id":"cjanoknif0013jxs1z8skyz16","tag_id":"cjanoknl50050jxs1jcscg61c","_id":"cjanoknl70058jxs1f1hpxp5j"},{"post_id":"cjanoknif0013jxs1z8skyz16","tag_id":"cjanoknl50053jxs1s56y6nds","_id":"cjanoknl80059jxs1ats7fa1a"},{"post_id":"cjanoknif0013jxs1z8skyz16","tag_id":"cjanoknl60056jxs17s5dx2o2","_id":"cjanoknl8005bjxs10mr9b8xi"},{"post_id":"cjanoknii0016jxs1fkmi7206","tag_id":"cjanoknkr004bjxs17ysrebu4","_id":"cjanoknl9005ejxs1bzgmwf7b"},{"post_id":"cjanoknii0016jxs1fkmi7206","tag_id":"cjanoknl8005ajxs1i0mnrvhy","_id":"cjanoknl9005fjxs109us2sa4"},{"post_id":"cjanoknii0016jxs1fkmi7206","tag_id":"cjanoknl9005cjxs1vmdog2tt","_id":"cjanoknla005hjxs1t2e0bpyd"},{"post_id":"cjanoknij0019jxs1mwb9btrj","tag_id":"cjanoknl0004qjxs1w0xmpt6w","_id":"cjanoknla005ijxs1dux1ev6i"},{"post_id":"cjanoknin001ejxs1uva1x55a","tag_id":"cjanoknla005gjxs1ar5k2orq","_id":"cjanoknlc005mjxs1v07xhsw6"},{"post_id":"cjanoknin001ejxs1uva1x55a","tag_id":"cjanoknla005jjxs1ar7wkwin","_id":"cjanoknlc005njxs1pqopyo08"},{"post_id":"cjanoknin001ejxs1uva1x55a","tag_id":"cjanoknkr004bjxs17ysrebu4","_id":"cjanoknle005pjxs1v6szuxw4"},{"post_id":"cjanoknio001gjxs1w4p6zg8e","tag_id":"cjanoknlb005ljxs1m5rkbv6j","_id":"cjanoknle005qjxs1i1wd97rh"},{"post_id":"cjanoknir001kjxs1n52febuj","tag_id":"cjanoknld005ojxs133r9v2mt","_id":"cjanoknlg005vjxs1lsyivedd"},{"post_id":"cjanoknir001kjxs1n52febuj","tag_id":"cjanoknla005jjxs1ar7wkwin","_id":"cjanoknlg005wjxs12pex1ljw"},{"post_id":"cjanoknir001kjxs1n52febuj","tag_id":"cjanoknkr004bjxs17ysrebu4","_id":"cjanoknlh005yjxs1ijhh3cis"},{"post_id":"cjanoknir001kjxs1n52febuj","tag_id":"cjanoknlg005tjxs11b9rl1rw","_id":"cjanoknlh005zjxs151w96e2x"},{"post_id":"cjanokniu001rjxs13w2whoqx","tag_id":"cjanoknlg005ujxs1b59gf6ad","_id":"cjanoknlh0061jxs15d5xeh1z"},{"post_id":"cjanokniu001rjxs13w2whoqx","tag_id":"cjanoknlg005xjxs17qm66a3v","_id":"cjanoknlh0062jxs1fnpd71px"},{"post_id":"cjanokniy001yjxs1vczcoevu","tag_id":"cjanokni3000rjxs1urfm9y0h","_id":"cjanoknlh0064jxs1lq1d505t"},{"post_id":"cjanokniy001yjxs1vczcoevu","tag_id":"cjanoknlh0060jxs1m4vdcscd","_id":"cjanoknlh0065jxs1r4f7mnv5"},{"post_id":"cjanoknj20022jxs117tvgvou","tag_id":"cjanoknlh0063jxs1j2bartjw","_id":"cjanoknlk0069jxs1fka2yte1"},{"post_id":"cjanoknj20022jxs117tvgvou","tag_id":"cjanoknlh0066jxs1wg7qhpxg","_id":"cjanoknlk006ajxs1bnfi5s0v"},{"post_id":"cjanoknj20022jxs117tvgvou","tag_id":"cjanoknkr004bjxs17ysrebu4","_id":"cjanoknlk006cjxs1g67n972t"},{"post_id":"cjanoknj50026jxs1vamwzwau","tag_id":"cjanoknlj0068jxs1gfijck1v","_id":"cjanoknll006ejxs17ajdhwcz"},{"post_id":"cjanoknj50026jxs1vamwzwau","tag_id":"cjanoknlk006bjxs1tha5dp4x","_id":"cjanoknlm006fjxs16msiwcl6"},{"post_id":"cjanoknj7002ajxs101pie3y7","tag_id":"cjanoknll006djxs1aarhxwbq","_id":"cjanoknlm006ijxs1y0ngguoz"},{"post_id":"cjanoknj7002ajxs101pie3y7","tag_id":"cjanoknlm006gjxs1lkf3gsxk","_id":"cjanoknlm006jjxs1ep7yfecr"},{"post_id":"cjanoknjb002djxs12gepo554","tag_id":"cjanoknlm006hjxs19v4s62yn","_id":"cjanoknlo006njxs1o8uh08bx"},{"post_id":"cjanoknjb002djxs12gepo554","tag_id":"cjanoknlm006kjxs17gnur3gj","_id":"cjanoknlo006ojxs1aoujpscc"},{"post_id":"cjanoknjb002djxs12gepo554","tag_id":"cjanoknkr004bjxs17ysrebu4","_id":"cjanoknlo006qjxs1rdff2d8a"},{"post_id":"cjanoknje002gjxs1jbquikm2","tag_id":"cjanoknlm006hjxs19v4s62yn","_id":"cjanoknlq006tjxs10skjhq5z"},{"post_id":"cjanoknje002gjxs1jbquikm2","tag_id":"cjanoknlm006kjxs17gnur3gj","_id":"cjanoknlq006ujxs1yzfyp9dn"},{"post_id":"cjanoknje002gjxs1jbquikm2","tag_id":"cjanoknkr004bjxs17ysrebu4","_id":"cjanoknlq006wjxs14tdr9cru"},{"post_id":"cjanoknjm002jjxs157mhe4ph","tag_id":"cjanoknlp006sjxs1w7ot32hp","_id":"cjanoknlr006zjxs1715h6a4n"},{"post_id":"cjanoknjm002jjxs157mhe4ph","tag_id":"cjanoknlq006vjxs1y0swvdcl","_id":"cjanoknls0070jxs1nxbg90iv"},{"post_id":"cjanoknjm002jjxs157mhe4ph","tag_id":"cjanoknlq006xjxs1qnb596qu","_id":"cjanoknls0072jxs1r4zrn80t"},{"post_id":"cjanoknjp002mjxs1fntkg0sx","tag_id":"cjanoknlr006yjxs1f3w6r4pl","_id":"cjanoknlu0075jxs1yp3ni13o"},{"post_id":"cjanoknjp002mjxs1fntkg0sx","tag_id":"cjanoknls0071jxs1ytpm1fms","_id":"cjanoknlu0076jxs1z3tlqsuo"},{"post_id":"cjanoknjp002mjxs1fntkg0sx","tag_id":"cjanoknls0073jxs1i1v6xptd","_id":"cjanoknlv0078jxs17fl7stft"},{"post_id":"cjanoknjq002pjxs1iti2ofyn","tag_id":"cjanoknlr006yjxs1f3w6r4pl","_id":"cjanoknlw007bjxs1hmisn3oj"},{"post_id":"cjanoknjq002pjxs1iti2ofyn","tag_id":"cjanoknls0071jxs1ytpm1fms","_id":"cjanoknlw007cjxs1fwykhq7e"},{"post_id":"cjanoknjq002pjxs1iti2ofyn","tag_id":"cjanoknls0073jxs1i1v6xptd","_id":"cjanoknlx007ejxs1djywpqt6"},{"post_id":"cjanoknjs002ujxs1f2u5q0rm","tag_id":"cjanoknlr006yjxs1f3w6r4pl","_id":"cjanoknlz007hjxs1g92ijhv5"},{"post_id":"cjanoknjs002ujxs1f2u5q0rm","tag_id":"cjanoknls0071jxs1ytpm1fms","_id":"cjanoknlz007ijxs1lz1c0ksq"},{"post_id":"cjanoknjs002ujxs1f2u5q0rm","tag_id":"cjanoknls0073jxs1i1v6xptd","_id":"cjanoknlz007kjxs16f5597vp"},{"post_id":"cjanoknju002xjxs1gdobxuso","tag_id":"cjanoknlr006yjxs1f3w6r4pl","_id":"cjanoknm1007njxs1sekihvlg"},{"post_id":"cjanoknju002xjxs1gdobxuso","tag_id":"cjanoknls0071jxs1ytpm1fms","_id":"cjanoknm1007ojxs1kjw78fdm"},{"post_id":"cjanoknju002xjxs1gdobxuso","tag_id":"cjanoknls0073jxs1i1v6xptd","_id":"cjanoknm1007qjxs1n0p2op1e"},{"post_id":"cjanoknjv0031jxs14v4zkvwz","tag_id":"cjanoknlr006yjxs1f3w6r4pl","_id":"cjanoknm3007tjxs147w021ci"},{"post_id":"cjanoknjv0031jxs14v4zkvwz","tag_id":"cjanoknls0071jxs1ytpm1fms","_id":"cjanoknm3007ujxs1v9oirbmo"},{"post_id":"cjanoknjv0031jxs14v4zkvwz","tag_id":"cjanoknls0073jxs1i1v6xptd","_id":"cjanoknm3007wjxs1gzyqar5g"},{"post_id":"cjanoknjx0035jxs104kvs5m1","tag_id":"cjanoknlr006yjxs1f3w6r4pl","_id":"cjanoknm5007zjxs1r9djf5uk"},{"post_id":"cjanoknjx0035jxs104kvs5m1","tag_id":"cjanoknls0071jxs1ytpm1fms","_id":"cjanoknm50080jxs1lte36137"},{"post_id":"cjanoknjx0035jxs104kvs5m1","tag_id":"cjanoknls0073jxs1i1v6xptd","_id":"cjanoknm60082jxs1g7dfpub4"},{"post_id":"cjanoknk10039jxs1q4kxyjqj","tag_id":"cjanoknlr006yjxs1f3w6r4pl","_id":"cjanoknm80085jxs1c58evrfx"},{"post_id":"cjanoknk10039jxs1q4kxyjqj","tag_id":"cjanoknls0071jxs1ytpm1fms","_id":"cjanoknm80086jxs1bs9fv46q"},{"post_id":"cjanoknk10039jxs1q4kxyjqj","tag_id":"cjanoknls0073jxs1i1v6xptd","_id":"cjanoknm80088jxs1pdskyh2p"},{"post_id":"cjanoknk3003bjxs10u9q29mo","tag_id":"cjanoknlr006yjxs1f3w6r4pl","_id":"cjanoknma008bjxs167sdrrp8"},{"post_id":"cjanoknk3003bjxs10u9q29mo","tag_id":"cjanoknls0071jxs1ytpm1fms","_id":"cjanoknma008cjxs1pmbanxe0"},{"post_id":"cjanoknk3003bjxs10u9q29mo","tag_id":"cjanoknls0073jxs1i1v6xptd","_id":"cjanoknmb008ejxs15yriyr9t"},{"post_id":"cjanoknk7003ejxs19x6dce7a","tag_id":"cjanoknlr006yjxs1f3w6r4pl","_id":"cjanoknmd008hjxs1ltsyk42d"},{"post_id":"cjanoknk7003ejxs19x6dce7a","tag_id":"cjanoknls0071jxs1ytpm1fms","_id":"cjanoknmd008ijxs1hpqkghbi"},{"post_id":"cjanoknk7003ejxs19x6dce7a","tag_id":"cjanoknls0073jxs1i1v6xptd","_id":"cjanoknmd008kjxs1dtcrrhbh"},{"post_id":"cjanoknk8003hjxs1w1vm0h9g","tag_id":"cjanoknlr006yjxs1f3w6r4pl","_id":"cjanoknmf008njxs16cesfoka"},{"post_id":"cjanoknk8003hjxs1w1vm0h9g","tag_id":"cjanoknls0071jxs1ytpm1fms","_id":"cjanoknmf008ojxs1ffo61j6m"},{"post_id":"cjanoknk8003hjxs1w1vm0h9g","tag_id":"cjanoknls0073jxs1i1v6xptd","_id":"cjanoknmf008qjxs1u3z1jaq5"},{"post_id":"cjanoknka003kjxs194on0ry4","tag_id":"cjanoknme008mjxs19wfhd399","_id":"cjanoknmf008rjxs1la11q8bk"},{"post_id":"cjanoknkb003njxs1ai6jg93f","tag_id":"cjanoknlr006yjxs1f3w6r4pl","_id":"cjanoknmh008vjxs104lkvi53"},{"post_id":"cjanoknkb003njxs1ai6jg93f","tag_id":"cjanoknls0071jxs1ytpm1fms","_id":"cjanoknmh008wjxs1s9dx5aet"},{"post_id":"cjanoknkb003njxs1ai6jg93f","tag_id":"cjanoknls0073jxs1i1v6xptd","_id":"cjanoknmh008yjxs1nzre095s"},{"post_id":"cjanoknke003pjxs119ramgkl","tag_id":"cjanoknmg008ujxs19a17dvvx","_id":"cjanoknmj0091jxs16h7i9xm9"},{"post_id":"cjanoknke003pjxs119ramgkl","tag_id":"cjanoknmh008xjxs1wo349foa","_id":"cjanoknmj0092jxs1g8aoyz1a"},{"post_id":"cjanoknke003pjxs119ramgkl","tag_id":"cjanoknmi008zjxs1uq4uks8i","_id":"cjanoknmj0094jxs1wbfho5ox"},{"post_id":"cjanoknkh003rjxs19omvlw2m","tag_id":"cjanoknmi0090jxs1hjes8gbz","_id":"cjanoknmk0096jxs1md4o9px6"},{"post_id":"cjanoknkh003rjxs19omvlw2m","tag_id":"cjanoknmj0093jxs19j70dcne","_id":"cjanoknmk0097jxs1teshlfwr"},{"post_id":"cjanoknkl003vjxs1l8wzot07","tag_id":"cjanoknmj0095jxs18vtsl2o7","_id":"cjanoknmk0098jxs116ay8a91"},{"post_id":"cjanov2xl009pjxs1gtep6jle","tag_id":"cjanoumjo009mjxs1sz6kopk4","_id":"cjanov2xn009qjxs1tptwiizz"}],"Tag":[{"name":"CSS","_id":"cjanoknhd0005jxs1bcgckvtn"},{"name":"技术","_id":"cjanoknhk000ajxs1y34qrvu2"},{"name":"css","_id":"cjanokni3000rjxs1urfm9y0h"},{"name":"JS","_id":"cjanoknih0015jxs1wsb811x5"},{"name":"nginx","_id":"cjanokniq001jjxs17shuai7j"},{"name":"aysnc/await","_id":"cjanokniu001tjxs16q9f4n06"},{"name":"animation","_id":"cjanoknjd002fjxs1akj51fvb"},{"name":"javascript","_id":"cjanoknjp002ljxs1857rj8eq"},{"name":"undefined","_id":"cjanoknjs002tjxs1wjbul6cv"},{"name":"nodejs","_id":"cjanoknjw0033jxs16aka8a1l"},{"name":"tutorial","_id":"cjanoknk2003ajxs1qqf6a1po"},{"name":"gulp.js","_id":"cjanoknk8003gjxs1wfd9c1n5"},{"name":"object streams","_id":"cjanoknkb003mjxs1wkt8tsmp"},{"name":"abort","_id":"cjanoknkj003tjxs17obmt3qm"},{"name":"ajax","_id":"cjanoknko003zjxs1xe6sby1p"},{"name":"jsonp","_id":"cjanoknkp0045jxs12nv8ieh4"},{"name":"XMLHttpRequest","_id":"cjanoknkq0048jxs11mqxhjz1"},{"name":"JavaScript","_id":"cjanoknkr004bjxs17ysrebu4"},{"name":"事件","_id":"cjanoknkt004ejxs1lrcvyp1z"},{"name":"性能","_id":"cjanoknku004hjxs1h8wmot7v"},{"name":"OpenSSL","_id":"cjanoknkx004ljxs1wix5iw60"},{"name":"HTTPS","_id":"cjanoknkz004ojxs19gli3vts"},{"name":"Node.js","_id":"cjanoknl0004qjxs1w0xmpt6w"},{"name":"angular.js v1.x","_id":"cjanoknl50050jxs1jcscg61c"},{"name":"koa2","_id":"cjanoknl50053jxs1s56y6nds"},{"name":"webpack2","_id":"cjanoknl60056jxs17s5dx2o2"},{"name":"Promise","_id":"cjanoknl8005ajxs1i0mnrvhy"},{"name":"异步","_id":"cjanoknl9005cjxs1vmdog2tt"},{"name":"Error","_id":"cjanoknla005gjxs1ar5k2orq"},{"name":"Nodejs","_id":"cjanoknla005jjxs1ar7wkwin"},{"name":"AMP","_id":"cjanoknlb005ljxs1m5rkbv6j"},{"name":"HTTP/2","_id":"cjanoknld005ojxs133r9v2mt"},{"name":"Server Push","_id":"cjanoknlg005tjxs11b9rl1rw"},{"name":"touchstart","_id":"cjanoknlg005ujxs1b59gf6ad"},{"name":"click","_id":"cjanoknlg005xjxs17qm66a3v"},{"name":"字体大小","_id":"cjanoknlh0060jxs1m4vdcscd"},{"name":"number","_id":"cjanoknlh0063jxs1j2bartjw"},{"name":"float","_id":"cjanoknlh0066jxs1wg7qhpxg"},{"name":"web前端","_id":"cjanoknlj0068jxs1gfijck1v"},{"name":"招聘","_id":"cjanoknlk006bjxs1tha5dp4x"},{"name":"Video","_id":"cjanoknll006djxs1aarhxwbq"},{"name":"WebRTC","_id":"cjanoknlm006gjxs1lkf3gsxk"},{"name":"dns","_id":"cjanoknlm006hjxs19v4s62yn"},{"name":"dgram","_id":"cjanoknlm006kjxs17gnur3gj"},{"name":"Express","_id":"cjanoknlp006sjxs1w7ot32hp"},{"name":"Mongodb","_id":"cjanoknlq006vjxs1y0swvdcl"},{"name":"mongoose","_id":"cjanoknlq006xjxs1qnb596qu"},{"name":"FE","_id":"cjanoknlr006yjxs1f3w6r4pl"},{"name":"Share","_id":"cjanoknls0071jxs1ytpm1fms"},{"name":"Gossip","_id":"cjanoknls0073jxs1i1v6xptd"},{"name":"gulp-rev-hash3","_id":"cjanoknme008mjxs19wfhd399"},{"name":"H5","_id":"cjanoknmg008ujxs19a17dvvx"},{"name":"Native","_id":"cjanoknmh008xjxs1wo349foa"},{"name":"schema","_id":"cjanoknmi008zjxs1uq4uks8i"},{"name":"ThreeJS","_id":"cjanoknmi0090jxs1hjes8gbz"},{"name":"WebGL","_id":"cjanoknmj0093jxs19j70dcne"},{"name":"用户体验设计","_id":"cjanoknmj0095jxs18vtsl2o7"},{"name":"直播","_id":"cjanoumjo009mjxs1sz6kopk4"}]}}